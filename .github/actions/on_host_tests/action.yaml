name: On Host Tests
description: Runs on-host tests.
inputs:
  test_artifacts_key:
    description: "Artifact key used to store test artifacts."
    required: true
  test_results_key:
    description: "Artifact key used to store test results."
    required: true
  num_gtest_shards:
    description: "Total number of shards used to run the steps in this file."
    required: true
runs:
  using: "composite"
  steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.test_artifacts_key }}
    - name: Extract Artifacts
      shell: bash
      run: |
        set -x

        test_dir="${GITHUB_WORKSPACE}/unit_test"
        echo "test_dir=${test_dir}" >> $GITHUB_ENV

        mkdir -p ${test_dir}
        cd ${test_dir}
        tar xvf ../test_artifacts.tar.gz
    - name: Run Tests
      id: run-tests
      shell: bash
      env:
        XVFB_SERVER_ARGS: "-screen 0 1920x1080x24i +render +extension GLX -noreset"
      run: |
        set -x
        env

        # Explicitly point to libraries in extracted dir.
        LD_LIBRARY_PATH="${test_dir}/out/${{ matrix.platform}}_${{ matrix.config }}/starboard"
        LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${test_dir}/out/${{ matrix.platform}}_${{ matrix.config }}"
        export LD_LIBRARY_PATH

        # Make results dir available to the archiving step below.
        results_dir="${GITHUB_WORKSPACE}/results"
        echo "results_dir=${results_dir}" >> $GITHUB_ENV

        failed_suites=""
        cd "${test_dir}"

        for test_binary_path in $(cat out/${{ matrix.platform}}_${{ matrix.config }}/test_targets.json | jq -cr '.executables | join(" ")'); do
          test_binary=$(basename "${test_binary_path}")
          echo "Running tests for suite: ${test_binary}"

          test_filter="*"
          test_filter_json_dir="${GITHUB_WORKSPACE}/src/cobalt/testing/filters/${{ matrix.platform }}/${test_binary}_filter.json"
          if [ -f ${test_filter_json_dir} ]; then
            test_filter=`jq -r '"-" + (.failing_tests | join(":"))' ${test_filter_json_dir}`
          fi

          echo "Test filter evaluated to: ${test_filter}"

          xml_path="${results_dir}/shard_${{ matrix.shard }}/${test_binary}_testoutput.xml"
          # TODO: Investigate test_runner.py
          /usr/bin/xvfb-run -a --server-args="${XVFB_SERVER_ARGS}" \
              ./"${test_binary_path}" \
              --test-launcher-shard-index=${{ matrix.shard }} \
              --test-launcher-total-shards=${{ inputs.num_gtest_shards }} \
              --gtest_output="xml:${xml_path}" \
              --gtest_filter="${test_filter}" || {
            # Set exit code on failure.
            failed_suites="${failed_suites} ${test_binary}"
          }
        done
        echo "Finished running all unit tests..."
        if [ -n "${failed_suites}" ]; then
          echo "Test suites failed:${failed_suites}"
          exit 1
        fi
    - name: Archive Test Results
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.test_results_key }}
        path: ${{ env.results_dir }}/shard_${{ matrix.shard }}/*.xml
