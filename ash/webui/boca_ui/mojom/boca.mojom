// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.boca.mojom;

import "chromeos/services/network_config/public/mojom/network_types.mojom";
import "url/mojom/url.mojom";
import "mojo/public/mojom/base/time.mojom";

// Refer ///depot/google3/google/internal/chrome/cros/edu/schooltools/v1/
// For detailed type definition.
// TODO(b/356405813): Refactor documentation.

// Represents the tab information within browser window.
struct TabInfo {
  // Tab title.
  string title;
  // Tab URL.
  url.mojom.Url url;
  //Tab favicon in the format of data url.
  string favicon;
};


// Represents user identity.
struct Identity {
  // User id.
  string id;
  // User name.
  string name;
  // User email address.
  string email;
  // User photo url
  url.mojom.Url? photo_url;
};

// Represents a course.
struct Course {
  // Course id.
  string id;
  // Course name.
  string name;
};

// Represents a browser window.
struct Window {
  // User-customized window name.
  string? name;
  // Tabs within browser window. Tabs are ordererd using non-increasing order
  // for tab's last access timestamp.
  array<TabInfo> tab_list;
};

// The network technology type.
enum NetworkType {
  kCellular,
  kEthernet,
  kWiFi,
  kUnsupported,
};

// Represents the network information.
struct NetworkInfo {
  chromeos.network_config.mojom.ConnectionStateType state;
  NetworkType type;
  // The human readable name of the network.
  string name;
  // The signal strength of the network in percentage.
  int32 signal_strength;
};

struct Config{
  mojo_base.mojom.TimeDelta session_duration;
  mojo_base.mojom.JSTime? session_start_time;
  Identity? teacher;
  // Students joined via Classroom roster selection.
  array<Identity> students;
  // Students joined via access code.
  array<Identity> students_join_via_code;
  OnTaskConfig on_task_config;
  CaptionConfig caption_config;
  // Strings allow consumer to type and join a session. Will be alphabetic
  // characters.
  string? access_code;
};

struct CaptionConfig {
  // If captions are available for session consumers.
  bool session_caption_enabled;
  // If captions are enabled on the local device.
  bool local_caption_enabled;
  // If session consumers can translate the captions.
  bool session_translation_enabled;
};

enum NavigationType {
  kUnknown = 0,
  kOpen ,
  kBlock,
  kDomain,
  kLimited,
  kSameDomainOpenOtherDomainLimited,
};

struct ControlledTab {
  TabInfo tab;
  NavigationType navigation_type;
};

struct OnTaskConfig {
  // If content will be display on students' device in lock mode.
  bool is_locked;
  array<ControlledTab> tabs;
};

enum JoinMethod {
  kRoster = 0,
  kAccessCode = 1,
};

struct StudentActivity {
  // If the current student status is active.
  bool is_active;
  // Current active tab title.
  string? active_tab;
  // If caption is enabled.
  bool is_caption_enabled;
  // If hand raised.
  bool is_hand_raised;
  // TODO(b/365191878): Remove this after refactoring existing schema to support
  // multi-group.
  JoinMethod join_method;
};

struct IdentifiedActivity{
  // Same id as identity.
  string id;
  StudentActivity activity;
};

enum GetSessionError{
  kHTTPError,
  kEmpty,
};

union SessionResult {
 GetSessionError error;
 Config config;
};

enum UpdateSessionError{
  kInvalid,
  kHTTPError,
};

enum RemoveStudentError{
  // Invalid access code.
  kInvalid,
  // Network failure.
  kHTTPError,
};

enum SubmitAccessCodeError {
  kInvalid,
};

// Implemented by browser process for page chrome-untrusted://boca-app/
interface PageHandler {
  // Fetches a list of browser windows and tabs in it. Windows are ordered using
  // non-increasing order for most recent tab's last access timestamp.
  GetWindowsTabsList() => (array<Window> window_list);
  // Fetch a list of courses for the current teacher.
  ListCourses() => (array<Course> courses);
  // Requested by the Boca SWA to fetch a list of students for a given
  // course. Must be called on a course_id received from the most recent
  // ListCourses call.
  ListStudents(string course_id) => (array<Identity> students);
  // Create a session with `config`.
  CreateSession(Config config) => (bool success);
  // Retrieves the current session.
  GetSession() => (SessionResult result);
  // End session.
  EndSession() => (UpdateSessionError? error);
  // Remove student from session.
  RemoveStudent(string id) => (RemoveStudentError? error);
  // Update OnTask config.
  UpdateOnTaskConfig(OnTaskConfig on_task_config)
  => (UpdateSessionError? error);
  // Update caption config.
  UpdateCaptionConfig(CaptionConfig caption_config)
  => (UpdateSessionError? error);
  // Set app float mode.
  SetFloatMode(bool isFloatMode)=> (bool success);
  // Submit access code to join a current class session.
  SubmitAccessCode(string access_code) => (SubmitAccessCodeError? error);
};

// Implemented by renderer process
interface Page {
  // Notifies when student activities updated.
  OnStudentActivityUpdated(array<IdentifiedActivity> activities);
  // Notifies when session config updated.
  OnSessionConfigUpdated(SessionResult config);
  // Notifies when active networks updated.
  OnActiveNetworkStateChanged(array<NetworkInfo> active_networks);
};

// Implemented in browser process to set up the communication between the Page
// and PageHandler
interface BocaPageHandlerFactory {
  // Set up the communication between browser process and renderer process.
  Create(pending_receiver<PageHandler> handler, pending_remote<Page> page);
};
