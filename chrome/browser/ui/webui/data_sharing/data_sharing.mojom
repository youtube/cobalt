// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module data_sharing.mojom;

import "components/data_sharing/public/protocol/group_data.mojom";
import "mojo/public/mojom/base/absl_status.mojom";
import "url/mojom/url.mojom";

// Result of the ReadGroups API.
struct ReadGroupsResult {
  // Returns GroupData array when ReadGroups is successful, otherwise
  // returns empty array.
  array<GroupData> groups;

  // Status code equivalent to absl::StatusCode. Returns 0 if successful.
  int32 status_code;
};

struct SharedTab {
  // Url of the tab, trimmed to domain e.g. google.com. This is for
  // display only and will not be consumed as a URL. Use bare string here
  // because the Typescript on the other side cannot format the url to domain
  // only like how it's done in C++ and the domain is all we need.
  string display_url;

  // Url of the tab favicon.
  url.mojom.Url favicon_url;
};

// Preview data of the shared tab group. Shown in the Join dialog.
struct GroupPreview {
  // Group title.
  string title;

  // Tabs in the group.
  array<SharedTab> shared_tabs;

  // Status code equivalent to absl::StatusCode. Returns 0 if successful.
  mojo_base.mojom.AbslStatusCode status_code;
};

// Factory ensures that the Page and PageHandler interfaces are always created
// together without requiring an initialization call from the WebUI to the
// handler.
interface PageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePageHandler(
      pending_remote<Page> page, pending_receiver<PageHandler> handler);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Ask the browser to show the UI. Called when the page is loaded and ready to
  // show.
  ShowUI();

  // Ask the browser to close the UI and handle some special codes.
  CloseUI(int32 status_code);

  // Called when the api page is fully initialized and authenticated.
  // All other APIs on the Page such as ReadGroups should only be invoked
  // after ApiInitComplete.
  ApiInitComplete();

  // `group_id` connects the shared tab group with people group. `access_token`
  // is used to check link validity. Chrome stitches them together with a host
  // and generates an invite link. Owner can share the link to the public.
  GetShareLink(string group_id, string access_token) => (url.mojom.Url url);

  // Ask the browser for the group preview.
  GetTabGroupPreview(string group_id, string access_token)
      => (GroupPreview group_preview);

  // `tab_group_id` is the local id of the group in tab strip that gets shared.
  // `group_id` is the id that connects the people with the shared tab group.
  AssociateTabGroupWithGroupId(string tab_group_id, string group_id);

  // Ask Chrome to open the tab group in current browser once the "Join and
  // Open" is pressed from the Join dialog.
  OpenTabGroup(string group_id);
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Called when the access token of the primary account is fetched.
  // The token is used by data sharing SDK to authenticate the current user.
  OnAccessTokenFetched(string access_token);

  // Read groups given group_ids.
  ReadGroups(array<string> group_ids) => (ReadGroupsResult result);

  // Delete the group given group_id.
  // Return status code equivalent to absl::StatusCode.
  DeleteGroup(string group_id) => (int32 status_code);
};
