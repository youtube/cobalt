# Copyright 2018 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# A fuzzable_proto_library is a proto_library that is the same as any other in
# non-fuzzer builds (ie: use_libfuzzer=false). However, in fuzzer builds, the
# proto_library is built with the full protobuf runtime and any "optimize_for =
# LITE_RUNTIME" options are ignored. This is done because libprotobuf-mutator
# needs the full protobuf runtime, but proto_libraries shipped in Chrome must
# use the optimize for LITE_RUNTIME option which is incompatible with the full
# protobuf runtime. tl;dr: A fuzzable_proto_library is a proto_library that can
# be fuzzed with libprotobuf-mutator and shipped in Chrome.

import("//testing/libfuzzer/fuzzer_test.gni")
import("//third_party/protobuf/proto_library.gni")

# TODO(https://crbug.com/1197634): Fold this into proto_library.
template("fuzzable_proto_library") {
  # Only make the proto library fuzzable if we are doing a build that we can
  # use LPM on (i.e. libFuzzer not on Chrome OS).
  if (use_fuzzing_engine_with_lpm &&
      current_toolchain != "//build/toolchain/cros:target") {
    proto_library("proto_library_" + target_name) {
      forward_variables_from(invoker, "*")
      assert(current_toolchain == host_toolchain ||
             (is_ios && target_environment == "catalyst"))

      # Override LITE_RUNTIME settings in the protobuf files.
      cc_generator_options = "speed"
      extra_configs = [ "//third_party/protobuf:protobuf_config" ]
    }

    # Inspired by proto_library.gni's handling of
    # component_build_force_source_set.
    if (defined(component_build_force_source_set) &&
        component_build_force_source_set && is_component_build) {
      link_target_type = "source_set"
    } else {
      link_target_type = "static_library"
    }

    # By making target a static_library or source_set, we can add protobuf_full
    # to public_deps.
    target(link_target_type, target_name) {
      if (defined(invoker.testonly)) {
        testonly = invoker.testonly
      }
      sources = [ "//third_party/libprotobuf-mutator/dummy.cc" ]
      public_deps = [
        ":proto_library_" + target_name,
        "//third_party/libprotobuf-mutator:protobuf_full",
      ]
    }
  } else {
    # fuzzable_proto_library should behave like a proto_library when
    # !use_libfuzzer.
    proto_library(target_name) {
      forward_variables_from(invoker, "*")
    }
  }
}
