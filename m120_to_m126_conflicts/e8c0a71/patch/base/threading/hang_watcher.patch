--- base/threading/hang_watcher.cc
+++ base/threading/hang_watcher.cc
@@ -407,12 +407,17 @@
       g_main_thread_log_level.store(
           static_cast<LoggingLevel>(kUIThreadLogLevel.Get()),
           std::memory_order_relaxed);
-<<<<<<< HEAD
     }
 
     g_threadpool_log_level.store(
         static_cast<LoggingLevel>(kThreadPoolLogLevel.Get()),
         std::memory_order_relaxed);
+#if BUILDFLAG(IS_COBALT)
+    g_browser_process_renderer_thread_log_level.store(
+        static_cast<LoggingLevel>(
+            kBrowserProcessRendererThreadLogLevel.Get()),
+        std::memory_order_relaxed);
+#endif
   } else if (process_type == HangWatcher::ProcessType::kGPUProcess) {
     g_threadpool_log_level.store(
         static_cast<LoggingLevel>(kGPUProcessThreadPoolLogLevel.Get()),
@@ -443,50 +448,6 @@
     g_main_thread_log_level.store(
         static_cast<LoggingLevel>(kUtilityProcessMainThreadLogLevel.Get()),
         std::memory_order_relaxed);
-=======
-#if BUILDFLAG(IS_COBALT)
-      g_browser_process_renderer_thread_log_level.store(
-          static_cast<LoggingLevel>(
-              kBrowserProcessRendererThreadLogLevel.Get()),
-          std::memory_order_relaxed);
-#endif
-      break;
-    case HangWatcher::ProcessType::kGPUProcess:
-      g_threadpool_log_level.store(
-          static_cast<LoggingLevel>(kGPUProcessThreadPoolLogLevel.Get()),
-          std::memory_order_relaxed);
-      g_io_thread_log_level.store(
-          static_cast<LoggingLevel>(kGPUProcessIOThreadLogLevel.Get()),
-          std::memory_order_relaxed);
-      g_main_thread_log_level.store(
-          static_cast<LoggingLevel>(kGPUProcessMainThreadLogLevel.Get()),
-          std::memory_order_relaxed);
-      break;
-
-    case HangWatcher::ProcessType::kRendererProcess:
-      g_threadpool_log_level.store(
-          static_cast<LoggingLevel>(kRendererProcessThreadPoolLogLevel.Get()),
-          std::memory_order_relaxed);
-      g_io_thread_log_level.store(
-          static_cast<LoggingLevel>(kRendererProcessIOThreadLogLevel.Get()),
-          std::memory_order_relaxed);
-      g_main_thread_log_level.store(
-          static_cast<LoggingLevel>(kRendererProcessMainThreadLogLevel.Get()),
-          std::memory_order_relaxed);
-      break;
-
-    case HangWatcher::ProcessType::kUtilityProcess:
-      g_threadpool_log_level.store(
-          static_cast<LoggingLevel>(kUtilityProcessThreadPoolLogLevel.Get()),
-          std::memory_order_relaxed);
-      g_io_thread_log_level.store(
-          static_cast<LoggingLevel>(kUtilityProcessIOThreadLogLevel.Get()),
-          std::memory_order_relaxed);
-      g_main_thread_log_level.store(
-          static_cast<LoggingLevel>(kUtilityProcessMainThreadLogLevel.Get()),
-          std::memory_order_relaxed);
-      break;
->>>>>>> 32fb265de4a (Register main thread and in-process renderer thread in HangWatcher (#5406))
   }
 }
 
