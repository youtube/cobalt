// results.test-mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "results.test-mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/thread_pool/thread_pool_instance.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/features.h"
#include "mojo/public/cpp/bindings/lib/default_construct_tag_internal.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/cpp/bindings/urgent_message_scope.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "results.test-mojom-params-data.h"
#include "results.test-mojom-shared-message-ids.h"

#include "results.test-mojom-import-headers.h"
#include "results.test-mojom-test-utils.h"


namespace golden {
ResultTestError::ResultTestError() {}

ResultTestError::~ResultTestError() = default;
size_t ResultTestError::Hash(size_t seed) const {
  return seed;
}

void ResultTestError::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
}

bool ResultTestError::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ResultInterface_Method_ResponseParam_Result::ResultInterface_Method_ResponseParam_Result() : tag_(Tag::kSuccess) {
  data_.success = bool();
}

ResultInterface_Method_ResponseParam_Result::~ResultInterface_Method_ResponseParam_Result() {
  DestroyActive();
}

void ResultInterface_Method_ResponseParam_Result::set_success(
    bool success) {
  if (tag_ != Tag::kSuccess) {
    DestroyActive();
    tag_ = Tag::kSuccess;
  }
  data_.success = success;
}void ResultInterface_Method_ResponseParam_Result::set_failure(
    ResultTestErrorPtr failure) {
  if (tag_ == Tag::kFailure) {
    *(data_.failure) = std::move(failure);
  } else {
    DestroyActive();
    tag_ = Tag::kFailure;
    data_.failure = new ResultTestErrorPtr(
        std::move(failure));
  }
}

void ResultInterface_Method_ResponseParam_Result::DestroyActive() {
  switch (tag_) {

    case Tag::kSuccess:

      break;
    case Tag::kFailure:

      delete data_.failure;
      break;
  }
}
size_t ResultInterface_Method_ResponseParam_Result::Hash(size_t seed) const {
  seed = mojo::internal::HashCombine(seed, static_cast<uint32_t>(tag_));
  switch (tag_) {

    case Tag::kSuccess:
      return mojo::internal::Hash(seed, data_.success);
    case Tag::kFailure:
      return mojo::internal::Hash(seed, *data_.failure);
    default:
      NOTREACHED();
  }
}

bool ResultInterface_Method_ResponseParam_Result::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
ResultInterface_SyncMethod_ResponseParam_Result::ResultInterface_SyncMethod_ResponseParam_Result() : tag_(Tag::kSuccess) {
  data_.success = bool();
}

ResultInterface_SyncMethod_ResponseParam_Result::~ResultInterface_SyncMethod_ResponseParam_Result() {
  DestroyActive();
}

void ResultInterface_SyncMethod_ResponseParam_Result::set_success(
    bool success) {
  if (tag_ != Tag::kSuccess) {
    DestroyActive();
    tag_ = Tag::kSuccess;
  }
  data_.success = success;
}void ResultInterface_SyncMethod_ResponseParam_Result::set_failure(
    ResultTestErrorPtr failure) {
  if (tag_ == Tag::kFailure) {
    *(data_.failure) = std::move(failure);
  } else {
    DestroyActive();
    tag_ = Tag::kFailure;
    data_.failure = new ResultTestErrorPtr(
        std::move(failure));
  }
}

void ResultInterface_SyncMethod_ResponseParam_Result::DestroyActive() {
  switch (tag_) {

    case Tag::kSuccess:

      break;
    case Tag::kFailure:

      delete data_.failure;
      break;
  }
}
size_t ResultInterface_SyncMethod_ResponseParam_Result::Hash(size_t seed) const {
  seed = mojo::internal::HashCombine(seed, static_cast<uint32_t>(tag_));
  switch (tag_) {

    case Tag::kSuccess:
      return mojo::internal::Hash(seed, data_.success);
    case Tag::kFailure:
      return mojo::internal::Hash(seed, *data_.failure);
    default:
      NOTREACHED();
  }
}

bool ResultInterface_SyncMethod_ResponseParam_Result::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
const char ResultInterface::Name_[] = "golden.ResultInterface";

ResultInterface::IPCStableHashFunction ResultInterface::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (static_cast<messages::ResultInterface>(message.name())) {
    case messages::ResultInterface::kMethod: {
      return &ResultInterface::Method_Sym::IPCStableHash;
    }
    case messages::ResultInterface::kSyncMethod: {
      return &ResultInterface::SyncMethod_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ResultInterface::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (static_cast<messages::ResultInterface>(message.name())) {
      case messages::ResultInterface::kMethod:
            return "Receive golden::ResultInterface::Method";
      case messages::ResultInterface::kSyncMethod:
            return "Receive golden::ResultInterface::SyncMethod";
    }
  } else {
    switch (static_cast<messages::ResultInterface>(message.name())) {
      case messages::ResultInterface::kMethod:
            return "Receive reply golden::ResultInterface::Method";
      case messages::ResultInterface::kSyncMethod:
            return "Receive reply golden::ResultInterface::SyncMethod";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ResultInterface::Method_Sym::IPCStableHash() {
  // This method's address is used for identifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  static constexpr uint32_t kHash = 0x826d7762;  // IPCStableHash for golden::ResultInterface::Method
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ResultInterface::SyncMethod_Sym::IPCStableHash() {
  // This method's address is used for identifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  static constexpr uint32_t kHash = 0x42fd29bb;  // IPCStableHash for golden::ResultInterface::SyncMethod
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)
bool ResultInterface::SyncMethod(bool a,
base::expected<
  bool,
  ResultTestErrorPtr>* out_result) {
  NOTREACHED();
}

class ResultInterface_Method_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ResultInterface_Method_ForwardToCallback(
      ResultInterface::MethodCallback callback
      ) : callback_(std::move(callback)) {
  }

  ResultInterface_Method_ForwardToCallback(const ResultInterface_Method_ForwardToCallback&) = delete;
  ResultInterface_Method_ForwardToCallback& operator=(const ResultInterface_Method_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ResultInterface::MethodCallback callback_;
};
class ResultInterface_SyncMethod_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  ResultInterface_SyncMethod_HandleSyncResponse(
      bool* result
      , base::expected<
  bool,
  ResultTestErrorPtr>* out_result)
      : result_(result), out_result_(out_result) {
    DCHECK(!*result_);
  }

  ResultInterface_SyncMethod_HandleSyncResponse(const ResultInterface_SyncMethod_HandleSyncResponse&) = delete;
  ResultInterface_SyncMethod_HandleSyncResponse& operator=(const ResultInterface_SyncMethod_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  base::expected<
  bool,
  ResultTestErrorPtr>* out_result_;};

class ResultInterface_SyncMethod_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ResultInterface_SyncMethod_ForwardToCallback(
      ResultInterface::SyncMethodCallback callback
      ) : callback_(std::move(callback)) {
  }

  ResultInterface_SyncMethod_ForwardToCallback(const ResultInterface_SyncMethod_ForwardToCallback&) = delete;
  ResultInterface_SyncMethod_ForwardToCallback& operator=(const ResultInterface_SyncMethod_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ResultInterface::SyncMethodCallback callback_;
};

ResultInterfaceProxy::ResultInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ResultInterfaceProxy::Method(
    bool in_a, MethodCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send golden::ResultInterface::Method", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("a"), in_a,
                        "<value of type bool>");
   });
#endif

  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  const bool is_urgent = false;

  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt) |
      ((is_urgent) ? mojo::Message::kFlagIsUrgent : 0);

  const size_t estimated_payload_size =
    0;
  mojo::Message message(
      base::to_underlying(messages::ResultInterface::kMethod), kFlags, estimated_payload_size);
  mojo::internal::MessageFragment<
      ::golden::internal::ResultInterface_Method_Params_Data> params(
          message);
  params.Allocate();

  params->a = in_a;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ResultInterface::Name_);
  message.set_method_name("Method");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ResultInterface_Method_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool ResultInterfaceProxy::SyncMethod(
    bool param_a,
base::expected<
  bool,
  ResultTestErrorPtr>* out_param_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call golden::ResultInterface::SyncMethod (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("a"), param_a,
                        "<value of type bool>");
   });
#else
  TRACE_EVENT0("mojom", "ResultInterface::SyncMethod");
#endif
  
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  const bool is_urgent = false;

  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt) |
      ((is_urgent) ? mojo::Message::kFlagIsUrgent : 0);

  const size_t estimated_payload_size =
    0;
  mojo::Message message(
      base::to_underlying(messages::ResultInterface::kSyncMethod), kFlags, estimated_payload_size);
  mojo::internal::MessageFragment<
      ::golden::internal::ResultInterface_SyncMethod_Params_Data> params(
          message);
  params.Allocate();

  params->a = param_a;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ResultInterface::Name_);
  message.set_method_name("SyncMethod");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ResultInterface_SyncMethod_HandleSyncResponse(
          &result, out_param_result));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "ResultInterface::SyncMethod", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), out_param_result,
                        "<value of type ResultInterface_SyncMethod_ResponseParam_ResultPtr>");
   });
#endif
  return result;
}

void ResultInterfaceProxy::SyncMethod(
    bool in_a, SyncMethodCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send golden::ResultInterface::SyncMethod", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("a"), in_a,
                        "<value of type bool>");
   });
#endif

  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  const bool is_urgent = false;

  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt) |
      ((is_urgent) ? mojo::Message::kFlagIsUrgent : 0);

  const size_t estimated_payload_size =
    0;
  mojo::Message message(
      base::to_underlying(messages::ResultInterface::kSyncMethod), kFlags, estimated_payload_size);
  mojo::internal::MessageFragment<
      ::golden::internal::ResultInterface_SyncMethod_Params_Data> params(
          message);
  params.Allocate();

  params->a = in_a;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ResultInterface::Name_);
  message.set_method_name("SyncMethod");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ResultInterface_SyncMethod_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class ResultInterface_Method_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ResultInterface::MethodCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ResultInterface_Method_ProxyToResponder> proxy(
        new ResultInterface_Method_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&Transform)
      .Then(base::BindOnce(&ResultInterface_Method_ProxyToResponder::Run,
                          std::move(proxy)));
  }

  static ResultInterface_Method_ResponseParam_ResultPtr Transform(base::expected<
  bool,
  ResultTestErrorPtr> in) {
    return in.has_value() ? ::golden::ResultInterface_Method_ResponseParam_Result::NewSuccess(std::move(in.value())) :
                            ::golden::ResultInterface_Method_ResponseParam_Result::NewFailure(std::move(in.error()));
  }



  ~ResultInterface_Method_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      // Instantiate a ScopedFizzleBlockShutdownTasks to allow this request to
      // fizzle if this happens after shutdown and the endpoint is bound to a
      // BLOCK_SHUTDOWN sequence.
      base::ThreadPoolInstance::ScopedFizzleBlockShutdownTasks fizzler;
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ResultInterface_Method_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ResultInterface::MethodCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ResultInterface_Method_ResponseParam_ResultPtr in_result);
};

bool ResultInterface_Method_ForwardToCallback::Accept(
    mojo::Message* message) {
  DCHECK(message->is_serialized());
  internal::ResultInterface_Method_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ResultInterface_Method_ResponseParams_Data*>(
              message->mutable_payload());
  

  // Validation for ResultInterface.0
  bool success = true;
  ResultInterface_Method_ResponseParam_ResultPtr p_result{};
  ResultInterface_Method_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ResultInterface::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null()) {
    if (p_result->is_success()) {
      std::move(callback_).Run(base::ok(std::move(p_result->get_success())));
    } else {
      std::move(callback_).Run(base::unexpected(std::move(p_result->get_failure())));
    }
  }
  return true;
}

void ResultInterface_Method_ProxyToResponder::Run(
    ResultInterface_Method_ResponseParam_ResultPtr in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply golden::ResultInterface::Method", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type ResultInterface_Method_ResponseParam_ResultPtr>");
   });
#endif

  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt) |
      ((false) ? mojo::Message::kFlagIsUrgent : 0);

  const size_t estimated_payload_size =
    0;
  mojo::Message message(
      base::to_underlying(messages::ResultInterface::kMethod), kFlags, estimated_payload_size);
  mojo::internal::MessageFragment<
      ::golden::internal::ResultInterface_Method_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->result)>
      result_fragment(params.message());
  result_fragment.Claim(&params->result);
  
  mojo::internal::Serialize<::golden::ResultInterface_Method_ResponseParam_ResultDataView>(
    in_result,
    result_fragment,
    true);

  
  MOJO_INTERNAL_CHECK_SERIALIZATION(
    mojo::internal::SendValidation::kDefault,
    !(params->result.is_null()),
    mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
    "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ResultInterface::Name_);
  message.set_method_name("Method");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class ResultInterface_SyncMethod_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ResultInterface::SyncMethodCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ResultInterface_SyncMethod_ProxyToResponder> proxy(
        new ResultInterface_SyncMethod_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&Transform)
      .Then(base::BindOnce(&ResultInterface_SyncMethod_ProxyToResponder::Run,
                          std::move(proxy)));
  }

  static ResultInterface_SyncMethod_ResponseParam_ResultPtr Transform(base::expected<
  bool,
  ResultTestErrorPtr> in) {
    return in.has_value() ? ::golden::ResultInterface_SyncMethod_ResponseParam_Result::NewSuccess(std::move(in.value())) :
                            ::golden::ResultInterface_SyncMethod_ResponseParam_Result::NewFailure(std::move(in.error()));
  }



  ~ResultInterface_SyncMethod_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      // Instantiate a ScopedFizzleBlockShutdownTasks to allow this request to
      // fizzle if this happens after shutdown and the endpoint is bound to a
      // BLOCK_SHUTDOWN sequence.
      base::ThreadPoolInstance::ScopedFizzleBlockShutdownTasks fizzler;
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ResultInterface_SyncMethod_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ResultInterface::SyncMethodCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ResultInterface_SyncMethod_ResponseParam_ResultPtr in_result);
};

bool ResultInterface_SyncMethod_ForwardToCallback::Accept(
    mojo::Message* message) {
  DCHECK(message->is_serialized());
  internal::ResultInterface_SyncMethod_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ResultInterface_SyncMethod_ResponseParams_Data*>(
              message->mutable_payload());
  

  // Validation for ResultInterface.1
  bool success = true;
  ResultInterface_SyncMethod_ResponseParam_ResultPtr p_result{};
  ResultInterface_SyncMethod_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ResultInterface::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null()) {
    if (p_result->is_success()) {
      std::move(callback_).Run(base::ok(std::move(p_result->get_success())));
    } else {
      std::move(callback_).Run(base::unexpected(std::move(p_result->get_failure())));
    }
  }
  return true;
}

void ResultInterface_SyncMethod_ProxyToResponder::Run(
    ResultInterface_SyncMethod_ResponseParam_ResultPtr in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply golden::ResultInterface::SyncMethod", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type ResultInterface_SyncMethod_ResponseParam_ResultPtr>");
   });
#endif

  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt) |
      ((false) ? mojo::Message::kFlagIsUrgent : 0);

  const size_t estimated_payload_size =
    0;
  mojo::Message message(
      base::to_underlying(messages::ResultInterface::kSyncMethod), kFlags, estimated_payload_size);
  mojo::internal::MessageFragment<
      ::golden::internal::ResultInterface_SyncMethod_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<decltype(params->result)>
      result_fragment(params.message());
  result_fragment.Claim(&params->result);
  
  mojo::internal::Serialize<::golden::ResultInterface_SyncMethod_ResponseParam_ResultDataView>(
    in_result,
    result_fragment,
    true);

  
  MOJO_INTERNAL_CHECK_SERIALIZATION(
    mojo::internal::SendValidation::kDefault,
    !(params->result.is_null()),
    mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
    "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ResultInterface::Name_);
  message.set_method_name("SyncMethod");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool ResultInterface_SyncMethod_HandleSyncResponse::Accept(
    mojo::Message* message) {
  DCHECK(message->is_serialized());
  internal::ResultInterface_SyncMethod_ResponseParams_Data* params =
      reinterpret_cast<internal::ResultInterface_SyncMethod_ResponseParams_Data*>(
          message->mutable_payload());
  

  // Validation for ResultInterface.1
  bool success = true;
  ResultInterface_SyncMethod_ResponseParam_ResultPtr p_result{};
  ResultInterface_SyncMethod_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ResultInterface::Name_, 1, true);
    return false;
  }if (p_result->is_success()) {
      *out_result_ = base::ok(std::move(p_result->get_success()));
    } else {
      *out_result_ = base::unexpected(std::move(p_result->get_failure()));
    }
  *result_ = true;
  return true;
}

// static
bool ResultInterfaceStubDispatch::Accept(
    ResultInterface* impl,
    mojo::Message* message) {
  switch (static_cast<messages::ResultInterface>(message->header()->name)) {
    case messages::ResultInterface::kMethod: {
      break;
    }
    case messages::ResultInterface::kSyncMethod: {
      break;
    }
  }
  return false;
}

// static
bool ResultInterfaceStubDispatch::AcceptWithResponder(
    ResultInterface* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (static_cast<messages::ResultInterface>(message->header()->name)) {
    case messages::ResultInterface::kMethod: {
      internal::ResultInterface_Method_Params_Data* params =
          reinterpret_cast<
              internal::ResultInterface_Method_Params_Data*>(
                  message->mutable_payload());
      

      // Validation for ResultInterface.0
      bool success = true;
      bool p_a{};
      ResultInterface_Method_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_a = input_data_view.a();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ResultInterface::Name_, 0, false);
        return false;
      }
      auto callback =
          ResultInterface_Method_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Method(        
        std::move(p_a), std::move(callback));
      return true;
    }
    case messages::ResultInterface::kSyncMethod: {
      internal::ResultInterface_SyncMethod_Params_Data* params =
          reinterpret_cast<
              internal::ResultInterface_SyncMethod_Params_Data*>(
                  message->mutable_payload());
      

      // Validation for ResultInterface.1
      bool success = true;
      bool p_a{};
      ResultInterface_SyncMethod_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_a = input_data_view.a();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ResultInterface::Name_, 1, false);
        return false;
      }
      auto callback =
          ResultInterface_SyncMethod_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SyncMethod(        
        std::move(p_a), std::move(callback));
      return true;
    }
  }
  return false;
}
namespace {
}  // namespace
static const mojo::internal::GenericValidationInfo kResultInterfaceValidationInfo[] = {
    { &internal::ResultInterface_Method_Params_Data::Validate,
     &internal::ResultInterface_Method_ResponseParams_Data::Validate},
    { &internal::ResultInterface_SyncMethod_Params_Data::Validate,
     &internal::ResultInterface_SyncMethod_ResponseParams_Data::Validate},
};

bool ResultInterfaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::golden::ResultInterface::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kResultInterfaceValidationInfo);
}

bool ResultInterfaceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::golden::ResultInterface::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kResultInterfaceValidationInfo);
}


}  // golden


namespace mojo {


// static
bool StructTraits<::golden::ResultTestError::DataView, ::golden::ResultTestErrorPtr>::Read(
    ::golden::ResultTestError::DataView input,
    ::golden::ResultTestErrorPtr* output) {
  bool success = true;
  ::golden::ResultTestErrorPtr result(::golden::ResultTestError::New());
  
  *output = std::move(result);
  return success;
}

// static
bool UnionTraits<::golden::ResultInterface_Method_ResponseParam_Result::DataView, ::golden::ResultInterface_Method_ResponseParam_ResultPtr>::Read(
    ::golden::ResultInterface_Method_ResponseParam_Result::DataView input,
    ::golden::ResultInterface_Method_ResponseParam_ResultPtr* output) {
  using UnionType = ::golden::ResultInterface_Method_ResponseParam_Result;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::kSuccess: {
      *output = UnionType::NewSuccess(input.success());
      break;
    }
    case Tag::kFailure: {
      ::golden::ResultTestErrorPtr result_failure{};
      if (!input.ReadFailure(&result_failure))
        return false;

      *output = UnionType::NewFailure(
          std::move(result_failure));
      break;
    }
    default:

      return false;
  }
  return true;
}

// static
bool UnionTraits<::golden::ResultInterface_SyncMethod_ResponseParam_Result::DataView, ::golden::ResultInterface_SyncMethod_ResponseParam_ResultPtr>::Read(
    ::golden::ResultInterface_SyncMethod_ResponseParam_Result::DataView input,
    ::golden::ResultInterface_SyncMethod_ResponseParam_ResultPtr* output) {
  using UnionType = ::golden::ResultInterface_SyncMethod_ResponseParam_Result;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::kSuccess: {
      *output = UnionType::NewSuccess(input.success());
      break;
    }
    case Tag::kFailure: {
      ::golden::ResultTestErrorPtr result_failure{};
      if (!input.ReadFailure(&result_failure))
        return false;

      *output = UnionType::NewFailure(
          std::move(result_failure));
      break;
    }
    default:

      return false;
  }
  return true;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace golden {


void ResultInterfaceInterceptorForTesting::Method(bool a, MethodCallback callback) {
  GetForwardingInterface()->Method(
    std::move(a)
    , std::move(callback));
}
void ResultInterfaceInterceptorForTesting::SyncMethod(bool a, SyncMethodCallback callback) {
  GetForwardingInterface()->SyncMethod(
    std::move(a)
    , std::move(callback));
}
ResultInterfaceAsyncWaiter::ResultInterfaceAsyncWaiter(
    ResultInterface* proxy) : proxy_(proxy) {}

ResultInterfaceAsyncWaiter::~ResultInterfaceAsyncWaiter() = default;







}  // golden


#if defined(__clang__)
#pragma clang diagnostic pop
#endif