// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000021.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000021[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x57,0x6b,0x4c,0x96,0x65,
    0x18,0x7e,0xef,0xef,0xe3,0x24,0xe2,0x81,0x90,0xa4,0x74,0x4d,0x84,0xb5,0x86,0x8d,
    0x81,0x40,0x2a,0x8a,0xca,0x3c,0x50,0x0b,0x03,0x74,0x54,0x6e,0x1e,0xd2,0x39,0x3b,
    0x19,0x2b,0x62,0xe5,0xc4,0x55,0xa3,0x9c,0xce,0x92,0x5f,0x2e,0xa6,0x33,0xf5,0x97,
    0x8b,0xe9,0x2c,0x99,0xb5,0x08,0xb6,0x66,0x7f,0x72,0xce,0x99,0x18,0x3a,0x87,0xa8,
    0x69,0x07,0xcd,0xc3,0xcf,0xd6,0x69,0x5a,0xcf,0xf5,0xde,0xd7,0x1d,0xf7,0xbe,0xe5,
    0xfa,0xb6,0x87,0xf7,0x7d,0xae,0xfb,0x74,0xdd,0xd7,0xf3,0x3c,0xef,0xfb,0x92,0x4c,
    0x14,0x65,0x46,0x91,0x44,0xd9,0x51,0x56,0x74,0x45,0xa2,0xf8,0x97,0x1b,0x25,0x22,
    0xdc,0x8e,0x8e,0x32,0xe2,0x6b,0x5d,0xfd,0xb2,0xfa,0xd2,0xd7,0xdb,0xd6,0x95,0x56,
    0x56,0x95,0xc1,0x3e,0x36,0x4a,0xc6,0x7e,0xb0,0x8d,0x8b,0x32,0xa3,0xb4,0x70,0xc5,
    0x78,0x65,0xcd,0x8b,0x2d,0xc0,0xcf,0x84,0x71,0x3b,0x8c,0xf1,0xc1,0x0f,0x78,0x28,
    0x10,0x3d,0x1e,0xa5,0x47,0xe5,0x9a,0x3e,0x2a,0xe2,0xd5,0x30,0x21,0x96,0xe5,0xb0,
    0x04,0xb1,0xf1,0x0e,0x4b,0x12,0x9b,0xe0,0xb0,0x34,0x62,0x05,0x0e,0x4b,0x27,0x36,
    0xd9,0x61,0x19,0xc4,0xa6,0x38,0x2c,0x93,0x58,0xb1,0xc3,0xb2,0x88,0x3d,0xe2,0xb0,
    0x51,0xc4,0x1e,0x75,0x58,0x36,0xb1,0x32,0x87,0x8d,0x26,0x56,0xe9,0xb0,0x1c,0x62,
    0x33,0x1d,0x36,0x86,0xd8,0x1c,0x87,0x8d,0x25,0x36,0x1f,0x7a,0x87,0x4e,0x4d,0x83,
    0xba,0xd0,0xe1,0x19,0xe6,0x1e,0xc7,0xf9,0x70,0xb8,0x4e,0xa5,0x86,0x36,0x2f,0x74,
    0x73,0x68,0xff,0x10,0xe7,0x79,0x21,0x4b,0x22,0xb6,0x27,0x63,0xfd,0x70,0x7f,0x7f,
    0xb8,0xcb,0xa0,0x16,0xf9,0xc1,0x3f,0x87,0xf7,0x58,0x87,0x89,0x61,0x3e,0x86,0xbc,
    0x13,0x9c,0xe7,0x51,0xbf,0x34,0xce,0xf3,0x69,0xc7,0x7c,0x5a,0xf8,0x0b,0xdb,0x24,
    0xe8,0x5d,0xba,0x64,0xf6,0x84,0x10,0x35,0xd9,0xe1,0xe0,0xb5,0xf4,0x8b,0xa7,0x6a,
    0x6d,0xfe,0x70,0x18,0xcd,0xcd,0x67,0xe7,0xda,0x1c,0x3a,0xd7,0x64,0x6f,0x9d,0x67,
    0xf3,0x92,0x30,0x0e,0xd7,0xad,0xa9,0x01,0xaf,0x32,0xf2,0x8a,0xe2,0x7e,0x72,0xff,
    0xd5,0xce,0xf8,0xd9,0x28,0xfb,0x9f,0x61,0x3e,0x53,0x42,0xce,0xe9,0x5c,0x4f,0xe4,
    0x9a,0xcd,0x79,0x05,0xb1,0x69,0xd4,0xa2,0x92,0x5a,0xc0,0xbf,0x8a,0xb6,0x31,0xce,
    0x3e,0x8b,0x7b,0x0c,0xf6,0x6a,0xda,0xcb,0x68,0xc7,0xb5,0x86,0x9c,0xcd,0x7f,0x31,
    0xf5,0xb3,0x79,0x13,0xd7,0xdb,0xe6,0x2b,0xb8,0xbe,0x36,0x6f,0xe5,0xde,0x84,0xd6,
    0xed,0x8c,0x4d,0x3a,0x7b,0x07,0xf7,0xa9,0x69,0xb6,0xdd,0xd5,0xc3,0xbc,0x2b,0x9e,
    0xbd,0xbd,0xc0,0xfc,0xf7,0xa6,0xf4,0xd7,0xcd,0xfd,0x6b,0xf3,0xa3,0xec,0x0f,0xfd,
    0x7c,0x46,0xdf,0x1c,0x67,0xef,0xe5,0x5e,0xb0,0x79,0x5f,0x4a,0x7f,0xc7,0xb8,0x17,
    0x10,0x3f,0x40,0xed,0xf2,0xa8,0xef,0x00,0x9f,0x07,0xb6,0xb7,0xbe,0x63,0x3f,0xc8,
    0xf7,0x40,0xa8,0x34,0xe4,0xe6,0xfe,0xc7,0x47,0x51,0x9c,0xf3,0x02,0xef,0x87,0x98,
    0x13,0xf3,0xe1,0x14,0x0e,0x57,0xa9,0x11,0x6a,0xfc,0x44,0xfe,0x49,0xc6,0xdf,0xe2,
    0x7d,0x3e,0xe3,0x6f,0xf1,0xf9,0x04,0xec,0xb1,0xb0,0x92,0x09,0xf2,0x8f,0x88,0xfd,
    0x1e,0x90,0xf4,0x78,0x1d,0x75,0xef,0x0f,0xb2,0x87,0x86,0xb0,0x2a,0xe0,0x7f,0x96,
    0xd8,0xa0,0xe3,0xda,0xc2,0x73,0x73,0x8e,0xf6,0xda,0x90,0x01,0x7b,0xe7,0x0e,0xf7,
    0x57,0x25,0xf3,0xc1,0xe7,0x2e,0xf1,0x8e,0xe0,0x83,0xf9,0xdf,0x8c,0xbb,0xcb,0xb8,
    0x6a,0x26,0xad,0xe0,0x5e,0xab,0xe1,0xbe,0x12,0x51,0xfc,0x60,0xf0,0xc1,0x19,0x4b,
    0x88,0x62,0xd8,0x6f,0xbf,0x05,0xe6,0x59,0x14,0xed,0xcf,0xe0,0x0f,0x5b,0x32,0x0c,
    0x60,0xe8,0x07,0xf7,0x4d,0x21,0x0e,0xba,0xa4,0x8b,0xd6,0xc4,0xef,0x2d,0xea,0x97,
    0x21,0x8a,0x2f,0x0d,0xab,0x01,0x4e,0x9f,0x8b,0x62,0xe6,0xf7,0x47,0xc8,0x61,0xb9,
    0x70,0xfd,0x35,0x68,0x01,0xbf,0x6f,0xe9,0x93,0xce,0x18,0xd4,0xb1,0x1e,0x46,0xb1,
    0x87,0xc5,0xae,0x87,0x6c,0x51,0xdc,0x7a,0x18,0x2d,0x8a,0x59,0x0f,0xb9,0xae,0x07,
    0xd8,0x72,0xc2,0xc8,0x65,0xdd,0x1c,0xd7,0xc3,0x58,0xd1,0xda,0xe2,0x7a,0x18,0x27,
    0x8a,0x5b,0x0f,0xbd,0xa2,0x98,0xf9,0xa1,0x07,0xcb,0x95,0xeb,0x7a,0x38,0x4d,0x1f,
    0xf4,0xd5,0xcb,0x9a,0xd6,0xc3,0x7d,0xec,0xa1,0xc9,0xf5,0x90,0x27,0x8a,0x5b,0x0f,
    0x13,0x44,0x31,0xeb,0xa1,0xc0,0xf5,0x00,0x5b,0x7e,0x18,0x05,0xac,0x8b,0xfb,0x06,
    0xd6,0x9d,0x28,0x5a,0xfb,0xb4,0x8c,0xec,0x77,0x70,0x34,0xdf,0x02,0xc7,0x71,0x80,
    0x7e,0xe0,0x3d,0x91,0x39,0xc1,0x07,0x67,0xe2,0x22,0xcf,0x83,0xed,0xb9,0x4b,0xdc,
    0x73,0x7d,0x6e,0xcf,0x5d,0x26,0xfe,0x0e,0xf7,0xdc,0x15,0x62,0x03,0xec,0x15,0xe7,
    0xfe,0x07,0xc6,0x5d,0x65,0x1c,0x34,0xfd,0x91,0xb8,0xe9,0xfe,0x33,0x63,0x23,0x87,
    0x5d,0x23,0x86,0x1e,0x1a,0x83,0xf6,0x38,0x7f,0xd7,0xe9,0x7b,0x8d,0x39,0xac,0xc6,
    0x2f,0xac,0xd1,0xeb,0x6a,0xdc,0x20,0xbe,0x3a,0xf4,0x8a,0xf3,0x76,0x93,0x3d,0x5d,
    0xe7,0x73,0xe1,0x86,0x3b,0x17,0x85,0x5c,0x8f,0x15,0x6e,0x3d,0xa6,0x8a,0xe2,0xb6,
    0x1e,0x45,0xa2,0x98,0xad,0x47,0xb9,0x5b,0x0f,0xd8,0x8a,0xc3,0x28,0xa7,0xc6,0xc5,
    0xdc,0x53,0xf1,0xbb,0x49,0xb4,0x76,0xc4,0xb8,0x4e,0xc6,0xfd,0x15,0xee,0x91,0xab,
    0x83,0x31,0xb8,0xf6,0xb3,0xd6,0x7b,0xa2,0x71,0x93,0x18,0xb3,0xc3,0xd5,0x82,0x6d,
    0x4b,0x18,0xdb,0x18,0x87,0x6b,0x4e,0xe8,0x31,0x7e,0x66,0x73,0xcd,0x1f,0x64,0x5d,
    0xbc,0x17,0xb7,0x90,0xc7,0xfb,0xa2,0x76,0xbc,0x1b,0xdf,0x25,0xf6,0x81,0x28,0x5e,
    0xc2,0x3d,0xd2,0xc9,0x9c,0xc8,0x6f,0x71,0x5b,0xc9,0xa5,0x30,0xc5,0x67,0x47,0x7c,
    0x46,0x25,0xbe,0xef,0xe4,0x9e,0x82,0xff,0x19,0xd1,0xbc,0xe0,0xb5,0x95,0x5c,0x71,
    0x76,0xb0,0x06,0xfd,0xa2,0xf6,0x9b,0x6e,0xad,0xe3,0xf7,0x33,0x31,0x61,0xbf,0xfb,
    0x53,0x34,0xda,0xc9,0x9a,0x3b,0x9d,0x46,0x1f,0x8a,0xc6,0x99,0x46,0xfb,0x9c,0x46,
    0xb0,0x75,0x85,0xb1,0x9b,0x71,0xbb,0x9d,0x46,0x7b,0x9c,0x46,0x25,0x29,0x1a,0x7d,
    0x24,0x6a,0xf7,0x1a,0xed,0x15,0xc5,0x4d,0xa3,0xfd,0xcc,0xd9,0xe5,0x34,0xda,0x45,
    0x2e,0x85,0x29,0x3e,0xfb,0x9c,0x46,0xfb,0x9d,0x46,0x83,0xa2,0x79,0xc1,0x6b,0x17,
    0xb9,0x9a,0x46,0x5f,0x89,0xda,0xfb,0xc9,0xd3,0x34,0x2a,0xa5,0x46,0x09,0xf6,0xdb,
    0x93,0xa2,0xd1,0x01,0xd6,0x3c,0xe0,0x34,0xfa,0x58,0x34,0xce,0x34,0x3a,0xe2,0x34,
    0x82,0xad,0x3b,0x8c,0x43,0x8c,0x3b,0xe4,0x34,0x3a,0xec,0x34,0x2a,0x4d,0xd1,0xe8,
    0x13,0x51,0xbb,0xd7,0xe8,0x53,0x51,0xdc,0x34,0xea,0x61,0xce,0x6e,0xa7,0xd1,0x41,
    0x72,0x29,0x4c,0xf1,0x39,0xe2,0x34,0xea,0x71,0x1a,0x9d,0x13,0xcd,0x0b,0x5e,0x07,
    0xc9,0xd5,0x34,0xfa,0x5a,0xd4,0x0e,0xad,0x12,0xcc,0x67,0x67,0xaf,0x9c,0x39,0xe0,
    0x77,0x9e,0x9a,0xe1,0x99,0x87,0x98,0x1e,0xf7,0x0c,0x9e,0xce,0x33,0xdf,0xea,0xce,
    0x7c,0x85,0x28,0x6e,0x67,0xbe,0x52,0x14,0xb3,0x33,0xdf,0xe4,0xf4,0x83,0xad,0x0a,
    0x36,0xd6,0xad,0x71,0xb9,0xe7,0x32,0x77,0x87,0xcb,0x3d,0x4f,0x14,0xb7,0xdc,0xf3,
    0x45,0x31,0xcb,0xbd,0xc8,0xe5,0x86,0xad,0x36,0x8c,0x45,0xcc,0x5d,0xeb,0x9e,0x27,
    0x0b,0x44,0xfb,0xc2,0x37,0xc5,0x97,0xcc,0xb5,0x50,0x14,0xdf,0x4e,0x2d,0x2c,0x6e,
    0x11,0xb5,0x80,0xcf,0x62,0xd1,0x9a,0xe0,0xb9,0x90,0xf9,0x51,0xb7,0xd1,0xd5,0x85,
    0x4f,0x5d,0x18,0x8d,0x8c,0xaf,0x73,0x75,0x9f,0x70,0x75,0x1b,0xc2,0x97,0x22,0xbe,
    0x21,0x9f,0x24,0x76,0x5e,0x46,0xbe,0x59,0x12,0x7c,0x5e,0xc3,0x5e,0x2f,0x1a,0x67,
    0x63,0x5b,0xc8,0x05,0x7c,0x89,0x68,0x6c,0x7d,0xfc,0xde,0x1a,0x15,0xaf,0x55,0x03,
    0xf3,0xc0,0x96,0xc6,0x77,0xbf,0x7d,0xa3,0xa2,0x27,0xe3,0xd4,0xe8,0xd6,0xf7,0x02,
    0x63,0xd0,0x67,0x03,0xb9,0xc3,0xb7,0x89,0xbe,0x55,0x8e,0xff,0x8c,0xff,0xe0,0x3f,
    0xeb,0x1e,0xfc,0x3b,0xc9,0xb3,0x5a,0xd4,0x67,0x86,0xe3,0x39,0x87,0xfe,0xd5,0xf7,
    0xe0,0x69,0xb5,0x9b,0x1c,0xcf,0x21,0x51,0xae,0xe0,0x3e,0x87,0xfb,0x06,0x35,0x60,
    0x5b,0x26,0x6a,0xef,0xe2,0xf7,0x1e,0xbe,0x27,0x9b,0x45,0x71,0xdb,0x4f,0x4f,0x73,
    0x3f,0xed,0x75,0xfb,0xe9,0x19,0x51,0xdc,0xf6,0xd3,0xb3,0xa2,0x98,0xed,0xa7,0xcd,
    0x6e,0x5d,0x61,0x5b,0x1e,0xc6,0x2a,0x72,0x5b,0xe5,0x72,0xaf,0x66,0xee,0x6e,0x97,
    0xfb,0x39,0x51,0xdc,0x72,0xaf,0x11,0xc5,0x2c,0x77,0xbb,0xcb,0x0d,0xdb,0xda,0x30,
    0xd6,0x33,0xf7,0x7a,0xf7,0xee,0x7f,0x9e,0xb9,0x8f,0xba,0xf7,0xf2,0x0b,0xa2,0xf8,
    0x37,0x7c,0xcf,0xbf,0x24,0x8a,0xe1,0xdd,0x6d,0xf5,0x5e,0x16,0xc5,0xfb,0x58,0xaf,
    0xc5,0xd5,0x83,0x6d,0x43,0x18,0x2d,0xac,0xb7,0x81,0xcf,0x05,0xe8,0x76,0x82,0x31,
    0xcd,0xee,0xdb,0xcc,0xfc,0x5a,0xb8,0x1e,0xf0,0x1b,0x16,0xf5,0x01,0xd7,0x13,0xcc,
    0x67,0x7c,0x5e,0x25,0x9f,0x63,0x8e,0xcf,0x6b,0xa2,0xb8,0xf1,0x69,0x73,0x7c,0x60,
    0x6b,0x0d,0xa3,0x8d,0x75,0x5a,0x1d,0x9f,0x93,0x8c,0x19,0x76,0xcf,0x29,0xf3,0x6b,
    0x73,0x7c,0x2e,0x8a,0xfa,0x80,0xe3,0x49,0xe6,0x33,0x3e,0x6f,0x90,0x4f,0x87,0xe3,
    0xf3,0xa6,0x28,0x6e,0x7c,0x36,0x39,0x3e,0xb0,0x6d,0x0c,0x63,0x13,0xeb,0x6c,0x74,
    0x7c,0x4e,0x89,0xfe,0xcf,0x70,0x51,0x46,0xf6,0xab,0xf9,0x6d,0x72,0x7c,0xbe,0x17,
    0xf5,0x01,0xc7,0x53,0xcc,0x07,0xdf,0x76,0xfa,0xae,0x75,0xdf,0xcc,0xeb,0xa8,0x25,
    0xf2,0x59,0x9d,0xe3,0x32,0x82,0xdb,0xf7,0xa7,0xc5,0xb6,0xbb,0x3a,0x97,0x45,0x6b,
    0xa1,0xf6,0x71,0xee,0x23,0xf8,0x6e,0xa6,0xef,0x72,0x9e,0x3b,0xf8,0xae,0x64,0xbe,
    0x66,0x9e,0xbb,0x4c,0x9e,0x55,0xeb,0xc3,0x62,0x36,0xbb,0xfc,0x97,0x44,0x6b,0xa0,
    0xe6,0x4a,0x9e,0x81,0xb9,0x21,0xe2,0x36,0x6d,0x77,0xc2,0x2e,0x99,0x19,0xc6,0x3f,
    0x1a,0x7f,0x1c,0x37,0xb0,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture3D src;
// layout(location = 0)out ivec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       ivec4 transformSrcValue(vec4 srcValue)
// {
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//           ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           vec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
