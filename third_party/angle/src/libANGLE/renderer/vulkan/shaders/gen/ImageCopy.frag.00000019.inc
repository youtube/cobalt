// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000019.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000019[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xcb,0x4f,0x5d,0x55,
    0x14,0xc6,0xf7,0xbe,0x17,0xb8,0x97,0x4b,0x2f,0xa5,0xd2,0x96,0xb6,0x54,0xa1,0x82,
    0x56,0x42,0x29,0x90,0xb4,0xe6,0x26,0x6a,0x83,0x6d,0x2d,0x3e,0xa8,0x54,0x0d,0x63,
    0x63,0xe2,0xc4,0x01,0x9d,0xe8,0xa0,0x03,0x63,0x8c,0x6d,0x0c,0x61,0xd4,0x7f,0xa1,
    0x0f,0xab,0x89,0x58,0x35,0xd6,0x47,0x6b,0x1f,0xc3,0xd6,0x47,0xa3,0x41,0x25,0x1a,
    0x54,0x22,0x23,0x95,0x18,0xdb,0x08,0x82,0x95,0x12,0xd7,0x3a,0xfb,0xb7,0x64,0x05,
    0x8d,0x92,0xec,0x9c,0xb3,0xbf,0xf5,0xfa,0xbe,0xb5,0xf6,0xd9,0x97,0x7c,0xae,0xad,
    0x10,0x42,0x0c,0xa5,0x50,0x0c,0x07,0x62,0xc8,0xfe,0xd6,0x84,0x5c,0xd0,0xd7,0xba,
    0x50,0x93,0x3d,0xfb,0x07,0x9e,0x18,0xd8,0xfe,0xec,0x73,0x4f,0x6f,0xdf,0xb1,0xb3,
    0x47,0xed,0xf5,0x21,0x9f,0xf9,0xa9,0x6d,0x75,0x28,0x84,0x2a,0x79,0xea,0x1a,0x7e,
    0xea,0x99,0x83,0x8a,0x9f,0x94,0x75,0x49,0x56,0x83,0xf8,0x29,0x2e,0x05,0xc2,0x83,
    0xa1,0x3a,0x34,0xa5,0xf4,0xa1,0x8d,0xa7,0x61,0x11,0xac,0xe8,0xb0,0x1c,0x58,0x83,
    0xc3,0xf2,0x60,0x6b,0x1d,0x56,0x05,0xb6,0xc1,0x61,0xd5,0x60,0x9b,0x1d,0x56,0x03,
    0xd6,0xea,0xb0,0x02,0x58,0xbb,0xc3,0x8a,0x60,0x77,0x39,0xac,0x16,0x6c,0x9b,0xc3,
    0x4a,0x60,0x3d,0x0e,0xab,0x03,0xdb,0xe1,0xb0,0x55,0x60,0x15,0x87,0x95,0xc1,0xee,
    0x75,0x58,0x3d,0x58,0x9f,0xf6,0x5b,0x94,0x5a,0x0f,0xfa,0x45,0xe1,0x49,0x72,0xaf,
    0x66,0x7f,0x5a,0x9e,0xb7,0xd3,0x43,0xdb,0x6f,0x71,0x7b,0xed,0xfd,0x6d,0xec,0x1b,
    0x25,0x4b,0x2e,0xb3,0xe7,0xb3,0xfe,0xe9,0xfb,0x3a,0xf1,0xa9,0xa1,0x17,0xda,0xfb,
    0x26,0xd9,0x17,0xe8,0x91,0xd9,0xcb,0xd8,0x03,0xf6,0x7a,0x78,0x57,0xb1,0x6f,0xc0,
    0xbf,0x2a,0xab,0xb5,0xe6,0xef,0x7e,0x5a,0x1e,0x5b,0xe5,0xff,0x59,0xe6,0xd3,0x2a,
    0x99,0x36,0xd0,0x6b,0xcd,0x75,0x0f,0xfb,0x8d,0x60,0x9d,0x70,0xde,0x04,0x67,0xf5,
    0x6f,0xc6,0x56,0x70,0xf6,0x16,0xe6,0xaf,0xf6,0x56,0xec,0xe5,0xec,0xcc,0xe4,0xb2,
    0xfe,0x76,0xa2,0xad,0x1d,0x6d,0x16,0xd7,0x05,0x17,0xdb,0x57,0x98,0x89,0xed,0xf7,
    0x50,0x47,0xb5,0xef,0x27,0x67,0xde,0xd9,0x87,0x38,0x3b,0xb6,0x1f,0x5e,0xc1,0xfb,
    0x10,0x67,0xc6,0xf6,0x87,0x9d,0xee,0x23,0xf8,0xfa,0xfa,0x23,0xcc,0xc2,0xf6,0xa3,
    0x2b,0xf8,0x1e,0xa5,0xf7,0xeb,0x85,0xc5,0x31,0x66,0xa5,0xdc,0x8e,0xcb,0xf3,0x18,
    0x36,0xcd,0x7d,0x82,0x7e,0x1d,0xa7,0xa7,0x27,0xf8,0x3e,0x6d,0xee,0xaf,0xe0,0x9f,
    0xcb,0x7a,0x5d,0x1b,0xc6,0xe0,0xc5,0x55,0xf0,0x8f,0xa7,0xe6,0x7c,0x83,0xf7,0x31,
    0x72,0xea,0xfe,0xf4,0x0a,0x7e,0x67,0xe8,0x8f,0xd6,0x78,0x1f,0x6d,0x79,0xe2,0x2f,
    0xf2,0xde,0x40,0xfc,0x45,0xee,0x0b,0xc5,0xee,0x96,0xe9,0xe5,0xe0,0x1f,0xc0,0x16,
    0x04,0xd1,0x99,0xde,0x87,0xbe,0x53,0x68,0x18,0x94,0x89,0x28,0xff,0x57,0xc1,0x4e,
    0x39,0xae,0x07,0x39,0xd3,0xaf,0x61,0xbf,0x5f,0x32,0xe8,0x79,0xb9,0xcc,0x99,0xda,
    0x44,0x3e,0xf5,0xb9,0x02,0xfe,0x92,0xf8,0xe8,0xfe,0x23,0xe2,0xae,0x10,0xa7,0xbd,
    0xfd,0x98,0xb8,0x16,0xe2,0xb4,0x47,0x9f,0x80,0xbf,0x2e,0x3e,0x7a,0xb6,0x3e,0x05,
    0xd3,0xb3,0x35,0x2f,0xcc,0xc7,0xe1,0x73,0x43,0xfc,0xd5,0x76,0x55,0xd6,0x38,0x7a,
    0xf4,0xfd,0x31,0x89,0xd3,0xbe,0x7c,0x46,0x4d,0xfd,0x7b,0x81,0xfe,0x7d,0x0e,0xfe,
    0xb8,0xec,0x94,0xd3,0xce,0x98,0x30,0xf3,0xfb,0x43,0x72,0x58,0x2e,0x7d,0xce,0x89,
    0x97,0xfa,0x3d,0x10,0x93,0x4f,0x35,0x31,0x57,0x9d,0x86,0x2f,0xd0,0xd0,0xe5,0x34,
    0x7c,0x09,0x6e,0x1a,0xbe,0x02,0x33,0x0d,0x93,0x4e,0x83,0xda,0x26,0x64,0x4d,0x52,
    0x77,0xc2,0x69,0xf8,0x9a,0xda,0xd1,0x69,0xf8,0x06,0xdc,0x34,0x54,0x62,0xc2,0xcc,
    0x4f,0x35,0x58,0xae,0x49,0xa7,0x61,0x5f,0x4c,0x3e,0xe3,0xc4,0x4c,0x38,0x0d,0xdf,
    0xa2,0xa1,0xe2,0x34,0x7c,0x07,0x6e,0x1a,0xbe,0x07,0x33,0x0d,0xd3,0x4e,0x83,0xda,
    0xa6,0x64,0x4d,0x53,0x77,0x8a,0x73,0xa4,0x75,0x7f,0xa0,0xf6,0xbe,0xb8,0x7c,0xde,
    0x95,0xa3,0xf9,0x4e,0x3b,0x8e,0xfd,0xf8,0x4d,0x12,0x37,0x05,0x1f,0xfd,0x26,0xde,
    0xe4,0x7b,0xb0,0x33,0xf7,0x16,0x9c,0x47,0xdd,0x99,0x7b,0x1b,0xfc,0x45,0xce,0xdc,
    0x3b,0x60,0x9a,0x57,0xe3,0xf4,0x4e,0x78,0x97,0xb8,0x33,0xc4,0x69,0x4f,0xdf,0x03,
    0xb7,0xbe,0x7f,0x40,0x6c,0x70,0xd8,0x59,0x30,0xd5,0x70,0x40,0x10,0xfd,0xfe,0xce,
    0xe1,0x7b,0x96,0x1c,0x56,0xe3,0x43,0x6a,0x8c,0xb8,0x1a,0xe7,0xc1,0x9f,0x14,0x66,
    0x7a,0x07,0x5e,0x40,0xd3,0x39,0xee,0x89,0xf3,0x6e,0x1e,0x3f,0x12,0xbf,0xc7,0xcd,
    0xe3,0x27,0x70,0x9b,0xc7,0xcf,0x60,0x36,0x8f,0x62,0x5c,0x9e,0x87,0xda,0x66,0x64,
    0xcd,0xd2,0xe3,0x19,0x74,0x68,0x9e,0x5f,0xa8,0x9d,0xcf,0x66,0x54,0xcc,0xee,0xdd,
    0x5f,0xc1,0x2e,0xb8,0x6f,0x3d,0x87,0x4e,0xb5,0x5f,0x23,0xce,0xd6,0x11,0xc9,0xa5,
    0xf8,0x75,0x62,0xaf,0x65,0xb9,0x6a,0x33,0x5d,0xbf,0x91,0xe7,0x3a,0xf7,0x4d,0xb5,
    0xbb,0xa7,0x74,0xee,0xca,0x53,0x39,0xcd,0x3a,0xbd,0x73,0xe8,0x1d,0x72,0x7a,0x7f,
    0x07,0x37,0xbd,0xf3,0x60,0xa6,0x77,0xd1,0x9d,0xbf,0xf9,0x4c,0x67,0xc8,0x30,0xcd,
    0xbd,0xe0,0xf4,0xde,0x70,0x7a,0xc7,0xc8,0xf5,0x27,0x78,0x3b,0x9c,0x2c,0x6e,0x91,
    0xb3,0xa8,0x3e,0x37,0xa9,0x39,0x8b,0xff,0x02,0x75,0x0b,0xae,0xcf,0xea,0xb3,0xa4,
    0xbf,0x61,0x68,0x5a,0x72,0x75,0xb5,0x89,0x2b,0xfb,0x9c,0x8b,0xff,0xdd,0xe7,0x7c,
    0x04,0x64,0xbd,0x4c,0x9f,0xab,0x62,0x8a,0x55,0xbb,0xf5,0xb9,0x86,0x5c,0x6a,0xfb,
    0xb7,0x3e,0x1b,0x27,0x7d,0xce,0x71,0xe6,0x1e,0x26,0x66,0x91,0xf8,0xa5,0x15,0x33,
    0x29,0x3a,0xdf,0x87,0x62,0x9a,0xe5,0x0c,0x71,0x9a,0xe7,0x79,0xfe,0x47,0x29,0xc5,
    0x64,0xb7,0xf9,0xd5,0xc5,0x34,0xbf,0x61,0x37,0xbf,0x55,0x31,0xe1,0x36,0xbf,0x72,
    0x4c,0x98,0xcd,0xaf,0xd7,0xf5,0x51,0x6d,0xf5,0xb2,0x1a,0xe1,0x51,0x8f,0x4e,0xad,
    0x75,0x4b,0x4c,0xf5,0x4a,0xe8,0x2c,0xd0,0x33,0xd3,0xd9,0x4b,0x4c,0xa3,0xe3,0xb3,
    0x16,0x3e,0x87,0x1c,0x9f,0x75,0x31,0xe1,0xc6,0x67,0x7d,0x4c,0x98,0xf1,0xe9,0x71,
    0x7c,0xd4,0xd6,0x24,0xab,0x99,0xdc,0xfa,0x6e,0xf7,0xc0,0x46,0xb8,0xe4,0xb9,0x83,
    0x95,0xe3,0xae,0xb8,0x8c,0xdb,0xfd,0xd6,0x43,0x6c,0xb3,0xbb,0x7b,0x36,0xc3,0xeb,
    0xb0,0xbb,0x17,0x6e,0x8d,0x09,0xbf,0x4c,0xfe,0x96,0x98,0xb0,0x11,0x77,0xf6,0x5b,
    0x63,0xc2,0x47,0xe1,0xda,0xe6,0xb8,0xaa,0x6d,0x8b,0xac,0x36,0xea,0xe9,0xbb,0xf1,
    0xea,0x23,0xa6,0xe4,0x7e,0x1b,0xcc,0xaf,0x8d,0x59,0xab,0xdf,0x23,0x70,0x57,0xae,
    0x7d,0xe4,0x33,0x3e,0x77,0xc0,0xe7,0xa8,0xe3,0x73,0x67,0x4c,0xb8,0xf1,0xe9,0x70,
    0x7c,0xd4,0xb6,0x55,0x56,0x07,0x75,0xb6,0x3a,0x3e,0xbb,0x89,0xd1,0x7a,0x39,0xf8,
    0x98,0x5f,0x87,0xe3,0x33,0x10,0x93,0x8f,0x72,0xdc,0x4d,0x3e,0xe3,0xd3,0x09,0x9f,
    0x21,0xc7,0x67,0x5b,0x4c,0xb8,0xf1,0xe9,0x76,0x7c,0xd4,0xd6,0x25,0xab,0x9b,0x3a,
    0x5d,0x8e,0xcf,0xde,0x98,0xfe,0x67,0x19,0x88,0xcb,0xe7,0xc9,0xfc,0xba,0x1d,0x9f,
    0xc1,0x98,0x7c,0x94,0xe3,0x5e,0xf2,0xf9,0x19,0xf7,0x38,0xdf,0x47,0x63,0x3a,0x0f,
    0x7a,0x66,0x06,0xa9,0xeb,0xcf,0x69,0xaf,0xf3,0xdd,0x1f,0xd3,0xf9,0xd6,0xf3,0xae,
    0x71,0x9a,0x67,0x97,0x30,0xb9,0x84,0xed,0xa6,0x4c,0xad,0x22,0xeb,0x2f,0x48,0x90,
    0x02,0x30,0x50,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out ivec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       ivec4 transformSrcValue(uvec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
