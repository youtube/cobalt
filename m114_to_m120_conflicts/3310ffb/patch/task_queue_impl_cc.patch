--- base/task/sequence_manager/task_queue_impl.cc
+++ base/task/sequence_manager/task_queue_impl.cc
@@ -553,39 +553,6 @@
   TraceQueueSize();
 }
 
-<<<<<<< HEAD
-=======
-#if !BUILDFLAG(IS_COBALT)
-void TaskQueueImpl::RecordQueuingDelayedTaskMetrics(const Task& pending_task,
-                                                    LazyNow* lazy_now) {
-  // The sampling depends on having a high-resolution clock.
-  if (!base::TimeTicks::IsHighResolution())
-    return;
-
-  // A sample is taken on average every kSampleRate tasks.
-  static constexpr int kSampleRate = 10000;
-
-  // Use pseudorandom sampling to avoid "running jank," which may occur
-  // when emitting many samples to a histogram in parallel. (This function is
-  // called a lot in parallel.) See https://crbug/1254354 for more details. The
-  // current time is used as a source of pseudorandomness.
-  if (((lazy_now->Now() - TimeTicks::UnixEpoch()).InMicroseconds() ^
-       pending_task.sequence_num) %
-          kSampleRate ==
-      0) {
-    // The |delay| will be different than the delay passed to PostDelayedTask
-    // for cross-thread delayed tasks.
-    const TimeDelta delay = pending_task.delayed_run_time - lazy_now->Now();
-    UMA_HISTOGRAM_LONG_TIMES("Scheduler.TaskQueueImpl.PostDelayedTaskDelay",
-                             delay);
-    UMA_HISTOGRAM_COUNTS_1000(
-        "Scheduler.TaskQueueImpl.DelayedIncomingQueueSize",
-        static_cast<int>(main_thread_only().delayed_incoming_queue.size()));
-  }
-}
-#endif
-
->>>>>>> a6be60ddf6b (base/task + base/threading: Remove RecordQueuingDelayedTaskMetrics and TLS lookups (#6212))
 void TaskQueueImpl::ReloadEmptyImmediateWorkQueue() {
   DCHECK(main_thread_only().immediate_work_queue->Empty());
   main_thread_only().immediate_work_queue->TakeImmediateIncomingQueueTasks();
