// Copyright 2017 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_registration_generator.py
// Please do not change its content.

#ifndef TEMP_DIR_HEADER_
#define TEMP_DIR_HEADER_

#include <jni.h>

#include <iterator>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_int_wrapper.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations (classes).

extern const char kClassPath_org_jni_1zero_samples_SampleNonProxy[];
extern std::atomic<jclass> g_org_jni_1zero_samples_SampleNonProxy_clazz;
#ifndef org_jni_1zero_samples_SampleNonProxy_clazz_defined
#define org_jni_1zero_samples_SampleNonProxy_clazz_defined
inline jclass org_jni_1zero_samples_SampleNonProxy_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_jni_1zero_samples_SampleNonProxy,
      &g_org_jni_1zero_samples_SampleNonProxy_clazz);
}
#endif


// Step 2: Forward declarations (methods).

JNI_BOUNDARY_EXPORT jlong Java_org_jni_1zero_samples_SampleNonProxy_nativeAddBookmark(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jstring title,
    jboolean isFolder,
    jlong parentId);
JNI_BOUNDARY_EXPORT jlong Java_org_jni_1zero_samples_SampleNonProxy_nativeAddBookmarkFromAPI(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jobject created,
    jobject isBookmark,
    jobject date,
    jbyteArray favicon,
    jstring title,
    jobject visits);
JNI_BOUNDARY_EXPORT void
    Java_org_jni_1zero_samples_SampleNonProxy_nativeCreateHistoricalTabFromState(
    JNIEnv* env,
    jclass jcaller,
    jbyteArray state,
    jint tabIndex);
JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_samples_SampleNonProxy_nativeDestroy(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider);
JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_samples_SampleNonProxy_nativeFindAll(
    JNIEnv* env,
    jobject jcaller,
    jstring find);
JNI_BOUNDARY_EXPORT jobjectArray
    Java_org_jni_1zero_samples_SampleNonProxy_nativeGetAutofillProfileGUIDs(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jstring Java_org_jni_1zero_samples_SampleNonProxy_nativeGetDomainAndRegistry(
    JNIEnv* env,
    jclass jcaller,
    jstring url);
JNI_BOUNDARY_EXPORT jobject Java_org_jni_1zero_samples_SampleNonProxy_nativeGetInnerClass(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jbyteArray Java_org_jni_1zero_samples_SampleNonProxy_nativeGetStateAsByteArray(
    JNIEnv* env,
    jobject jcaller,
    jobject view);
JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_samples_SampleNonProxy_nativeGotOrientation(
    JNIEnv* env,
    jobject jcaller,
    jint nativeDataFetcherImplAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma);
JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_samples_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller);
JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_samples_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller);
JNI_BOUNDARY_EXPORT jthrowable
    Java_org_jni_1zero_samples_SampleNonProxy_nativeMessWithJavaException(
    JNIEnv* env,
    jclass jcaller,
    jthrowable e);
JNI_BOUNDARY_EXPORT jobject Java_org_jni_1zero_samples_SampleNonProxy_nativeQueryBitmap(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jobjectArray projection,
    jstring selection,
    jobjectArray selectionArgs,
    jstring sortOrder);
JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_samples_SampleNonProxy_nativeSetRecognitionResults(
    JNIEnv* env,
    jobject jcaller,
    jint sessionId,
    jobjectArray results);


// Step 3: Method declarations.

static const JNINativeMethod kMethods_org_jni_1zero_samples_SampleNonProxy[] = {
    { "nativeAddBookmark", "(ILjava/lang/String;Ljava/lang/String;ZJ)J",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeAddBookmark) },
    { "nativeAddBookmarkFromAPI",
        "(ILjava/lang/String;Ljava/lang/Long;Ljava/lang/Boolean;Ljava/lang/Long;[BLjava/lang/String;Ljava/lang/Integer;)J",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeAddBookmarkFromAPI)
        },
    { "nativeCreateHistoricalTabFromState", "([BI)V",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeCreateHistoricalTabFromState)
        },
    { "nativeDestroy", "(I)V",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeDestroy) },
    { "nativeFindAll", "(Ljava/lang/String;)I",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeFindAll) },
    { "nativeGetAutofillProfileGUIDs", "()[Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeGetAutofillProfileGUIDs)
        },
    { "nativeGetDomainAndRegistry", "(Ljava/lang/String;)Ljava/lang/String;",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeGetDomainAndRegistry)
        },
    { "nativeGetInnerClass", "()Lorg/jni_zero/samples/SampleNonProxy$OnFrameAvailableListener;",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeGetInnerClass) },
    { "nativeGetStateAsByteArray", "(Landroid/view/View;)[B",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeGetStateAsByteArray)
        },
    { "nativeGotOrientation", "(IDDD)V",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeGotOrientation) },
    { "nativeInit", "()I",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeInit) },
    { "nativeInit", "()I",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeInit) },
    { "nativeMessWithJavaException", "(Ljava/lang/Throwable;)Ljava/lang/Throwable;",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeMessWithJavaException)
        },
    { "nativeQueryBitmap",
        "(I[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/graphics/Bitmap;",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeQueryBitmap) },
    { "nativeSetRecognitionResults", "(I[Ljava/lang/String;)V",
        reinterpret_cast<void*>(Java_org_jni_1zero_samples_SampleNonProxy_nativeSetRecognitionResults)
        },
};


JNI_ZERO_COMPONENT_BUILD_EXPORT bool RegisterNative_org_jni_1zero_samples_SampleNonProxy(JNIEnv*
    env) {
  const int kMethods_org_jni_1zero_samples_SampleNonProxySize =
      std::size(kMethods_org_jni_1zero_samples_SampleNonProxy);
  if (env->RegisterNatives(
      org_jni_1zero_samples_SampleNonProxy_clazz(env),
      kMethods_org_jni_1zero_samples_SampleNonProxy,
      kMethods_org_jni_1zero_samples_SampleNonProxySize) < 0) {
    jni_generator::HandleRegistrationError(env,
        org_jni_1zero_samples_SampleNonProxy_clazz(env),
        __FILE__);
    return false;
  }

  return true;
}


// Step 4: Registration function.

namespace  {

bool RegisterNatives(JNIEnv* env) {
  if (!RegisterNative_org_jni_1zero_samples_SampleNonProxy(env))
    return false;

  return true;
}

}  // namespace 

#endif  // TEMP_DIR_HEADER_
