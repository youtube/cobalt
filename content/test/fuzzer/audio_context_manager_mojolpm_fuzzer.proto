// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Message format for the MojoLPM fuzzer for the AudioContextManager interface.

syntax = "proto2";

package content.fuzzing.audio_context_manager.proto;

import "third_party/blink/public/mojom/webaudio/audio_context_manager.mojom.mojolpm.proto";

// Bind a new AudioContextManager remote
message NewAudioContextManagerAction {
  required uint32 id = 1;
}

// Run the specific sequence for (an indeterminate) period. This is not
// intended to create a specific ordering, but to allow the fuzzer to delay a
// later task until previous tasks have completed.
message RunThreadAction {
  enum ThreadId {
    IO = 0;
    UI = 1;
  }

  required ThreadId id = 1;
}

// Actions that can be performed by the fuzzer.
message Action {
  oneof action {
    NewAudioContextManagerAction new_audio_context_manager = 1;
    RunThreadAction run_thread = 2;
    mojolpm.blink.mojom.AudioContextManager.RemoteAction
        audio_context_manager_remote_action = 3;
  }
}

// Sequence provides a level of indirection which allows Testcase to compactly
// express repeated sequences of actions.
message Sequence {
  repeated uint32 action_indexes = 1 [packed = true];
}

// Testcase is the top-level message type interpreted by the fuzzer.
message Testcase {
  repeated Action actions = 1;
  repeated Sequence sequences = 2;
  repeated uint32 sequence_indexes = 3 [packed = true];
}
