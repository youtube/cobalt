# Copyright 2025 The Cobalt Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//tools/v8_context_snapshot/v8_context_snapshot.gni")

template("loader_final_target") {
  original_target_name = target_name
  if (current_toolchain == default_toolchain) {
    group("${original_target_name}_loader") {
      forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)
      data_deps = [ ":${original_target_name}_copy" ]
      write_runtime_deps = "$root_build_dir/${target_name}.runtime_deps"
    }

    shared_library(original_target_name) {
      forward_variables_from(invoker, "*")
    }

    # TODO: b/421951995 - Use original loader target instead of copy target.
    copy("${original_target_name}_copy") {
      forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)

      loader_target_output = "${original_target_name}_loader"
      loader_target = ":${loader_target_output}($starboard_toolchain)"
      starboard_toolchain_out_dir =
          get_label_info(loader_target, "root_out_dir")

      sources = [ "${starboard_toolchain_out_dir}/${loader_target_output}" ]
      outputs = [ "${root_out_dir}/${loader_target_output}" ]

      deps = [ loader_target ]
      data_deps = deps  # Needed for .runtime_deps file.
    }
  } else if (current_toolchain == starboard_toolchain) {
    not_needed(invoker, "*", TESTONLY_AND_VISIBILITY)
    executable("${original_target_name}_loader") {
      forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)

      sources = [ "//$starboard_path/starboard_loader.cc" ]
      if (use_asan) {
        sources += [ "//$starboard_path/sanitizer_options.cc" ]
      }

      configs += [ "//starboard/build/config:starboard_implementation" ]
      defines = [ "SB_LOADER_MODULE=\"$original_target_name\"" ]
      ldflags = [
        "-Wl,-rpath=" + rebase_path("$root_out_dir"),
        "-Wl,-rpath=" + rebase_path("$root_build_dir"),
      ]

      deps = [
        ":${original_target_name}($default_toolchain)",
        "//starboard:starboard_group",
      ]
    }
  }
}

set_defaults("modular_executable") {
  configs = default_shared_library_configs
  configs -= [ "//build/config/compiler:no_unresolved_symbols" ]
}

template("evergreen_final_target") {
  original_target_name = target_name
  group("${original_target_name}_loader") {
    forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)
    deps = [
      ":${original_target_name}_content",
      ":${original_target_name}_lib",
    ]
  }

  copy("${original_target_name}_content") {
    forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)
    sources = [
      "$root_out_dir/content_shell.pak",
      "$root_out_dir/icudtl.dat",
    ]
    outputs = [
      "$root_out_dir/app/${original_target_name}/content/{{source_file_part}}",
    ]
    deps = [
      "//content/shell:pak",
      "//third_party/icu:icudata",
    ]
    if (use_v8_context_snapshot) {
      sources += [ "$root_out_dir/$v8_context_snapshot_filename" ]
      deps += [ "//tools/v8_context_snapshot" ]
    }
  }

  copy("${original_target_name}_lib") {
    forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)

    test_lib_name = string_replace(original_target_name, "lib", "", 1)
    if (original_target_name == "lib${test_lib_name}" ||
        (defined(invoker.output_prefix_override) &&
         invoker.output_prefix_override)) {
      lib_name = original_target_name
    } else {
      lib_name = "lib${original_target_name}"
    }

    sources = [ "$root_out_dir/${lib_name}.so" ]
    outputs = [ "$root_out_dir/app/${original_target_name}/lib/${lib_name}.so" ]
    deps = [ ":${original_target_name}" ]
  }

  shared_library(original_target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(data_deps)) {
      data_deps = []
    }
    data_deps +=
        [ "//starboard/loader_app:loader_assets($starboard_toolchain)" ]
    write_runtime_deps = "$root_build_dir/${original_target_name}.runtime_deps"
  }
}

set_defaults("evergreen_final_target") {
  configs = default_shared_library_configs
  configs -= [ "//build/config/compiler:no_unresolved_symbols" ]
}

template("modular_executable") {
  if (sb_is_evergreen) {
    target_type = "evergreen_final_target"
  } else {
    target_type = "loader_final_target"
  }
  target(target_type, target_name) {
    forward_variables_from(invoker, "*")
  }
}
