--- base/test/test_suite.cc
+++ base/test/test_suite.cc
@@ -742,281 +742,4 @@
   listeners.Append(printer_);
 }
 
-<<<<<<< HEAD
-=======
-// Don't add additional code to this method.  Instead add it to
-// Initialize().  See bug 6436.
-int TestSuite::Run() {
-#if BUILDFLAG(IS_APPLE)
-  mac::ScopedNSAutoreleasePool scoped_pool;
-#endif
-
-  std::string client_func =
-      CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
-          switches::kTestChildProcess);
-
-#if BUILDFLAG(IS_FUCHSIA)
-  // Cache the system info so individual tests do not need to worry about it.
-  // Some ProcessUtilTest cases, which use kTestChildProcess, do not pass any
-  // services, so skip this if that switch was present.
-  // This must be called before Initialize() because, for example,
-  // content::ContentTestSuite::Initialize() may use the cached values.
-  if (client_func.empty())
-    CHECK(FetchAndCacheSystemInfo());
-#endif
-
-  Initialize();
-
-  // Check to see if we are being run as a client process.
-  if (!client_func.empty())
-    return multi_process_function_list::InvokeChildProcessTest(client_func);
-
-#if BUILDFLAG(IS_IOS)
-  test_listener_ios::RegisterTestEndListener();
-#endif
-
-#if BUILDFLAG(IS_LINUX)
-  // There's no standard way to opt processes into MTE on Linux just yet,
-  // so this call explicitly opts this test into synchronous MTE mode, where
-  // pointer mismatches are detected immediately.
-  ::partition_alloc::ChangeMemoryTaggingModeForCurrentThread(
-      ::partition_alloc::TagViolationReportingMode::kSynchronous);
-#elif BUILDFLAG(IS_ANDROID)
-    // On Android, the tests are opted into synchronous MTE mode by the
-    // memtagMode attribute in an AndroidManifest.xml file or via an `am compat`
-    // command, so and explicit call to ChangeMemoryTaggingModeForCurrentThread
-    // is not needed.
-#endif
-
-  int result = RUN_ALL_TESTS();
-
-#if BUILDFLAG(IS_APPLE)
-  // This MUST happen before Shutdown() since Shutdown() tears down
-  // objects (such as NotificationService::current()) that Cocoa
-  // objects use to remove themselves as observers.
-  scoped_pool.Recycle();
-#endif
-
-  Shutdown();
-
-  return result;
-}
-
-void TestSuite::DisableCheckForLeakedGlobals() {
-  DCHECK(!is_initialized_);
-  check_for_leaked_globals_ = false;
-}
-
-void TestSuite::DisableCheckForThreadAndProcessPriority() {
-  DCHECK(!is_initialized_);
-  check_for_thread_and_process_priority_ = false;
-}
-
-void TestSuite::UnitTestAssertHandler(const char* file,
-                                      int line,
-                                      const StringPiece summary,
-                                      const StringPiece stack_trace) {
-#if BUILDFLAG(IS_ANDROID)
-  // Correlating test stdio with logcat can be difficult, so we emit this
-  // helpful little hint about what was running.  Only do this for Android
-  // because other platforms don't separate out the relevant logs in the same
-  // way.
-  const ::testing::TestInfo* const test_info =
-      ::testing::UnitTest::GetInstance()->current_test_info();
-  if (test_info) {
-    LOG(ERROR) << "Currently running: " << test_info->test_case_name() << "."
-               << test_info->name();
-    fflush(stderr);
-  }
-#endif  // BUILDFLAG(IS_ANDROID)
-
-  // XmlUnitTestResultPrinter inherits gtest format, where assert has summary
-  // and message. In GTest, summary is just a logged text, and message is a
-  // logged text, concatenated with stack trace of assert.
-  // Concatenate summary and stack_trace here, to pass it as a message.
-  if (printer_) {
-    const std::string summary_str(summary);
-    const std::string stack_trace_str = summary_str + std::string(stack_trace);
-    printer_->OnAssert(file, line, summary_str, stack_trace_str);
-  }
-
-  // The logging system actually prints the message before calling the assert
-  // handler. Just exit now to avoid printing too many stack traces.
-  _exit(1);
-}
-
-#if BUILDFLAG(IS_WIN)
-namespace {
-
-// Handlers for invalid parameter, pure call, and abort. They generate a
-// breakpoint to ensure that we get a call stack on these failures.
-// These functions should be written to be unique in order to avoid confusing
-// call stacks from /OPT:ICF function folding. Printing a unique message or
-// returning a unique value will do this. Note that for best results they need
-// to be unique from *all* functions in Chrome.
-void InvalidParameter(const wchar_t* expression,
-                      const wchar_t* function,
-                      const wchar_t* file,
-                      unsigned int line,
-                      uintptr_t reserved) {
-  // CRT printed message is sufficient.
-  __debugbreak();
-  _exit(1);
-}
-
-void PureCall() {
-  fprintf(stderr, "Pure-virtual function call. Terminating.\n");
-  __debugbreak();
-  _exit(1);
-}
-
-void AbortHandler(int signal) {
-  // Print EOL after the CRT abort message.
-  fprintf(stderr, "\n");
-  __debugbreak();
-}
-
-}  // namespace
-#endif
-
-void TestSuite::SuppressErrorDialogs() {
-#if BUILDFLAG(IS_WIN)
-  UINT new_flags =
-      SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX;
-
-  // Preserve existing error mode, as discussed at
-  // http://blogs.msdn.com/oldnewthing/archive/2004/07/27/198410.aspx
-  UINT existing_flags = SetErrorMode(new_flags);
-  SetErrorMode(existing_flags | new_flags);
-
-#if defined(_DEBUG)
-  // Suppress the "Debug Assertion Failed" dialog.
-  // TODO(hbono): remove this code when gtest has it.
-  // http://groups.google.com/d/topic/googletestframework/OjuwNlXy5ac/discussion
-  _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
-  _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
-  _CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);
-  _CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
-#endif  // defined(_DEBUG)
-
-  // See crbug.com/783040 for test code to trigger all of these failures.
-  _set_invalid_parameter_handler(InvalidParameter);
-  _set_purecall_handler(PureCall);
-  signal(SIGABRT, AbortHandler);
-#endif  // BUILDFLAG(IS_WIN)
-}
-
-void TestSuite::Initialize() {
-  DCHECK(!is_initialized_);
-
-  // The AsanService causes ASAN errors to emit additional information. It is
-  // helpful on its own. It is also required by ASAN BackupRefPtr when
-  // reconfiguring PartitionAlloc below.
-#if defined(ADDRESS_SANITIZER)
-  base::debug::AsanService::GetInstance()->Initialize();
-#endif
-
-  // TODO(https://crbug.com/1400058): Enable BackupRefPtr in unittests on
-  // Android too. Same for ASAN.
-  // TODO(https://crbug.com/1413674): Enable PartitionAlloc in unittests with
-  // ASAN.
-#if BUILDFLAG(USE_PARTITION_ALLOC) && !defined(ADDRESS_SANITIZER)
-  allocator::PartitionAllocSupport::Get()->ReconfigureForTests();
-#endif  // BUILDFLAG(IS_WIN)
-
-  test::ScopedRunLoopTimeout::SetAddGTestFailureOnTimeout();
-
-  const CommandLine* command_line = CommandLine::ForCurrentProcess();
-#if !BUILDFLAG(IS_IOS)
-  if (command_line->HasSwitch(switches::kWaitForDebugger)) {
-    debug::WaitForDebugger(60, true);
-  }
-#endif
-
-#if BUILDFLAG(DCHECK_IS_CONFIGURABLE)
-  // Default the configurable DCHECK level to FATAL when running death tests'
-  // child process, so that they behave as expected.
-  // TODO(crbug.com/1057995): Remove this in favor of the codepath in
-  // FeatureList::SetInstance() when/if OnTestStart() TestEventListeners
-  // are fixed to be invoked in the child process as expected.
-  if (command_line->HasSwitch("gtest_internal_run_death_test"))
-    logging::LOGGING_DCHECK = logging::LOG_FATAL;
-#endif  // BUILDFLAG(DCHECK_IS_CONFIGURABLE)
-
-#if BUILDFLAG(IS_IOS)
-  InitIOSTestMessageLoop();
-#endif  // BUILDFLAG(IS_IOS)
-
-#if BUILDFLAG(IS_ANDROID)
-  InitAndroidTestMessageLoop();
-#endif  // else BUILDFLAG(IS_ANDROID)
-
-#if BUILDFLAG(IS_STARBOARD)
-  InitStarboardTestMessageLoop();
-#endif
-
-  CHECK(debug::EnableInProcessStackDumping());
-#if BUILDFLAG(IS_WIN)
-  RouteStdioToConsole(true);
-  // Make sure we run with high resolution timer to minimize differences
-  // between production code and test code.
-  Time::EnableHighResolutionTimer(true);
-#endif  // BUILDFLAG(IS_WIN)
-
-  // In some cases, we do not want to see standard error dialogs.
-  if (!debug::BeingDebugged() &&
-      !command_line->HasSwitch("show-error-dialogs")) {
-    SuppressErrorDialogs();
-    debug::SetSuppressDebugUI(true);
-    assert_handler_ = std::make_unique<logging::ScopedLogAssertHandler>(
-        BindRepeating(&TestSuite::UnitTestAssertHandler, Unretained(this)));
-  }
-
-  test::InitializeICUForTesting();
-
-  // A number of tests only work if the locale is en_US. This can be an issue
-  // on all platforms. To fix this we force the default locale to en_US. This
-  // does not affect tests that explicitly overrides the locale for testing.
-  // TODO(jshin): Should we set the locale via an OS X locale API here?
-  i18n::SetICUDefaultLocale("en_US");
-
-#if BUILDFLAG(IS_LINUX) && !BUILDFLAG(IS_COBALT_HERMETIC_BUILD) || BUILDFLAG(IS_CHROMEOS)
-  test_fonts::SetUpFontconfig();
-#endif
-
-  // Add TestEventListeners to enforce certain properties across tests.
-  testing::TestEventListeners& listeners =
-      testing::UnitTest::GetInstance()->listeners();
-  listeners.Append(new DisableMaybeTests);
-  listeners.Append(new ResetCommandLineBetweenTests);
-  listeners.Append(new FeatureListScopedToEachTest);
-  if (check_for_leaked_globals_)
-    listeners.Append(new CheckForLeakedGlobals);
-  if (check_for_thread_and_process_priority_) {
-#if !BUILDFLAG(IS_APPLE) && !BUILDFLAG(IS_COBALT_HERMETIC_BUILD)
-    listeners.Append(new CheckProcessPriority);
-#endif
-  }
-
-  AddTestLauncherResultPrinter();
-
-  TestTimeouts::Initialize();
-
-#if BUILDFLAG(ENABLE_BASE_TRACING)
-  trace_to_file_.BeginTracingFromCommandLineOptions();
-#endif  // BUILDFLAG(ENABLE_BASE_TRACING)
-
-  debug::StartProfiling(GetProfileName());
-
-  debug::VerifyDebugger();
-
-  is_initialized_ = true;
-}
-
-void TestSuite::Shutdown() {
-  DCHECK(is_initialized_);
-  debug::StopProfiling();
-}
-
->>>>>>> 632b3464a30 (Feature/fonts (#7049))
 }  // namespace base
