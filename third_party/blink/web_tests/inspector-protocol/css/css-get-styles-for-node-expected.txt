The test verifies functionality of protocol method CSS.getMatchedStylesForNode and CSS.getInlineStylesForNode.
{
    error : {
        code : -32000
        message : Node is not an Element
    }
    id : <number>
    sessionId : <string>
}
{
    error : {
        code : -32000
        message : Node is not an Element
    }
    id : <number>
    sessionId : <string>
}
Dumping inline style: 
{
    padding-top: 55px; @[0:0-0:18]
    margin-top: 33px !important; @[0:19-0:47]
    padding-top: 55px; @[undefined-undefined]
    margin-top: 33px !important; @[undefined-undefined]
}
Dumping matched rules: 
@layer base
    *#inspected* {    regular
        background-color: blue; @[38:8-38:31]
        background-color: blue; @[undefined-undefined]
    }
*#inspected* {    regular
    margin-left: 10px !important; @[1:4-1:33]
    margin-left: 10px !important; @[undefined-undefined]
}
*#inspected* {    regular
    padding: 10px 20px 30px 40px; @[6:4-6:33]
    padding-top: 50px; @[7:4-7:22]
    padding-right: 20px; @[undefined-undefined]
    padding-bottom: 30px; @[undefined-undefined]
    padding-left: 40px; @[undefined-undefined]
    padding-top: 50px; @[undefined-undefined]
}
@media (min-width: 1px)
    *#inspected* {    regular
        padding-left: 5px; @[12:8-12:26]
        margin-left: 20px; @[13:8-13:26]
        padding-left: 10px; @[14:8-14:27]
        margin-top: 15px !important; @[15:8-15:36]
        margin-left: 20px; @[undefined-undefined]
        padding-left: 10px; @[undefined-undefined]
        margin-top: 15px !important; @[undefined-undefined]
    }
@container (min-width: 50px)
    *#inspected* {    regular
        padding-right: 10px; @[26:8-26:28]
        padding-right: 10px; @[undefined-undefined]
    }
@supports (display: grid) or (display: inline-grid)
    *#inspected* {    regular
        display: grid; @[32:8-32:22]
        display: grid; @[undefined-undefined]
    }
@scope (html)
    *#inspected* {    regular
        color: red; @[50:8-50:19]
        color: red; @[undefined-undefined]
    }
@scope (html) to (.child-div)
    *#inspected* {    regular
        color: lightcyan; @[56:6-56:23]
        color: lightcyan; @[undefined-undefined]
    }
Dumping inherited rules: 
    padding-top: 20px; @[0:0-0:18]
    padding-top: 20px; @[undefined-undefined]
*#parent-div* {    regular
    width: 100px; @[20:4-20:17]
    container-type: size; @[21:4-21:25]
    width: 100px; @[undefined-undefined]
    container-type: size; @[undefined-undefined]
}
@layer base.nested
    *body* {    regular
        background-color: green; @[42:12-42:36]
        background-color: green; @[undefined-undefined]
    }
checking parsed longhand components from shorthand properties
[
    [0] : {
        name : margin-top
        value : 0px
    }
    [1] : {
        name : margin-right
        value : 0px
    }
    [2] : {
        name : margin-bottom
        value : 0px
    }
    [3] : {
        name : margin-left
        value : 0px
    }
]
[
    [0] : {
        name : border-top-width
        value : 1px
    }
    [1] : {
        name : border-right-width
        value : 1px
    }
    [2] : {
        name : border-bottom-width
        value : 1px
    }
    [3] : {
        name : border-left-width
        value : 1px
    }
    [4] : {
        name : border-top-style
        value : solid
    }
    [5] : {
        name : border-right-style
        value : solid
    }
    [6] : {
        name : border-bottom-style
        value : solid
    }
    [7] : {
        name : border-left-style
        value : solid
    }
    [8] : {
        name : border-top-color
        value : black
    }
    [9] : {
        name : border-right-color
        value : black
    }
    [10] : {
        name : border-bottom-color
        value : black
    }
    [11] : {
        name : border-left-color
        value : black
    }
    [12] : {
        name : border-image-source
        value : initial
    }
    [13] : {
        name : border-image-slice
        value : initial
    }
    [14] : {
        name : border-image-width
        value : initial
    }
    [15] : {
        name : border-image-outset
        value : initial
    }
    [16] : {
        name : border-image-repeat
        value : initial
    }
]
[
    [0] : {
        important : true
        name : flex-grow
        value : 1 !important
    }
    [1] : {
        important : true
        name : flex-shrink
        value : 1 !important
    }
    [2] : {
        important : true
        name : flex-basis
        value : 0% !important
    }
]

