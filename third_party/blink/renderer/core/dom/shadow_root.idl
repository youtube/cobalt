/*
 * Copyright (C) 2012 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://dom.spec.whatwg.org/#interface-shadowroot

[Exposed=Window]
interface ShadowRoot : DocumentFragment {
    readonly attribute ShadowRootMode mode;
    readonly attribute Element host;
    attribute EventHandler onslotchange;
    // TODO(lyf): Change the type to `[TreatNullAs=xxx] HTMLString` after
    // https://crbug.com/1058762 has been fixed.
    [CEReactions, RaisesException=Setter] attribute [LegacyNullToEmptyString, StringContext=TrustedHTML] DOMString innerHTML;
    readonly attribute boolean delegatesFocus;
    readonly attribute SlotAssignmentMode slotAssignment;

    [RuntimeEnabled=ScopedCustomElementRegistry]
    readonly attribute CustomElementRegistry? registry;

    // Declarative Shadow DOM getInnerHTML() function. This version should be
    // considered deprecated, as we work to standardize the version below,
    // getHTML().
    [Affects=Nothing, MeasureAs=ElementGetInnerHTML, RuntimeEnabled=ElementGetInnerHTML] HTMLString getInnerHTML(optional GetInnerHTMLOptions options = {});

    // Declarative Shadow DOM getHTML() function.
    [Affects=Nothing, MeasureAs=ElementGetHTML, RaisesException] HTMLString getHTML(optional GetHTMLOptions options = {});

    // The serializable attribute controls whether the shadow root will be
    // serialized by getHTML({serializableShadowRoots:true}).
    readonly attribute boolean serializable;

    // The clonable attribute controls whether the shadow root will be
    // cloned by DOM cloning operations.
    readonly attribute boolean clonable;

    // The referenceTarget attribute is the ID of an element in the shadow tree.
    // When the host element is the target of an IDREF attribute like
    // aria-activedescendant, the reference resolves to the referenceTarget.
    // See https://crbug.com/346835896
    [RuntimeEnabled=ShadowRootReferenceTarget] attribute DOMString referenceTarget;

    // Scoped element creation APIs
    // https://wicg.github.io/webcomponents/proposals/Scoped-Custom-Element-Registries#scoped-element-creation-apis
    [
      NewObject, PerWorldBindings, RaisesException, CEReactions,
      RuntimeEnabled=ScopedCustomElementRegistry,
      ImplementedAs=CreateElementForBinding
    ]
    Element createElement(DOMString localName);
    [
      NewObject, PerWorldBindings, RaisesException, CEReactions,
      RuntimeEnabled=ScopedCustomElementRegistry,
      ImplementedAs=CreateElementForBinding
    ]
    Element createElement(DOMString localName, (DOMString or ElementCreationOptions) options);
    [
      NewObject, RaisesException, CEReactions,
      RuntimeEnabled=ScopedCustomElementRegistry
    ]
    Element createElementNS(DOMString? namespaceURI, DOMString qualifiedName);
    [
      NewObject, RaisesException, CEReactions,
      RuntimeEnabled=ScopedCustomElementRegistry
    ]
    Element createElementNS(DOMString? namespaceURI, DOMString qualifiedName,
                            (DOMString or ElementCreationOptions) options);

    [RaisesException,MeasureAs=SetHTMLUnsafe,CEReactions] void setHTMLUnsafe(HTMLString string);
    [RuntimeEnabled=SanitizerAPI,RaisesException,MeasureAs=SetHTMLUnsafe,CEReactions] void setHTMLUnsafe(HTMLString html, SetHTMLOptions options);
    [RuntimeEnabled=SanitizerAPI,RaisesException,MeasureAs=SetHTMLSafe,CEReactions] void setHTML(DOMString html, optional SetHTMLOptions options = {});

};

ShadowRoot includes DocumentOrShadowRoot;
