# Reusable Cobalt CI workflow.

name: main

on:
  workflow_call:
    inputs:
      platform:
        description: 'Cobalt platform.'
        required: true
        type: string
      nightly:
        description: 'Nightly workflow.'
        required: true
        type: string
        default: 'false'

# Global env vars.
env:
  REGISTRY: ghcr.io
  IPV6_AVAILABLE: 0
  LANG: en_US.UTF-8
  IS_BUILDBOT_DOCKER: 1
  #BUILD_ID_SERVER_URL:
  IS_CI: 1
  IS_DOCKER: 1
  NINJA_STATUS: '[%e sec | %f/%t %u remaining | %c/sec | j%r]'
  STARBOARD_TOOLCHAINS_DIR: /root/starboard-toolchains
  CCACHE_COMPILERCHECK: content
  CCACHE_DIR: /root/ccache
  CCACHE_MAXSIZE: 10G

concurrency:
  group: '${{ github.workflow }}-${{ inputs.platform }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.sha }}'
  cancel-in-progress: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Retrieves configuration from json file.
  initialize:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PR_REPO_URL: ${{ github.event.pull_request.base.repo.url }}
      GITHUB_EVENT_NUMBER: ${{ github.event.number }}
    # All triggers except draft PRs, unless PR is labeled with runtest
    if: |
      github.event_name != 'pull_request' ||
      (
        github.event.pull_request.draft == false ||
        (
          github.event.action == 'labeled' &&
          github.event.label.name == 'runtest'
        )
      )
    steps:
      - id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Remove runtest if exists
        if: github.event_name == 'pull_request'
        continue-on-error: true  # Ignore this step if we cannot remove the label.
        run: |
          set +e
          curl \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            ${GITHUB_PR_REPO_URL}/issues/${GITHUB_EVENT_NUMBER}/labels/runtest
        shell: bash
      - id: set-platforms
        run: echo "platforms=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.platforms')" >> $GITHUB_ENV
      - id: set-includes
        run: echo "includes=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.includes')" >> $GITHUB_ENV
      - id: set-on-device-test
        run: echo "on_device_test=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.on_device_test.enabled')" >> $GITHUB_ENV
      - id: set-on-device-test-tests
        run: echo "on_device_test_tests=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.on_device_test.tests')" >> $GITHUB_ENV
      - id: set-on-host-test
        run: echo "on_host_test=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.on_host_test')" >> $GITHUB_ENV
      - id: set-on-host-test-shards
        run: echo "on_host_test_shards=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.on_host_test_shards')" >> $GITHUB_ENV
      - id: set-on-host-test-bootloader
        run: echo "bootloader=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.bootloader')" >> $GITHUB_ENV
      - id: set-docker-service
        run: |
          echo "docker_service=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -r '.docker_service')" >> $GITHUB_ENV
          echo $platforms
    outputs:
      platforms: ${{ env.platforms }}
      includes: ${{ env.includes }}
      on_device_test: ${{ env.on_device_test }}
      on_device_test_tests: ${{ env.on_device_test_tests }}
      on_host_test: ${{ env.on_host_test }}
      on_host_test_shards: ${{ env.on_host_test_shards }}
      bootloader: ${{ env.bootloader }}
      docker_service: ${{ env.docker_service }}

  # Builds, tags, and pushes Cobalt docker build images to ghr.
  docker-build-image:
    needs: [initialize]
    runs-on: [self-hosted, linux, X64]
    permissions:
      packages: write
    steps:
      - name: Checkout files
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Login to Docker Registry ${{env.REGISTRY}}
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build docker image
        id: build-docker-image
        uses: ./.github/actions/docker
        with:
          docker_service: ${{ needs.initialize.outputs.docker_service }}
          docker_image: cobalt-${{ needs.initialize.outputs.docker_service }}
      - name: Set Docker Tag Output
        id: set-docker-tag-output
        run: |
          echo $DOCKER_TAG
          echo "docker_tag=$DOCKER_TAG"  >> $GITHUB_ENV
    outputs:
      docker_tag: ${{env.docker_tag}}

  # Builds, tags, and pushes Cobalt unit test image to ghr.
  docker-unittest-image:
    if: needs.initialize.outputs.on_host_test == 'true'
    needs: [initialize]
    permissions:
      packages: write
    runs-on: [self-hosted, linux, X64]
    steps:
      - name: Checkout files
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Login to Docker Registry ${{env.REGISTRY}}
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build docker image
        id: build-docker-image
        uses: ./.github/actions/docker
        with:
          docker_service: unittest
          docker_image: cobalt-unittest
      - name: Set Docker Tag Output
        id: set-docker-unittest-tag-output
        run: |
          echo $DOCKER_TAG
          echo "docker_unittest_tag=$DOCKER_TAG" >> $GITHUB_ENV
    outputs:
      docker_unittest_tag: ${{env.docker_unittest_tag}}

  # Runs on-host integration and unit tests.
  on-device-test:
    needs: [initialize, build]
    if: |  # Always run if not a PR or if the PR has on_device label
      needs.initialize.outputs.on_device_test == 'true' && (
        github.event_name != 'pull_request' ||
        contains(github.event.pull_request.labels.*.name, 'on_device')
      )
    runs-on: [self-hosted, linux, X64]
    name: ${{ matrix.name }}_on_device_${{ matrix.type }}
    container: ${{ needs.docker-unittest-image.outputs.docker_unittest_tag }}
    permissions: {}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        config: [devel]
        type: ${{ fromJson(needs.initialize.outputs.on_device_test_tests) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install requirements
        run: |
          pip3 install grpcio==1.37.0 grpcio-tools==1.38.0
        shell: bash
      - name: Generate gRPC files
        run: |
          python -m grpc_tools.protoc -Itools/ --python_out=tools/ --grpc_python_out=tools/ tools/on_device_tests_gateway.proto
        shell: bash
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
      - name: Set env vars
        run: |
          echo "PROJECT_NAME=$(gcloud config get-value project)" >> $GITHUB_ENV
          echo "GITHUB_RUN_NUMBER=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "WORKFLOW=${{ github.workflow }}" >> $GITHUB_ENV
          if [ "${{ needs.initialize.outputs.bootloader }}" != "null" ]; then
            echo "LOADER_CONFIG=${{ matrix.config }}" >> $GITHUB_ENV
            echo "LOADER_PLATFORM=${{ matrix.bootloader_platform }}" >> $GITHUB_ENV
          fi
          if [ "${{ matrix.dimension }}" != "null" ]; then
            echo "DIMENSION=${{ matrix.dimension }}" >> $GITHUB_ENV
          fi
      - name: Trigger ${{ matrix.type }} tests on ${{ matrix.platform }} platform
        id: on_device_test
        run: |
          set -eux
          SESSION_ID=$(
            python3 tools/on_device_tests_gateway_client.py \
              --token ${{ github.token }} \
              --change_id "${{ github.sha }}" \
              trigger \
              --test_type ${{ matrix.type }} \
              --platform ${{ matrix.platform }} \
              --config ${{ matrix.config }} \
              --tag cobalt_github_${{ github.event_name }} \
              --builder_name github_${{ matrix.platform }}_tests \
              --build_number ${GITHUB_RUN_NUMBER} \
              --version '21.lts.1+' \
              ${LOADER_PLATFORM:+"--loader_config" "$LOADER_CONFIG"} \
              ${LOADER_PLATFORM:+"--loader_platform" "$LOADER_PLATFORM"} \
              ${DIMENSION:+"--dimension" "$DIMENSION"} \
              --archive_path gs://${PROJECT_NAME}-test-artifacts/${WORKFLOW}/${GITHUB_RUN_NUMBER}/${{ matrix.platform }}_${{ matrix.config }}/artifacts.tar \
              --label github \
              --label ${{ github.event_name }} \
              --label ${{ github.workflow }} \
              --label actor-${{ github.actor }} \
              --label actor_id-${{ github.actor_id }} \
              --label triggering_actor-${{ github.triggering_actor }} \
              --label sha-${{ github.sha }} \
              --label repository-${{ github.repository }} \
              --label author-${{ github.event.pull_request.head.user.login || github.event.commits[0].author.username }} \
              --label author_id-${{ github.event.pull_request.head.user.id || github.event.commits[0].author.email }}
          )
          echo "SESSION_ID=$SESSION_ID" >> $GITHUB_ENV
        shell: bash
      - name: Watch ${{ matrix.type }} tests on ${{ matrix.platform }} platform
        run: |
          python3 tools/on_device_tests_gateway_client.py \
            --token ${{ github.token }} \
            --change_id "${{ github.sha }}" \
            watch ${{ env.SESSION_ID }}

  # Runs builds.
  build:
    needs: [initialize, docker-build-image]
    runs-on: [self-hosted, linux, X64]
    permissions: {}
    name: ${{matrix.name}}_${{matrix.config}}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
        config: [devel, debug, qa, gold]
    container: ${{ needs.docker-build-image.outputs.docker_tag }}
    env:
      # We want temp folder to be on tmpfs which makes workloads faster.
      # However, dind container ends up having / folder mounted on overlay
      # filesystem, whereas /__w which contains Cobalt source code is on tmpfs.
      TMPDIR: /__w/_temp
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Use fetch depth of 0 to get full history for a valid build id.
          fetch-depth: 0
      - name: Build Cobalt
        uses: ./.github/actions/build
      - name: Upload On Host Test Artifacts
        if: ${{ matrix.config == 'devel' && needs.initialize.outputs.on_host_test == 'true' }}
        uses: ./.github/actions/upload_test_artifacts
        with:
          type: onhost
      # Build bootloader if neccessary.
      - name: Set bootloader config
        if: ${{ needs.initialize.outputs.bootloader != 'null' && matrix.config == 'devel' }}
        run: echo "COBALT_BOOTLOADER=${{needs.initialize.outputs.bootloader}}" >> $GITHUB_ENV
      - name: Build Bootloader
        if: ${{ needs.initialize.outputs.bootloader != 'null' && matrix.config == 'devel' }}
        uses: ./.github/actions/build
      - name: Upload Bootloader On Host Test Artifacts
        if: ${{ needs.initialize.outputs.bootloader != 'null' && matrix.config == 'devel' && needs.initialize.outputs.on_host_test == 'true' }}
        uses: ./.github/actions/upload_test_artifacts
        with:
          type: onhost
      - name: Upload Nightly Artifacts
        if: ${{ ( inputs.nightly == 'true' || github.event_name == 'schedule' ) && matrix.config != 'debug' }}
        uses: ./.github/actions/upload_nightly_artifacts
      - name: Upload On Device Test Artifacts
        if: ${{ matrix.config == 'devel' && needs.initialize.outputs.on_device_test == 'true' }}
        uses: ./.github/actions/upload_test_artifacts
        with:
          type: ondevice

  # Runs on-host integration and unit tests.
  on-host-test:
    needs: [initialize, docker-unittest-image, build]
    if: needs.initialize.outputs.on_host_test == 'true'
    runs-on: [self-hosted, linux, X64]
    permissions: {}
    name: ${{matrix.name}}_${{matrix.shard}}_test
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        shard: ${{ fromJson(needs.initialize.outputs.on_host_test_shards) }}
        config: [devel]
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
    container: ${{ needs.docker-unittest-image.outputs.docker_unittest_tag }}
    env:
      DISPLAY: :99
      # For some reason tests complaining about HOME set to /github/home
      # with permission denied error.
      HOME: /root
      COBALT_BOOTLOADER: ${{needs.initialize.outputs.bootloader}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Run Tests
        uses: ./.github/actions/on_host_test
