// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

package maldoca.pdf;

option optimize_for = LITE_RUNTIME;

import "maldoca/pdf_parser/proto/pdf_assets.proto";

// Adobe Javascript functions in ADOBE_$ObjectName_$Method format.
// This name format replaces '.' characters with '_'
// This is auto generated by maldoca/pdf_parser/build_adobe_methods.py
// NextId: 430
enum AdobeObjectMethods {
  UNKNOWN = 0;
  ALERTER_DISPATCH = 1;
  ALTERNATEPRESENTATION_START = 2;
  ALTERNATEPRESENTATION_STOP = 3;
  ANNOTATION_DESTROY = 4;
  ANNOTATION_GETPROPS = 5;
  ANNOTATION_GETSTATEINMODEL = 6;
  ANNOTATION_SETPROPS = 7;
  ANNOTATION_TRANSITIONTOSTATE = 8;
  ANNOTRICHMEDIA_CALLAS = 9;
  APP_ADDMENUITEM = 10;
  APP_ADDSUBMENU = 11;
  APP_ADDTOOLBUTTON = 12;
  APP_ALERT = 13;
  APP_BEEP = 14;
  APP_BEGINPRIV = 15;
  APP_BROWSEFORDOC = 16;
  APP_CLEARINTERVAL = 17;
  APP_CLEARTIMEOUT = 18;
  APP_ENDPRIV = 19;
  APP_EXECDIALOG = 20;
  APP_EXECMENUITEM = 21;
  APP_GETNTHPLUGINNAME = 22;
  APP_GETPATH = 23;
  APP_GOBACK = 24;
  APP_GOFORWARD = 25;
  APP_HIDEMENUITEM = 26;
  APP_HIDETOOLBARBUTTON = 27;
  APP_LAUNCHURL = 28;
  APP_LISTMENUITEMS = 29;
  APP_LISTTOOLBARBUTTONS = 30;
  APP_LOADPOLICYFILE = 31;
  APP_MAILGETADDRS = 32;
  APP_MAILMSG = 33;
  APP_NEWDOC = 34;
  APP_NEWCOLLECTION = 35;
  APP_NEWFDF = 36;
  APP_OPENDOC = 37;
  APP_OPENFDF = 38;
  APP_POPUPMENU = 39;
  APP_POPUPMENUEX = 40;
  APP_REMOVETOOLBUTTON = 41;
  APP_RESPONSE = 42;
  APP_SETINTERVAL = 43;
  APP_SETTIMEOUT = 44;
  APP_TRUSTEDFUNCTION = 45;
  APP_TRUSTPROPAGATORFUNCTION = 46;
  APP_MEDIA_ADDSTOCKEVENTS = 47;
  APP_MEDIA_ALERTFILENOTFOUND = 48;
  APP_MEDIA_ALERTSELECTFAILED = 49;
  APP_MEDIA_ARGSDWIM = 50;
  APP_MEDIA_CANPLAYORALERT = 51;
  APP_MEDIA_COMPUTEFLOATWINRECT = 52;
  APP_MEDIA_CONSTRAINRECTTOSCREEN = 53;
  APP_MEDIA_CREATEPLAYER = 54;
  APP_MEDIA_GETALTTEXTDATA = 55;
  APP_MEDIA_GETALTTEXTSETTINGS = 56;
  APP_MEDIA_GETANNOTSTOCKEVENTS = 57;
  APP_MEDIA_GETANNOTTRACEEVENTS = 58;
  APP_MEDIA_GETRENDITIONSETTINGS = 59;
  APP_MEDIA_GETURLDATA = 60;
  APP_MEDIA_GETURLSETTINGS = 61;
  APP_MEDIA_GETWINDOWBORDERSIZE = 62;
  APP_MEDIA_OPENPLAYER = 63;
  APP_MEDIA_REMOVESTOCKEVENTS = 64;
  APP_MEDIA_SMARTPLAYER = 65;
  BOOKMARK_CREATECHILD = 66;
  BOOKMARK_EXECUTE = 67;
  BOOKMARK_INSERTCHILD = 68;
  BOOKMARK_REMOVE = 69;
  BOOKMARK_SETACTION = 70;
  CATALOG_CREATECHILD = 71;
  CATALOG_EXECUTE = 72;
  CATALOG_INSERTCHILD = 73;
  CATALOG_REMOVE = 74;
  CATALOG_SETACTION = 75;
  CATALOG_GETINDEX = 76;
  COLLAB_ADDSTATEMODEL = 77;
  COLLAB_DOCUMENTTOSTREAM = 78;
  COLLAB_REMOVESTATEMODEL = 79;
  COLOR_CONVERT = 80;
  COLOR_EQUAL = 81;
  COLLECTION_ADDFIELD = 82;
  COLLECTION_GETFIELD = 83;
  COLLECTION_REMOVEFIELD = 84;
  CONSOLE_CLEAR = 85;
  CONSOLE_HIDE = 86;
  CONSOLE_PRINTLN = 87;
  CONSOLE_SHOW = 88;
  DBG_C = 89;
  DBG_CB = 90;
  DBG_Q = 91;
  DBG_SB = 92;
  DBG_SI = 93;
  DBG_SN = 94;
  DBG_SO = 95;
  DBG_SV = 96;
  DIRCONNECTION_SEARCH = 97;
  DIRCONNECTION_SETOUTPUTFIELDS = 98;
  DIRECTORY_CONNECT = 99;
  DOC_ADDANNOT = 100;
  DOC_ADDFIELD = 101;
  DOC_ADDICON = 102;
  DOC_ADDLINK = 103;
  DOC_ADDRECIPIENTLISTCRYPTFILTER = 104;
  DOC_ADDREQUIREMENT = 105;
  DOC_ADDSCRIPT = 106;
  DOC_ADDTHUMNAILS = 107;
  DOC_ADDWATERMARKFROMFILE = 108;
  DOC_ADDWATERMARKFROMTEXT = 109;
  DOC_ADDWEBLINKS = 110;
  DOC_APPLYREDACTIONS = 111;
  DOC_BRINGTOFRONT = 112;
  DOC_CALCULATENOW = 113;
  DOC_CERTIFYINVISIBLESIGN = 114;
  DOC_CLOSEDOC = 115;
  DOC_COLORCONVERTPAGE = 116;
  DOC_CREATEDATAOBJECT = 117;
  DOC_DELETEPAGES = 118;
  DOC_DELETESOUND = 119;
  DOC_EMBEDDOCASDATAOBJECT = 120;
  DOC_EMDEDOUTPUTINTENT = 121;
  DOC_ENCRYPTFORRECIPIENT = 122;
  DOC_ENCRYPTUSINGPOLICY = 123;
  DOC_EXPORTASFDF = 124;
  DOC_EXPORTASFDFSTR = 125;
  DOC_EXPORTASTEXT = 126;
  DOC_EXPORTASXFDF = 127;
  DOC_EXPORTASXFDFSTR = 128;
  DOC_EXPORTDATAOBJECT = 129;
  DOC_EXPORTXFADATA = 130;
  DOC_EXTRACTPAGES = 131;
  DOC_FLATTENPAGES = 132;
  DOC_GETANNOT = 133;
  DOC_GETANNOTRICHMEDIA = 134;
  DOC_GETANNOT3D = 135;
  DOC_GETANNOTS = 136;
  DOC_GETANNOTSRICHMEDIA = 137;
  DOC_GETANNOTS3D = 138;
  DOC_GETCOLORCONVERTACTION = 139;
  DOC_GETDATAOBJECT = 140;
  DOC_GETDATAOBJECTCONTENTS = 141;
  DOC_GETFIELD = 142;
  DOC_GETICON = 143;
  DOC_GETLEGALWARNINGS = 144;
  DOC_GETLINKS = 145;
  DOC_GETNTHFIELDNAME = 146;
  DOC_GETNTHTEMPLATE = 147;
  DOC_GETOCGS = 148;
  DOC_GETOCGORDER = 149;
  DOC_GETPAGEBOX = 150;
  DOC_GETPAGELABEL = 151;
  DOC_GETPAGENTHWORD = 152;
  DOC_GETPAGENTHWORDQUADS = 153;
  DOC_GETPAGENUMWORDS = 154;
  DOC_GETPAGEROTATION = 155;
  DOC_GETPAGETRANSITION = 156;
  DOC_GETPREFLIGHTAUDITTRAIL = 157;
  DOC_GETPRINTPARAMS = 158;
  DOC_GETSOUND = 159;
  DOC_GETTEMPLATE = 160;
  DOC_GETURL = 161;
  DOC_GETUSERUNITSIZE = 162;
  DOC_GOTONAMEDDESK = 163;
  DOC_IMPORTANFDF = 164;
  DOC_IMPORTANXFDF = 165;
  DOC_IMPORTDATAOBJECT = 166;
  DOC_IMPORTICON = 167;
  DOC_IMPORTSOUND = 168;
  DOC_IMPORTTEXTDATA = 169;
  DOC_IMPORTXFADATA = 170;
  DOC_INSERTPAGES = 171;
  DOC_MAILDOC = 172;
  DOC_MAILFORM = 173;
  DOC_MOVEPAGE = 174;
  DOC_NEWPAGE = 175;
  DOC_OPENDATAOBJECT = 176;
  DOC_PREFLIGHT = 177;
  DOC_PRINT = 178;
  DOC_REMOVEDATAOBJECT = 179;
  DOC_REMOVEFIELD = 180;
  DOC_REMOVEICON = 181;
  DOC_REMOVELINKS = 182;
  DOC_REMOVEPREFLIGHTAUDITTRAIL = 183;
  DOC_REMOVEREQUIREMENT = 184;
  DOC_REMOVESCRIPT = 185;
  DOC_REMOVETEMPLATE = 186;
  DOC_REMOVETHUMBNAILS = 187;
  DOC_REMOVEWEBLINKS = 188;
  DOC_REPLACEPAGES = 189;
  DOC_RESETFORM = 190;
  DOC_SAVEAS = 191;
  DOC_SCROLL = 192;
  DOC_SELECTPAGENTHWORD = 193;
  DOC_SETACTION = 194;
  DOC_SETDATAOBJECTCONTENTS = 195;
  DOC_SETOCGORDER = 196;
  DOC_SETPAGEACTION = 197;
  DOC_SETPAGEBOXES = 198;
  DOC_SETPAGELABELS = 199;
  DOC_SETPAGEROTATIONS = 200;
  DOC_SETPAGETABORDER = 201;
  DOC_SETPAGETRANSITIONS = 202;
  DOC_SPAWNPAGEFROMTEMPLATE = 203;
  DOC_SUBMITFORM = 204;
  DOC_SYNCANNOTSCAN = 205;
  DOC_TIMESTAMPSIGN = 206;
  DOC_VALIDATEPREFLIGHTAUDITTRAIL = 207;
  DOC_MEDIA_DELETERENDITION = 208;
  DOC_MEDIA_GETANNOT = 209;
  DOC_MEDIA_GETANNOTS = 210;
  DOC_MEDIA_GETOPENPLAYERS = 211;
  DOC_MEDIA_GETRENDITION = 212;
  DOC_MEDIA_NEWPLAYER = 213;
  EMBEDDEDPDF_POSTMESSAGE = 214;
  ERROR_TOSTRING = 215;
  EVENTLISTENER_AFTERBLUR = 216;
  EVENTLISTENER_AFTERCLOSE = 217;
  EVENTLISTENER_AFTERDESTROY = 218;
  EVENTLISTENER_AFTERDONE = 219;
  EVENTLISTENER_AFTERERROR = 220;
  EVENTLISTENER_AFTERESCAPE = 221;
  EVENTLISTENER_AFTEREVERYEVENT = 222;
  EVENTLISTENER_AFTERFOCUS = 223;
  EVENTLISTENER_AFTERPAUSE = 224;
  EVENTLISTENER_AFTERPLAY = 225;
  EVENTLISTENER_AFTERREADY = 226;
  EVENTLISTENER_AFTERSCRIPT = 227;
  EVENTLISTENER_AFTERSEEK = 228;
  EVENTLISTENER_AFTERSTATUS = 229;
  EVENTLISTENER_AFTERSTOP = 230;
  EVENTLISTENER_ONBLUR = 231;
  EVENTLISTENER_ONCLOSE = 232;
  EVENTLISTENER_ONDESTROY = 233;
  EVENTLISTENER_ONDONE = 234;
  EVENTLISTENER_ONERROR = 235;
  EVENTLISTENER_ONESCAPE = 236;
  EVENTLISTENER_ONEVERYEVENT = 237;
  EVENTLISTENER_ONFOCUS = 238;
  EVENTLISTENER_ONGETRECT = 239;
  EVENTLISTENER_ONPAUSE = 240;
  EVENTLISTENER_ONPLAY = 241;
  EVENTLISTENER_ONREADY = 242;
  EVENTLISTENER_ONSCRIPT = 243;
  EVENTLISTENER_ONSEEK = 244;
  EVENTLISTENER_ONSTATUS = 245;
  EVENTLISTENER_ONSTOP = 246;
  EVENTS_ADD = 247;
  EVENTS_DISPATCH = 248;
  EVENTS_REMOVE = 249;
  FDF_ADDCONTACT = 250;
  FDF_ADDEMBEDDEDFILE = 251;
  FDF_ADDREQUEST = 252;
  FDF_CLOSE = 253;
  FDF_MAIL = 254;
  FDF_SAVE = 255;
  FDF_SIGNATURECLEAR = 256;
  FDF_SIGNATURESIGN = 257;
  FDF_SIGNATUREVALIDATE = 258;
  FIELD_BROWSERFORFILETOSUBMIT = 259;
  FIELD_BUTTONGETCAPTION = 260;
  FIELD_BUTTONGETICON = 261;
  FIELD_BUTTONIMPORTICON = 262;
  FIELD_BUTTONSETCAPTION = 263;
  FIELD_BUTTONSETICON = 264;
  FIELD_CHECKTHISBOX = 265;
  FIELD_CLEARITEMS = 266;
  FIELD_DEFAULTISCHECKED = 267;
  FIELD_DELETEITEMAT = 268;
  FIELD_GETARRAY = 269;
  FIELD_GETITEMAT = 270;
  FIELD_GETLOCK = 271;
  FIELD_INSERTITEMAT = 272;
  FIELD_ISBOXCHECKED = 273;
  FIELD_SETACTION = 274;
  FIELD_SETFOCUS = 275;
  FIELD_SETITEMS = 276;
  FIELD_SETLOCK = 277;
  FIELD_SIGNATUREGETMODIFICATIONS = 278;
  FIELD_SIGNATUREGETSEEDVALUE = 279;
  FIELD_SIGNATUREINFO = 280;
  FIELD_SIGNATURESETSEEDVALUE = 281;
  FIELD_SIGNATURESIGN = 282;
  FIELD_SIGNATUREVALIDATE = 283;
  GLOBAL_SETPERSISTENT = 284;
  GLOBAL_SUBSCRIBE = 285;
  HOSTCONTAINER_POSTMESSAGE = 286;
  INDEX_BUILD = 287;
  LINK_SETACTION = 288;
  MARKER_GET = 289;
  MEDIAPLAYER_CLOSE = 290;
  MEDIAPLAYER_OPEN = 291;
  MEDIAPLAYER_PAUSE = 292;
  MEDIAPLAYER_PLAY = 293;
  MEDIAPLAYER_SEEK = 294;
  MEDIAPLAYER_SETFOCUS = 295;
  MEDIAPLAYER_STOP = 296;
  MEDIAPLAYER_TRIGGERGETRECT = 297;
  MEDIAPLAYER_WHERE = 298;
  MONITORS_BESTCOLOR = 299;
  MONITORS_BESTFIT = 300;
  MONITORS_DESKTOP = 301;
  MONITORS_DOCUMENT = 302;
  MONITORS_FILTER = 303;
  MONITORS_LARGEST = 304;
  MONITORS_LEASTOVERLAP = 305;
  MONITORS_MOSTOVERLAP = 306;
  MONITORS_NONDOCUMENT = 307;
  MONITORS_PRIMARY = 308;
  MONITORS_SECONDARY = 309;
  MONITORS_SELECT = 310;
  MONITORS_TALLEST = 311;
  MONITORS_WIDEST = 312;
  NET_HTTP_REQUEST = 313;
  OCG_GETINTENT = 314;
  OCG_SETACTION = 315;
  OCG_SETINTENT = 316;
  PLAYERINFO_CANPLAY = 317;
  PLAYERINFO_CANUSEDATA = 318;
  PLAYERINFO_HONORS = 319;
  PREFLIGHT_CREATECOMPLIANCEPROFILE = 320;
  PREFLIGHT_GETNTHPROFILE = 321;
  PREFLIGHT_GETNUMPROFILES = 322;
  PREFLIGHT_GETPROFILEBYNAME = 323;
  PREFLIGHT_GETPROFILEBYFINGERPRINT = 324;
  PREFLIGHTPROFILE_HASCONVERSION = 325;
  PREFLIGHTRESULT_REPORT = 326;
  RENDITION_GETPLAYSETTINGS = 327;
  RENDITION_SELECT = 328;
  RENDITION_TESTCRITERIA = 329;
  REPORT_BREAKPAGE = 330;
  REPORT_DIVIDE = 331;
  REPORT_INDENT = 332;
  REPORT_MAIL = 333;
  REPORT_OPEN = 334;
  REPORT_OUTDENT = 335;
  REPORT_REPORT = 336;
  REPORT_SAVE = 337;
  REPORT_WRITETEXT = 338;
  SCREENANNOT_HASFOCUS = 339;
  SCREENANNOT_SETFOCUS = 340;
  SEARCH_ADDINDEX = 341;
  SEARCH_GETINDEXFORPATH = 342;
  SEARCH_QUERY = 343;
  SEARCH_REMOVEINDEX = 344;
  SECURITY_CHOOSERECIPIENTSDIALOG = 345;
  SECURITY_CHOOSESECURITYPOLICY = 346;
  SECURITY_EXPORTTOFILE = 347;
  SECURITY_GETHANDLER = 348;
  SECURITY_GETSECURITYPOLICIES = 349;
  SECURITY_IMPORTFROMFILE = 350;
  SECURITY_IMPORTSETTINGS = 351;
  SECURITYHANDLER_LOGIN = 352;
  SECURITYHANDLER_LOGOUT = 353;
  SECURITYHANDLER_NEWDIRECTORY = 354;
  SECURITYHANDLER_NEWUSER = 355;
  SECURITYHANDLER_SETPASSWORDTIMEOUT = 356;
  SOAP_CONNECT = 357;
  SOAP_QUERYSERVICES = 358;
  SOAP_RESOLVESERVICE = 359;
  SOAP_REQUEST = 360;
  SOAP_RESPONSE = 361;
  SOAP_STREAMDECODE = 362;
  SOAP_STREAMDIGEST = 363;
  SOAP_STREAMENCODE = 364;
  SOAP_STREAMFROMSTRING = 365;
  SOAP_STRINGFROMSTREAM = 366;
  SOUND_PAUSE = 367;
  SOUND_PLAY = 368;
  SOUND_STOP = 369;
  SPELL_ADDDICTIONARY = 370;
  SPELL_ADDWORD = 371;
  SPELL_CHECK = 372;
  SPELL_CHECKTEXT = 373;
  SPELL_CHECKWORD = 374;
  SPELL_CUSTOMDICTIONARYCLOSE = 375;
  SPELL_CUSTOMDICTIONARYCREATE = 376;
  SPELL_CUSTOMDICTIONARYDELETE = 377;
  SPELL_CUSTOMDICTIONARYEXPORT = 378;
  SPELL_CUSTOMDICTIONARYOPEN = 379;
  SPELL_IGNOREALL = 380;
  SPELL_REMOVEDICTIONARY = 381;
  SPELL_REMOVEWORD = 382;
  SPELL_USERWORDS = 383;
  TEMPLATE_SPAWN = 384;
  THERMOMETER_BEGIN = 385;
  THERMOMETER_END = 386;
  TTS_GETNTHSPEAKERNAME = 387;
  TTS_PAUSE = 388;
  TTS_QSILENCE = 389;
  TTS_QSOUND = 390;
  TTS_QTEXT = 391;
  TTS_RESET = 392;
  TTS_RESUME = 393;
  TTS_STOP = 394;
  TTS_TALK = 395;
  UTIL_CRACKURL = 396;
  UTIL_ICONSTREAMFROMICON = 397;
  UTIL_PRINTD = 398;
  UTIL_PRINTF = 399;
  UTIL_PRINTX = 400;
  UTIL_READFILEINTOSTREAM = 401;
  UTIL_SCAND = 402;
  UTIL_SPANSTOXML = 403;
  UTIL_STREAMFROMSTRING = 404;
  UTIL_XMLTOSPANS = 405;
  XMLDATA_APPLYXPATH = 406;
  XMLDATA_PARSE = 407;
  ADBC_GETDATASOURCELIST = 408;
  ADBC_NEWCONNECTION = 409;
  APP_BROWSERFORDOC = 410;
  APP_MEDIA_COMPUTEFLOAWINRECT = 411;
  APP_MEDIA_GETPLAYERS = 412;
  APP_MEDIA_GETPLAYERSTOCKEVENTS = 413;
  APP_MEDIA_GETPLAYERTRACEEVENTS = 414;
  APP_MEDIA_STARTPLAYER = 415;
  CONNECTION_CLOSE = 416;
  CONNECTION_GETCOLUMNLIST = 417;
  CONNECTION_GETTABLELIST = 418;
  CONNECTION_NEWSTATEMENT = 419;
  DIALOG_ENABLE = 420;
  DIALOG_END = 421;
  DIALOG_LOAD = 422;
  DIALOG_STORE = 423;
  DOC_CREATETEMPLATE = 424;
  DOC_EMBEDOUTPUTINTENT = 425;
  DOC_EXPORTASDATAOBJECT = 426;
  DOC_GOTONAMEDDEST = 427;
  FIELD_ISDEFAULTCHECKED = 428;
  TABLEINFO_SPAWN = 429;
}

// These are features extracted from the JS elements in the PDF file
// and not from the embedded files that happen to be JS.
// NEXT ID: 30
message JsFeatures {
  // The ratio of characters that are space characters.
  optional float space_ratio = 1;
  // The ratio of characters that are numbers.
  optional float number_ratio = 2;
  // The ratio of characters that are non-alphanumeric
  optional float non_alphanumeric_ratio = 3;
  // The number of characters in the JS script.
  optional int32 character_length = 4;
  // The number of bytes in the JS script. This can be different from size
  // depending on the encoding.
  optional int32 size = 5;
  // Whether or not the script has a launch action.
  optional bool launch_action_detected = 6;
  // Whether or not the script has a launch URL.
  optional bool launch_url_detected = 7;
  // The launch URL inside the script.
  optional string launch_url = 8;
  // Whether or not the script has opendoc.
  optional bool opendoc_detected = 9;
  // This had a misleading naming mistake, hence deprecating the field.
  optional bool fpdf_detected = 10 [deprecated = true];
  // Whether or not the script has fdf.
  optional bool openfdf_detected = 20;
  // Whether or not the script has download.
  optional bool download_detected = 11;
  // Whether or not malcomjs cannot parse the script. This is different from
  // malcomjs crashing on the data.
  optional bool malcomjs_cannot_parse = 12;
  // Whether or not malcomjs crashes on the data.
  optional bool malcomjs_crashes = 13;
  // Whether or not JS has exec_string.
  optional bool exec_detected = 14;
  // The entropy of the JS code.
  optional float onegram_entropy = 15;
  // The entropy of two-grams in the JS code.
  optional float twogram_entropy = 16;
  // Whether or not this JS can be triggered on document level actions, for
  // example, opening a file.
  optional bool extracted_document_level_js = 17;
  // The number of times the same JS script appears in the document.
  optional int32 frequency = 18;
  // The type of extraction of the JS by pdfium.
  optional maldoca.pdf.ExtractedJavaScript.ExtractionType extraction_type = 19;
  // The normalized JS source; the string literals and numerical values are
  // replaced with fixed tokens.
  optional string cleaned_js_code = 21;
  // The original source
  optional string js_code = 22;
  optional int32 string_literal_size = 23;
  // String literal num of spaces
  optional int32 num_literal_space = 24;
  // String literal num of digits [0-9]
  optional int32 num_literal_digit = 25;
  // String literal num of non-alpahnumeric
  optional int32 num_literal_non_alphanumeric = 26;
  // Num of numerical literals
  optional int32 num_numerical_literal = 27;
  // Total length of the numerical literals as strings.
  optional int32 num_numerical_literal_digit = 28;
  // Count for adobe method names defined in AdobeObjectMethods.
  map<uint32, uint32> adobe_method_name_counts = 29;
  // Whether or not JS has substring eval(.
  optional bool eval_detected = 30;
  // Whether or not JS has substring unescape(.
  optional bool unescape_detected = 31;
  // Whether or not JS has substring fromCharCode(.
  optional bool fromcharcode_detected = 32;
}

// These are the aggregates of features in JsFeatures
message JsAggregateFeatures {
  // The number of JavaScript components.
  optional int64 js_component_count = 1;
  // The average of space_ratio field among all JS components.
  optional float average_space_ratio = 2;
  // The minimum of space_ratio among all JS components.
  optional float min_space_ratio = 3;
  // The maximum of the space ratio among all JS components.
  optional float max_space_ratio = 4;
  // The standard deviation of space_ratio among all JS components.
  optional float std_space_ratio = 5;
  // The average of number_ratio among all JS components.
  optional float average_number_ratio = 6;
  // The minimum of number_ratio among all JS components.
  optional float min_number_ratio = 7;
  // The maximum of number_ratio among all JS components.
  optional float max_number_ratio = 8;
  // The standard deviation of number_ratio among all JS components.
  optional float std_number_ratio = 9;
  // The minimum of character_length among all JS components.
  optional int32 min_character_length = 10;
  // The maximum of character_length among all JS components.
  optional int32 max_character_length = 11;
  // The number of JS components with launch_action.
  optional int32 launch_action_count = 12;
  // The number of JS components with launch_url.
  optional int32 launch_url_count = 13;
  // The number of JS components with opendoc.
  optional int32 opendoc_count = 14;
  // Deprecating due to misleading naming mistake.
  optional int32 fpdf_count = 15 [deprecated = true];
  // The number of JS components with fdf.
  optional int32 openfdf_count = 34;
  // The number of JS components with download.
  optional int32 download_count = 16;
  // The number of JS components that malcomjs cannot parse.
  optional int32 malcomjs_cannot_parse_count = 17;
  // The number of JS components that cause crash of malcomjs.
  optional int32 malcomjs_crashes_count = 18;
  // The number of JS components with exec_detected.
  optional int32 exec_count = 19;
  // The average of onegram_entropy among all JS code.
  optional float average_onegram_entropy = 20;
  // The minimum of onegram_entropy among all JS code.
  optional float minimum_onegram_entropy = 21;
  // The maximum of onegram_entropy among all JS code.
  optional float maximum_onegram_entropy = 22;
  // The standard deviation of onegram_entropy among all JS code.
  optional float std_onegram_entropy = 23;
  // The average of twogram_entropy among all JS code.
  optional float average_twogram_entropy = 24;
  // The minimum of twogram_entropy among all JS code.
  optional float minimum_twogram_entropy = 25;
  // The maximum of twogram_entropy among all JS code.
  optional float maximum_twogram_entropy = 26;
  // The standard deviation of twogram_entropy among all JS code.
  optional float std_twogram_entropy = 27;
  // Number of JS scripts that have extracted_document_level_js = true.
  optional int32 extracted_document_level_js_count = 28;
  // Number of extracted_javascript of type LEXER_STRING_LITERAL.
  optional int32 extracted_lexer_string_literal_count = 29;
  // Number of extracted extracted_javascript of type LEXER_HEX_STRING.
  optional int32 extracted_lexer_hex_string_count = 30;
  // Number of extracted_javascript of type  LEXER_INDIRECT_OBJECT.
  optional int32 extracted_indirect_object_count = 31;
  // Number of extracted extracted_javascript of type LEXER_INLINE_STREAM.
  optional int32 extracted_inline_stream_count = 32;
  // Number of extracted extracted_javascript of type PDFIUM.
  optional int32 extracted_pdfium_count = 33;
  optional float average_non_alphanumeric_ratio = 35;
  optional float min_non_alphanumeric_ratio = 36;
  optional float max_non_alphanumeric_ratio = 37;
  optional float std_non_alphanumeric_ratio = 38;
  // Number of invalid js code in hex format
  optional int32 invalid_hex_js_count = 39;
  // Aggregate count for adobe method names defined in AdobeObjectMethods.
  map<uint32, uint32> aggregate_adobe_method_name_counts = 40;
  // The number of JS components with substring eval(.
  optional int32 eval_count = 41;
  // The number of JS components with substring unescape(.
  optional int32 unescape_count = 42;
  // The number of JS components with substring fromCharCode(.
  optional int32 fromcharcode_count = 43;
}

// These are features that were extracted from image streams in side the PDF
// file and not from generic embedded files that happen to be an image.
message ImageFeatures {
  // The width of the image in pixels.
  optional int32 width = 1;
  // The height of the image in pixels.
  optional int32 height = 2;
  // The horizontal DPI of the image.
  optional float horizontal_dpi = 3;
  // The vertical DPI of the image
  optional float vertical_dpi = 4;
  // The number of bits per pixel.
  optional int32 bits_per_pixel = 5;
  // Whether or not the image is empty.
  optional bool is_empty_image_object = 6;
  // Whether or not the quota for fetching the image exceeded.
  optional bool image_quota_exceeded = 7;
  // Size of the image in bytes.
  optional int64 size = 8;
  // // Image format of the raw image. Please see
  // imageencdeccommon.h/FormatEnum. Link: http://shortn/_J8L9VKYItq
  optional int32 image_format = 9;
}

// These are aggregates of ImageFeatures features
message ImageAggregateFeatures {
  // The number of images inside the PDF.
  optional int32 image_count = 1;
  // The minimum of width among all images.
  optional int32 min_width = 2;
  // The maximum of width among all images.
  optional int32 max_width = 3;
  // The average of width among all images.
  optional float average_width = 4;
  // The standard deviation of width among all images.
  optional float std_width = 5;
  // The minimum of height among all images.
  optional int32 min_height = 6;
  // The maximum of height among all images.
  optional int32 max_height = 7;
  // The average of height among all images.
  optional float average_height = 8;
  // The standard deviation of height among all images.
  optional float std_height = 9;
  // The minimum of horizontal_dpi among all images.
  optional int32 min_horizontal_dpi = 10;
  // The maximum of horizontal_dpi among all images.
  optional int32 max_horizontal_dpi = 11;
  // The average of horizontal_dpi among all images.
  optional float average_horizontal_dpi = 12;
  // The standard deviation of horizontal_dpi among all images.
  optional float std_horizontal_dpi = 13;
  // The minimum of vertical_dpi among all images.
  optional int32 min_vertical_dpi = 14;
  // The maximum of vertical_dpi among all images.
  optional int32 max_vertical_dpi = 15;
  // The average of vertical_dpi among all images.
  optional float average_vertical_dpi = 16;
  // The standard deviation of vertical_dpi among all images.
  optional float std_vertical_dpi = 17;
  // The embedding of PDF image by starburst v5.
  repeated float starburst_embedding = 18;
}

message EmbeddedFileFeatures {
  // The size of the embedded file.
  optional int64 file_size = 1;
  // The extension of the embedded file extracted from file name. This file
  // name is set by the user creating the PDF file.
  optional string file_extension = 3;
  // The name of the embedded file.
  optional string file_name = 4;
  // Whether or not magician extracted type contradicts extension. This might
  // be a sign of a deception attempt.
  optional bool magician_contradicts_extension = 5;
  // The content type of the embedded file. This will be filled by magician.
  optional string content_type = 6;
}

message EmbeddedFileAggregateFeatures {
  // The number of embedded files.
  optional int32 embedded_file_count = 1;
  // The minimum of file_size among all embedded files.
  optional int64 min_file_size = 2;
  // The maximum of file_size among all embedded files.
  optional int64 max_file_size = 3;
  // The average of file_size among all embedded files.
  optional float average_file_size = 4;
  // The standard deviation of file_size among all embedded files.
  optional float std_file_size = 5;
  // A string constructed from file_name of all embedded files.
  repeated string file_names = 6;
  // A string constructed from file_extension of all embedded files.
  repeated string file_extensions = 7;
}

message PdfMetadataFeatures {
  // The size of the PDF file
  optional int64 file_size = 1;
  // Whether or not the file is encrypted.
  optional bool is_encrypted = 2;
  // Whether or not the PDF is a valid one.
  optional bool is_valid_pdf = 3;
  // The number of pages in the PDF.
  optional int32 page_count = 4;
  // The number of dot characters in title.
  optional int32 title_dots_count = 5;
  // The ratio of dot characters in title.
  optional float title_dots_ratio = 6;
  // The entropy of the title.
  optional float title_entropy = 7;
  // The number of lower case characters in title.
  optional int32 title_lower_case_count = 8;
  // The ratio of characters in title that are lower case.
  optional float title_lower_case_ratio = 9;
  // The number of upper case characters in title.
  optional int32 title_upper_case_count = 10;
  // The ratio of characters in title that are upper case.
  optional float title_upper_case_ratio = 11;
  // The number of characters in title that are numbers.
  optional int32 title_number_count = 12;
  // The ratio of characters in the title that are numbers.
  optional float title_number_ratio = 13;
  // The number of characters in title that are not alphanumeric.
  optional int32 title_non_alphanum_count = 14;
  // The ratio of characters in title that are not alphanumeric.
  optional float title_non_alphanum_ratio = 15;
  // The language of the title.
  repeated string title_languages = 16;
  // The creation date time stamp.
  optional int64 createdate_usec = 17;
  // The timezone of the create date.
  optional string createdate_tz = 18;
  // The most recent modification date time stamp.
  optional int64 moddate_usec = 19;
  // The timezone of the modification date.
  optional string moddate_tz = 20;
  // The time between creation time and modification time.
  optional int64 mod_create_delta_usec = 21;
  // Whether or not the timezone of the creation date and modification date
  // match.
  optional bool mod_create_tz_match = 22;
  // The number of dots in author.
  optional int32 author_dot_count = 23;
  // The ratio of dots in author.
  optional float author_dot_ratio = 24;
  // The length of the author string.
  optional int32 author_length = 25;
  // The language of the author string.
  repeated string author_languages = 26;
  // The ratio of author characters that are uppercase.
  optional float uppercase_ratio = 27 [deprecated = true];
  // The ratio of author characters that are lowercase.
  optional float lowercase_ratio = 28 [deprecated = true];
  // The ratio of author characters that are alphanumeric.
  optional float alphanum_ratio = 29 [deprecated = true];
  // Whether or not pdfium can parse the file.
  optional bool pdfium_can_parse = 30;
  // The ratio of author characters that are uppercase.
  optional float author_upper_case_ratio = 31;
  // The ratio of author characters that are lowercase.
  optional float author_lower_case_ratio = 32;
  // The ratio of author characters that are alphanumeric.
  optional float author_alphanum_ratio = 33;
}

// This is the per URL feature set.
message UrlFeatures {
  // The recognized words in the URL. These are dictionary words appearing in
  // the URL.
  repeated string url_words = 1;
  // The URL itself.
  optional string url = 2;
  // The number of times the URL appears in the document.
  optional int32 frequency = 3;
  // Whether or not at least one of the occurrences of the URL is hyperlinked.
  optional bool is_hyperlinked = 4;
  // The text that is hyperlinked to the URL. Multiple entries in case the URL
  // appears multiple times in hyperlinks.
  repeated string anchor_text = 5;
}

message PdfTextFeatures {
  // The number of URLs in the text.
  optional int32 url_count = 1;
  // The per URL features.
  repeated UrlFeatures url_features = 2;
  // The number of languages in PDF text.
  optional int32 language_count = 3;
  // The languages seen in the text.
  repeated string languages = 4;
  // The number of URLs with is_hyperlinked=true.
  optional int32 is_hyperlinked_count = 5;
  // The embedding of PDF text by @kona/universal-encoder/2.
  repeated float kona_universal_encoder_embedding = 6;
}

message StructElement {
  // Represents the children of this element.
  repeated StructElement children = 1;
  // The type of the struct element.
  optional string type = 2;
  // Number of all children of this struct element. -1, if this element can't
  // have a struct tree in it.
  optional int32 num_of_children = 3;
  // True, if maximum depth of the struct tree is reached, as defined by
  // ProcessingLimit_MAX_RECURSION_DEPTH in pdfium_engine.proto. If true, no
  // other fields will be set.
  optional bool max_depth_reached = 4;
}

// Represents properties of a Text object on PDF page.
message TextObject {
  // The font size.
  optional double font_size = 1;
  // The font name.
  optional string font_name = 2;
}

message PageObject {
  // True, if the object type is FPDF_PAGEOBJ_UNKNOWN which means an error
  // occurred while getting the type.
  optional bool unknown = 1;
  oneof object_oneof {
    // Properties of FPDF_PAGEOBJ_TEXT type object.
    TextObject text = 2;
  }
  // True, if the object has transparency property. Note that, this being true
  // does not necessarily mean that the object is completely transparent.
  optional bool has_transparency = 3;
  // True, if there was a failure in parsing the object.
  optional bool failed_to_parse_object = 4;
}

message PageAnnotation {
  enum SubType {
    UNKNOWN = 0;
    TEXT = 1;
    LINK = 2;
    FREE_TEXT = 3;
    LINE = 4;
    SQUARE = 5;
    CIRCLE = 6;
    POLYGON = 7;
    POLYLINE = 8;
    HIGHLIGHT = 9;
    UNDERLINE = 10;
    SQUIGGLY = 11;
    STRIKEOUT = 12;
    STAMP = 13;
    CARET = 14;
    INK = 15;
    POPUP = 16;
    FILE_ATTACHMENT = 17;
    SOUND = 18;
    MOVIE = 19;
    WIDGET = 20;
    SCREEN = 21;
    PRINTER_MARK = 22;
    TRAPNET = 23;
    WATERMARK = 24;
    THREED = 25;
    RICH_MEDIA = 26;
    XFAWIDGET = 27;
  }
  optional SubType sub_type = 1;
  // True, if there was a failure in parsing the annotation.
  optional bool failed_to_parse_annotation = 2;
}

message PageStructureFeatures {
  // Represents the structure tree (aka logical structure) of this page. This
  // structure can be independent of how graphical objects are rendered on PDF.
  repeated StructElement children = 1;
  optional int32 num_of_children = 2;
  // The index of the page as in rendered PDF, but starting from 0.
  optional int32 page_index = 3;
  // True, if there is no structure tree on this page. There can still be valid
  // objects on this page.
  optional bool no_struct_tree = 4;
  // Represents the list of objects found on the page.
  repeated PageObject page_objects = 5;
  // Number of all objects on this page.
  optional int64 num_of_objects = 6;
  // Represents the list of annotations found on the page.
  repeated PageAnnotation page_annotations = 7;
  // Number of all annotations on this page.
  optional int64 num_of_annotations = 8;
  // If the page is (i.e. Alpha = 0) transparent.
  optional bool is_transparent = 9;
  // Represents the list of additional actions found on the.
  repeated PdfPageAAction page_aactions = 10;
}

message PageStructureAggregateFeatures {
  optional int64 page_count = 1;
  optional int64 transparent_page_count = 2;
  optional int64 no_struct_tree_page_count = 3;
  optional int64 object_count = 4;
  optional int64 failed_to_parse_object_count = 5;
  optional int64 max_page_object = 6;
  optional int64 min_page_object = 7;
  optional float average_page_object = 8;
  optional float std_page_object = 9;
  optional int64 annotation_count = 10;
  optional int64 failed_to_parse_annotation_count = 11;
  optional int64 max_page_annotation = 12;
  optional int64 min_page_annotation = 13;
  optional float average_page_annotation = 14;
  optional float std_page_annotation = 15;
  repeated PageAnnotation.SubType page_annotation_sub_types = 16;
  repeated string font_names = 17;
  repeated string struct_element_types = 18;
}

message PdfFeature {
  repeated JsFeatures js_features = 2;
  optional JsAggregateFeatures js_aggregate = 3;
  repeated EmbeddedFileFeatures embedded_file_features = 4;
  optional EmbeddedFileAggregateFeatures embedded_file_aggregate = 5;
  optional PdfMetadataFeatures pdf_metadata = 6;
  optional PdfTextFeatures text_features = 7;
  repeated ImageFeatures image_features = 8;
  optional ImageAggregateFeatures image_aggregate = 9;
  repeated PageStructureFeatures page_structure_features = 10;
  optional PageStructureAggregateFeatures page_structure_aggregate = 11;
  optional string id = 12;
}
