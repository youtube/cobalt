// basic_struct.test-mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "basic_struct.test-mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/thread_pool/thread_pool_instance.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/features.h"
#include "mojo/public/cpp/bindings/lib/default_construct_tag_internal.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/cpp/bindings/urgent_message_scope.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "basic_struct.test-mojom-params-data.h"
#include "basic_struct.test-mojom-shared-message-ids.h"

#include "basic_struct.test-mojom-import-headers.h"
#include "basic_struct.test-mojom-test-utils.h"


namespace golden {
BasicStruct::BasicStruct()
    : my_bool() {}

BasicStruct::BasicStruct(
    bool my_bool_in)
    : my_bool(std::move(my_bool_in)) {}

BasicStruct::~BasicStruct() = default;
size_t BasicStruct::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->my_bool);
  return seed;
}

void BasicStruct::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "my_bool"), this->my_bool,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BasicStruct::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // golden


namespace mojo {


// static
bool StructTraits<::golden::BasicStruct::DataView, ::golden::BasicStructPtr>::Read(
    ::golden::BasicStruct::DataView input,
    ::golden::BasicStructPtr* output) {
  bool success = true;
  ::golden::BasicStructPtr result(::golden::BasicStruct::New());
  
      if (success)
        result->my_bool = input.my_bool();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace golden {




}  // golden


#if defined(__clang__)
#pragma clang diagnostic pop
#endif