{% from 'templates/fields/field.tmpl' import encode, decode, const_ref, nonconst_ref, rvalue_ref, getter_expression, setter_expression, set_if_changed, move_if_changed, getter_method_name, setter_method_name, resetter_method_name, mutable_method_name %}

{% macro decl_getter_method(field, visibility) -%}
{% if field.getter_visibility == visibility %}
{{const_ref(field)}} {{getter_method_name(field)}}() const {
  return {{decode(field, getter_expression(field))}};
}
{% endif %}
{%- endmacro %}

{% macro decl_setter_method(field, visibility) -%}
{% if field.setter_visibility == visibility and field.builder %}
void {{setter_method_name(field)}}({{const_ref(field)}} v) {
  {{set_if_changed(field, encode(field, "v"))|indent(2)}}
}
{% endif %}
{%- endmacro %}

{% macro decl_move_method(field, visibility) -%}
{% if field.setter_visibility == visibility and field.builder %}
void {{setter_method_name(field)}}({{rvalue_ref(field)}} v) {
  {{move_if_changed(field, encode(field, "v"))|indent(2)}}
}
{% endif %}
{%- endmacro %}

{% macro decl_resetter_method(field, visibility) -%}
{% if field.resetter_visibility == visibility and field.builder %}
inline void {{resetter_method_name(field)}}() {
  {{setter_expression(field)}} = {{encode(field, field.default_value)}};
}
{% endif %}
{%- endmacro %}

{#
  Mutable*-functions always have protected visibility, and always carry the
  Internal suffix.
#}
{% macro decl_mutable_method(field) -%}
{% if field.builder %}
{{nonconst_ref(field)}} {{mutable_method_name(field)}}() {
  return {{decode(field, setter_expression(field))}};
}
{% endif %}
{%- endmacro %}

{# public #}

{% macro decl_public_getter_method(field) -%}
{{decl_getter_method(field, 'public')}}
{%- endmacro %}

{% macro decl_public_setter_method(field) -%}
{{decl_setter_method(field, 'public')}}
{%- endmacro %}

{% macro decl_public_move_method(field) -%}
{{decl_move_method(field, 'public')}}
{%- endmacro %}

{% macro decl_public_resetter_method(field) -%}
{{decl_resetter_method(field, 'public')}}
{%- endmacro %}

{# protected #}

{% macro decl_protected_getter_method(field) -%}
{{decl_getter_method(field, 'protected')}}
{%- endmacro %}

{% macro decl_protected_setter_method(field) -%}
{{decl_setter_method(field, 'protected')}}
{%- endmacro %}

{% macro decl_protected_move_method(field) -%}
{{decl_move_method(field, 'protected')}}
{%- endmacro %}

{% macro decl_protected_resetter_method(field) -%}
{{decl_resetter_method(field, 'protected')}}
{%- endmacro %}

{% macro decl_protected_mutable_method(field) -%}
{{decl_mutable_method(field)}}
{%- endmacro %}
