/* Copyright 2022 The MediaPipe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

syntax = "proto2";

package mediapipe.tasks.components.containers.proto;

import "mediapipe/framework/formats/classification.proto";

option java_package = "com.google.mediapipe.tasks.components.containers.proto";
option java_outer_classname = "ClassificationsProto";

// Classifications for a given classifier head, i.e. for a given output tensor.
message Classifications {
  // The classification results for this head.
  optional mediapipe.ClassificationList classification_list = 4;
  // The index of the classifier head these categories refer to. This is useful
  // for multi-head models.
  optional int32 head_index = 2;
  // The name of the classifier head, which is the corresponding tensor metadata
  // name.
  // TODO: Add github link to metadata_schema.fbs.
  optional string head_name = 3;
  // Reserved fields.
  reserved 1;
}

// Classifications for a given classifier model.
message ClassificationResult {
  // The classification results for each model head, i.e. one for each output
  // tensor.
  repeated Classifications classifications = 1;
  // The optional timestamp (in milliseconds) of the start of the chunk of data
  // corresponding to these results.
  //
  // This is only used for classification on time series (e.g. audio
  // classification). In these use cases, the amount of data to process might
  // exceed the maximum size that the model can process: to solve this, the
  // input data is split into multiple chunks starting at different timestamps.
  optional int64 timestamp_ms = 2;
}
