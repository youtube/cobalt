// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.mojom;

import "mojo/public/mojom/base/time.mojom";
import "ui/events/ash/mojom/modifier_key.mojom";

// The current status of the enterprise policy for the stated setting.
enum PolicyStatus {
  kManaged,
  kRecommended
};

// Represents an enterprise policy that has a status via `PolicyStatus` and a
// boolean value.
struct InputDeviceSettingsPolicy {
  PolicyStatus policy_status;
  bool value;
};

// Represents the current set of keyboard enterprise policies. All members are
// optional. When null, there is no enterprise policy set for the given setting.
struct KeyboardPolicies {
  InputDeviceSettingsPolicy? top_row_are_fkeys_policy;
};

// Represents the current set of mouse enterprise policies. All members are
// optional. When null, there is no enterprise policy set for the given setting.
struct MousePolicies {
  InputDeviceSettingsPolicy? swap_right_policy;
};

// MetaKey denotes all the possible options deducable from the users external or
// internal keyboard. Used to show the correct key to the user in the settings
// UI.
enum MetaKey {
  kSearch,
  kLauncher,
  kExternalMeta,
  kCommand
};

// Contains all information needed to display, apply, and update keyboard
// settings.
struct Keyboard {
  string name;
  // Used to display different names and settings in the settings app.
  bool is_external;
  // Unique identifier for the keyboard which is assigned by ozone when it is
  // connected and is reassigned when disconnected and reconnected to the
  // system. These ids can be rarely reused for multiple devices if the original
  // device holding the id had been disconnected.
  uint32 id;
  // Key used to lookup device settings in prefs in the format
  // "vendor_id:product_id" where the ids are 16-bit hex in lowercase.
  // Example: 5022:18d1.
  string device_key;
  // Meta key type (launcher, search, etc) for this keyboard.
  MetaKey meta_key;
  // List of modifier keys (caps lock, assistant, etc) present on this device.
  array<ui.mojom.ModifierKey> modifier_keys;
  KeyboardSettings settings;
};

// Contains all existing keyboard settings available for use.
struct KeyboardSettings {
  map<ui.mojom.ModifierKey, ui.mojom.ModifierKey> modifier_remappings;
  bool top_row_are_fkeys;
  bool suppress_meta_fkey_rewrites;
};

// Contains all information needed to display, apply, and update mouse
// settings.
struct Mouse {
  string name;
  // Used to display different names and settings in the settings app.
  bool is_external;
  // Unique identifier for the mouse which is assigned by ozone when it is
  // connected and is reassigned when disconnected and reconnected to the
  // system. These ids can be rarely reused for multiple devices if the original
  // device holding the id had been disconnected.
  uint32 id;
  // Key used to lookup device settings in prefs in the format
  // "vendor_id:product_id" where the ids are 16-bit hex in lowercase.
  // Example: 5022:18d1.
  string device_key;
  MouseSettings settings;
};

// Contains all existing mouse settings available for use.
struct MouseSettings {
  // Toggles whether mouse buttons are swapped.
  bool swap_right;
  // Control sensitivity of the device.
  uint8 sensitivity;
  // Toggles the direction of the scroll behavior.
  bool reverse_scrolling;
  // Controls whether acceleration is enabled.
  bool acceleration_enabled;
  // Controls the speed of touchpad scrolling.
  uint8 scroll_sensitivity;
  // Toggles whether scroll acceleration is enabled.
  bool scroll_acceleration;
};

// Contains all information needed to display, apply, and update touchpad
// settings.
struct Touchpad {
  string name;
  // Used to display different names and settings in the settings app.
  bool is_external;
  // Unique identifier for the touchpad which is assigned by ozone when it is
  // connected and is reassigned when disconnected and reconnected to the
  // system. These ids can be rarely reused for multiple devices if the original
  // device holding the id had been disconnected.
  uint32 id;
  // Key used to lookup device settings in prefs in the format
  // "vendor_id:product_id" where the ids are 16-bit hex in lowercase.
  // Example: 5022:18d1.
  string device_key;
  TouchpadSettings settings;
};

// Contains all existing touchpad settings available for use.
struct TouchpadSettings {
  // Control sensitivity of the device.
  uint8 sensitivity;
  // Toggles the direction of the scroll behavior.
  bool reverse_scrolling;
  // Controls whether acceleration is enabled.
  bool acceleration_enabled;
  // Toggles whether tap to click is enabled.
  bool tap_to_click_enabled;
  // Toggles whether three finger click is enabled.
  bool three_finger_click_enabled;
  // Toggles whether tap dragging is enabled.
  bool tap_dragging_enabled;
  // Controls the speed of touchpad scrolling.
  uint8 scroll_sensitivity;
  // Toggles whether scroll acceleration is enabled.
  bool scroll_acceleration;
  // Controls the sensitivity of the haptic feedback from the touchpad.
  uint8 haptic_sensitivity;
  // Toggles whether haptic feedback is enabled for the touchpad at all.
  bool haptic_enabled;
};

// Contains all information needed to display, apply, and update pointing stick
// settings.
struct PointingStick {
  string name;
  // Used to display different names and settings in the settings app.
  bool is_external;
  // Unique identifier for the pointing stick which is assigned by ozone when
  // it is connected and is reassigned when disconnected and reconnected to the
  // system. These ids can be rarely reused for multiple devices if the original
  // device holding the id had been disconnected.
  uint32 id;
  // Key used to lookup device settings in prefs in the format
  // "vendor_id:product_id" where the ids are 16-bit hex in lowercase.
  // Example: 5022:18d1.
  string device_key;
  PointingStickSettings settings;
};

// Contains all existing pointing stick settings available for use.
struct PointingStickSettings {
  // Toggles whether pointing stick buttons are swapped.
  bool swap_right;
  // Control sensitivity of the device.
  uint8 sensitivity;
  // Controls whether acceleration is enabled.
  bool acceleration_enabled;
};
