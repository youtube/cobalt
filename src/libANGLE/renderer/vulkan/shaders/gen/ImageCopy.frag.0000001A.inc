// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000001A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000001A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xdb,0x6f,0x54,0x55,
    0x14,0xc6,0xf7,0x9e,0xe9,0x74,0xda,0xa9,0x2d,0x20,0x14,0x68,0xc5,0xb1,0xb6,0x44,
    0x49,0xa9,0xcd,0x04,0x6b,0x67,0x12,0xf1,0x46,0x62,0x2a,0xa1,0x68,0xa1,0x15,0x1f,
    0x8d,0x89,0x2f,0x3e,0x08,0x0f,0xfa,0x46,0x62,0x8c,0x31,0xf5,0xa1,0xe9,0x13,0xff,
    0x02,0x17,0x11,0x13,0x44,0x8d,0x78,0x01,0xb9,0xbc,0x98,0x88,0x17,0xa2,0xa9,0xda,
    0x68,0xaa,0x36,0xf6,0x49,0x6d,0x8c,0x80,0x40,0x09,0xd4,0xb5,0xce,0xfe,0x2d,0x67,
    0xa5,0x18,0x6d,0xb2,0x73,0xce,0xfe,0xd6,0xed,0xfb,0xd6,0x5a,0x73,0x20,0x9f,0xeb,
    0x29,0x86,0x10,0x43,0x29,0x34,0x85,0xa7,0x62,0xc8,0xfe,0x56,0x84,0x5c,0xd0,0xd7,
    0x96,0xd0,0x98,0x3d,0x87,0x86,0x47,0x87,0xfb,0x5f,0x78,0xf1,0xd9,0xfe,0x81,0xfb,
    0x2a,0x6a,0x6f,0x0b,0xf9,0xcc,0x4f,0x6d,0xcb,0x42,0x31,0x34,0xc8,0x53,0xcf,0xf3,
    0xcf,0x3c,0xb7,0x5b,0xf1,0x43,0x72,0xce,0xca,0x59,0x2e,0x7e,0x8a,0x4b,0x81,0xf0,
    0x58,0x28,0x84,0xd5,0x29,0x7d,0xe8,0xe1,0x69,0x58,0x04,0x6b,0x72,0x58,0x0e,0x6c,
    0xb9,0xc3,0xf2,0x60,0xab,0x1c,0xd6,0x00,0xb6,0xd6,0x61,0x05,0xb0,0x75,0x0e,0x6b,
    0x04,0xeb,0x72,0x58,0x11,0x6c,0xbd,0xc3,0x9a,0xc0,0x36,0x38,0xac,0x19,0xac,0xcf,
    0x61,0x25,0xb0,0x8a,0xc3,0x5a,0xc0,0x06,0x1c,0x76,0x0b,0x58,0xcd,0x61,0xad,0x60,
    0x9b,0x1d,0xd6,0x06,0xf6,0xb0,0xf6,0x5b,0x94,0x5a,0x0f,0x86,0x44,0xe1,0x21,0x72,
    0x2f,0xe3,0x7e,0x4c,0x9e,0xdd,0xf4,0xd0,0xee,0x77,0xba,0xbb,0xf6,0xbe,0xcc,0x7d,
    0xa5,0x64,0xc9,0x65,0xf6,0x7c,0xd6,0x3f,0x7d,0x6f,0x17,0x9f,0x46,0x7a,0xa1,0xbd,
    0x5f,0x23,0xf7,0x22,0x3d,0x32,0x7b,0x2b,0xf6,0x80,0xbd,0x0d,0xde,0x0d,0x59,0xee,
    0x15,0xff,0xf4,0xcf,0xe2,0xec,0xb4,0xfe,0xcf,0x31,0x9f,0x2e,0xc9,0xb4,0x86,0xde,
    0x6a,0xae,0xfb,0xb9,0xaf,0x05,0xdb,0x08,0xc7,0x0e,0x38,0xaa,0x7f,0x27,0xb6,0xa2,
    0xb3,0x97,0x99,0xb7,0xda,0xef,0xc0,0xde,0x9a,0xed,0x48,0x2e,0xeb,0xd1,0x46,0xb4,
    0xd8,0xce,0x59,0x5c,0x1f,0x5c,0xcc,0xbe,0x89,0x3a,0x66,0xaf,0x32,0x13,0xbb,0x6f,
    0xa1,0xae,0xf6,0x62,0x98,0x1a,0x79,0x67,0x1f,0x63,0x77,0xec,0xbe,0x67,0x89,0x8e,
    0xbd,0xec,0x8c,0xdd,0xc7,0x5d,0x1f,0x5e,0xc3,0xb7,0xd1,0xd9,0x27,0x98,0x85,0xdd,
    0x27,0x97,0xf0,0xdf,0xc7,0x2c,0x56,0x0b,0x8b,0xfd,0xcc,0x4a,0xb9,0x1d,0x90,0xe7,
    0x7e,0x6c,0x9a,0xfb,0x20,0xba,0x0e,0xd0,0xe3,0x83,0xfc,0x3e,0x6d,0xee,0xaf,0xe3,
    0x9f,0xcb,0x7a,0xdd,0x1c,0x8e,0xc2,0x8b,0x4f,0xc1,0x4d,0x4f,0xcd,0xf9,0x16,0xef,
    0x47,0xc9,0xa9,0xf7,0x63,0x4b,0xf8,0x1d,0xa7,0x3f,0x5a,0xe3,0x43,0xb4,0xe5,0x89,
    0x3f,0xc3,0x7b,0x1b,0xf1,0x67,0xf8,0x5e,0x28,0x36,0x28,0xd3,0xcc,0xc1,0x3f,0x80,
    0x5d,0x11,0x44,0x67,0xfc,0x00,0xfa,0x0e,0xa3,0xe1,0x09,0x99,0x88,0xf2,0x7f,0x03,
    0xec,0xb0,0xe3,0xba,0x9b,0x9d,0x3e,0x82,0xfd,0x11,0xc9,0xa0,0xfb,0xf3,0x29,0x3b,
    0xd6,0x41,0x3e,0xf5,0x39,0x07,0xfe,0x8a,0xf8,0xe8,0xfd,0x33,0xe2,0xce,0x11,0xa7,
    0x7b,0xf5,0x39,0x71,0x65,0xe2,0xb4,0x47,0x5f,0x80,0x1f,0x11,0x1f,0xdd,0xb5,0x2f,
    0xc1,0x74,0xd7,0x2e,0x0b,0xf3,0x29,0xf8,0x2c,0x88,0xbf,0xda,0xce,0xcb,0x99,0x42,
    0x8f,0xbe,0xef,0x90,0x38,0xed,0xcb,0x57,0xd4,0xd4,0xbf,0x97,0xe8,0xdf,0xd7,0xe0,
    0x3b,0xe5,0xa6,0x9c,0x36,0xc7,0x84,0x99,0xdf,0x55,0xc9,0x61,0xb9,0xf4,0x79,0x49,
    0xbc,0xd4,0x6f,0x38,0x26,0x9f,0x02,0x31,0xe7,0x9d,0x86,0x6f,0xd0,0xd0,0xe7,0x34,
    0x7c,0x0b,0x6e,0x1a,0xbe,0x03,0x33,0x0d,0x33,0x4e,0x83,0xda,0xa6,0xe5,0xcc,0x50,
    0x77,0xda,0x69,0xf8,0x9e,0xda,0xd1,0x69,0xf8,0x01,0xdc,0x34,0x3c,0x14,0x13,0x66,
    0x7e,0xaa,0xc1,0x72,0xcd,0x38,0x0d,0xdb,0x63,0xf2,0x99,0x22,0x66,0xda,0x69,0xf8,
    0x11,0x0d,0x55,0xa7,0xe1,0x27,0x70,0xd3,0xf0,0x33,0x98,0x69,0x98,0x73,0x1a,0xd4,
    0x36,0x2b,0x67,0x8e,0xba,0xb3,0xec,0x91,0xd6,0xfd,0x85,0xda,0xdb,0x63,0x7d,0xdf,
    0x95,0xa3,0xf9,0xce,0x39,0x8e,0x8f,0xe3,0x37,0x43,0xdc,0x2c,0x7c,0xf4,0x37,0xf1,
    0x36,0xbf,0x07,0xdb,0xb9,0x77,0xe0,0x3c,0xe9,0x76,0xee,0x5d,0xf0,0x97,0xd9,0xb9,
    0xf7,0xc0,0x34,0xaf,0xc6,0xe9,0x37,0xe1,0x7d,0xe2,0x8e,0x13,0xa7,0x3d,0xfd,0x00,
    0xdc,0xfa,0xfe,0x11,0xb1,0xc1,0x61,0x27,0xc0,0x54,0xc3,0x88,0x20,0xfa,0xfb,0x3b,
    0x89,0xef,0x09,0x72,0x58,0x8d,0x8f,0xa9,0x31,0xe1,0x6a,0x9c,0x02,0x7f,0x5a,0x98,
    0xe9,0x6f,0xf4,0x34,0x9a,0x4e,0xf2,0x9d,0x38,0xe5,0xe6,0xf1,0x2b,0xf1,0x5b,0xdc,
    0x3c,0x7e,0x03,0xb7,0x79,0xfc,0x0e,0x66,0xf3,0x68,0x89,0xf5,0x79,0xa8,0x6d,0x3e,
    0xc3,0x53,0x8f,0xe7,0xd1,0xa1,0x79,0xfe,0xa0,0x76,0x3e,0x9b,0x51,0x53,0xf6,0xdd,
    0xfd,0x13,0xec,0xb4,0xfb,0xad,0xe7,0xd0,0xa9,0xf6,0x0b,0xc4,0xd9,0x79,0x55,0x72,
    0x29,0x7e,0x91,0xd8,0x0b,0x59,0xae,0xe6,0x4c,0xd7,0x5f,0xe4,0xb9,0xc8,0xf7,0xa6,
    0xe0,0xbe,0x53,0x3a,0x77,0xe5,0xa9,0x9c,0x2e,0x3b,0xbd,0x57,0xd0,0x3b,0xe6,0xf4,
    0x5e,0x05,0x37,0xbd,0x0b,0x60,0xa6,0x77,0xd1,0xed,0x9f,0xda,0xae,0xc9,0x59,0x44,
    0xef,0x35,0xa7,0xf7,0xba,0xd3,0xfb,0x26,0xb9,0x6e,0x80,0xf7,0xc0,0xc9,0xe2,0x16,
    0xd9,0xc5,0x6e,0x9a,0xb0,0x40,0x0f,0x6f,0x90,0x5f,0xeb,0x96,0x5c,0x9f,0xd5,0x27,
    0xca,0x29,0xa1,0x49,0xdf,0xad,0x6e,0x3e,0xde,0xdc,0xe7,0x42,0xfc,0xef,0x3e,0x37,
    0xc6,0x14,0x67,0x67,0x9c,0x3e,0x17,0x63,0x8a,0x55,0xbb,0xf5,0xb9,0x99,0x5c,0x6a,
    0xfb,0xb7,0x3e,0x1b,0x27,0x7d,0x5e,0x62,0xe7,0x76,0x10,0xb3,0x48,0xbc,0xf2,0xf5,
    0x33,0x69,0x71,0xbe,0x23,0x31,0xcd,0x72,0x9e,0xb8,0x52,0xac,0xcf,0xeb,0xd6,0x98,
    0xe6,0xb5,0xc7,0xcd,0x6b,0x65,0x4c,0xb8,0xcd,0x6b,0x55,0x4c,0x98,0xcd,0xab,0xe6,
    0xfa,0xa6,0xb6,0x76,0x39,0x9d,0xd4,0x6d,0x77,0xba,0x3a,0x62,0xaa,0x3d,0x82,0xae,
    0x22,0x3d,0x32,0x5d,0x35,0x62,0x3a,0x1d,0x9f,0xdb,0xe0,0xb3,0xd7,0xf1,0x59,0x17,
    0x13,0x6e,0x7c,0x6e,0x8f,0x09,0x33,0x3e,0x55,0xc7,0x47,0x6d,0x65,0x39,0xdd,0xe4,
    0x2e,0xbb,0x39,0x76,0xc1,0x25,0xcf,0x37,0x57,0x39,0x3e,0x1a,0xeb,0xb8,0x7d,0xcf,
    0xaa,0xc4,0x76,0xbb,0x6f,0x4d,0x0f,0xbc,0xc6,0xdd,0x77,0x60,0x7d,0x4c,0xf8,0x27,
    0x7c,0x57,0xee,0x8a,0x09,0x9b,0x70,0xbb,0x7e,0x77,0x4c,0xf8,0x24,0x5c,0x7b,0x1d,
    0x57,0xb5,0x6d,0x90,0xd3,0x4b,0x3d,0x7d,0x37,0x5e,0x43,0xe8,0x1b,0x71,0xff,0x16,
    0x98,0x5f,0xaf,0x9b,0xed,0x4e,0xb8,0x2b,0xd7,0x21,0xf2,0x19,0x9f,0x3e,0xf8,0xec,
    0x73,0x7c,0xee,0x89,0x09,0x37,0x3e,0x15,0xc7,0x47,0x6d,0xfd,0x72,0x2a,0xd4,0xe9,
    0x77,0x7c,0xb6,0xc2,0x47,0xeb,0xe5,0xe0,0x63,0x7e,0x15,0xc7,0x67,0x34,0x26,0x1f,
    0xe5,0xb8,0x95,0x7c,0xc6,0x67,0x13,0x7c,0xc6,0x1c,0x9f,0x7b,0x63,0xc2,0x8d,0xcf,
    0xa0,0xe3,0xa3,0xb6,0x01,0x39,0x83,0xd4,0x19,0x70,0x7c,0xb6,0xc5,0xf4,0x7f,0xd2,
    0xd1,0x58,0xdf,0x27,0xf3,0x1b,0x74,0x7c,0x76,0xc5,0xe4,0xa3,0x1c,0xb7,0x91,0xcf,
    0xcf,0xb8,0xea,0x7c,0x9f,0x8c,0x69,0x1f,0x74,0x67,0x76,0x51,0xd7,0xef,0x69,0xcd,
    0xf9,0x8e,0xc5,0xb4,0xdf,0xba,0xef,0x1a,0xa7,0x79,0x1e,0x14,0x26,0x67,0xb1,0x5d,
    0x97,0xa9,0xd5,0xe4,0xfc,0x0d,0x6d,0xdb,0x30,0x0d,0x40,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       uvec4 transformSrcValue(uvec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
