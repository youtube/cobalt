Tests the RTCPeerConnection constructor.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS webkitRTCPeerConnection is RTCPeerConnection
PASS new RTCPeerConnection(null); did not throw exception.
PASS new RTCPeerConnection(undefined); did not throw exception.
PASS new RTCPeerConnection({}); did not throw exception.
PASS new RTCPeerConnection(); did not throw exception.
PASS new RTCPeerConnection(''); threw exception TypeError: Failed to construct 'RTCPeerConnection': The provided value is not of type 'RTCConfiguration'..
PASS new RTCPeerConnection({iceServers:[]}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[{url:'stun:foo.com'}]}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[{url:'turn:foo.com', username:'x', credential:'x'}]}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[{url:'turn:foo.com', username:'x', credential:'x'},{url:'stun:bar.com'}]}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[{urls:'stun:foo.com'}]}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[{urls:['stun:foo.com', 'turn:foo.com'], username:'x', credential:'x'}]}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[{urls:['stun:foo.com', 'turn:foo.com']}]}); threw exception InvalidAccessError: Failed to construct 'RTCPeerConnection': Both username and credential are required when the URL scheme is "turn" or "turns"..
PASS new RTCPeerConnection({fooServers:[]}); did not throw exception.
PASS new RTCPeerConnection({iceServers:true}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceServers' property from 'RTCConfiguration': The provided value cannot be converted to a sequence..
PASS new RTCPeerConnection({iceServers:[1, 2, 3]}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceServers' property from 'RTCConfiguration': The provided value is not of type 'RTCIceServer'..
PASS new RTCPeerConnection({iceServers:[{}]}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Malformed RTCIceServer.
PASS new RTCPeerConnection({iceServers:[{url:'foo'}]}); threw exception SyntaxError: Failed to construct 'RTCPeerConnection': 'foo' is not a valid URL..
PASS new RTCPeerConnection({iceServers:[{urls:'unsupported:scheme'}]}); threw exception SyntaxError: Failed to construct 'RTCPeerConnection': 'unsupported:scheme' is not a valid stun or turn URL..
PASS new RTCPeerConnection({iceServers:[{urls:[1, 'turn:foo.com']}]}); threw exception SyntaxError: Failed to construct 'RTCPeerConnection': '1' is not a valid URL..
PASS new RTCPeerConnection({iceServers:[], iceTransportPolicy:'relay'}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], iceTransportPolicy:'all'}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], iceTransportPolicy:'none'}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceTransportPolicy' property from 'RTCConfiguration': The provided value 'none' is not a valid enum value of type RTCIceTransportPolicy..
PASS new RTCPeerConnection({iceServers:[], iceTransportPolicy:'foo'}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceTransportPolicy' property from 'RTCConfiguration': The provided value 'foo' is not a valid enum value of type RTCIceTransportPolicy..
PASS new RTCPeerConnection({iceServers:[], iceTransports:'relay'}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], iceTransports:'all'}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], iceTransports:'none'}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceTransports' property from 'RTCConfiguration': The provided value 'none' is not a valid enum value of type RTCIceTransportPolicy..
PASS new RTCPeerConnection({iceServers:[], iceTransports:'foo'}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceTransports' property from 'RTCConfiguration': The provided value 'foo' is not a valid enum value of type RTCIceTransportPolicy..
PASS new RTCPeerConnection({iceServers:[], bundlePolicy:'balanced'}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], bundlePolicy:'max-bundle'}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], bundlePolicy:'max-compat'}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], bundlePolicy:'foo'}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'bundlePolicy' property from 'RTCConfiguration': The provided value 'foo' is not a valid enum value of type RTCBundlePolicy..
PASS new RTCPeerConnection({iceServers:[], rtcpMuxPolicy:'negotiate'}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], rtcpMuxPolicy:'require'}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], rtcpMuxPolicy:'foo'}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'rtcpMuxPolicy' property from 'RTCConfiguration': The provided value 'foo' is not a valid enum value of type RTCRtcpMuxPolicy..
PASS new RTCPeerConnection({iceCandidatePoolSize:0}); did not throw exception.
PASS new RTCPeerConnection({iceCandidatePoolSize:1}); did not throw exception.
PASS new RTCPeerConnection({iceCandidatePoolSize:255}); did not throw exception.
PASS new RTCPeerConnection({iceCandidatePoolSize:-1}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceCandidatePoolSize' property from 'RTCConfiguration': Value is outside the 'octet' value range..
PASS new RTCPeerConnection({iceCandidatePoolSize:99999999}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceCandidatePoolSize' property from 'RTCConfiguration': Value is outside the 'octet' value range..
PASS new RTCPeerConnection({iceCandidatePoolSize:256}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceCandidatePoolSize' property from 'RTCConfiguration': Value is outside the 'octet' value range..
PASS new RTCPeerConnection({iceCandidatePoolSize:'foo'}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'iceCandidatePoolSize' property from 'RTCConfiguration': Value is not of type 'octet'..
PASS new RTCPeerConnection(null, {mandatory:{googIPv6:true}}); did not throw exception.
PASS new RTCPeerConnection(null, {mandatory:{googIPv6:false}}); did not throw exception.
PASS new RTCPeerConnection(null, {mandatory:{googInvalid:true}}); did not throw exception.
PASS new RTCPeerConnection(null, {mandatory:{googInvalid:false}}); did not throw exception.
PASS new RTCPeerConnection(null, {optional:[{googIPv6:true}]}); did not throw exception.
PASS new RTCPeerConnection(null, {optional:[{googIPv6:false}]}); did not throw exception.
PASS new RTCPeerConnection(null, {optional:[{googInvalid:true}]}); did not throw exception.
PASS new RTCPeerConnection(null, {optional:[{googInvalid:false}]}); did not throw exception.
PASS new RTCPeerConnection(null, {mandatory:{googIPv6:123}}); did not throw exception.
PASS new RTCPeerConnection(null, {optional:[{googIPv6:123}]}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], certificates:null}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'certificates' property from 'RTCConfiguration': The provided value cannot be converted to a sequence..
PASS new RTCPeerConnection({iceServers:[], certificates:undefined}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], certificates:[]}); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], certificates:[null]}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'certificates' property from 'RTCConfiguration': Failed to convert value to 'RTCCertificate'..
PASS new RTCPeerConnection({iceServers:[], certificates:[1337]}); threw exception TypeError: Failed to construct 'RTCPeerConnection': Failed to read the 'certificates' property from 'RTCConfiguration': Failed to convert value to 'RTCCertificate'..
PASS new RTCPeerConnection({iceServers:[], certificates:[certRSA]}, null); did not throw exception.
PASS new RTCPeerConnection({iceServers:[], certificates:[certECDSA]}, null); did not throw exception.
PASS certExpired.expires <= new Date().getTime() is true
PASS new RTCPeerConnection({iceServers:[], certificates:[certExpired]}, null); threw exception InvalidAccessError: Failed to construct 'RTCPeerConnection': Expired certificate(s)..
PASS successfullyParsed is true

TEST COMPLETE

