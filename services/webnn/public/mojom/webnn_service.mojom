// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module webnn.mojom;

import "services/webnn/public/mojom/webnn_graph.mojom";
import "sandbox/policy/mojom/sandbox.mojom";

enum PowerPreference {
  // Let the user agent select the most suitable behavior.
  kDefault = 0,
  // Prioritizes execution speed over power consumption.
  kHighPerformance = 1,
  // Prioritizes power consumption over other considerations such as execution
  // speed.
  kLowPower = 2,
};

// Represents options of creating `WebNNContext` interface.
struct CreateContextOptions {
  // The power preference for power consumption.
  PowerPreference power_preference;
};

enum CreateContextResult {
  kOk,
  kUnknownError,
  // The input configuration is not supported.
  kNotSupported,
};

// Represents the `MLContext` object in the WebIDL definition that is a global
// state of neural network compute workload and execution processes. This
// interface runs in the GPU process and is called from the renderer process.
interface WebNNContext {
  // Called by the renderer process to create `WebNNGraph` message pipe for
  // compiling and executing computational graph
  CreateGraph() => (pending_remote<WebNNGraph>? remote);
};

// This interface runs in the GPU process and is called from the renderer
// process to create `WebNNContext` interface.
interface WebNNContextProvider {
  // Called by the renderer process to create a message pipe for `MLContext`,
  // the `CreatContextResult::kNotSupported` with `mojo::NullRemote` will be
  // thrown if the configuration of options isn't supported.
  CreateWebNNContext(CreateContextOptions options)
      => (CreateContextResult result, pending_remote<WebNNContext>? remote);
};

// Represents the WebNN service to infer computational graph. There is only
// one service running in GPU process to access the hardware accelerated OS
// machine learning API (e.g. Direct Machine Learning (DirectML) on Windows).
[ServiceSandbox=sandbox.mojom.Sandbox.kGpu,
 RequireContext=sandbox.mojom.Context.kBrowser]
interface WebNNService {
  // Bind `WebNNContextProvider` interface for every `navigator.ml` object which
  // is called by the renderer with `BrowserInterfaceBroker's GetInterface()`
  // method to create a `WebNNContext` interface.
  BindWebNNContextProvider(pending_receiver<WebNNContextProvider> receiver);
};
