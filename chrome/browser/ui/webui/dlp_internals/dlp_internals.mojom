// Copyright 2023 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module dlp_internals.mojom;

import "url/mojom/url.mojom";

// Represents the type of the data source object.
// See ui/base/data_transfer_policy/data_transfer_endpoint.h
// for EndpointType enum.
enum EndpointType {
  kDefault = 0,
  kUrl = 1,
  kClipboardHistory = 2,
  kUnknownVm = 3,
  kArc = 4,
  kBorealis = 5,
  kCrostini = 6,
  kPluginVm = 7,
  kLacros = 8,
};

struct DataTransferEndpoint {
  // Represents the object type.
  EndpointType type;

  // The URL of the data endpoint. It always has a value
  // if the object type is URL, otherwise it's empty.
  url.mojom.Url? url;
};

// Represents DLP content restrictions.
// See chrome/browser/chromeos/policy/dlp/dlp_content_restriction_set.h
// for DlpContentRestriction enum.
enum ContentRestriction {
  kScreenshot = 0,
  kPrivacyScreen = 1,
  kPrint = 2,
  kScreenShare = 3,
};

// Represents the enforcement level of DLP restrictions.
// See components/enterprise/data_controls/rule.h for Level enum.
enum Level {
  kNotSet = 0,
  kReport = 1,
  kWarn = 2,
  kBlock = 3,
  kAllow = 4,
};

struct ContentRestrictionInfo {
  // Restriction enforced.
  ContentRestriction restriction;
  // Enforcement level of the restriction.
  Level level;
  // The url that caused the restriction to be enforced.
  url.mojom.Url url;
};

struct RenderFrameHostInfo {
  // Last committed URL.
  url.mojom.Url last_committed_url;
  // An array of content restrictions info.
  array<ContentRestrictionInfo> restrictions_info;
};

struct WebContentsInfo {
  // Last committed URL.
  url.mojom.Url last_committed_url;
  // An array of content restrictions info.
  array<ContentRestrictionInfo> restrictions_info;
  // An array of DLP info for all the frames in this WebContents object.
  array<RenderFrameHostInfo> frames_info;
};

// Browser interface for the page. Consists of calls for data and hooks for
// interactivity.
interface PageHandler {
  // Get information about clipboard data source.
  GetClipboardDataSource() => (DataTransferEndpoint? source);

  // Returns content restrictions information for all the tracked WebContents.
  GetContentRestrictionsInfo() => (array<WebContentsInfo> web_contents_info);
};