This is a testharness.js-based test.
Found 663 tests; 474 PASS, 189 FAIL, 0 TIMEOUT, 0 NOTRUN.
PASS Loading data…
PASS Parsing: <http://example	.
org> against <http://example.org/foo/bar>
PASS Parsing: <http://user:pass@foo:21/bar;par?b#c> against <http://example.org/foo/bar>
PASS Parsing: <https://test:@test> without base
PASS Parsing: <https://:@test> without base
FAIL Parsing: <non-special://test:@test/x> without base assert_equals: href expected "non-special://test@test/x" but got "non-special://test:@test/x"
FAIL Parsing: <non-special://:@test/x> without base assert_equals: href expected "non-special://test/x" but got "non-special://:@test/x"
PASS Parsing: <http:foo.com> against <http://example.org/foo/bar>
PASS Parsing: <	   :foo.com   
> against <http://example.org/foo/bar>
PASS Parsing: < foo.com  > against <http://example.org/foo/bar>
FAIL Parsing: <a:	 foo.com> against <http://example.org/foo/bar> assert_equals: href expected "a: foo.com" but got "file:///A:/%20foo.com"
PASS Parsing: <http://f:21/ b ? d # e > against <http://example.org/foo/bar>
PASS Parsing: <lolscheme:x x#x x> without base
PASS Parsing: <http://f:/c> against <http://example.org/foo/bar>
PASS Parsing: <http://f:0/c> against <http://example.org/foo/bar>
PASS Parsing: <http://f:00000000000000/c> against <http://example.org/foo/bar>
PASS Parsing: <http://f:00000000000000000000080/c> against <http://example.org/foo/bar>
PASS Parsing: <http://f:b/c> against <http://example.org/foo/bar>
PASS Parsing: <http://f: /c> against <http://example.org/foo/bar>
PASS Parsing: <http://f:
/c> against <http://example.org/foo/bar>
PASS Parsing: <http://f:fifty-two/c> against <http://example.org/foo/bar>
PASS Parsing: <http://f:999999/c> against <http://example.org/foo/bar>
FAIL Parsing: <non-special://f:999999/c> against <http://example.org/foo/bar> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://f: 21 / b ? d # e > against <http://example.org/foo/bar>
PASS Parsing: <> against <http://example.org/foo/bar>
PASS Parsing: <  	> against <http://example.org/foo/bar>
PASS Parsing: <:foo.com/> against <http://example.org/foo/bar>
PASS Parsing: <:foo.com\> against <http://example.org/foo/bar>
PASS Parsing: <:> against <http://example.org/foo/bar>
PASS Parsing: <:a> against <http://example.org/foo/bar>
PASS Parsing: <:/> against <http://example.org/foo/bar>
PASS Parsing: <:\> against <http://example.org/foo/bar>
PASS Parsing: <:#> against <http://example.org/foo/bar>
PASS Parsing: <#> against <http://example.org/foo/bar>
PASS Parsing: <#/> against <http://example.org/foo/bar>
PASS Parsing: <#\> against <http://example.org/foo/bar>
PASS Parsing: <#;?> against <http://example.org/foo/bar>
PASS Parsing: <?> against <http://example.org/foo/bar>
PASS Parsing: </> against <http://example.org/foo/bar>
PASS Parsing: <:23> against <http://example.org/foo/bar>
PASS Parsing: </:23> against <http://example.org/foo/bar>
PASS Parsing: <\x> against <http://example.org/foo/bar>
FAIL Parsing: <\\x\hello> against <http://example.org/foo/bar> assert_equals: href expected "http://x/hello" but got "file://x/hello"
PASS Parsing: <::> against <http://example.org/foo/bar>
PASS Parsing: <::23> against <http://example.org/foo/bar>
FAIL Parsing: <foo://> against <http://example.org/foo/bar> assert_equals: pathname expected "" but got "//"
PASS Parsing: <http://a:b@c:29/d> against <http://example.org/foo/bar>
PASS Parsing: <http::@c:29> against <http://example.org/foo/bar>
PASS Parsing: <http://&a:foo(b]c@d:2/> against <http://example.org/foo/bar>
PASS Parsing: <http://::@c@d:2> against <http://example.org/foo/bar>
PASS Parsing: <http://foo.com:b@d/> against <http://example.org/foo/bar>
PASS Parsing: <http://foo.com/\@> against <http://example.org/foo/bar>
PASS Parsing: <http:\\foo.com\> against <http://example.org/foo/bar>
PASS Parsing: <http:\\a\b:c\d@foo.com\> against <http://example.org/foo/bar>
PASS Parsing: <foo:/> against <http://example.org/foo/bar>
PASS Parsing: <foo:/bar.com/> against <http://example.org/foo/bar>
FAIL Parsing: <foo://///////> against <http://example.org/foo/bar> assert_equals: pathname expected "///////" but got "/////////"
FAIL Parsing: <foo://///////bar.com/> against <http://example.org/foo/bar> assert_equals: pathname expected "///////bar.com/" but got "/////////bar.com/"
FAIL Parsing: <foo:////://///> against <http://example.org/foo/bar> assert_equals: pathname expected "//://///" but got "////://///"
FAIL Parsing: <c:/foo> against <http://example.org/foo/bar> assert_equals: href expected "c:/foo" but got "file:///C:/foo"
PASS Parsing: <//foo/bar> against <http://example.org/foo/bar>
PASS Parsing: <http://foo/path;a??e#f#g> against <http://example.org/foo/bar>
PASS Parsing: <http://foo/abcd?efgh?ijkl> against <http://example.org/foo/bar>
PASS Parsing: <http://foo/abcd#foo?bar> against <http://example.org/foo/bar>
PASS Parsing: <[61:24:74]:98> against <http://example.org/foo/bar>
PASS Parsing: <http:[61:27]/:foo> against <http://example.org/foo/bar>
PASS Parsing: <http://[1::2]:3:4> against <http://example.org/foo/bar>
PASS Parsing: <http://2001::1> against <http://example.org/foo/bar>
PASS Parsing: <http://2001::1]> against <http://example.org/foo/bar>
PASS Parsing: <http://2001::1]:80> against <http://example.org/foo/bar>
PASS Parsing: <http://[2001::1]> against <http://example.org/foo/bar>
PASS Parsing: <http://[::127.0.0.1]> against <http://example.org/foo/bar>
FAIL Parsing: <http://[::127.0.0.1.]> against <http://example.org/foo/bar> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://[0:0:0:0:0:0:13.1.68.3]> against <http://example.org/foo/bar>
PASS Parsing: <http://[2001::1]:80> against <http://example.org/foo/bar>
PASS Parsing: <http:/example.com/> against <http://example.org/foo/bar>
PASS Parsing: <ftp:/example.com/> against <http://example.org/foo/bar>
PASS Parsing: <https:/example.com/> against <http://example.org/foo/bar>
PASS Parsing: <madeupscheme:/example.com/> against <http://example.org/foo/bar>
PASS Parsing: <ftps:/example.com/> against <http://example.org/foo/bar>
PASS Parsing: <gopher:/example.com/> against <http://example.org/foo/bar>
PASS Parsing: <ws:/example.com/> against <http://example.org/foo/bar>
PASS Parsing: <wss:/example.com/> against <http://example.org/foo/bar>
PASS Parsing: <data:/example.com/> against <http://example.org/foo/bar>
PASS Parsing: <http:example.com/> against <http://example.org/foo/bar>
PASS Parsing: <ftp:example.com/> against <http://example.org/foo/bar>
PASS Parsing: <https:example.com/> against <http://example.org/foo/bar>
PASS Parsing: <madeupscheme:example.com/> against <http://example.org/foo/bar>
PASS Parsing: <ftps:example.com/> against <http://example.org/foo/bar>
PASS Parsing: <gopher:example.com/> against <http://example.org/foo/bar>
PASS Parsing: <ws:example.com/> against <http://example.org/foo/bar>
PASS Parsing: <wss:example.com/> against <http://example.org/foo/bar>
PASS Parsing: <data:example.com/> against <http://example.org/foo/bar>
PASS Parsing: </a/b/c> against <http://example.org/foo/bar>
PASS Parsing: </a/ /c> against <http://example.org/foo/bar>
PASS Parsing: </a%2fc> against <http://example.org/foo/bar>
PASS Parsing: </a/%2f/c> against <http://example.org/foo/bar>
PASS Parsing: <#β> against <http://example.org/foo/bar>
PASS Parsing: <data:text/html,test#test> against <http://example.org/foo/bar>
PASS Parsing: <tel:1234567890> against <http://example.org/foo/bar>
FAIL Parsing: <ssh://example.com/foo/bar.git> against <http://example.org/> assert_equals: host expected "example.com" but got ""
PASS Parsing: <http://example.com/././foo> without base
PASS Parsing: <http://example.com/./.foo> without base
PASS Parsing: <http://example.com/foo/.> without base
PASS Parsing: <http://example.com/foo/./> without base
PASS Parsing: <http://example.com/foo/bar/..> without base
PASS Parsing: <http://example.com/foo/bar/../> without base
PASS Parsing: <http://example.com/foo/..bar> without base
PASS Parsing: <http://example.com/foo/bar/../ton> without base
PASS Parsing: <http://example.com/foo/bar/../ton/../../a> without base
PASS Parsing: <http://example.com/foo/../../..> without base
PASS Parsing: <http://example.com/foo/../../../ton> without base
PASS Parsing: <http://example.com/foo/%2e> without base
FAIL Parsing: <http://example.com/foo/%2e%2> without base assert_equals: href expected "http://example.com/foo/%2e%2" but got "http://example.com/foo/.%2"
FAIL Parsing: <http://example.com/foo/%2e./%2e%2e/.%2e/%2e.bar> without base assert_equals: href expected "http://example.com/%2e.bar" but got "http://example.com/..bar"
PASS Parsing: <http://example.com////../..> without base
PASS Parsing: <http://example.com/foo/bar//../..> without base
PASS Parsing: <http://example.com/foo/bar//..> without base
PASS Parsing: <http://example.com/foo> without base
PASS Parsing: <http://example.com/%20foo> without base
PASS Parsing: <http://example.com/foo%> without base
PASS Parsing: <http://example.com/foo%2> without base
PASS Parsing: <http://example.com/foo%2zbar> without base
PASS Parsing: <http://example.com/foo%2Â©zbar> without base
FAIL Parsing: <http://example.com/foo%41%7a> without base assert_equals: href expected "http://example.com/foo%41%7a" but got "http://example.com/fooAz"
PASS Parsing: <http://example.com/foo	%91> without base
FAIL Parsing: <http://example.com/foo%00%51> without base Failed to construct 'URL': Invalid URL
PASS Parsing: <http://example.com/(%28:%3A%29)> without base
PASS Parsing: <http://example.com/%3A%3a%3C%3c> without base
PASS Parsing: <http://example.com/foo	bar> without base
PASS Parsing: <http://example.com\\foo\\bar> without base
PASS Parsing: <http://example.com/%7Ffp3%3Eju%3Dduvgw%3Dd> without base
PASS Parsing: <http://example.com/@asdf%40> without base
PASS Parsing: <http://example.com/你好你好> without base
PASS Parsing: <http://example.com/‥/foo> without base
PASS Parsing: <http://example.com/﻿/foo> without base
PASS Parsing: <http://example.com/‮/foo/‭/bar> without base
PASS Parsing: <http://www.google.com/foo?bar=baz#> without base
PASS Parsing: <http://www.google.com/foo?bar=baz# »> without base
PASS Parsing: <data:test# »> without base
PASS Parsing: <http://www.google.com> without base
PASS Parsing: <http://192.0x00A80001> without base
FAIL Parsing: <http://www/foo%2Ehtml> without base assert_equals: href expected "http://www/foo%2Ehtml" but got "http://www/foo.html"
PASS Parsing: <http://www/foo/%2E/html> without base
PASS Parsing: <http://user:pass@/> without base
PASS Parsing: <http://%25DOMAIN:foobar@foodomain.com/> without base
PASS Parsing: <http:\\www.google.com\foo> without base
PASS Parsing: <http://foo:80/> without base
PASS Parsing: <http://foo:81/> without base
FAIL Parsing: <httpa://foo:80/> without base assert_equals: host expected "foo:80" but got ""
PASS Parsing: <http://foo:-80/> without base
PASS Parsing: <https://foo:443/> without base
PASS Parsing: <https://foo:80/> without base
PASS Parsing: <ftp://foo:21/> without base
PASS Parsing: <ftp://foo:80/> without base
FAIL Parsing: <gopher://foo:70/> without base assert_equals: host expected "foo:70" but got ""
FAIL Parsing: <gopher://foo:443/> without base assert_equals: host expected "foo:443" but got ""
PASS Parsing: <ws://foo:80/> without base
PASS Parsing: <ws://foo:81/> without base
PASS Parsing: <ws://foo:443/> without base
PASS Parsing: <ws://foo:815/> without base
PASS Parsing: <wss://foo:80/> without base
PASS Parsing: <wss://foo:81/> without base
PASS Parsing: <wss://foo:443/> without base
PASS Parsing: <wss://foo:815/> without base
PASS Parsing: <http:/example.com/> without base
PASS Parsing: <ftp:/example.com/> without base
PASS Parsing: <https:/example.com/> without base
PASS Parsing: <madeupscheme:/example.com/> without base
PASS Parsing: <ftps:/example.com/> without base
PASS Parsing: <gopher:/example.com/> without base
PASS Parsing: <ws:/example.com/> without base
PASS Parsing: <wss:/example.com/> without base
PASS Parsing: <data:/example.com/> without base
PASS Parsing: <http:example.com/> without base
PASS Parsing: <ftp:example.com/> without base
PASS Parsing: <https:example.com/> without base
PASS Parsing: <madeupscheme:example.com/> without base
PASS Parsing: <ftps:example.com/> without base
PASS Parsing: <gopher:example.com/> without base
PASS Parsing: <ws:example.com/> without base
PASS Parsing: <wss:example.com/> without base
PASS Parsing: <data:example.com/> without base
PASS Parsing: <http:@www.example.com> without base
PASS Parsing: <http:/@www.example.com> without base
PASS Parsing: <http://@www.example.com> without base
PASS Parsing: <http:a:b@www.example.com> without base
PASS Parsing: <http:/a:b@www.example.com> without base
PASS Parsing: <http://a:b@www.example.com> without base
PASS Parsing: <http://@pple.com> without base
PASS Parsing: <http::b@www.example.com> without base
PASS Parsing: <http:/:b@www.example.com> without base
PASS Parsing: <http://:b@www.example.com> without base
PASS Parsing: <http:/:@/www.example.com> without base
PASS Parsing: <http://user@/www.example.com> without base
PASS Parsing: <http:@/www.example.com> without base
PASS Parsing: <http:/@/www.example.com> without base
PASS Parsing: <http://@/www.example.com> without base
PASS Parsing: <https:@/www.example.com> without base
PASS Parsing: <http:a:b@/www.example.com> without base
PASS Parsing: <http:/a:b@/www.example.com> without base
PASS Parsing: <http://a:b@/www.example.com> without base
PASS Parsing: <http::@/www.example.com> without base
PASS Parsing: <http:a:@www.example.com> without base
PASS Parsing: <http:/a:@www.example.com> without base
PASS Parsing: <http://a:@www.example.com> without base
PASS Parsing: <http://www.@pple.com> without base
PASS Parsing: <http:@:www.example.com> without base
PASS Parsing: <http:/@:www.example.com> without base
PASS Parsing: <http://@:www.example.com> without base
PASS Parsing: <http://:@www.example.com> without base
PASS Parsing: </> against <http://www.example.com/test>
PASS Parsing: </test.txt> against <http://www.example.com/test>
PASS Parsing: <.> against <http://www.example.com/test>
PASS Parsing: <..> against <http://www.example.com/test>
PASS Parsing: <test.txt> against <http://www.example.com/test>
PASS Parsing: <./test.txt> against <http://www.example.com/test>
PASS Parsing: <../test.txt> against <http://www.example.com/test>
PASS Parsing: <../aaa/test.txt> against <http://www.example.com/test>
PASS Parsing: <../../test.txt> against <http://www.example.com/test>
PASS Parsing: <中/test.txt> against <http://www.example.com/test>
PASS Parsing: <http://www.example2.com> against <http://www.example.com/test>
PASS Parsing: <//www.example2.com> against <http://www.example.com/test>
PASS Parsing: <http://ExAmPlE.CoM> against <http://other.com/>
FAIL Parsing: <http://example example.com> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://Goo%20 goo%7C|.com> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://[]> against <http://other.com/>
PASS Parsing: <http://[:]> against <http://other.com/>
FAIL Parsing: <http://GOO 　goo.com> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://GOO​⁠﻿goo.com> against <http://other.com/>
PASS Parsing: <\0 http://example.com/ \r > without base
PASS Parsing: <http://www.foo。bar.com> against <http://other.com/>
PASS Parsing: <http://﷐zyx.com> against <http://other.com/>
PASS Parsing: <http://%ef%b7%90zyx.com> against <http://other.com/>
PASS Parsing: <https://�> without base
PASS Parsing: <https://%EF%BF%BD> without base
PASS Parsing: <https://x/�?�#�> without base
FAIL Parsing: <http://a.b.c.xn--pokxncvks> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://10.0.0.xn--pokxncvks> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://a.b.c.XN--pokxncvks> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://a.b.c.Xn--pokxncvks> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://10.0.0.XN--pokxncvks> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://10.0.0.xN--pokxncvks> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://Ｇｏ.com> against <http://other.com/>
FAIL Parsing: <http://％４１.com> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://%ef%bc%85%ef%bc%94%ef%bc%91.com> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://％００.com> against <http://other.com/>
PASS Parsing: <http://%ef%bc%85%ef%bc%90%ef%bc%90.com> against <http://other.com/>
PASS Parsing: <http://你好你好> against <http://other.com/>
PASS Parsing: <https://faß.ExAmPlE/> without base
FAIL Parsing: <sc://faß.ExAmPlE/> without base assert_equals: host expected "fa%C3%9F.ExAmPlE" but got ""
PASS Parsing: <http://%zz%66%a.com> against <http://other.com/>
PASS Parsing: <http://%25> against <http://other.com/>
PASS Parsing: <http://hello%00> against <http://other.com/>
PASS Parsing: <http://%30%78%63%30%2e%30%32%35%30.01> against <http://other.com/>
PASS Parsing: <http://%30%78%63%30%2e%30%32%35%30.01%2e> against <http://other.com/>
PASS Parsing: <http://192.168.0.257> against <http://other.com/>
PASS Parsing: <http://%3g%78%63%30%2e%30%32%35%30%2E.01> against <http://other.com/>
FAIL Parsing: <http://192.168.0.1 hello> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <https://x x:12> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://０Ｘｃ０．０２５０．０１> against <http://other.com/>
PASS Parsing: <http://./> without base
PASS Parsing: <http://../> without base
FAIL Parsing: <h://.> without base assert_equals: href expected "h://." but got "file:///H://"
PASS Parsing: <http://[www.google.com]/> without base
PASS Parsing: <http://[google.com]> against <http://other.com/>
PASS Parsing: <http://[::1.2.3.4x]> against <http://other.com/>
FAIL Parsing: <http://[::1.2.3.]> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://[::1.2.]> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://[::.1.2]> against <http://other.com/>
FAIL Parsing: <http://[::1.]> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://[::.1]> against <http://other.com/>
FAIL Parsing: <http://[::%31]> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://%5B::1]> against <http://other.com/> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://foo:💩@example.com/bar> against <http://other.com/>
PASS Parsing: <#> against <test:test>
PASS Parsing: <#x> against <data:,>
PASS Parsing: <#x> against <about:blank>
PASS Parsing: <#x:y> against <about:blank>
PASS Parsing: <#> against <test:test?test>
PASS Parsing: <https://@test@test@example:800/> against <http://doesnotmatter/>
PASS Parsing: <https://@@@example> against <http://doesnotmatter/>
PASS Parsing: <http://`{}:`{}@h/`{}?`{}> against <http://doesnotmatter/>
PASS Parsing: <http://host/?'> without base
FAIL Parsing: <notspecial://host/?'> without base assert_equals: href expected "notspecial://host/?'" but got "notspecial://host/?%27"
PASS Parsing: </some/path> against <http://user@example.org/smth>
PASS Parsing: <> against <http://user:pass@example.org:21/smth>
PASS Parsing: </some/path> against <http://user:pass@example.org:21/smth>
PASS Parsing: <i> against <sc:sd>
PASS Parsing: <i> against <sc:sd/sd>
PASS Parsing: <i> against <sc:/pa/pa>
FAIL Parsing: <i> against <sc://ho/pa> assert_equals: host expected "ho" but got ""
FAIL Parsing: <i> against <sc:///pa/pa> assert_equals: pathname expected "/pa/i" but got "///pa/i"
PASS Parsing: <../i> against <sc:sd>
PASS Parsing: <../i> against <sc:sd/sd>
PASS Parsing: <../i> against <sc:/pa/pa>
FAIL Parsing: <../i> against <sc://ho/pa> assert_equals: host expected "ho" but got ""
FAIL Parsing: <../i> against <sc:///pa/pa> assert_equals: href expected "sc:///i" but got "sc:///pa/i"
PASS Parsing: </i> against <sc:sd>
PASS Parsing: </i> against <sc:sd/sd>
PASS Parsing: </i> against <sc:/pa/pa>
FAIL Parsing: </i> against <sc://ho/pa> assert_equals: host expected "ho" but got ""
FAIL Parsing: </i> against <sc:///pa/pa> assert_equals: href expected "sc:///i" but got "sc:///pa/i"
PASS Parsing: <?i> against <sc:sd>
PASS Parsing: <?i> against <sc:sd/sd>
PASS Parsing: <?i> against <sc:/pa/pa>
FAIL Parsing: <?i> against <sc://ho/pa> assert_equals: host expected "ho" but got ""
FAIL Parsing: <?i> against <sc:///pa/pa> assert_equals: pathname expected "/pa/pa" but got "///pa/pa"
PASS Parsing: <#i> against <sc:sd>
PASS Parsing: <#i> against <sc:sd/sd>
PASS Parsing: <#i> against <sc:/pa/pa>
FAIL Parsing: <#i> against <sc://ho/pa> assert_equals: host expected "ho" but got ""
FAIL Parsing: <#i> against <sc:///pa/pa> assert_equals: pathname expected "/pa/pa" but got "///pa/pa"
FAIL Parsing: <about:/../> without base assert_equals: href expected "about:/" but got "about:/../"
FAIL Parsing: <data:/../> without base assert_equals: href expected "data:/" but got "data:/../"
FAIL Parsing: <sc://ñ.test/> without base assert_equals: host expected "%C3%B1.test" but got ""
FAIL Parsing: <sc://%/> without base assert_equals: host expected "%" but got ""
FAIL Parsing: <sc://@/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://te@s:t@/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://:/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://:12/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <x> against <sc://ñ> Failed to construct 'URL': Invalid URL
PASS Parsing: <sc:\../> without base
PASS Parsing: <sc::a@example.net> without base
PASS Parsing: <wow:%NBD> without base
PASS Parsing: <wow:%1G> without base
FAIL Parsing: <wow:￿> without base assert_equals: href expected "wow:%EF%BF%BF" but got "wow:%EF%BF%BD"
FAIL Parsing: <http://example.com/U+d800𐟾U+dfff﷐﷏﷯ﷰ￾￿?U+d800𐟾U+dfff﷐﷏﷯ﷰ￾￿> without base Failed to construct 'URL': Invalid URL
FAIL Parsing: <sc://a\0b/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://a b/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://a<b> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://a>b> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://a[b/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://a\b/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://a]b/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://a^b> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <sc://a|b/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <foo://ho	st/> without base assert_equals: host expected "host" but got ""
FAIL Parsing: <foo://ho
st/> without base assert_equals: host expected "host" but got ""
FAIL Parsing: <foo://ho\rst/> without base assert_equals: host expected "host" but got ""
PASS Parsing: <http://a\0b/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ab/> without base
FAIL Parsing: <http://a b/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://a%b/> without base
FAIL Parsing: <http://a<b> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://a>b> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://a[b/> without base
PASS Parsing: <http://a]b/> without base
PASS Parsing: <http://a^b> without base
FAIL Parsing: <http://a|b/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://ab/> without base
PASS Parsing: <http://ho	st/> without base
PASS Parsing: <http://ho
st/> without base
PASS Parsing: <http://ho\rst/> without base
PASS Parsing: <http://ho%00st/> without base
PASS Parsing: <http://ho%01st/> without base
PASS Parsing: <http://ho%02st/> without base
PASS Parsing: <http://ho%03st/> without base
PASS Parsing: <http://ho%04st/> without base
PASS Parsing: <http://ho%05st/> without base
PASS Parsing: <http://ho%06st/> without base
PASS Parsing: <http://ho%07st/> without base
PASS Parsing: <http://ho%08st/> without base
PASS Parsing: <http://ho%09st/> without base
PASS Parsing: <http://ho%0Ast/> without base
PASS Parsing: <http://ho%0Bst/> without base
PASS Parsing: <http://ho%0Cst/> without base
PASS Parsing: <http://ho%0Dst/> without base
PASS Parsing: <http://ho%0Est/> without base
PASS Parsing: <http://ho%0Fst/> without base
PASS Parsing: <http://ho%10st/> without base
PASS Parsing: <http://ho%11st/> without base
PASS Parsing: <http://ho%12st/> without base
PASS Parsing: <http://ho%13st/> without base
PASS Parsing: <http://ho%14st/> without base
PASS Parsing: <http://ho%15st/> without base
PASS Parsing: <http://ho%16st/> without base
PASS Parsing: <http://ho%17st/> without base
PASS Parsing: <http://ho%18st/> without base
PASS Parsing: <http://ho%19st/> without base
PASS Parsing: <http://ho%1Ast/> without base
PASS Parsing: <http://ho%1Bst/> without base
PASS Parsing: <http://ho%1Cst/> without base
PASS Parsing: <http://ho%1Dst/> without base
PASS Parsing: <http://ho%1Est/> without base
PASS Parsing: <http://ho%1Fst/> without base
FAIL Parsing: <http://ho%20st/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://ho%23st/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://ho%25st/> without base
PASS Parsing: <http://ho%2Fst/> without base
PASS Parsing: <http://ho%3Ast/> without base
FAIL Parsing: <http://ho%3Cst/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <http://ho%3Est/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://ho%3Fst/> without base
FAIL Parsing: <http://ho%40st/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://ho%5Bst/> without base
PASS Parsing: <http://ho%5Cst/> without base
PASS Parsing: <http://ho%5Dst/> without base
FAIL Parsing: <http://ho%7Cst/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://ho%7Fst/> without base
FAIL Parsing: <http://!"$&'()*+,-.;=_`{}~/> without base Failed to construct 'URL': Invalid URL
FAIL Parsing: <sc://!"$%&'()*+,-.;=_`{}~/> without base assert_equals: host expected "%01%02%03%04%05%06%07%08%0B%0C%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%7F!\"$%&'()*+,-.;=_`{}~" but got ""
PASS Parsing: <ftp://example.com%80/> without base
PASS Parsing: <ftp://example.com%A0/> without base
PASS Parsing: <https://example.com%80/> without base
PASS Parsing: <https://example.com%A0/> without base
PASS Parsing: <ftp://%e2%98%83> without base
PASS Parsing: <https://%e2%98%83> without base
PASS Parsing: <http://127.0.0.1:10100/relative_import.html> without base
PASS Parsing: <http://facebook.com/?foo=%7B%22abc%22> without base
PASS Parsing: <https://localhost:3000/jqueryui@1.2.3> without base
PASS Parsing: <h	t
t\rp://h	o
s\rt:9	0
0\r0/p	a
t\rh?q	u
e\rry#f	r
a\rg> without base
PASS Parsing: <?a=b&c=d> against <http://example.org/foo/bar>
PASS Parsing: <??a=b&c=d> against <http://example.org/foo/bar>
PASS Parsing: <http:> against <http://example.org/foo/bar>
PASS Parsing: <http:> against <https://example.org/foo/bar>
PASS Parsing: <sc:> against <https://example.org/foo/bar>
PASS Parsing: <http://foo.bar/baz?qux#foobar> without base
PASS Parsing: <http://foo.bar/baz?qux#foo"bar> without base
PASS Parsing: <http://foo.bar/baz?qux#foo<bar> without base
PASS Parsing: <http://foo.bar/baz?qux#foo>bar> without base
PASS Parsing: <http://foo.bar/baz?qux#foo`bar> without base
PASS Parsing: <http://1.2.3.4/> against <http://other.com/>
PASS Parsing: <http://1.2.3.4./> against <http://other.com/>
PASS Parsing: <http://192.168.257> against <http://other.com/>
PASS Parsing: <http://192.168.257.> against <http://other.com/>
PASS Parsing: <http://192.168.257.com> against <http://other.com/>
PASS Parsing: <http://256> against <http://other.com/>
PASS Parsing: <http://256.com> against <http://other.com/>
PASS Parsing: <http://999999999> against <http://other.com/>
PASS Parsing: <http://999999999.> against <http://other.com/>
PASS Parsing: <http://999999999.com> against <http://other.com/>
PASS Parsing: <http://10000000000> against <http://other.com/>
PASS Parsing: <http://10000000000.com> against <http://other.com/>
PASS Parsing: <http://4294967295> against <http://other.com/>
PASS Parsing: <http://4294967296> against <http://other.com/>
PASS Parsing: <http://0xffffffff> against <http://other.com/>
PASS Parsing: <http://0xffffffff1> against <http://other.com/>
PASS Parsing: <http://256.256.256.256> against <http://other.com/>
PASS Parsing: <https://0x.0x.0> without base
PASS Parsing: <https://0x100000000/test> without base
PASS Parsing: <https://256.0.0.1/test> without base
FAIL Parsing: <https://%43%7C/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <asdf://%43|/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <asdf://%43%7C/> without base assert_equals: host expected "%43%7C" but got ""
FAIL Parsing: <\\\.\Y:> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <\\\.\y:> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <http://[1:0::]> against <http://example.net/>
PASS Parsing: <http://[0:1:2:3:4:5:6:7:8]> against <http://example.net/>
PASS Parsing: <https://[0::0::0]> without base
PASS Parsing: <https://[0:.0]> without base
PASS Parsing: <https://[0:0:]> without base
PASS Parsing: <https://[0:1:2:3:4:5:6:7.0.0.0.1]> without base
PASS Parsing: <https://[0:1.00.0.0.0]> without base
PASS Parsing: <https://[0:1.290.0.0.0]> without base
PASS Parsing: <https://[0:1.23.23]> without base
PASS Parsing: <http://?> without base
PASS Parsing: <http://#> without base
PASS Parsing: <http://f:4294967377/c> against <http://example.org/>
PASS Parsing: <http://f:18446744073709551697/c> against <http://example.org/>
PASS Parsing: <http://f:340282366920938463463374607431768211537/c> against <http://example.org/>
FAIL Parsing: <sc://ñ> without base assert_equals: host expected "%C3%B1" but got ""
FAIL Parsing: <sc://ñ?x> without base assert_equals: host expected "%C3%B1" but got ""
FAIL Parsing: <sc://ñ#x> without base assert_equals: host expected "%C3%B1" but got ""
FAIL Parsing: <#x> against <sc://ñ> Failed to construct 'URL': Invalid URL
FAIL Parsing: <?x> against <sc://ñ> Failed to construct 'URL': Invalid URL
FAIL Parsing: <sc://?> without base assert_equals: pathname expected "" but got "//"
FAIL Parsing: <sc://#> without base assert_equals: pathname expected "" but got "//"
FAIL Parsing: <///> against <sc://x/> Failed to construct 'URL': Invalid URL
FAIL Parsing: <////> against <sc://x/> Failed to construct 'URL': Invalid URL
FAIL Parsing: <////x/> against <sc://x/> assert_equals: href expected "sc:////x/" but got "sc://x/"
FAIL Parsing: <tftp://foobar.com/someconfig;mode=netascii> without base assert_equals: host expected "foobar.com" but got ""
FAIL Parsing: <telnet://user:pass@foobar.com:23/> without base assert_equals: username expected "user" but got ""
FAIL Parsing: <ut2004://10.10.10.10:7777/Index.ut2> without base assert_equals: host expected "10.10.10.10:7777" but got ""
FAIL Parsing: <redis://foo:bar@somehost:6379/0?baz=bam&qux=baz> without base assert_equals: username expected "foo" but got ""
FAIL Parsing: <rsync://foo@host:911/sup> without base assert_equals: username expected "foo" but got ""
FAIL Parsing: <git://github.com/foo/bar.git> without base assert_equals: host expected "github.com" but got ""
FAIL Parsing: <irc://myserver.com:6999/channel?passwd> without base assert_equals: host expected "myserver.com:6999" but got ""
FAIL Parsing: <dns://fw.example.org:9999/foo.bar.org?type=TXT> without base assert_equals: host expected "fw.example.org:9999" but got ""
FAIL Parsing: <ldap://localhost:389/ou=People,o=JNDITutorial> without base assert_equals: host expected "localhost:389" but got ""
FAIL Parsing: <git+https://github.com/foo/bar> without base assert_equals: host expected "github.com" but got ""
PASS Parsing: <urn:ietf:rfc:2648> without base
PASS Parsing: <tag:joe@example.org,2001:foo/bar> without base
FAIL Parsing: <non-spec:/.//> without base assert_equals: pathname expected "//" but got "/.//"
FAIL Parsing: <non-spec:/..//> without base assert_equals: href expected "non-spec:/.//" but got "non-spec:/..//"
FAIL Parsing: <non-spec:/a/..//> without base assert_equals: href expected "non-spec:/.//" but got "non-spec:/a/..//"
FAIL Parsing: <non-spec:/.//path> without base assert_equals: pathname expected "//path" but got "/.//path"
FAIL Parsing: <non-spec:/..//path> without base assert_equals: href expected "non-spec:/.//path" but got "non-spec:/..//path"
FAIL Parsing: <non-spec:/a/..//path> without base assert_equals: href expected "non-spec:/.//path" but got "non-spec:/a/..//path"
FAIL Parsing: </.//path> against <non-spec:/p> assert_equals: href expected "non-spec:/.//path" but got "non-spec://path"
FAIL Parsing: </..//path> against <non-spec:/p> assert_equals: href expected "non-spec:/.//path" but got "non-spec://path"
FAIL Parsing: <..//path> against <non-spec:/p> assert_equals: href expected "non-spec:/.//path" but got "non-spec://path"
FAIL Parsing: <a/..//path> against <non-spec:/p> assert_equals: href expected "non-spec:/.//path" but got "non-spec://path"
FAIL Parsing: <> against <non-spec:/..//p> assert_equals: href expected "non-spec:/.//p" but got "non-spec:/..//p"
FAIL Parsing: <path> against <non-spec:/..//p> assert_equals: href expected "non-spec:/.//path" but got "non-spec:/..//path"
FAIL Parsing: <../path> against <non-spec:/.//p> assert_equals: href expected "non-spec:/path" but got "non-spec:/./path"
FAIL Parsing: <non-special://%E2%80%A0/> without base assert_equals: host expected "%E2%80%A0" but got ""
FAIL Parsing: <non-special://H%4fSt/path> without base assert_equals: host expected "H%4fSt" but got ""
FAIL Parsing: <non-special://[1:2:0:0:5:0:0:0]/> without base assert_equals: href expected "non-special://[1:2:0:0:5::]/" but got "non-special://[1:2:0:0:5:0:0:0]/"
FAIL Parsing: <non-special://[1:2:0:0:0:0:0:3]/> without base assert_equals: href expected "non-special://[1:2::3]/" but got "non-special://[1:2:0:0:0:0:0:3]/"
FAIL Parsing: <non-special://[1:2::3]:80/> without base assert_equals: host expected "[1:2::3]:80" but got ""
FAIL Parsing: <non-special://[:80/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
PASS Parsing: <blob:https://example.com:443/> without base
PASS Parsing: <blob:d3958f5c-0777-0845-9dcf-2cb28783acaf> without base
PASS Parsing: <blob:> without base
PASS Parsing: <http://0x7f.0.0.0x7g> without base
PASS Parsing: <http://0X7F.0.0.0X7G> without base
PASS Parsing: <http://[::127.0.0.0.1]> without base
PASS Parsing: <http://[0:1:0:1:0:1:0:1]> without base
PASS Parsing: <http://[1:0:1:0:1:0:1:0]> without base
PASS Parsing: <http://example.org/test?"> without base
PASS Parsing: <http://example.org/test?#> without base
PASS Parsing: <http://example.org/test?<> without base
PASS Parsing: <http://example.org/test?>> without base
PASS Parsing: <http://example.org/test?⌣> without base
PASS Parsing: <http://example.org/test?%23%23> without base
PASS Parsing: <http://example.org/test?%GH> without base
PASS Parsing: <http://example.org/test?a#%EF> without base
PASS Parsing: <http://example.org/test?a#%GH> without base
PASS Parsing: <a> without base
PASS Parsing: <a/> without base
PASS Parsing: <a//> without base
FAIL Parsing: <test-a-colon.html> against <a:> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <test-a-colon-b.html> against <a:b> assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <test-a-colon-slash.html> against <a:/> assert_equals: href expected "a:/test-a-colon-slash.html" but got "file:///A:/test-a-colon-slash.html"
FAIL Parsing: <test-a-colon-slash-slash.html> against <a://> assert_equals: href expected "a:///test-a-colon-slash-slash.html" but got "file:///A://test-a-colon-slash-slash.html"
FAIL Parsing: <test-a-colon-slash-b.html> against <a:/b> assert_equals: href expected "a:/test-a-colon-slash-b.html" but got "file:///A:/test-a-colon-slash-b.html"
FAIL Parsing: <test-a-colon-slash-slash-b.html> against <a://b> assert_equals: href expected "a://b/test-a-colon-slash-slash-b.html" but got "file:///A://test-a-colon-slash-slash-b.html"
PASS Parsing: <http://example.org/test?a#b\0c> without base
FAIL Parsing: <non-spec://example.org/test?a#b\0c> without base assert_equals: host expected "example.org" but got ""
PASS Parsing: <non-spec:/test?a#b\0c> without base
PASS Parsing: <a1234567890-+.:foo/bar> against <http://example.com/dir/file>
PASS Parsing: <#link> against <https://example.org/##link>
PASS Parsing: <non-special:cannot-be-a-base-url-\0~> without base
PASS Parsing: <https://www.example.com/path{path.html?query'=query#fragment<fragment> without base
PASS Parsing: <https://user:pass[@foo/bar> against <http://example.org>
FAIL Parsing: <foo:// !"$%&'()*+,-.;<=>@[\]^_`{|}~@host/> without base assert_equals: href expected "foo://%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~@host/" but got "foo:// !\"$%&'()*+,-.;<=>@[\\]^_`{|}~@host/"
FAIL Parsing: <wss:// !"$%&'()*+,-.;<=>@[]^_`{|}~@host/> without base assert_equals: href expected "wss://%20!%22$%&'()*+,-.%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~@host/" but got "wss://%20!%22$%&%27()*+,-.%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~@host/"
FAIL Parsing: <foo://joe: !"$%&'()*+,-.:;<=>@[\]^_`{|}~@host/> without base assert_equals: href expected "foo://joe:%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5C%5D%5E_%60%7B%7C%7D~@host/" but got "foo://joe: !\"$%&'()*+,-.:;<=>@[\\]^_`{|}~@host/"
FAIL Parsing: <wss://joe: !"$%&'()*+,-.:;<=>@[]^_`{|}~@host/> without base assert_equals: href expected "wss://joe:%20!%22$%&'()*+,-.%3A%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~@host/" but got "wss://joe:%20!%22$%&%27()*+,-.%3A%3B%3C%3D%3E%40%5B%5D%5E_%60%7B%7C%7D~@host/"
FAIL Parsing: <foo://!"$%&'()*+,-.;=_`{}~/> without base assert_equals: host expected "!\"$%&'()*+,-.;=_`{}~" but got ""
FAIL Parsing: <wss://!"$&'()*+,-.;=_`{}~/> without base Failed to construct 'URL': Invalid URL
FAIL Parsing: <foo://host/ !"$%&'()*+,-./:;<=>@[\]^_`{|}~> without base assert_equals: href expected "foo://host/%20!%22$%&'()*+,-./:;%3C=%3E@[\\]^_%60%7B|%7D~" but got "foo://host/ !\"$%&'()*+,-./:;<=>@[\\]^_`{|}~"
FAIL Parsing: <wss://host/ !"$%&'()*+,-./:;<=>@[\]^_`{|}~> without base assert_equals: href expected "wss://host/%20!%22$%&'()*+,-./:;%3C=%3E@[/]^_%60%7B|%7D~" but got "wss://host/%20!%22$%&'()*+,-./:;%3C=%3E@[/]%5E_%60%7B%7C%7D~"
FAIL Parsing: <foo://host/dir/? !"$%&'()*+,-./:;<=>?@[\]^_`{|}~> without base assert_equals: href expected "foo://host/dir/?%20!%22$%&'()*+,-./:;%3C=%3E?@[\\]^_`{|}~" but got "foo://host/dir/?%20!%22$%&%27()*+,-./:;%3C=%3E?@[\\]^_`{|}~"
PASS Parsing: <wss://host/dir/? !"$%&'()*+,-./:;<=>?@[\]^_`{|}~> without base
FAIL Parsing: <foo://host/dir/# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~> without base assert_equals: host expected "host" but got ""
PASS Parsing: <wss://host/dir/# !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~> without base
FAIL Parsing: <abc:rootless> against <abc://host/path> assert_equals: href expected "abc:rootless" but got "abc://host/rootless"
FAIL Parsing: <abc:rootless> against <abc:/path> assert_equals: href expected "abc:rootless" but got "abc:/rootless"
PASS Parsing: <abc:rootless> against <abc:path>
FAIL Parsing: <abc:/rooted> against <abc://host/path> assert_equals: href expected "abc:/rooted" but got "abc://host/rooted"
PASS Parsing: <#> without base
PASS Parsing: <?> without base
PASS Parsing: <http://1.2.3.4.5> against <http://other.com/>
PASS Parsing: <http://1.2.3.4.5.> against <http://other.com/>
PASS Parsing: <http://0..0x300/> without base
PASS Parsing: <http://0..0x300./> without base
PASS Parsing: <http://256.256.256.256.256> against <http://other.com/>
PASS Parsing: <http://256.256.256.256.256.> against <http://other.com/>
PASS Parsing: <http://1.2.3.08> without base
PASS Parsing: <http://1.2.3.08.> without base
PASS Parsing: <http://1.2.3.09> without base
PASS Parsing: <http://09.2.3.4> without base
PASS Parsing: <http://09.2.3.4.> without base
PASS Parsing: <http://01.2.3.4.5> without base
PASS Parsing: <http://01.2.3.4.5.> without base
PASS Parsing: <http://0x100.2.3.4> without base
PASS Parsing: <http://0x100.2.3.4.> without base
PASS Parsing: <http://0x1.2.3.4.5> without base
PASS Parsing: <http://0x1.2.3.4.5.> without base
PASS Parsing: <http://foo.1.2.3.4> without base
PASS Parsing: <http://foo.1.2.3.4.> without base
PASS Parsing: <http://foo.2.3.4> without base
PASS Parsing: <http://foo.2.3.4.> without base
PASS Parsing: <http://foo.09> without base
PASS Parsing: <http://foo.09.> without base
PASS Parsing: <http://foo.0x4> without base
PASS Parsing: <http://foo.0x4.> without base
PASS Parsing: <http://foo.09..> without base
PASS Parsing: <http://0999999999999999999/> without base
PASS Parsing: <http://foo.0x> without base
PASS Parsing: <http://foo.0XFfFfFfFfFfFfFfFfFfAcE123> without base
PASS Parsing: <http://💩.123/> without base
PASS Parsing: <https://\0y> without base
FAIL Parsing: <https://x/\0y> without base Failed to construct 'URL': Invalid URL
PASS Parsing: <https://x/?\0y> without base
PASS Parsing: <https://x/?#\0y> without base
PASS Parsing: <https://￿y> without base
FAIL Parsing: <https://x/￿y> without base Failed to construct 'URL': Invalid URL
FAIL Parsing: <https://x/?￿y> without base assert_equals: href expected "https://x/?%EF%BF%BFy" but got "https://x/?%EF%BF%BDy"
FAIL Parsing: <https://x/?#￿y> without base assert_equals: href expected "https://x/?#%EF%BF%BFy" but got "https://x/?#%EF%BF%BDy"
PASS Parsing: <non-special:\0y> without base
PASS Parsing: <non-special:x/\0y> without base
PASS Parsing: <non-special:x/?\0y> without base
PASS Parsing: <non-special:x/?#\0y> without base
FAIL Parsing: <non-special:￿y> without base assert_equals: href expected "non-special:%EF%BF%BFy" but got "non-special:%EF%BF%BDy"
FAIL Parsing: <non-special:x/￿y> without base assert_equals: href expected "non-special:x/%EF%BF%BFy" but got "non-special:x/%EF%BF%BDy"
FAIL Parsing: <non-special:x/?￿y> without base assert_equals: href expected "non-special:x/?%EF%BF%BFy" but got "non-special:x/?%EF%BF%BDy"
FAIL Parsing: <non-special:x/?#￿y> without base assert_equals: href expected "non-special:x/?#%EF%BF%BFy" but got "non-special:x/?#%EF%BF%BDy"
PASS Parsing: <> without base
PASS Parsing: <https://example.com/"quoted"> without base
PASS Parsing: <https://a%C2%ADb/> without base
PASS Parsing: <https://­/> without base
PASS Parsing: <https://%C2%AD/> without base
FAIL Parsing: <https://xn--/> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <data://example.com:8080/pathname?search#hash> without base assert_equals: host expected "example.com:8080" but got ""
FAIL Parsing: <data:///test> without base assert_equals: pathname expected "/test" but got "///test"
FAIL Parsing: <data://test/a/../b> without base assert_equals: href expected "data://test/b" but got "data://test/a/../b"
FAIL Parsing: <data://:443> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <data://test:test> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <data://[:1]> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <intent://example.com:8080/pathname?search#hash> without base assert_equals: host expected "example.com:8080" but got ""
FAIL Parsing: <intent:///test> without base assert_equals: pathname expected "/test" but got "///test"
FAIL Parsing: <intent://test/a/../b> without base assert_equals: href expected "intent://test/b" but got "intent://test/a/../b"
FAIL Parsing: <intent://:443> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <intent://test:test> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <intent://[:1]> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <urn://example.com:8080/pathname?search#hash> without base assert_equals: host expected "example.com:8080" but got ""
FAIL Parsing: <urn:///test> without base assert_equals: pathname expected "/test" but got "///test"
FAIL Parsing: <urn://test/a/../b> without base assert_equals: href expected "urn://test/b" but got "urn://test/a/../b"
FAIL Parsing: <urn://:443> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <urn://test:test> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <urn://[:1]> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <turn://example.com:8080/pathname?search#hash> without base assert_equals: host expected "example.com:8080" but got ""
FAIL Parsing: <turn:///test> without base assert_equals: pathname expected "/test" but got "///test"
FAIL Parsing: <turn://test/a/../b> without base assert_equals: href expected "turn://test/b" but got "turn://test/a/../b"
FAIL Parsing: <turn://:443> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <turn://test:test> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <turn://[:1]> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <stun://example.com:8080/pathname?search#hash> without base assert_equals: host expected "example.com:8080" but got ""
FAIL Parsing: <stun:///test> without base assert_equals: pathname expected "/test" but got "///test"
FAIL Parsing: <stun://test/a/../b> without base assert_equals: href expected "stun://test/b" but got "stun://test/a/../b"
FAIL Parsing: <stun://:443> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <stun://test:test> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
FAIL Parsing: <stun://[:1]> without base assert_throws_js: function "function() {
          new URL(expected.input, base);
        }" did not throw
Harness: the test ran to completion.

