--- third_party/boringssl/src/crypto/internal.h
+++ third_party/boringssl/src/crypto/internal.h
@@ -35,30 +35,6 @@
 #include <stdlib.h>
 #endif
 
-<<<<<<< HEAD
-=======
-#if !defined(__cplusplus)
-#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
-#include <stdalign.h>
-#elif defined(_MSC_VER) && !defined(__clang__)
-#define alignas(x) __declspec(align(x))
-#define alignof __alignof
-#else
-// With the exception of MSVC, we require C11 to build the library. C11 is a
-// prerequisite for improved refcounting performance. All our supported C
-// compilers have long implemented C11 and made it default. The most likely
-// cause of pre-C11 modes is stale -std=c99 or -std=gnu99 flags in build
-// configuration. Such flags can be removed.
-//
-// TODO(davidben): In MSVC 2019 16.8 or higher (_MSC_VER >= 1928),
-// |__STDC_VERSION__| will be 201112 when passed /std:c11 and unset otherwise.
-// C11 alignas and alignof are only implemented in C11 mode. Can we mandate C11
-// mode for those versions?
-#error "BoringSSL must be built in C11 mode or higher."
-#endif
-#endif
-
->>>>>>> 950d6e0c67b (Remove hacks in boringssl (#6680))
 #if defined(OPENSSL_THREADS) && \
     (!defined(OPENSSL_WINDOWS) || defined(__MINGW32__))
 #include <pthread.h>
@@ -69,7 +45,6 @@
     defined(OPENSSL_WINDOWS)
 #define OPENSSL_WINDOWS_THREADS
 #endif
-<<<<<<< HEAD
 
 #if defined(OPENSSL_THREADS)
 #include <atomic>
@@ -78,8 +53,6 @@
 #if defined(OPENSSL_WINDOWS_THREADS)
 #include <windows.h>
 #endif
-=======
->>>>>>> 950d6e0c67b (Remove hacks in boringssl (#6680))
 
 #if defined(__cplusplus)
 extern "C" {
@@ -596,14 +569,6 @@
   *val = desired;
 }
 
-<<<<<<< HEAD
-=======
-// Automatically enable C11 atomics if implemented.
-#if !defined(OPENSSL_C11_ATOMIC) && defined(OPENSSL_THREADS) &&   \
-    !defined(__STDC_NO_ATOMICS__) && defined(__STDC_VERSION__) && \
-    __STDC_VERSION__ >= 201112L
-#define OPENSSL_C11_ATOMIC
->>>>>>> 950d6e0c67b (Remove hacks in boringssl (#6680))
 #endif
 
 // See the comment in the |__cplusplus| section above.
@@ -638,11 +603,7 @@
 // Locks.
 
 #if !defined(OPENSSL_THREADS)
-<<<<<<< HEAD
 typedef struct crypto_mutex_st {
-=======
-struct CRYPTO_STATIC_MUTEX {
->>>>>>> 950d6e0c67b (Remove hacks in boringssl (#6680))
   char padding;  // Empty structs have different sizes in C and C++.
 } CRYPTO_MUTEX;
 #define CRYPTO_MUTEX_INIT {0}
@@ -650,16 +611,8 @@
 typedef SRWLOCK CRYPTO_MUTEX;
 #define CRYPTO_MUTEX_INIT SRWLOCK_INIT
 #elif defined(OPENSSL_PTHREADS)
-<<<<<<< HEAD
 typedef pthread_rwlock_t CRYPTO_MUTEX;
 #define CRYPTO_MUTEX_INIT PTHREAD_RWLOCK_INITIALIZER
-=======
-struct CRYPTO_STATIC_MUTEX {
-  pthread_rwlock_t lock;
-};
-
-#define CRYPTO_STATIC_MUTEX_INIT { PTHREAD_RWLOCK_INITIALIZER }
->>>>>>> 950d6e0c67b (Remove hacks in boringssl (#6680))
 #else
 #error "Unknown threading library"
 #endif
