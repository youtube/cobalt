--- media/mojo/services/gpu_mojo_media_client.h
+++ media/mojo/services/gpu_mojo_media_client.h
@@ -59,41 +59,6 @@
   ~VideoDecoderTraits();
 };
 
-struct MEDIA_MOJO_EXPORT GpuMojoMediaClientTraits {
-  gpu::GpuPreferences gpu_preferences;
-  gpu::GpuDriverBugWorkarounds gpu_workarounds;
-  gpu::GpuFeatureInfo gpu_feature_info;
-  gpu::GPUInfo gpu_info;
-  scoped_refptr<base::SingleThreadTaskRunner> gpu_task_runner;
-
-  // Only used on Android.
-  AndroidOverlayMojoFactoryCB android_overlay_factory_cb;
-
-<<<<<<< HEAD
-=======
-// Queries the platform-specific VideoDecoder implementation for its
-// supported profiles. Some platforms fall back to use the VDAVideoDecoder
-// so that implementation is shared, and its supported configs can be
-// queries using the |get_vda_configs| callback.
-absl::optional<SupportedVideoDecoderConfigs>
-GetPlatformSupportedVideoDecoderConfigs(
-    base::WeakPtr<MediaGpuChannelManager> manager,
-    gpu::GpuDriverBugWorkarounds gpu_workarounds,
-    gpu::GpuPreferences gpu_preferences,
-    const gpu::GPUInfo& gpu_info,
-    base::OnceCallback<SupportedVideoDecoderConfigs()> get_vda_configs);
-
-// Creates a platform-specific media::AudioDecoder. Most platforms don't do
-// anything here, but android, for example, does.
-std::unique_ptr<AudioDecoder> CreatePlatformAudioDecoder(
-    scoped_refptr<base::SequencedTaskRunner> task_runner,
-    std::unique_ptr<MediaLog> media_log);
-
-// Creates a platform-specific media::AudioEncoder. Most platforms don't do
-// anything here.
-std::unique_ptr<AudioEncoder> CreatePlatformAudioEncoder(
-    scoped_refptr<base::SequencedTaskRunner> task_runner);
-
 #if BUILDFLAG(USE_STARBOARD_MEDIA)
 // Creates a platform-specific media::StarboardRenderer.
 // This is used on Cobalt (android/linux).
@@ -109,19 +74,16 @@
         client_extension_remote);
 #endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
 
-// Creates a CDM factory, right now only used on android and chromeos.
-std::unique_ptr<CdmFactory> CreatePlatformCdmFactory(
-    mojom::FrameInterfaceFactory* frame_interfaces);
+struct MEDIA_MOJO_EXPORT GpuMojoMediaClientTraits {
+  gpu::GpuPreferences gpu_preferences;
+  gpu::GpuDriverBugWorkarounds gpu_workarounds;
+  gpu::GpuFeatureInfo gpu_feature_info;
+  gpu::GPUInfo gpu_info;
+  scoped_refptr<base::SingleThreadTaskRunner> gpu_task_runner;
 
-// Queries the platform decoder type.
-VideoDecoderType GetPlatformDecoderImplementationType(
-    gpu::GpuDriverBugWorkarounds gpu_workarounds,
-    gpu::GpuPreferences gpu_preferences,
-    const gpu::GPUInfo& gpu_info);
+  // Only used on Android.
+  AndroidOverlayMojoFactoryCB android_overlay_factory_cb;
 
-class MEDIA_MOJO_EXPORT GpuMojoMediaClient final : public MojoMediaClient {
- public:
->>>>>>> 73a1238456a ([media] Move StarboardRenderer to MojoRenderer (#5113))
   // |media_gpu_channel_manager| must only be used on |gpu_task_runner|, which
   // is expected to be the GPU main thread task runner.
   base::WeakPtr<MediaGpuChannelManager> media_gpu_channel_manager;
