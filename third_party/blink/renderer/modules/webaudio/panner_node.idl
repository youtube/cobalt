/*
 * Copyright (C) 2010, Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1.  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

// https://webaudio.github.io/web-audio-api/#pannernode
enum PanningModelType {
    "equalpower",
    "HRTF"
};

enum DistanceModelType {
    "linear",
    "inverse",
    "exponential"
};

[
    Exposed=Window
] interface PannerNode : AudioNode {
    [RaisesException, Measure] constructor(BaseAudioContext context, optional PannerOptions options = {});
    // Default model for stereo is equalpower.
    attribute PanningModelType panningModel;

    // Uses a 3D cartesian coordinate system
    [RaisesException, MeasureAs=PannerNodeSetPosition] void setPosition(float x, float y, float z);
    [RaisesException, MeasureAs=PannerNodeSetOrientation] void setOrientation(float x, float y, float z);

    // Uses a 3D cartesian coordinate system
    readonly attribute AudioParam positionX;
    readonly attribute AudioParam positionY;
    readonly attribute AudioParam positionZ;

    readonly attribute AudioParam orientationX;
    readonly attribute AudioParam orientationY;
    readonly attribute AudioParam orientationZ;

    // Distance model
    attribute DistanceModelType distanceModel;

    [RaisesException=Setter] attribute double refDistance;
    [RaisesException=Setter] attribute double maxDistance;
    [RaisesException=Setter] attribute double rolloffFactor;

    // Directional sound cone
    attribute double coneInnerAngle;
    attribute double coneOuterAngle;
    [RaisesException=Setter] attribute double coneOuterGain;
};
