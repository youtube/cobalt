// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0x97,0x65,
    0x14,0xc7,0xaf,0xeb,0xfe,0xc1,0xef,0xf7,0x03,0xe4,0xc1,0x50,0x51,0xb1,0xc0,0xb0,
    0x8c,0x21,0x02,0x4b,0x1b,0x5b,0xe5,0x48,0x4d,0x7a,0xa0,0xb0,0xe2,0x25,0x5b,0x6b,
    0xeb,0x4d,0x2f,0xf0,0x4d,0xbd,0x71,0x6b,0xad,0xb5,0xac,0x8d,0x77,0xfe,0x0b,0x3e,
    0x64,0xad,0x91,0xd5,0xb2,0xd2,0x7c,0x78,0xa9,0x56,0xae,0x46,0xc5,0x6a,0x54,0x2c,
    0x5e,0x55,0xac,0xa5,0x0b,0x82,0x0c,0x59,0xe7,0xdc,0xd7,0xe7,0xc4,0x19,0xb5,0x62,
    0xbb,0x76,0xdf,0xd7,0xf7,0x3c,0x7d,0xbf,0xe7,0x1c,0x6e,0x28,0x64,0x6d,0xa5,0x10,
    0x62,0xa8,0x0e,0xe5,0xb0,0x3f,0x86,0xfc,0x67,0x75,0xc8,0x82,0xbe,0xd6,0x84,0x62,
    0xfe,0xec,0x1f,0x78,0x62,0x60,0xfb,0xb3,0xcf,0x3d,0xbd,0x7d,0xc7,0xce,0x6e,0xb5,
    0xd7,0x85,0x42,0xee,0xa7,0xb6,0xfa,0x50,0x0a,0x15,0xf2,0xd4,0x33,0xf2,0xd4,0x33,
    0x07,0x14,0x3f,0x2e,0xe7,0x82,0x9c,0x06,0xf1,0x53,0x5c,0x0a,0x84,0x07,0x42,0x65,
    0x68,0x4a,0xe9,0x43,0x1b,0x4f,0xc3,0x22,0x58,0xd9,0x61,0x19,0x58,0x83,0xc3,0x0a,
    0x60,0x6b,0x1c,0x56,0x01,0xb6,0xde,0x61,0x95,0x60,0x9b,0x1c,0x56,0x04,0x6b,0x75,
    0x58,0x09,0x6c,0x8b,0xc3,0xca,0x60,0x77,0x38,0xac,0x0a,0x6c,0x9b,0xc3,0xaa,0xc1,
    0xba,0x1d,0x56,0x03,0xb6,0xc3,0x61,0xab,0xc0,0x7a,0x1d,0x56,0x0b,0x76,0x8f,0xc3,
    0xea,0xc0,0xfa,0xb4,0xdf,0xa2,0xd4,0x7a,0xd0,0x2f,0x0a,0x8f,0x93,0xbb,0x9e,0xfb,
    0x49,0x79,0xde,0x4a,0x0f,0xed,0xbe,0xd9,0xdd,0xb5,0xf7,0xb7,0x70,0x6f,0x94,0x2c,
    0x59,0x6e,0x2f,0xe4,0xfd,0xd3,0xf7,0xb5,0xe2,0x53,0xa4,0x17,0xda,0xfb,0x26,0xb9,
    0x97,0xe8,0x51,0xc6,0xbd,0x96,0x7b,0x05,0xfe,0xf5,0xf8,0x07,0xec,0x0d,0xf0,0xa9,
    0xc8,0x6b,0xad,0xfe,0xbb,0x9f,0x96,0xc7,0x4e,0xfd,0xff,0x1c,0xf3,0x69,0x95,0x4c,
    0xeb,0xe9,0xb5,0xe6,0xba,0x9b,0xfb,0x06,0xb0,0x0e,0x38,0x6f,0x84,0xb3,0xfa,0x37,
    0x63,0x2b,0x39,0x7b,0x0b,0xf3,0x57,0x7b,0x2b,0xf6,0xfa,0x7c,0x67,0xb2,0xbc,0xbf,
    0x1d,0x68,0xd9,0x82,0x16,0x8b,0xeb,0x84,0x8b,0xd9,0xef,0xa4,0x8e,0xd9,0x7b,0x99,
    0x91,0xdd,0xf7,0x50,0x57,0x7b,0x31,0x40,0x6c,0xc1,0xd9,0x87,0xd8,0x25,0xbb,0x0f,
    0xaf,0xa8,0x37,0xb2,0x42,0xd7,0x41,0x76,0xca,0xee,0x87,0xd8,0x13,0xd5,0xf1,0x0a,
    0xbe,0x45,0x67,0x1f,0x65,0x56,0x76,0x3f,0xcc,0x2c,0xd6,0x09,0x8b,0x23,0xcc,0x4a,
    0xb9,0x1d,0x95,0xe7,0x11,0x6c,0x9a,0xeb,0x18,0xba,0x8e,0xd2,0xe3,0x63,0xfc,0xbe,
    0xda,0x1e,0xbc,0x86,0x7f,0x96,0xf7,0xbe,0x2a,0x8c,0x51,0x97,0x4f,0xc3,0x3f,0x9e,
    0x9a,0xf3,0x2d,0xde,0xc7,0xc8,0xa9,0xf7,0x93,0x2b,0xf4,0x9e,0xa2,0x3f,0xea,0x7f,
    0x9e,0xf7,0x06,0xfc,0xcf,0xf3,0xbd,0x50,0xec,0x2e,0x99,0x5e,0x06,0xdf,0x00,0xb6,
    0x20,0x88,0xce,0xf4,0x5e,0xf4,0x9c,0x80,0xf3,0xa0,0x4c,0x40,0xf9,0xbe,0x0e,0x76,
    0xc2,0x71,0x3b,0xc0,0x4e,0xbf,0x81,0xfd,0x3e,0xc9,0xa0,0xfb,0x72,0x91,0x9d,0xda,
    0x48,0x3e,0xf5,0xb9,0x04,0xfe,0x92,0xf8,0xe8,0xfd,0x32,0x71,0x97,0x88,0xd3,0x5e,
    0x7e,0x4c,0x5c,0x0b,0x71,0xba,0x23,0x9f,0x80,0xbf,0x29,0x3e,0xba,0x5b,0x9f,0x82,
    0xe9,0x6e,0xcd,0x0b,0xf3,0x71,0xf8,0x5c,0x17,0x7f,0xb5,0x5d,0x91,0x33,0x8e,0x1e,
    0x7d,0x7f,0x4c,0xe2,0xb4,0x37,0x9f,0x51,0x53,0x7f,0x5e,0xa0,0x5f,0x9f,0x83,0x3f,
    0x2e,0x37,0xe5,0xb4,0x33,0x26,0xcc,0xfc,0xfe,0x90,0x1c,0x96,0x4b,0x9f,0x73,0xe2,
    0xa5,0x7e,0xf7,0xc7,0xe4,0x53,0x49,0xcc,0x15,0xa7,0xe1,0x0b,0x34,0x74,0x3a,0x0d,
    0x5f,0x82,0x9b,0x86,0xaf,0xc0,0x4c,0xc3,0xa4,0xd3,0xa0,0xb6,0x09,0x39,0x93,0xd4,
    0x9d,0x70,0x1a,0xbe,0xa6,0x76,0x74,0x1a,0xbe,0x01,0x37,0x0d,0xbd,0x31,0x61,0xe6,
    0xa7,0x1a,0x2c,0xd7,0xa4,0xd3,0xb0,0x2f,0x26,0x9f,0x71,0x62,0x26,0x9c,0x86,0x6f,
    0xd1,0xd0,0xeb,0x34,0x7c,0x07,0x6e,0x1a,0xbe,0x07,0x33,0x0d,0xd3,0x4e,0x83,0xda,
    0xa6,0xe4,0x4c,0x53,0x77,0x8a,0x3d,0xd2,0xba,0x3f,0x50,0x7b,0x5f,0x5c,0xde,0x6f,
    0xe5,0x68,0xbe,0xd3,0x8e,0x63,0x3f,0x7e,0x93,0xc4,0x4d,0xc1,0x47,0x7f,0x07,0xde,
    0x66,0xff,0x6d,0xe7,0xde,0x81,0xf3,0xb0,0xdb,0xb9,0x77,0xc1,0x5f,0x64,0xe7,0xde,
    0x03,0xd3,0xbc,0x1a,0xa7,0xbf,0xf3,0xef,0x13,0x77,0x8a,0x38,0xed,0xe9,0x07,0xe0,
    0xd6,0xf7,0x0f,0x89,0x0d,0x0e,0x3b,0x0d,0xa6,0x1a,0xf6,0x0b,0xa2,0xdf,0xa7,0x33,
    0xf8,0x9e,0x26,0x87,0xd5,0xf8,0x88,0x1a,0xa3,0xae,0xc6,0x59,0xf0,0x27,0x85,0x99,
    0x7e,0x83,0xce,0xa1,0xe9,0x0c,0xdf,0x85,0xb3,0x6e,0x1e,0x3f,0x12,0xbf,0xc7,0xcd,
    0xe3,0x27,0x70,0x9b,0xc7,0xcf,0x60,0x36,0x8f,0x72,0x5c,0x9e,0x87,0xda,0x66,0xe4,
    0xcc,0xd2,0xe3,0x19,0xa7,0xe3,0x17,0x6a,0x17,0xf2,0x19,0x95,0x73,0x1d,0xbf,0x82,
    0x9d,0x73,0xbf,0xeb,0x99,0xd3,0x79,0x95,0x38,0x3b,0x2f,0x4b,0x2e,0xc5,0xaf,0x11,
    0x7b,0x35,0xcf,0x55,0x95,0xeb,0xfa,0x8d,0x3c,0xd7,0xf8,0xde,0x54,0xba,0xef,0xb8,
    0xce,0x5d,0x79,0x2a,0xa7,0x59,0xa7,0x77,0x0e,0xbd,0x43,0x4e,0xef,0xef,0xe0,0xa6,
    0x77,0x1e,0xcc,0xf4,0x2e,0xba,0xfd,0x9b,0xcf,0x75,0x86,0x1c,0xd3,0xdc,0x0b,0x4e,
    0xef,0x75,0xa7,0x77,0x8c,0x5c,0x7f,0x82,0x0f,0xc3,0xc9,0xe2,0x16,0xd9,0x45,0xf5,
    0xb9,0x41,0xcd,0x59,0xfc,0x17,0xa8,0x5b,0x72,0x7d,0x56,0x9f,0x25,0xfd,0x9b,0x85,
    0xa6,0x25,0x57,0x57,0x9b,0xb8,0xb2,0xcf,0x59,0xfc,0xef,0x3e,0x17,0x22,0x20,0xe7,
    0x55,0xfa,0x5c,0x11,0x53,0xac,0xda,0xad,0xcf,0x45,0x72,0xa9,0xed,0xdf,0xfa,0x6c,
    0x9c,0xf4,0x39,0xc7,0xce,0x3d,0x44,0xcc,0x22,0xf1,0x4b,0x2b,0x66,0x52,0x76,0xbe,
    0x0f,0xc6,0x34,0xcb,0x19,0xe2,0x34,0xcf,0xf3,0xfc,0x8f,0x52,0x1d,0x93,0xdd,0xe6,
    0x57,0x13,0xd3,0xfc,0x46,0xdc,0xfc,0x56,0xc5,0x84,0xdb,0xfc,0x6a,0x63,0xc2,0x6c,
    0x7e,0x3d,0xae,0x8f,0x6a,0xab,0x93,0xd3,0x08,0x8f,0x3a,0x74,0x6a,0xad,0x9b,0x62,
    0xaa,0x57,0x8d,0xce,0x12,0x3d,0x33,0x9d,0x3d,0xc4,0x34,0x3a,0x3e,0x6b,0xe0,0x73,
    0xd0,0xf1,0x59,0x1b,0x13,0x6e,0x7c,0xd6,0xc5,0x84,0x19,0x9f,0x6e,0xc7,0x47,0x6d,
    0x4d,0x72,0x9a,0xc9,0xad,0xef,0x3a,0x57,0xcd,0xb3,0x01,0x2e,0x05,0xbe,0xc1,0xca,
    0x71,0x57,0x5c,0xc6,0xed,0xfb,0xd6,0x4d,0x6c,0xb3,0xfb,0xf6,0x6c,0x82,0xd7,0x21,
    0xf7,0x5d,0xb8,0x39,0x26,0xfc,0x22,0x7b,0xd3,0x12,0x13,0x36,0xea,0x76,0xbf,0x35,
    0x26,0x7c,0x18,0xae,0x6d,0x8e,0xab,0xda,0x36,0xcb,0x69,0xa3,0x9e,0xbe,0x1b,0xaf,
    0x3e,0xf4,0x55,0xbb,0xbf,0x0d,0xe6,0xd7,0xc6,0xac,0xd5,0xef,0x61,0xb8,0x2b,0xd7,
    0x3e,0xf2,0x19,0x9f,0xdb,0xe0,0x73,0xd8,0xf1,0xb9,0x3d,0x26,0xdc,0xf8,0xb4,0x3b,
    0x3e,0x6a,0xdb,0x2a,0xa7,0x9d,0x3a,0x5b,0x1d,0x9f,0xdd,0xf0,0xd1,0x7a,0x19,0x7c,
    0xcc,0xaf,0xdd,0xf1,0x19,0x88,0xc9,0x47,0x39,0xee,0x26,0x9f,0xf1,0xe9,0x80,0xcf,
    0x90,0xe3,0xb3,0x2d,0x26,0xdc,0xf8,0x74,0x39,0x3e,0x6a,0xeb,0x94,0xd3,0x45,0x9d,
    0x4e,0xc7,0x67,0x6f,0x4c,0xff,0x93,0x0e,0xc4,0xe5,0x7d,0x32,0xbf,0x2e,0xc7,0x67,
    0x30,0x26,0x1f,0xe5,0xb8,0x97,0x7c,0x7e,0xc6,0xdd,0xce,0xf7,0xd1,0x98,0xf6,0x41,
    0x77,0x66,0x90,0xba,0x7e,0x4f,0x7b,0x9c,0xef,0x23,0x31,0xed,0xb7,0xee,0xbb,0xc6,
    0x69,0x9e,0x5d,0xc2,0xe4,0x02,0xb6,0x1b,0x32,0xb5,0x5e,0x39,0x7f,0x01,0xb0,0xe3,
    0x58,0xe5,0x50,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       uvec4 transformSrcValue(ivec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
