// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     org.jni_zero.GEN_JNI

#ifndef TEMP_DIR_HEADER_
#define TEMP_DIR_HEADER_

#include <iterator>

#include "third_party/jni_zero/jni_zero_internal.h"

// Class Accessors.
#ifndef org_jni_1zero_SampleNonProxy_clazz_defined
#define org_jni_1zero_SampleNonProxy_clazz_defined
inline jclass org_jni_1zero_SampleNonProxy_clazz(JNIEnv* env) {
  static const char kClassName[] = "org/jni_zero/SampleNonProxy";
  static std::atomic<jclass> cached_class;
  return jni_zero::internal::LazyGetClass(env, kClassName, &cached_class);
}
#endif


// Forward Declarations.
JNI_ZERO_BOUNDARY_EXPORT jlong Java_org_jni_1zero_SampleNonProxy_nativeAddBookmark(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jstring title,
    jboolean isFolder,
    jlong parentId);
JNI_ZERO_BOUNDARY_EXPORT jlong Java_org_jni_1zero_SampleNonProxy_nativeAddBookmarkFromAPI(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jobject created,
    jobject isBookmark,
    jobject date,
    jbyteArray favicon,
    jstring title,
    jobject visits);
JNI_ZERO_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeCreateHistoricalTabFromState(
    JNIEnv* env,
    jclass jcaller,
    jbyteArray state,
    jint tabIndex);
JNI_ZERO_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeDestroy(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider);
JNI_ZERO_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleNonProxy_nativeFindAll(
    JNIEnv* env,
    jobject jcaller,
    jstring find);
JNI_ZERO_BOUNDARY_EXPORT jobjectArray Java_org_jni_1zero_SampleNonProxy_nativeGetAutofillProfileGUIDs(
    JNIEnv* env,
    jclass jcaller);
JNI_ZERO_BOUNDARY_EXPORT jstring Java_org_jni_1zero_SampleNonProxy_nativeGetDomainAndRegistry(
    JNIEnv* env,
    jclass jcaller,
    jstring url);
JNI_ZERO_BOUNDARY_EXPORT jobject Java_org_jni_1zero_SampleNonProxy_nativeGetInnerClass(
    JNIEnv* env,
    jclass jcaller);
JNI_ZERO_BOUNDARY_EXPORT jbyteArray Java_org_jni_1zero_SampleNonProxy_nativeGetStateAsByteArray(
    JNIEnv* env,
    jobject jcaller,
    jobject view);
JNI_ZERO_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeGotOrientation(
    JNIEnv* env,
    jobject jcaller,
    jint nativeDataFetcherImplAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma);
JNI_ZERO_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller);
JNI_ZERO_BOUNDARY_EXPORT jint Java_org_jni_1zero_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller);
JNI_ZERO_BOUNDARY_EXPORT jthrowable Java_org_jni_1zero_SampleNonProxy_nativeMessWithJavaException(
    JNIEnv* env,
    jclass jcaller,
    jthrowable e);
JNI_ZERO_BOUNDARY_EXPORT jobject Java_org_jni_1zero_SampleNonProxy_nativeQueryBitmap(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jobjectArray projection,
    jstring selection,
    jobjectArray selectionArgs,
    jstring sortOrder);
JNI_ZERO_BOUNDARY_EXPORT void Java_org_jni_1zero_SampleNonProxy_nativeSetRecognitionResults(
    JNIEnv* env,
    jobject jcaller,
    jint sessionId,
    jobjectArray results);

// Helper Methods.
namespace {

bool RegisterNative_org_jni_1zero_SampleNonProxy(JNIEnv* env) {
  static const JNINativeMethod kMethods[] = {
      {
          "nativeAddBookmark",
          "(ILjava/lang/String;Ljava/lang/String;ZJ)J",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeAddBookmark)
      }, {
          "nativeAddBookmarkFromAPI",
          "(ILjava/lang/String;Ljava/lang/Long;Ljava/lang/Boolean;Ljava/lang/Long;[BLjava/lang/String;Ljava/lang/Integer;)J",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeAddBookmarkFromAPI)
      }, {
          "nativeCreateHistoricalTabFromState",
          "([BI)V",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeCreateHistoricalTabFromState)
      }, {
          "nativeDestroy",
          "(I)V",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeDestroy)
      }, {
          "nativeFindAll",
          "(Ljava/lang/String;)I",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeFindAll)
      }, {
          "nativeGetAutofillProfileGUIDs",
          "()[Ljava/lang/String;",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeGetAutofillProfileGUIDs)
      }, {
          "nativeGetDomainAndRegistry",
          "(Ljava/lang/String;)Ljava/lang/String;",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeGetDomainAndRegistry)
      }, {
          "nativeGetInnerClass",
          "()Lorg/jni_zero/SampleNonProxy$OnFrameAvailableListener;",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeGetInnerClass)
      }, {
          "nativeGetStateAsByteArray",
          "(Landroid/view/View;)[B",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeGetStateAsByteArray)
      }, {
          "nativeGotOrientation",
          "(IDDD)V",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeGotOrientation)
      }, {
          "nativeInit",
          "()I",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeInit)
      }, {
          "nativeInit",
          "()I",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeInit)
      }, {
          "nativeMessWithJavaException",
          "(Ljava/lang/Throwable;)Ljava/lang/Throwable;",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeMessWithJavaException)
      }, {
          "nativeQueryBitmap",
          "(I[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/graphics/Bitmap;",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeQueryBitmap)
      }, {
          "nativeSetRecognitionResults",
          "(I[Ljava/lang/String;)V",
          reinterpret_cast<void*>(Java_org_jni_1zero_SampleNonProxy_nativeSetRecognitionResults)
      },
  };
  jclass clazz = org_jni_1zero_SampleNonProxy_clazz(env);
  if (env->RegisterNatives(clazz, kMethods, std::size(kMethods)) < 0) {
    jni_zero::internal::HandleRegistrationError(env, clazz, __FILE__);
    return false;
  }

  return true;
}


}  // namespace

// Main Register Function.
namespace {

bool RegisterNatives(JNIEnv* env) {
  if (!RegisterNative_org_jni_1zero_SampleNonProxy(env))
    return false;

  return true;
}

}  // namespace


#endif  // TEMP_DIR_HEADER_
