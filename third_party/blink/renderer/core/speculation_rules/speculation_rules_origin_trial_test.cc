// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <algorithm>
#include <vector>

#include "base/functional/bind.h"
#include "base/run_loop.h"
#include "base/test/scoped_feature_list.h"
#include "build/build_config.h"
#include "testing/gtest/include/gtest/gtest.h"
#include "third_party/blink/public/common/features.h"
#include "third_party/blink/public/common/features_generated.h"
#include "third_party/blink/public/common/origin_trials/scoped_test_origin_trial_policy.h"
#include "third_party/blink/public/platform/web_url_response.h"
#include "third_party/blink/public/web/web_navigation_params.h"
#include "third_party/blink/renderer/core/execution_context/security_context.h"
#include "third_party/blink/renderer/core/frame/local_dom_window.h"
#include "third_party/blink/renderer/core/frame/local_frame.h"
#include "third_party/blink/renderer/core/frame/settings.h"
#include "third_party/blink/renderer/core/html/html_head_element.h"
#include "third_party/blink/renderer/core/html/html_meta_element.h"
#include "third_party/blink/renderer/core/html/html_script_element.h"
#include "third_party/blink/renderer/core/html_names.h"
#include "third_party/blink/renderer/core/speculation_rules/stub_speculation_host.h"
#include "third_party/blink/renderer/core/testing/dummy_page_holder.h"
#include "third_party/blink/renderer/platform/testing/task_environment.h"
#include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
#include "third_party/blink/renderer/platform/testing/url_test_helpers.h"
#include "third_party/blink/renderer/platform/wtf/functional.h"

namespace blink {
namespace {

// Generated by:
//  tools/origin_trials/generate_token.py --version 3 --expire-days 3650 \
//      https://speculationrules.test SpeculationRulesPrefetch
// Token details:
//  Version: 3
//  Origin: https://speculationrules.test:443
//  Is Subdomain: None
//  Is Third Party: None
//  Usage Restriction: None
//  Feature: SpeculationRulesPrefetch
//  Expiry: 1936881669 (2031-05-18 14:41:09 UTC)
//  Signature (Base64):
//  dLwu1RhLf1iAH+NzRrTitAhWF9oFZFtDt7CjwaQENvBK7m/RECTJuFe2wj+5WTB7HIUkgbgtzhp50pelkGG4BA==
[[maybe_unused]] constexpr char kSpeculationRulesPrefetchToken[] =
    "A3S8LtUYS39YgB/jc0a04rQIVhfaBWRbQ7ewo8GkBDbwSu5v0RAkybhXtsI/uVkwex"
    "yFJIG4Lc4aedKXpZBhuAQAAABseyJvcmlnaW4iOiAiaHR0cHM6Ly9zcGVjdWxhdGlv"
    "bnJ1bGVzLnRlc3Q6NDQzIiwgImZlYXR1cmUiOiAiU3BlY3VsYXRpb25SdWxlc1ByZW"
    "ZldGNoIiwgImV4cGlyeSI6IDE5MzY4ODE2Njl9";

[[maybe_unused]] constexpr char kSimplePrefetchProxyRuleSet[] =
    R"({
        "prefetch": [{
          "source": "list",
          "urls": ["https://speculationrules.test/index2.html"],
          "requires": ["anonymous-client-ip-when-cross-origin"]
        }]
      })";

// Similar to SpeculationRuleSetTest.PropagatesToDocument.
[[maybe_unused]] ::testing::AssertionResult DocumentAcceptsRuleSet(
    const char* trial_token,
    const char* json) {
  DummyPageHolder page_holder;
  Document& document = page_holder.GetDocument();
  LocalFrame& frame = page_holder.GetFrame();

  // Set up the interface binder.
  StubSpeculationHost speculation_host;
  auto& broker = frame.DomWindow()->GetBrowserInterfaceBroker();
  broker.SetBinderForTesting(
      mojom::blink::SpeculationHost::Name_,
      WTF::BindRepeating(&StubSpeculationHost::BindUnsafe,
                         WTF::Unretained(&speculation_host)));

  // Clear the security origin and set a secure one, recomputing the security
  // state.
  SecurityContext& security_context = frame.DomWindow()->GetSecurityContext();
  security_context.SetSecurityOriginForTesting(nullptr);
  security_context.SetSecurityOrigin(
      SecurityOrigin::CreateFromString("https://speculationrules.test"));
  EXPECT_EQ(security_context.GetSecureContextMode(),
            SecureContextMode::kSecureContext);

  // Enable scripts so that <script> is not ignored.
  frame.GetSettings()->SetScriptEnabled(true);

  base::RunLoop run_loop;
  speculation_host.SetDoneClosure(run_loop.QuitClosure());

  HTMLMetaElement* meta =
      MakeGarbageCollected<HTMLMetaElement>(document, CreateElementFlags());
  meta->setAttribute(html_names::kHttpEquivAttr, AtomicString("Origin-Trial"));
  meta->setAttribute(html_names::kContentAttr, AtomicString(trial_token));
  document.head()->appendChild(meta);

  HTMLScriptElement* script =
      MakeGarbageCollected<HTMLScriptElement>(document, CreateElementFlags());
  script->setAttribute(html_names::kTypeAttr, AtomicString("speculationrules"));
  script->setText(json);
  document.head()->appendChild(script);

  // Wait until UpdateSpeculationCandidates() is dispatched via mojo.
  run_loop.Run();

  // Reset the interface binder.
  broker.SetBinderForTesting(mojom::blink::SpeculationHost::Name_, {});

  return speculation_host.candidates().empty()
             ? ::testing::AssertionFailure() << "no rule set was found"
             : ::testing::AssertionSuccess() << "a rule set was found";
}

class ScopedRegisterMockedURLLoads {
 public:
  ScopedRegisterMockedURLLoads() {
    url_test_helpers::RegisterMockedURLLoad(
        KURL("https://thirdparty-speculationrules.test/"
             "single_url_prefetch.json"),
        test::CoreTestDataPath("speculation_rules/single_url_prefetch.json"),
        "application/speculationrules+json");
  }

  ~ScopedRegisterMockedURLLoads() {
    url_test_helpers::UnregisterAllURLsAndClearMemoryCache();
  }
};

void CommitTestNavigation(
    LocalFrame& frame,
    const KURL& url,
    const Vector<std::pair<String, String>>& response_headers) {
  auto navigation_params = std::make_unique<WebNavigationParams>();
  navigation_params->url = url;
  WebNavigationParams::FillStaticResponse(
      navigation_params.get(), "text/html", "UTF-8",
      base::span_from_cstring("<!DOCTYPE html>"));
  for (const auto& [header, value] : response_headers)
    navigation_params->response.AddHttpHeaderField(header, value);
  frame.Loader().CommitNavigation(std::move(navigation_params), nullptr);
}

// Generated by:
//  tools/origin_trials/generate_token.py --version 3 --expire-days 3650 \
//      https://speculationrules.test SpeculationRulesPrefetchFuture
// Token details:
//  Version: 3
//  Origin: https://speculationrules.test:443
//  Is Subdomain: None
//  Is Third Party: None
//  Usage Restriction: None
//  Feature: SpeculationRulesPrefetchFuture
//  Expiry: 1984756547 (2032-11-22 17:15:47 UTC)
//  Signature (Base64):
//  rnDep07eDfunGZCJ7Czq4/VuMhHmpvhRfRHDHtIfdVhsXetfeGLgRSqpDujMb+R8TlYw6sGWBgeOws+YeNa7Ag==
[[maybe_unused]] constexpr char kSpeculationRulesPrefetchFutureToken[] =
    "A65w3qdO3g37pxmQiews6uP1bjIR5qb4UX0Rwx7SH3VYbF3rX3hi4EUqqQ7ozG/kfE"
    "5WMOrBlgYHjsLPmHjWuwIAAAByeyJvcmlnaW4iOiAiaHR0cHM6Ly9zcGVjdWxhdGlv"
    "bnJ1bGVzLnRlc3Q6NDQzIiwgImZlYXR1cmUiOiAiU3BlY3VsYXRpb25SdWxlc1ByZW"
    "ZldGNoRnV0dXJlIiwgImV4cGlyeSI6IDE5ODQ3NTY1NDd9";

TEST(SpeculationRulesPrefetchFutureOriginTrialTest, FirstPartyTrialToken) {
  test::TaskEnvironment task_environment;
  base::test::ScopedFeatureList scoped_features;
  scoped_features.InitWithFeatures(
      {
          // Allow the SpeculationRulesPrefetchFuture trial itself to be
          // enabled.
          features::kSpeculationRulesPrefetchFuture,
      },
      {});
  ScopedTestOriginTrialPolicy using_test_keys;
  ScopedRegisterMockedURLLoads mock_url_loads;
  DummyPageHolder page_holder;
  LocalFrame& frame = page_holder.GetFrame();

  CommitTestNavigation(
      frame, KURL("https://speculationrules.test/"),
      {{"Origin-Trial", kSpeculationRulesPrefetchFutureToken},
       {"Speculation-Rules",
        "\"//thirdparty-speculationrules.test/single_url_prefetch.json\""}});

  // This should have enabled the origin trial and all its dependent features.
  EXPECT_TRUE(RuntimeEnabledFeatures::SpeculationRulesPrefetchFutureEnabled(
      frame.DomWindow()));
}

}  // namespace
}  // namespace blink
