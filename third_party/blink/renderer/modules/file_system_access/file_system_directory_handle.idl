// Copyright 2018 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// https://fs.spec.whatwg.org/#filesystemdirectoryhandle
[
    Exposed=(Window,Worker),
    SecureContext,
    Serializable,
    RuntimeEnabled=FileSystemAccess
] interface FileSystemDirectoryHandle : FileSystemHandle {
    // TODO(https://crbug.com/1087157): This interface defines an async
    // iterable, however that isn't supported yet by the bindings. So for now
    // just explicitly define what an async iterable definition implies.
    //async iterable<USVString, FileSystemHandle>;
    [RaisesException] FileSystemDirectoryIterator entries();
    [RaisesException] FileSystemDirectoryIterator keys();
    [RaisesException] FileSystemDirectoryIterator values();

    [CallWith=ScriptState,RaisesException] Promise<FileSystemFileHandle> getFileHandle(USVString name, optional FileSystemGetFileOptions options = {});
    [CallWith=ScriptState,RaisesException] Promise<FileSystemDirectoryHandle> getDirectoryHandle(USVString name, optional FileSystemGetDirectoryOptions options = {});

    [CallWith=ScriptState,RaisesException] Promise<void> removeEntry(USVString name, optional FileSystemRemoveOptions options = {});

    [CallWith=ScriptState, Measure,RaisesException] Promise<sequence<USVString>?> resolve(FileSystemHandle possibleChild);
};
