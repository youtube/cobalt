Tests `generateWebDriverValue` provides proper `webDriverValue` format

Testing 'undefined':
{
    type : undefined
}

Testing 'null':
{
    type : null
}

Testing ''some_string'':
{
    type : string
    value : some_string
}

Testing ''2'':
{
    type : string
    value : 2
}

Testing 'Number.NaN':
{
    type : number
    value : NaN
}

Testing '-0':
{
    type : number
    value : -0
}

Testing 'Infinity':
{
    type : number
    value : Infinity
}

Testing '-Infinity':
{
    type : number
    value : -Infinity
}

Testing '3':
{
    type : number
    value : 3
}

Testing '1.4':
{
    type : number
    value : 1.4
}

Testing 'true':
{
    type : boolean
    value : true
}

Testing 'false':
{
    type : boolean
    value : false
}

Testing '42n':
{
    type : bigint
    value : 42
}

Testing '(Symbol('foo'))':
{
    type : symbol
}

Testing '[1, 'foo', true, new RegExp(/foo/g), [1]]':
{
    type : array
    value : [
        [0] : {
            type : number
            value : 1
        }
        [1] : {
            type : string
            value : foo
        }
        [2] : {
            type : boolean
            value : true
        }
        [3] : {
            type : regexp
            value : {
                flags : g
                pattern : foo
            }
        }
        [4] : {
            type : array
        }
    ]
}

Testing '({'foo': {'bar': 'baz'}, 'qux': 'quux'})':
{
    type : object
    value : [
        [0] : [
            [0] : foo
            [1] : {
                type : object
            }
        ]
        [1] : [
            [0] : qux
            [1] : {
                type : string
                value : quux
            }
        ]
    ]
}

Testing '(()=>{})':
{
    type : function
}

Testing '(function(){})':
{
    type : function
}

Testing '(async ()=>{})':
{
    type : function
}

Testing '(async function(){})':
{
    type : function
}

Testing 'new RegExp(/foo/g)':
{
    type : regexp
    value : {
        flags : g
        pattern : foo
    }
}

Testing 'new Date(1654004849000)':
{
    type : date
    value : 2022-05-31T13:47:29.000Z
}

Testing 'new Map([[1, 2], ['foo', 'bar'], [true, false], ['baz', [1]]])':
{
    type : map
    value : [
        [0] : [
            [0] : {
                type : number
                value : 1
            }
            [1] : {
                type : number
                value : 2
            }
        ]
        [1] : [
            [0] : foo
            [1] : {
                type : string
                value : bar
            }
        ]
        [2] : [
            [0] : {
                type : boolean
                value : true
            }
            [1] : {
                type : boolean
                value : false
            }
        ]
        [3] : [
            [0] : baz
            [1] : {
                type : array
            }
        ]
    ]
}

Testing 'new Set([1, 'foo', true, [1], new Map([[1,2]])])':
{
    type : set
    value : [
        [0] : {
            type : number
            value : 1
        }
        [1] : {
            type : string
            value : foo
        }
        [2] : {
            type : boolean
            value : true
        }
        [3] : {
            type : array
        }
        [4] : {
            type : map
        }
    ]
}

Testing 'new WeakMap()':
{
    type : weakmap
}

Testing 'new WeakSet()':
{
    type : weakset
}

Testing 'new Error('SOME_ERROR_TEXT')':
{
    type : error
}

Testing 'Promise.resolve()':
{
    type : promise
}

Testing 'new Int32Array()':
{
    type : typedarray
}

Testing 'new ArrayBuffer()':
{
    type : arraybuffer
}

Testing 'document.body':
{
    type : node
    value : {
        attributes : {
        }
        backendNodeId : <number>
        childNodeCount : 1
        children : [
            [0] : {
                type : node
                value : {
                    attributes : {
                        some_attr_name : some_attr_value
                    }
                    backendNodeId : <number>
                    childNodeCount : 2
                    localName : div
                    namespaceURI : http://www.w3.org/1999/xhtml
                    nodeType : 1
                }
            }
        ]
        localName : body
        namespaceURI : http://www.w3.org/1999/xhtml
        nodeType : 1
    }
}

Testing 'window':
{
    type : window
}

Testing 'document.querySelector('body > div')':
{
    type : node
    value : {
        attributes : {
            some_attr_name : some_attr_value
        }
        backendNodeId : <number>
        childNodeCount : 2
        children : [
            [0] : {
                type : node
                value : {
                    backendNodeId : <number>
                    nodeType : 3
                    nodeValue : some text
                }
            }
            [1] : {
                type : node
                value : {
                    attributes : {
                    }
                    backendNodeId : <number>
                    childNodeCount : 1
                    localName : h2
                    namespaceURI : http://www.w3.org/1999/xhtml
                    nodeType : 1
                }
            }
        ]
        localName : div
        namespaceURI : http://www.w3.org/1999/xhtml
        nodeType : 1
    }
}

Testing 'new URL('http://example.com')':
{
    type : platformobject
}

