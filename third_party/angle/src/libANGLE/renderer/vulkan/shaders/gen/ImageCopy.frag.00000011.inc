// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000011.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000011[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x57,0x6b,0x4c,0x96,0x65,
    0x18,0x7e,0xef,0xef,0xe3,0x24,0xe2,0x81,0x90,0xa0,0x74,0x4d,0x84,0xb5,0xa6,0x8d,
    0x81,0x40,0x2a,0x8a,0xca,0x3c,0x50,0x0b,0x03,0x74,0x54,0x6e,0x1e,0xd2,0x39,0x3b,
    0x19,0x2b,0x62,0xe5,0x80,0x55,0xa3,0x9c,0xce,0x92,0x5f,0x2e,0xa6,0x2b,0xf5,0x97,
    0x8b,0xe9,0x2c,0x99,0xb5,0x08,0xb7,0x66,0x7f,0x72,0xce,0x99,0x18,0x3a,0xa7,0xa8,
    0x69,0x07,0xcd,0xc3,0xcf,0xd6,0x69,0x5a,0xcf,0xf5,0xde,0xd7,0x1d,0xf7,0xbe,0x72,
    0x7d,0xdb,0xc3,0xfb,0x3e,0xd7,0x7d,0xba,0xee,0xeb,0x79,0x9e,0xf7,0x7d,0x49,0x26,
    0x8a,0x33,0xa3,0x48,0xa2,0xec,0x28,0x2b,0xba,0x2c,0x51,0xfc,0xcb,0x8d,0x12,0x11,
    0x6e,0x47,0x47,0x19,0xf1,0xb5,0xae,0x7e,0x59,0x7d,0xe9,0xab,0x6d,0xeb,0x4a,0x2b,
    0xab,0xca,0x60,0x1f,0x1b,0x25,0x63,0x3f,0xd8,0xc6,0x45,0x99,0x51,0x5a,0xb8,0x62,
    0xbc,0xb4,0xe6,0xf9,0x16,0xe0,0xa7,0xc2,0xb8,0x15,0xc6,0xf8,0xe0,0x07,0x3c,0x14,
    0x88,0x1e,0x8d,0xd2,0xa3,0x72,0x4d,0x1f,0x15,0xf3,0x6a,0x98,0x10,0xcb,0x72,0x58,
    0x82,0xd8,0x78,0x87,0x25,0x89,0x4d,0x70,0x58,0x1a,0xb1,0x42,0x87,0xa5,0x13,0x9b,
    0xe4,0xb0,0x0c,0x62,0x93,0x1d,0x96,0x49,0xac,0xc4,0x61,0x59,0xc4,0x1e,0x72,0xd8,
    0x28,0x62,0x0f,0x3b,0x2c,0x9b,0x58,0x99,0xc3,0x46,0x13,0xab,0x74,0x58,0x0e,0xb1,
    0x99,0x0e,0x1b,0x43,0x6c,0x8e,0xc3,0xc6,0x12,0x9b,0x0f,0xbd,0x43,0xa7,0xa6,0x41,
    0x5d,0xe8,0xf0,0x14,0x73,0x8f,0xe3,0x7c,0x38,0x5c,0xa7,0x50,0x43,0x9b,0x17,0xb9,
    0x39,0xb4,0x7f,0x80,0xf3,0xbc,0x90,0x25,0x11,0xdb,0x93,0xb1,0x7e,0xb8,0xbf,0x37,
    0xdc,0x65,0x50,0x8b,0xfc,0xe0,0x9f,0xc3,0x7b,0xac,0x43,0x41,0x98,0x8f,0x21,0xef,
    0x04,0xe7,0x79,0xd4,0x2f,0x8d,0xf3,0x7c,0xda,0x31,0x9f,0x16,0xfe,0xc2,0x36,0x11,
    0x7a,0x97,0x2e,0x99,0x3d,0x21,0x44,0x4d,0x72,0x38,0x78,0x2d,0xfd,0xfc,0x89,0x5a,
    0x9b,0x3f,0x18,0x46,0x73,0xf3,0xe9,0xb9,0x36,0x87,0xce,0x35,0xd9,0x9b,0xe7,0xd9,
    0x7c,0x6a,0x18,0x07,0xea,0xd6,0xd4,0x80,0x57,0x19,0x79,0x45,0x71,0x3f,0xb9,0xff,
    0x68,0x67,0xfc,0x6c,0x94,0xfd,0xcf,0x30,0x9f,0xc9,0x21,0xe7,0x74,0xae,0x27,0x72,
    0xcd,0xe6,0xbc,0x82,0xd8,0x34,0x6a,0x51,0x49,0x2d,0xe0,0x5f,0x45,0xdb,0x18,0x67,
    0x9f,0xc5,0x3d,0x06,0x7b,0x35,0xed,0x65,0xb4,0xe3,0x5a,0x43,0xce,0xe6,0xbf,0x98,
    0xfa,0xd9,0xbc,0x89,0xeb,0x6d,0xf3,0x15,0x5c,0x5f,0x9b,0xb7,0x72,0x6f,0x42,0xeb,
    0x0e,0xc6,0x26,0x9d,0xbd,0x8b,0xfb,0xd4,0x34,0xdb,0xea,0xea,0x61,0xde,0x13,0xcf,
    0xde,0x5c,0x60,0xfe,0xbb,0x52,0xfa,0xeb,0xe5,0xfe,0xb5,0xf9,0x21,0xf6,0x87,0x7e,
    0x3e,0xa5,0x6f,0x8e,0xb3,0xf7,0x73,0x2f,0xd8,0x7c,0x20,0xa5,0xbf,0x23,0xdc,0x0b,
    0x88,0x1f,0xa4,0x76,0x79,0xd4,0x77,0x90,0xcf,0x03,0xdb,0x5b,0xdf,0xb2,0x1f,0xe4,
    0xbb,0x2f,0x54,0x3a,0xc7,0x39,0x1f,0x3d,0xff,0xba,0x22,0xe7,0x79,0xde,0x9f,0x63,
    0x4e,0xcc,0x87,0x53,0x38,0x5c,0xa1,0x46,0xa8,0xf1,0x23,0xf9,0x27,0x19,0x7f,0x93,
    0xf7,0xf9,0x8c,0xbf,0xc9,0xe7,0x13,0xb0,0x47,0xc2,0x4a,0x26,0xc8,0x3f,0x22,0xf6,
    0x5b,0x40,0xd2,0xe3,0x75,0xd4,0xbd,0x3f,0xc4,0x1e,0x1a,0xc2,0xaa,0x80,0xff,0x69,
    0x62,0x43,0x8e,0x6b,0x0b,0xcf,0xcd,0x19,0xda,0x6b,0x43,0x06,0xec,0x9d,0xdb,0xdc,
    0x5f,0x95,0xcc,0x07,0x9f,0x3b,0xc4,0xbb,0x82,0x0f,0xe6,0x7f,0x31,0xee,0x0e,0xe3,
    0xaa,0x99,0xb4,0x82,0x7b,0xad,0x86,0xfb,0x4a,0x44,0xf1,0x7d,0xc1,0x07,0x67,0x2c,
    0x21,0x8a,0x61,0xbf,0xfd,0x1a,0x98,0x67,0x51,0xb4,0x3f,0x82,0x3f,0x6c,0xc9,0x30,
    0x80,0xa1,0x1f,0xdc,0x37,0x85,0x38,0xe8,0x92,0x2e,0x5a,0x13,0xbf,0x37,0xa8,0x5f,
    0x86,0x28,0xbe,0x34,0xac,0x06,0x38,0x7d,0x26,0x8a,0x99,0xdf,0xef,0x21,0x87,0xe5,
    0xc2,0xf5,0x97,0xa0,0x05,0xfc,0xbe,0xa1,0x4f,0x3a,0x63,0x50,0xc7,0x7a,0x18,0xc5,
    0x1e,0x16,0xbb,0x1e,0xb2,0x45,0x71,0xeb,0x61,0xb4,0x28,0x66,0x3d,0xe4,0xba,0x1e,
    0x60,0xcb,0x09,0x23,0x97,0x75,0x73,0x5c,0x0f,0x63,0x45,0x6b,0x8b,0xeb,0x61,0x9c,
    0x28,0x6e,0x3d,0xf4,0x8b,0x62,0xe6,0x87,0x1e,0x2c,0x57,0xae,0xeb,0xe1,0x24,0x7d,
    0xd0,0x57,0x3f,0x6b,0x5a,0x0f,0xf7,0xb0,0x87,0x26,0xd7,0x43,0x9e,0x28,0x6e,0x3d,
    0x4c,0x10,0xc5,0xac,0x87,0x42,0xd7,0x03,0x6c,0xf9,0x61,0x14,0xb2,0x2e,0xee,0x1b,
    0x58,0xb7,0x40,0xb4,0xf6,0x49,0x19,0xd9,0xef,0xe0,0x68,0xbe,0x85,0x8e,0xe3,0x20,
    0xfd,0xc0,0xbb,0x80,0x39,0xc1,0x07,0x67,0xe2,0x02,0xcf,0x83,0xed,0xb9,0x8b,0xdc,
    0x73,0x03,0x6e,0xcf,0x5d,0x22,0xfe,0x16,0xf7,0xdc,0x65,0x62,0x83,0xec,0x15,0xe7,
    0xfe,0x7b,0xc6,0x5d,0x61,0x1c,0x34,0xfd,0x81,0xb8,0xe9,0xfe,0x13,0x63,0x23,0x87,
    0x5d,0x25,0x86,0x1e,0x1a,0x83,0xf6,0x38,0x7f,0xd7,0xe8,0x7b,0x95,0x39,0xac,0xc6,
    0xcf,0xac,0xd1,0xef,0x6a,0x5c,0x27,0xbe,0x3a,0xf4,0x8a,0xf3,0x76,0x83,0x3d,0x5d,
    0xe3,0x73,0xe2,0xba,0x3b,0x17,0x45,0x5c,0x8f,0x15,0x6e,0x3d,0xa6,0x88,0xe2,0xb6,
    0x1e,0xc5,0xa2,0x98,0xad,0x47,0xb9,0x5b,0x0f,0xd8,0x4a,0xc2,0x28,0xa7,0xc6,0x25,
    0xdc,0x53,0xf1,0xbb,0x49,0xb4,0x76,0xc4,0xb8,0x6e,0xc6,0xfd,0x19,0xee,0x91,0xab,
    0x8b,0x31,0xb8,0x1e,0x66,0xad,0x77,0x44,0xe3,0x26,0x32,0x66,0x9b,0xab,0x05,0xdb,
    0xa6,0x30,0xb6,0x30,0x0e,0xd7,0x9c,0xd0,0x63,0xfc,0xcc,0xe6,0x9a,0xdf,0xcf,0xba,
    0x78,0x2f,0x6e,0x22,0x8f,0x77,0x45,0xed,0x78,0x37,0xbe,0x4d,0xec,0x3d,0x51,0x7c,
    0x2a,0xf7,0x48,0x37,0x73,0x22,0xbf,0xc5,0x6d,0x26,0x97,0xa2,0x14,0x9f,0x6d,0xf1,
    0x19,0x95,0xf8,0xbe,0x9b,0x7b,0x0a,0xfe,0xa7,0x44,0xf3,0x82,0xd7,0x66,0x72,0xc5,
    0xd9,0xc1,0x1a,0x1c,0x16,0xb5,0xdf,0x70,0x6b,0x1d,0xbf,0x9f,0x89,0x09,0xfb,0xdd,
    0x93,0xa2,0xd1,0x76,0xd6,0xdc,0xee,0x34,0x7a,0x5f,0x34,0xce,0x34,0xda,0xed,0x34,
    0x82,0xad,0x27,0x8c,0x9d,0x8c,0xdb,0xe9,0x34,0xfa,0xc0,0x69,0x34,0x35,0x45,0xa3,
    0x0f,0x45,0xed,0x5e,0xa3,0x5d,0xa2,0xb8,0x69,0xb4,0x87,0x39,0x7b,0x9c,0x46,0x3b,
    0xc8,0xa5,0x28,0xc5,0x67,0xb7,0xd3,0x68,0x8f,0xd3,0x68,0x48,0x34,0x2f,0x78,0xed,
    0x20,0x57,0xd3,0xe8,0x4b,0x51,0xfb,0x61,0xf2,0x34,0x8d,0x4a,0xa9,0x51,0x82,0xfd,
    0xf6,0xa5,0x68,0xb4,0x97,0x35,0xf7,0x3a,0x8d,0x3e,0x12,0x8d,0x33,0x8d,0x0e,0x3a,
    0x8d,0x60,0xeb,0x0d,0x63,0x3f,0xe3,0xf6,0x3b,0x8d,0x0e,0x38,0x8d,0x4a,0x53,0x34,
    0xfa,0x58,0xd4,0xee,0x35,0xfa,0x44,0x14,0x37,0x8d,0xfa,0x98,0xb3,0xd7,0x69,0xb4,
    0x8f,0x5c,0x8a,0x52,0x7c,0x0e,0x3a,0x8d,0xfa,0x9c,0x46,0x67,0x44,0xf3,0x82,0xd7,
    0x3e,0x72,0x35,0x8d,0xbe,0x12,0xb5,0x43,0xab,0x04,0xf3,0xd9,0xd9,0x2b,0x67,0x0e,
    0xf8,0x9d,0xa5,0x66,0x78,0xe6,0x21,0xa6,0xcf,0x3d,0x83,0xa7,0xf3,0xcc,0xb7,0xba,
    0x33,0x5f,0x21,0x8a,0xdb,0x99,0xaf,0x14,0xc5,0xec,0xcc,0x37,0x39,0xfd,0x60,0xab,
    0x82,0x8d,0x75,0x6b,0x5c,0xee,0xb9,0xcc,0xdd,0xe5,0x72,0xcf,0x13,0xc5,0x2d,0xf7,
    0x7c,0x51,0xcc,0x72,0x2f,0x72,0xb9,0x61,0xab,0x0d,0x63,0x11,0x73,0xd7,0xba,0xe7,
    0xc9,0x02,0xd1,0xbe,0xf0,0x4d,0xf1,0x05,0x73,0x2d,0x14,0xc5,0xb7,0x52,0x0b,0x8b,
    0x5b,0x44,0x2d,0xe0,0xb3,0x58,0xb4,0x26,0x78,0x2e,0x64,0x7e,0xd4,0x6d,0x74,0x75,
    0xe1,0x53,0x17,0x46,0x23,0xe3,0xeb,0x5c,0xdd,0xc7,0x5c,0xdd,0x86,0xf0,0xa5,0x88,
    0x6f,0xc8,0xc7,0x89,0x9d,0x95,0x91,0x6f,0x96,0x04,0x9f,0xd7,0xb0,0xd7,0x8b,0xc6,
    0xd9,0xd8,0x12,0x72,0x01,0x5f,0x22,0x1a,0x5b,0x1f,0xbf,0xb7,0x46,0xc5,0x6b,0xd5,
    0xc0,0x3c,0xb0,0xa5,0xf1,0xdd,0x6f,0xdf,0xa8,0xe8,0xc9,0x38,0x35,0xba,0xf5,0x3d,
    0xcf,0x18,0xf4,0xd9,0x40,0xee,0xf0,0x6d,0xa2,0x6f,0x95,0xe3,0x3f,0xe3,0x3f,0xf8,
    0xcf,0xba,0x0b,0xff,0x6e,0xf2,0xac,0x16,0xf5,0x99,0xe1,0x78,0xce,0xa1,0x7f,0xf5,
    0x5d,0x78,0x5a,0xed,0x26,0xc7,0xf3,0x9c,0x28,0x57,0x70,0x9f,0xc3,0x7d,0x83,0x1a,
    0xb0,0x2d,0x13,0xb5,0xf7,0xf0,0x7b,0x0f,0xdf,0x93,0xcd,0xa2,0xb8,0xed,0xa7,0x27,
    0xb9,0x9f,0x76,0xb9,0xfd,0xf4,0x94,0x28,0x6e,0xfb,0xe9,0x69,0x51,0xcc,0xf6,0x53,
    0xa7,0x5b,0x57,0xd8,0x96,0x87,0xb1,0x8a,0xdc,0x56,0xb9,0xdc,0xab,0x99,0xbb,0xd7,
    0xe5,0x7e,0x46,0x14,0xb7,0xdc,0x6b,0x44,0x31,0xcb,0xdd,0xe1,0x72,0xc3,0xb6,0x36,
    0x8c,0xf5,0xcc,0xbd,0xde,0xbd,0xfb,0x9f,0x65,0xee,0x43,0xee,0xbd,0xfc,0x9c,0x28,
    0xfe,0x35,0xdf,0xf3,0x2f,0x88,0x62,0x78,0x77,0x5b,0xbd,0x17,0x45,0xf1,0x01,0xd6,
    0x6b,0x71,0xf5,0x60,0xdb,0x10,0x46,0x0b,0xeb,0x6d,0xe0,0x73,0x01,0xba,0x1d,0x63,
    0x4c,0xb3,0xfb,0x36,0x33,0xbf,0x16,0xae,0x07,0xfc,0x86,0x45,0x7d,0xc0,0xf5,0x18,
    0xf3,0x19,0x9f,0x97,0xc9,0xe7,0x88,0xe3,0xf3,0x8a,0x28,0x6e,0x7c,0xda,0x1c,0x1f,
    0xd8,0x5a,0xc3,0x68,0x63,0x9d,0x56,0xc7,0xe7,0x38,0x63,0x86,0xdd,0x73,0xca,0xfc,
    0xda,0x1c,0x9f,0x0b,0xa2,0x3e,0xe0,0x78,0x9c,0xf9,0x8c,0xcf,0x6b,0xe4,0xd3,0xe5,
    0xf8,0xbc,0x2e,0x8a,0x1b,0x9f,0x76,0xc7,0x07,0xb6,0x8d,0x61,0xb4,0xb3,0xce,0x46,
    0xc7,0xe7,0x84,0xe8,0xff,0x0c,0x17,0x64,0x64,0xbf,0x9a,0x5f,0xbb,0xe3,0xf3,0x9d,
    0xa8,0x0f,0x38,0x9e,0x60,0x3e,0xf8,0x76,0xd0,0x77,0xad,0xfb,0x66,0x5e,0x47,0x2d,
    0x91,0xcf,0xea,0x1c,0x95,0x11,0xdc,0xbe,0x3f,0x2d,0xb6,0xc3,0xd5,0xb9,0x24,0x5a,
    0x0b,0xb5,0x8f,0x72,0x1f,0xc1,0xb7,0x93,0xbe,0xcb,0x79,0xee,0xe0,0xbb,0x92,0xf9,
    0x9a,0x79,0xee,0x32,0x79,0x56,0xad,0x0f,0x8b,0xe9,0x74,0xf9,0x2f,0x8a,0xd6,0x40,
    0xcd,0x95,0x3c,0x03,0x73,0x43,0xc4,0x2d,0xda,0x6e,0x87,0x5d,0x32,0x33,0x8c,0xbf,
    0x01,0x26,0xda,0xe5,0xfa,0xb0,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DArray src;
// layout(location = 0)out ivec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       ivec4 transformSrcValue(vec4 srcValue)
// {
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//           ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           vec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
