// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyFloat.frag.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyFloat_frag_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x58,0x59,0x6c,0x55,0x55,
    0x14,0xbd,0xfb,0xb4,0xcc,0x43,0x5b,0x81,0x22,0x6a,0xb1,0xb4,0x80,0x20,0x84,0x29,
    0xa0,0x48,0x29,0x94,0x62,0x29,0xa4,0xc8,0x24,0x8d,0xc4,0x18,0x15,0xa8,0xa8,0x44,
    0x8b,0x4c,0x32,0x08,0x08,0x02,0xa2,0x11,0x04,0x12,0x3e,0x64,0xd0,0xc4,0x0f,0x23,
    0x0a,0x21,0xa0,0x12,0x05,0x07,0x42,0xb4,0x21,0xda,0x00,0xe1,0x83,0x68,0x10,0x54,
    0x42,0x22,0x81,0x40,0x54,0x10,0x65,0xc6,0xb3,0xde,0x5e,0x9b,0xb7,0x79,0xd1,0xd8,
    0xe4,0xf4,0xbe,0xb3,0xf6,0xb4,0xf6,0xba,0xe7,0x9c,0x7b,0xdf,0xcb,0x0a,0xc5,0x8d,
    0x92,0x44,0x92,0xa6,0x49,0xe3,0x64,0x51,0x48,0x52,0x7f,0x79,0x49,0x88,0x48,0x92,
    0x34,0x4b,0x1a,0xa6,0xae,0x95,0x23,0x1f,0x1e,0xd9,0x63,0xe6,0xac,0x9a,0x1e,0x7d,
    0xfb,0xf5,0x82,0xbd,0x65,0x92,0x95,0xf2,0x83,0x2d,0x27,0x69,0x94,0x64,0xc7,0x2b,
    0xc6,0xf3,0x13,0x9f,0xad,0x05,0x7e,0x25,0x8e,0x4e,0xd1,0x98,0x1b,0xfd,0x80,0xc7,
    0x02,0xc9,0xf0,0xa4,0x41,0x32,0x54,0xd3,0x27,0xc5,0xbc,0x1a,0x26,0xc4,0x1a,0x3b,
    0x2c,0x10,0xcb,0x75,0x58,0x16,0xb1,0xd6,0x0e,0xcb,0x26,0x76,0xbb,0xc3,0x1a,0x10,
    0xbb,0xcb,0x61,0x0d,0x89,0x15,0x3a,0xac,0x11,0xb1,0x8e,0x0e,0x6b,0x4c,0xac,0x8b,
    0xc3,0x9a,0x10,0xeb,0xee,0xb0,0xa6,0xc4,0x7a,0x39,0xac,0x19,0xb1,0xbe,0x0e,0x6b,
    0x4e,0xac,0xbf,0xc3,0x5a,0x10,0x1b,0xe8,0xb0,0x96,0xc4,0xca,0xa0,0x77,0xec,0xd4,
    0x34,0xa8,0x8c,0x1d,0x5e,0x61,0xee,0x1c,0xce,0x73,0xa2,0x60,0x45,0xd4,0xd0,0xe6,
    0x1d,0xdc,0x1c,0xda,0xb7,0xe7,0xbc,0x55,0xcc,0x82,0x3c,0x1d,0x62,0xce,0x2c,0xe6,
    0xcc,0x8f,0x9f,0x1a,0x52,0x8b,0x36,0x88,0xe7,0x67,0xdc,0x87,0xb6,0x71,0x9e,0xcb,
    0x5a,0x81,0xf3,0x7c,0xea,0x07,0xad,0xbb,0xc5,0xff,0xf8,0x5c,0x00,0x7d,0x7b,0x3c,
    0x54,0xd2,0x3a,0x7a,0xb5,0x77,0x38,0x7a,0x18,0xf7,0xd9,0xa8,0x21,0x36,0x87,0x8e,
    0xd5,0xd5,0x87,0x07,0xd9,0xfc,0xde,0x38,0x4a,0x9b,0xae,0x18,0x6c,0x73,0x68,0xba,
    0xad,0x72,0x62,0xa9,0xcd,0x7b,0xc7,0xf1,0xeb,0xb6,0x4e,0x37,0xe7,0xd0,0x68,0xc3,
    0xfa,0x76,0x65,0xe0,0x59,0x4e,0x9e,0xf8,0x6b,0x1f,0x57,0xe9,0x50,0xae,0x0f,0xe3,
    0x6b,0xa3,0xfc,0x7f,0x86,0xf9,0x14,0xc6,0x9c,0x0f,0xf2,0xfe,0x22,0x57,0x09,0xe7,
    0x15,0xc4,0xba,0x51,0x9b,0x61,0xd4,0x06,0xfe,0x95,0xb4,0xe5,0x3a,0x7b,0x15,0xd7,
    0x1c,0xec,0x23,0x69,0x2f,0xa7,0x1d,0xd7,0xd1,0xe4,0x6c,0xfe,0x13,0xa8,0xa7,0xcd,
    0x27,0xf3,0xfe,0xdb,0xbc,0x96,0xf7,0xdb,0xe6,0xcb,0xb8,0x56,0x71,0x2f,0x56,0x31,
    0x36,0xcb,0xd9,0xd7,0x71,0xdd,0x9a,0x66,0x9b,0x32,0xea,0x6d,0xe7,0x3a,0xb4,0x79,
    0x1d,0x39,0x22,0x5f,0x3d,0xf3,0x05,0x67,0x3f,0xc4,0xf5,0x6d,0xf3,0xa3,0x5c,0xb3,
    0xe8,0xef,0x18,0x63,0x73,0x9c,0xfd,0x78,0x46,0xfc,0x89,0x8c,0xfa,0xa7,0x32,0xd6,
    0xce,0x9f,0x29,0xeb,0xe2,0xc1,0xc8,0x77,0x99,0xda,0xe6,0x53,0xff,0xcb,0x3c,0x3f,
    0x24,0xb5,0x36,0x1a,0xa5,0xf0,0x20,0xda,0x93,0x1f,0xed,0x22,0x8b,0x16,0xa2,0xdc,
    0x25,0x49,0xff,0x89,0x9b,0x23,0x7f,0x4b,0x4e,0xe0,0x5b,0xc2,0x79,0x8e,0xa4,0xed,
    0x1d,0x45,0xb5,0xb4,0xfa,0x98,0x77,0x92,0xb4,0xbe,0xc8,0x3f,0x31,0x36,0x37,0xed,
    0xfd,0x19,0x37,0xd7,0xec,0xa4,0x38,0x5f,0xbb,0xf4,0x9d,0xd2,0xfb,0xe2,0x5d,0x0f,
    0xec,0x2d,0xe1,0x3d,0xb9,0x18,0x11,0xac,0x85,0x52,0xee,0x9b,0xab,0xec,0x67,0x74,
    0xec,0x05,0x5a,0x5f,0x23,0x76,0xd5,0xf1,0xad,0xe5,0x9e,0xbb,0x4e,0xfb,0x90,0x98,
    0x01,0xeb,0x6c,0x80,0xe8,0x5a,0x1c,0xc6,0x7c,0xf0,0x29,0x11,0xc5,0x5f,0x89,0x3e,
    0x98,0x0f,0x14,0x8d,0x03,0x8e,0x38,0xac,0xbf,0x52,0xc6,0x55,0x31,0x0e,0x6b,0x70,
    0x90,0x28,0xbe,0x25,0xfa,0x60,0xbf,0x0e,0x16,0xc5,0xb0,0x36,0xff,0x8e,0xcc,0x2b,
    0xa8,0xc9,0xe5,0xe8,0x0f,0x5b,0x19,0x72,0x88,0xf6,0x83,0xcf,0x63,0x63,0x5c,0x6a,
    0xdf,0x88,0xd6,0xc4,0xdf,0x22,0xde,0xdf,0xa1,0xa2,0xf8,0xb8,0xa8,0x0e,0x38,0x0d,
    0x0e,0x8a,0x99,0xdf,0xa5,0x98,0xc3,0x72,0xe1,0x7a,0x21,0x6a,0x01,0xbf,0xc9,0x41,
    0x7d,0x1a,0x30,0xa6,0xcc,0xf5,0x30,0x8c,0x3d,0x4c,0x70,0x3d,0x54,0x8a,0xe2,0xd6,
    0xc3,0x70,0x51,0xcc,0x7a,0x18,0xe5,0x7a,0x80,0x6d,0x44,0x1c,0xa3,0x58,0x77,0x84,
    0xeb,0xa1,0x4a,0xb4,0xb6,0xb8,0x1e,0x46,0x8a,0xe2,0xd6,0x43,0x79,0x50,0xcc,0xfc,
    0xd0,0x83,0xe5,0x1a,0xe5,0x7a,0xa8,0x09,0xea,0x83,0xbe,0x10,0x33,0xc2,0xf5,0x30,
    0x9a,0x3d,0x4c,0x76,0x3d,0x8c,0x11,0xc5,0xad,0x87,0xb1,0x42,0x8c,0x3d,0x54,0xbb,
    0x1e,0x60,0x1b,0x17,0x47,0x35,0xeb,0x8e,0x13,0x5d,0x47,0xa8,0x3b,0x5e,0xb4,0x76,
    0x4d,0x48,0xaf,0x77,0x70,0x34,0xdf,0x6a,0xc7,0xf1,0x29,0xfa,0x81,0xf7,0x78,0xe6,
    0x84,0x6f,0x36,0x7d,0xb3,0xe9,0x8b,0xf5,0xfa,0x74,0xd0,0xfd,0x86,0xf8,0x3b,0x71,
    0x6f,0x68,0x83,0x46,0x53,0x82,0xee,0x6d,0xd8,0x0a,0x68,0x43,0xaf,0x38,0x13,0x9a,
    0xb2,0xd7,0x53,0xec,0x15,0xfe,0xcd,0x44,0xf1,0x1d,0xec,0xb5,0xb9,0x68,0x0e,0xe0,
    0x7f,0x61,0x2f,0x31,0x87,0xf5,0xdb,0x9c,0xf3,0x86,0xe4,0x85,0xcf,0xc8,0x85,0xbd,
    0x9b,0xcb,0x7d,0x6b,0x7b,0x23,0x8f,0xf5,0x4e,0xb8,0xbd,0x71,0x9b,0x28,0xbe,0x98,
    0x7b,0xa3,0xb5,0x28,0x86,0xfe,0x9f,0x60,0x7f,0xed,0x98,0x0b,0xb6,0x32,0xf6,0xb4,
    0x24,0xfa,0xc3,0x86,0x7e,0xd1,0x7f,0x3b,0xe6,0x40,0x0f,0x05,0xe4,0x3c,0x2c,0xb9,
    0x55,0x33,0x70,0x9c,0xc6,0xf3,0xa0,0x50,0xb4,0xa7,0x31,0xac,0x51,0x24,0x8a,0xf9,
    0xf1,0x1a,0x6b,0x14,0xb3,0x46,0x91,0x5b,0x27,0x13,0xd9,0x4b,0xad,0x5b,0x27,0x93,
    0x44,0x71,0x5b,0x27,0x93,0x45,0x31,0x5b,0x27,0xd3,0x9d,0x6e,0xb0,0xd5,0xc4,0x31,
    0x9d,0xdc,0x6a,0xb8,0xd6,0xc1,0x6d,0x8a,0x68,0xcd,0x84,0x71,0xc7,0xf9,0xf9,0x4a,
    0xfc,0x8c,0x5c,0x87,0x19,0x83,0xeb,0x17,0xac,0xf5,0xbd,0x68,0x5c,0x01,0x63,0x7e,
    0x71,0xb5,0x60,0xfb,0x21,0x8e,0x1f,0x19,0x87,0x6b,0xf3,0xd8,0x37,0x6a,0x1d,0x13,
    0x5d,0x8b,0x77,0xb0,0x2e,0x9e,0xfd,0xcb,0xc9,0xe3,0x27,0x51,0x3b,0x9e,0xff,0x4b,
    0x89,0xfd,0x2c,0x8a,0x77,0xa7,0xb6,0xc7,0x99,0x13,0xf9,0x2d,0xee,0x08,0xb9,0x14,
    0x67,0xf8,0x80,0xd3,0x8d,0x58,0xed,0x22,0xb1,0x0b,0xe4,0xf0,0x4c,0xd0,0xbc,0xe0,
    0x75,0x84,0x5c,0xb1,0xa7,0xa1,0x7d,0x45,0x50,0xbb,0xe9,0x61,0x1a,0x4d,0xa5,0x46,
    0xc2,0x7e,0xcf,0x67,0x68,0x74,0x92,0x35,0x4f,0x3a,0x8d,0x4e,0x89,0xc6,0x99,0x46,
    0xe7,0x9c,0x46,0xb0,0x9d,0x8e,0xe3,0x2c,0xe3,0xce,0x3a,0x8d,0x7e,0x73,0x1a,0x4d,
    0xcd,0xd0,0xe8,0x77,0x51,0xbb,0xd7,0xe8,0x0f,0x51,0xdc,0x34,0x3a,0xcf,0x9c,0xa7,
    0x9d,0x46,0x67,0xc8,0xa5,0x38,0xc3,0xe7,0x9c,0xd3,0xe8,0xbc,0xd3,0x68,0x6a,0xd0,
    0xbc,0xe0,0x75,0x86,0x5c,0x4d,0xa3,0xe1,0x41,0xed,0x15,0x3c,0x57,0x4c,0xa3,0x5a,
    0x6a,0x14,0xd8,0x6f,0x83,0x70,0xab,0x46,0x97,0x58,0xf3,0x92,0xd3,0xe8,0x8a,0x68,
    0x9c,0x69,0x94,0x1d,0xd2,0x1a,0xc1,0x76,0x15,0xfc,0x18,0x77,0xc3,0x69,0x24,0x21,
    0xad,0x51,0x6d,0x86,0x46,0x21,0xa8,0xdd,0x6b,0x94,0x15,0x14,0x37,0x8d,0xc0,0x0d,
    0x39,0xaf,0x3a,0x8d,0xae,0x93,0x4b,0x71,0x86,0x0f,0x38,0x99,0x46,0xc0,0x4c,0xa3,
    0xe7,0x82,0xe6,0x05,0xaf,0xeb,0xe4,0x6a,0x1a,0x55,0x05,0xb5,0x43,0xab,0xc0,0x7c,
    0xb6,0xf7,0xa6,0xbb,0xb3,0xb4,0x96,0x6b,0x0d,0x67,0x05,0x62,0x90,0xdf,0xf6,0xfc,
    0x0c,0xee,0xf9,0x65,0x6e,0xcf,0xcf,0x14,0xc5,0x6d,0xcf,0xcf,0x12,0xc5,0x6c,0xcf,
    0xaf,0x75,0x6b,0x0c,0xb6,0xd9,0x71,0x2c,0x64,0xdd,0x85,0xee,0x3c,0x59,0xc4,0xdc,
    0xeb,0x5c,0xee,0x97,0x45,0x71,0xcb,0xbd,0x58,0x14,0xb3,0xdc,0xcb,0x5d,0x6e,0xd8,
    0x96,0x40,0x3b,0xe6,0x5e,0xe2,0xce,0x93,0xa5,0xa2,0x7d,0xe1,0x5d,0x67,0x37,0x73,
    0x2d,0x13,0xc5,0x37,0x51,0x0b,0x8b,0x5b,0x4e,0x2d,0xe0,0xf3,0xaa,0x68,0x4d,0xf0,
    0x5c,0xc6,0xfc,0xa8,0xbb,0xc6,0xd5,0x85,0xcf,0x8a,0x38,0xd6,0x30,0x7e,0x85,0xab,
    0xfb,0xba,0xab,0x3b,0x3a,0xbe,0xed,0xe2,0x3d,0xf8,0x0d,0x62,0xb5,0x21,0xfd,0x2e,
    0x85,0x8f,0x63,0x62,0x04,0xec,0x2b,0x45,0xe3,0x6c,0xe0,0x0c,0x06,0xbe,0x4a,0x34,
    0x76,0x65,0xaa,0xff,0x26,0xa9,0x7b,0xb5,0x9a,0xb9,0x60,0xcb,0xe6,0xfb,0xbc,0xbd,
    0x67,0xa3,0x27,0xe3,0xb4,0xc6,0xdd,0xdf,0xe9,0xac,0x8d,0x3e,0x57,0x93,0x3b,0x7c,
    0xd7,0xd2,0x77,0xb6,0xe3,0x3f,0xe7,0x5f,0xf8,0xcf,0xfb,0x0f,0xfe,0x6f,0x92,0xe7,
    0x7c,0x51,0x9f,0x39,0x8e,0xe7,0x02,0xc6,0xcc,0xff,0x0f,0x9e,0x56,0x7b,0xad,0xe3,
    0xf9,0x42,0x50,0xae,0xe0,0xbe,0x80,0xeb,0xc6,0xd6,0xca,0x5b,0x5c,0x2b,0xdb,0xdd,
    0x5a,0x59,0x2f,0x8a,0xdb,0x5a,0xd9,0x20,0x8a,0xd9,0x5a,0xd9,0xec,0xee,0x19,0x6c,
    0x1b,0xe3,0xd8,0xcc,0xba,0x1b,0x5d,0xcf,0x6f,0x8b,0xd6,0xb6,0x67,0x4f,0xdb,0x8c,
    0x33,0xa3,0x19,0xf7,0x20,0xae,0x76,0x66,0xb4,0x08,0x1a,0xd7,0x9b,0x31,0xf9,0xee,
    0xcc,0x80,0xad,0x65,0x1c,0x79,0x8c,0xcb,0xe3,0xb3,0x1b,0xb5,0x5a,0x31,0xae,0xbb,
    0x3b,0x2b,0x5a,0x07,0xc5,0xf1,0xfe,0x6e,0x67,0x4b,0x1b,0x77,0xb6,0xc0,0x3e,0x90,
    0xba,0xb5,0x65,0x4e,0xe4,0xb7,0xf8,0x5c,0xe6,0xc4,0xfb,0xbe,0xf7,0xc9,0x77,0x67,
    0x46,0x5b,0x77,0x66,0xcc,0x08,0x9a,0x1f,0xbc,0x72,0xc9,0xd5,0xce,0x8c,0xb1,0x41,
    0xed,0xa6,0x87,0x69,0xf4,0x2e,0x35,0xb2,0x67,0x4f,0xd7,0x0c,0x8d,0x0a,0x58,0xb3,
    0xc0,0x69,0x74,0x77,0xd0,0x38,0xd3,0xa8,0x8b,0xd3,0x08,0xb6,0x42,0x9c,0x3b,0x8c,
    0x2b,0x76,0x1a,0x75,0x62,0x9c,0xd7,0xa8,0x73,0x50,0xdc,0x6b,0x74,0x8f,0xd3,0xa8,
    0xb3,0xd3,0xa8,0x2b,0x73,0x16,0x3a,0x8d,0x8a,0x98,0xd3,0x34,0x32,0x9f,0x2e,0x4e,
    0xa3,0xae,0x4e,0xa3,0x59,0x41,0xf3,0x83,0x57,0x11,0xb9,0x9a,0x46,0xe3,0x83,0xda,
    0xc7,0x66,0x3c,0x7b,0xde,0xa3,0x46,0xf6,0xec,0x29,0xc9,0xd0,0xa8,0x27,0x6b,0xf6,
    0x74,0x1a,0xf5,0x0e,0x1a,0x67,0x1a,0x0d,0x70,0x1a,0xc1,0xd6,0x27,0x8e,0x7e,0x8c,
    0xeb,0xe7,0x34,0xba,0x9f,0x71,0x5e,0xa3,0xfe,0x41,0x71,0xaf,0xd1,0x03,0x4e,0xa3,
    0xfe,0x4e,0xa3,0x12,0xe6,0xec,0xe3,0x34,0xea,0xcb,0x9c,0xa6,0x91,0xf9,0x0c,0x70,
    0x1a,0x95,0x38,0x8d,0x5e,0x0c,0x9a,0x1f,0xbc,0xfa,0x92,0xab,0x69,0xf4,0x48,0x50,
    0xfb,0x78,0xf7,0xec,0xb1,0xbd,0xb7,0xd9,0xed,0xf9,0xb9,0x5c,0x6b,0x38,0x07,0x10,
    0x53,0xe2,0x9e,0x3d,0x1f,0x70,0xcf,0xd7,0xb9,0x3d,0xff,0xa1,0x28,0x6e,0x7b,0x7e,
    0x8b,0x28,0x66,0x7b,0xfe,0xa0,0xdb,0xf3,0xb0,0x6d,0xc5,0x7b,0x3d,0xeb,0xee,0x70,
    0xe7,0xc9,0x47,0xcc,0x7d,0xc8,0xe5,0xfe,0x58,0x14,0xb7,0xdc,0x9f,0x88,0x62,0x96,
    0xfb,0x80,0xcb,0x0d,0xdb,0xce,0x38,0x76,0x31,0xf7,0x2e,0xf7,0x1d,0x63,0x37,0x73,
    0x1f,0x75,0xdf,0x31,0x3e,0x17,0xc5,0xf7,0xf1,0x7d,0xfd,0x4b,0x51,0x0c,0xbf,0x49,
    0x58,0xbd,0xaf,0x44,0xf1,0x13,0xac,0xb7,0xd7,0xd5,0x83,0x6d,0x4f,0x1c,0x7b,0x59,
    0x6f,0x8f,0x7b,0xce,0x3f,0x16,0xf4,0x99,0x36,0xd7,0x7d,0x07,0x34,0xbf,0xbd,0x4e,
    0xeb,0x79,0x41,0x7d,0xc0,0x15,0x31,0x7b,0x1c,0x9f,0xaf,0xc9,0xe7,0x94,0xe3,0xf3,
    0x8d,0x28,0x6e,0x7c,0xf6,0x39,0x3e,0xb0,0xd5,0x21,0x9e,0x75,0xea,0x1c,0x9f,0xc7,
    0xc9,0x67,0x9e,0xbb,0xf7,0xe6,0xb7,0xcf,0xf1,0x99,0x1f,0xd4,0x07,0x1c,0x11,0x53,
    0xe7,0xf8,0x7c,0x4b,0x3e,0xeb,0x1c,0x9f,0xef,0x44,0x71,0xe3,0xb3,0xdf,0xf1,0x81,
    0xad,0x3e,0x8e,0xfd,0xac,0x53,0xef,0xf8,0x3c,0x19,0xf4,0xb7,0x9c,0xf9,0x21,0xfd,
    0xfc,0x31,0xbf,0xfd,0x8e,0xcf,0xc2,0xa0,0x3e,0xe0,0x88,0x98,0x7a,0x3e,0x27,0x0f,
    0xd0,0x77,0xa7,0x7b,0x66,0x7c,0x2a,0xaa,0x25,0xf2,0x59,0x9d,0x47,0x43,0x1a,0xb7,
    0xef,0xb9,0x16,0x7b,0xc0,0xd5,0x59,0x10,0xb4,0x16,0x6a,0x23,0x66,0x27,0xeb,0x1c,
    0xa4,0xef,0x56,0xf7,0x1c,0xdd,0xce,0x7c,0x18,0xf6,0x1b,0x75,0x70,0xcf,0x51,0x8b,
    0x39,0xe8,0xf2,0xbf,0x14,0xb4,0x06,0x6a,0x6e,0xe7,0x1e,0x18,0x14,0x23,0xf0,0x7b,
    0x11,0x6c,0xd7,0xe2,0x2a,0xe9,0x1f,0xc7,0x3f,0x43,0xc7,0x62,0x51,0x54,0x17,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMS src;
// layout(location = 0)out vec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       vec4 transformSrcValue(vec4 srcValue)
// {
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           vec4 dstValue = vec4(srcValue);
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 30 "shaders/src/ImageCopyFloat.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           vec4 srcValue = vec4(0);
//     for(int i = 0;i < params . srcSampleCount;i ++)
//     {
//         srcValue += texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), i);
//     }
//     srcValue /= params . srcSampleCount;
//
//     dst = transformSrcValue(srcValue);
// }
