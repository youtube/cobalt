# Copyright 2023 The Cobalt Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

config("modular") {
  ldflags = [ "-nostdlib" ]
  cflags = [
    "-ffunction-sections",
    "-fdata-sections",
    "-nostdlibinc",
  ]

  cflags += [ "-fPIC" ]

  defines = [
    # Enable GNU extensions to get prototypes like ffsl.
    "_GNU_SOURCE=1",

    "_LIBCPP_HAS_MUSL_LIBC",

    # File format of the shared object we will generate.
    "__ELF__",

    # Use scalar portable implementations instead of Clang/GCC vector
    # extensions in SkVx.h.
    "SKNX_NO_SIMD",

    # By default, <EGL/eglplatform.h> pulls in some X11 headers that have some
    # nasty macros (|Status|, for example) that conflict with Chromium base.
    "EGL_NO_X11",
  ]

  if (is_debug || cobalt_debugging_enabled) {
    cflags += [
      "-O0",
      "-frtti",
    ]

    cflags += [
      # This flag causes an increase in binary size on certain platforms. Refer b/297357707
      "-g",
    ]
  } else if (is_devel) {
    cflags += [
      "-O2",
      "-frtti",
    ]

    cflags += [
      # Use -gline-tables-only to ease the impact of increased size. Refer b/307760111
      "-gline-tables-only",
    ]
  } else {
    cflags += [
      "-fno-rtti",
      "-gline-tables-only",
    ]
  }

  if (is_clang) {
    cflags += [
      "-fcolor-diagnostics",

      # Default visibility to hidden, to enable dead stripping.
      "-fvisibility=hidden",
      "-fno-exceptions",

      # Enable unwind tables used by libunwind for stack traces.
      "-funwind-tables",

      # Disable usage of frame pointers.
      "-fomit-frame-pointer",
      "-fno-strict-aliasing",  # See http://crbug.com/32204
      "-fno-use-cxa-atexit",

      # Do not remove null pointer checks.
      "-fno-delete-null-pointer-checks",

      # ../../third_party/perfetto/src/base/unix_socket.cc:555:17: error: comparison of integers of different signs: 'unsigned long' and 'long' [-Werror,-Wsign-compare]
      #  cmsg = CMSG_NXTHDR(&msg_hdr, cmsg)) {
      #         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      "-Wno-sign-compare",
    ]
  }

  if (use_asan) {
    cflags += [
      "-fsanitize=address",
      "-fno-omit-frame-pointer",
    ]

    defines += [ "ADDRESS_SANITIZER" ]

    if (asan_symbolizer_path != "") {
      defines += [ "ASAN_SYMBOLIZER_PATH=\"${asan_symbolizer_path}\"" ]
    }
  } else if (use_tsan) {
    cflags += [
      "-fsanitize=thread",
      "-fno-omit-frame-pointer",
    ]

    defines += [ "THREAD_SANITIZER" ]
  }
}

config("speed") {
  cflags = [ "-O2" ]
}

config("size") {
  cflags = [ "-Os" ]
}
