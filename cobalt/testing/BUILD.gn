# Copyright 2025 The Cobalt Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/ui.gni")
import("//testing/test.gni")

group("testing") {
  testonly = true

  deps = [ ":cobalt_shellbrowsertests" ]
}

test("cobalt_shellbrowsertests") {
  use_xvfb = use_xvfb_in_this_config

  # See comment at the top of //content/BUILD.gn for why this is disabled in
  # component builds.
  if (is_component_build) {
    check_includes = false
  }

  sources = [ "shell/navigation_browsertest.cc" ]

  defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]

  configs += [ "//build/config:precompiled_headers" ]

  public_deps = [
    "//content:content_resources",
    "//content:dev_ui_content_resources",
    "//content/test:test_interfaces",
    "//content/test:web_ui_mojo_test_resources",
  ]

  deps = [
    ":browsertest_support",
    "//base/test:test_support",
    "//cc/slim",
    "//cobalt/browser",
    "//cobalt/shell:content_shell_lib",
    "//components/aggregation_service:mojom",
    "//components/attribution_reporting:mojom",
    "//components/discardable_memory/client",
    "//components/discardable_memory/common",
    "//components/discardable_memory/service",
    "//components/favicon/content",
    "//components/network_session_configurator/common",
    "//components/payments/mojom",
    "//components/performance_manager",
    "//components/services/quarantine:test_support",
    "//components/services/storage",
    "//components/services/storage/public/cpp",
    "//components/services/storage/public/mojom:test_api",
    "//components/ukm:test_support",
    "//components/url_formatter:url_formatter",
    "//components/viz/host",
    "//components/viz/test:test_support",
    "//components/web_package",
    "//components/web_package/test_support",
    "//content/app:for_content_tests",
    "//content/browser:browser",
    "//content/browser:buildflags",
    "//content/browser:for_content_tests",
    "//content/browser/attribution_reporting:attribution_reporting_proto",
    "//content/browser/attribution_reporting:mojo_bindings",
    "//content/browser/background_sync:background_sync_proto",
    "//content/child:for_content_tests",
    "//content/gpu",
    "//content/public/browser",
    "//content/public/child",
    "//content/public/common",
    "//content/public/common:switches",
    "//content/public/gpu",
    "//content/public/renderer",
    "//content/renderer:for_content_tests",
    "//content/services/auction_worklet/public/mojom:for_content_tests",
    "//content/shell:content_browsertests_mojom",
    "//content/shell:pak",
    "//content/test:content_test_mojo_bindings",
    "//content/test:mojo_web_test_bindings",
    "//content/test:test_support",
    "//content/test:web_ui_test_mojo_bindings",
    "//content/test:web_ui_ts_test_mojo_bindings",
    "//device/base/synchronization",
    "//device/bluetooth:mocks",
    "//gin",
    "//gpu",
    "//gpu/ipc/host",
    "//ipc",
    "//ipc:test_sink",
    "//media:media_buildflags",
    "//media:test_support",
    "//media/webrtc",
    "//mojo/core/embedder",
    "//mojo/public/cpp/bindings",
    "//mojo/public/cpp/test_support:test_utils",
    "//net:quic_test_tools",
    "//net:simple_quic_tools",
    "//net:test_support",
    "//pdf:buildflags",
    "//ppapi/buildflags",
    "//services/audio/public/cpp",
    "//services/cert_verifier/public/mojom",
    "//services/data_decoder/public/cpp",
    "//services/data_decoder/public/cpp:test_support",
    "//services/data_decoder/public/mojom",
    "//services/device/public/cpp:device_features",
    "//services/device/public/cpp:test_support",
    "//services/device/public/cpp/generic_sensor",
    "//services/device/public/mojom",
    "//services/device/public/mojom:generic_sensor",
    "//services/image_annotation/public/cpp:cpp",
    "//services/image_annotation/public/mojom:mojom",
    "//services/metrics",
    "//services/metrics/public/cpp:ukm_builders",
    "//services/network:test_support",
    "//services/network/public/mojom",
    "//services/network/trust_tokens:test_support",
    "//services/service_manager/public/cpp",
    "//services/test/echo/public/mojom",
    "//services/tracing:privacy_check",
    "//services/video_capture/public/cpp",
    "//services/video_capture/public/cpp:mocks",
    "//services/video_capture/public/mojom:constants",
    "//services/viz/privileged/mojom",
    "//services/viz/public/cpp/gpu",
    "//storage/browser",
    "//storage/browser:test_support",
    "//testing/gmock",
    "//testing/gtest",
    "//third_party/blink/public:blink",
    "//third_party/leveldatabase",
    "//third_party/mesa_headers",
    "//third_party/re2",
    "//third_party/zlib",
    "//ui/accessibility:ax_base",
    "//ui/accessibility:ax_enums_mojo",
    "//ui/base:test_support",
    "//ui/base/clipboard",
    "//ui/base/cursor",
    "//ui/base/ime",
    "//ui/base/ime/init",
    "//ui/base/ime/init:init",
    "//ui/base/ime/mojom",
    "//ui/compositor",
    "//ui/display",
    "//ui/display:test_support",
    "//ui/events:test_support",
    "//ui/events/blink:blink",
    "//ui/events/platform:platform",
    "//ui/gfx",
    "//ui/gfx:gfx_switches",
    "//ui/gfx/geometry",
    "//ui/gl",
    "//ui/gl:test_support",
    "//ui/latency",
    "//ui/native_theme",
    "//ui/resources",
    "//ui/shell_dialogs",
    "//ui/snapshot",
    "//ui/webui:test_support",
  ]

  data = [
    "//content/test/data/",
    "//media/test/data/",
  ]

  data_deps = [
    "//content/shell:pak",
    "//testing/buildbot/filters:content_browsertests_filters",
    "//third_party/mesa_headers",
  ]
}

# browsertest_support can be used by targets that run content_shell based
# browser tests.
static_library("browsertest_support") {
  testonly = true

  # See comment at the top of //content/BUILD.gn for why this is disabled in
  # component builds.
  if (is_component_build) {
    check_includes = false
  }

  sources = [
    "shell/browsing_data_browsertest_utils.cc",
    "shell/browsing_data_browsertest_utils.h",
    "shell/content_browser_test.cc",
    "shell/content_browser_test.h",
    "shell/content_browser_test_content_browser_client.cc",
    "shell/content_browser_test_content_browser_client.h",
    "shell/content_browser_test_shell_main_delegate.cc",
    "shell/content_browser_test_shell_main_delegate.h",
    "shell/content_browser_test_utils.cc",
    "shell/content_browser_test_utils.h",
    "shell/content_browser_test_utils_internal.cc",
    "shell/content_browser_test_utils_internal.h",
    "shell/content_cert_verifier_browser_test.cc",
    "shell/content_cert_verifier_browser_test.h",
    "shell/content_test_launcher.cc",
    "shell/resource_load_observer.cc",
    "shell/resource_load_observer.h",
    "shell/shared_storage_clear_site_data_tester.cc",
    "shell/shared_storage_clear_site_data_tester.h",
    "shell/storage_bucket_clear_site_data_tester.cc",
    "shell/storage_bucket_clear_site_data_tester.h",
  ]

  public_deps = [
    "//base",
    "//skia",
    "//testing/gmock",
    "//testing/gtest",
  ]

  deps = [
    "//base:i18n",
    "//base/test:test_config",
    "//base/test:test_support",
    "//cobalt/browser:browser",
    "//cobalt/shell:content_shell_app",
    "//cobalt/shell:content_shell_lib",
    "//components/network_session_configurator/common:common",
    "//components/services/storage:storage",
    "//content/app:for_content_tests",
    "//content/browser:for_content_tests",
    "//content/test:test_support",
    "//gin",
    "//media",
    "//net",
    "//net:test_support",
    "//ui/accessibility:ax_enums_mojo",
    "//ui/base",
    "//ui/base/ime/init",
  ]

  if (is_android) {
    deps += [ "//content/public/app" ]
  } else {
    deps += [ "//content/public/browser" ]
  }

  if (use_aura && toolkit_views && !is_castos) {
    deps += [ "//ui/views" ]
  }

  configs += [ "//v8:external_startup_data" ]
}
