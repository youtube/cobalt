{% from 'templates/macros.tmpl' import license, source_files_for_generated_file %}
{{license()}}

{{source_files_for_generated_file(template_file, input_files)}}

#ifndef {{header_guard}}
#define {{header_guard}}

#include "base/containers/flat_map.h"
#include "third_party/blink/public/common/common_export.h"
#include "third_party/blink/public/mojom/runtime_feature_state/runtime_feature_state.mojom-shared.h"
#include "third_party/blink/public/common/runtime_feature_state/runtime_feature_state_read_context.h"

namespace blink {

// This class, and its parent class, contain the feature states for blink
// runtime features which have opted in via the
// browser_process_read_write_access and browser_process_read_access parameters
// in runtime_enabled_features.json5. It collapses feature values from selected
// sources such as base::features, enterprise policy, and origin trial into a
// final value that browser and renderer processes can use.
//
// Specifically, this class allows for read/write access from the browser
// process prior to a page's nagivation committing. Post navigation commit this
// class is changed to a RuntimeFeatureStateReadContext which is not mutable
// from the browser process but may receive updates from a renderer process for
// features which allow overrides from origin trials.

class BLINK_COMMON_EXPORT RuntimeFeatureStateContext
    : public RuntimeFeatureStateReadContext {
 public:
  explicit RuntimeFeatureStateContext() { PopulateInitialValues(); }

  // Note: The Is*Enabled() functions are defined in the parent class.

  {% for feature in browser_write_access_features %}
  void Set{{feature.name}}Enabled(bool enabled) {
    return SetIsEnabled(
        blink::mojom::RuntimeFeatureState::k{{feature.name}},
        enabled);
  }
  {% endfor %}

 private:
  void PopulateInitialValues();

  void SetIsEnabled(blink::mojom::RuntimeFeatureState feature, bool enabled) {
    feature_overrides_[feature] = enabled;
  }
};

}  // namespace blink

#endif // {{header_guard}}
