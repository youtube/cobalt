// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "services/network/public/mojom/fetch_api.mojom";
import "third_party/blink/public/mojom/safe_url_pattern.mojom";

// Enum to represent the ServiceWorker running status.
// The purpose of having the condition is avoid using ServiceWorker
// if the service worker is not ready to run the fetch handler right away.
// `kNotRunning` includes `EmbeddedWorkerStatus`'s `kStarting` and `kStopping`
// in addition to `kStopped`.
enum ServiceWorkerRouterRunningStatusEnum {
  // ServiceWorker can run the fetch handler without waiting for starting
  // it up.
  kRunning = 0,
  // Not ready to run the fetch handler right away.
  kNotRunning = 1,
};

// This represents a running status condition to match.
// See:
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api/blob/main/final-form.md
struct ServiceWorkerRouterRunningStatusCondition {
  ServiceWorkerRouterRunningStatusEnum status;
};

// This represents a request condition to match.
// See:
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api/blob/main/final-form.md
struct ServiceWorkerRouterRequestCondition {
  // The request method.
  // See: https://fetch.spec.whatwg.org/#concept-request-method
  string? method;

  // RequestMode
  // See: https://fetch.spec.whatwg.org/#concept-request-mode
  // If it is not set, ServiceWorkerRouterEvaluator won't use it as condition.
  // TODO(http://crbug.com/657632): implement this with optional enum.
  // Since the code is used on Android, we need Java variant, which currently
  // does not support an optional enum.
  bool has_mode = false;
  network.mojom.RequestMode mode;

  // RequestDestination
  // See: https://fetch.spec.whatwg.org/#concept-request-destination
  // If it is not set, ServiceWorkerRouterEvaluator won't use it as condition.
  // TODO(http://crbug.com/657632): implement this with optional enum.
  // Since the code is used on Android, we need Java variant, which currently
  // does not support an optional enum.
  bool has_destination = false;
  network.mojom.RequestDestination destination;
};

struct ServiceWorkerRouterOrCondition {
  array<ServiceWorkerRouterCondition> conditions;
};

// This represents a condition of the router rule.
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api
// TODO(crbug.com/1371756): implement other conditions in the full picture.
struct ServiceWorkerRouterCondition {
  // URLPattern to be used for matching.
  SafeUrlPattern? url_pattern;
  ServiceWorkerRouterRequestCondition? request;
  ServiceWorkerRouterRunningStatusCondition? running_status;
  ServiceWorkerRouterOrCondition? or_condition;
};

// This is used for specifying the source is network.
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api
// TODO(crbug.com/1371756): implement fields in the full picture.
struct ServiceWorkerRouterNetworkSource {
};

// This source is used when the browser should allow a network source and
// the fetch handler to race, allowing the first one to respond to service
// the request.
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api
// TODO(crbug.com/1371756): implement fields in the full picture.
struct ServiceWorkerRouterRaceSource {
};

// This is used for explicitly running the fetch event listeners.
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api
// TODO(crbug.com/1371756): implement fields in the full picture.
struct ServiceWorkerRouterFetchEventSource {
};

// This source is used when the response should be retrieved from the cache
// storage.
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api
struct ServiceWorkerRouterCacheSource {
  // The Cache object's name to be used. Unspecified means looking up from
  // all Cache objects in the Cache Storage.
  string? cache_name;
};

// This represents a source of the router rule.
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api
// TODO(crbug.com/1371756): implement other sources in the full picture.
union ServiceWorkerRouterSource {
  ServiceWorkerRouterNetworkSource network_source;
  ServiceWorkerRouterRaceSource race_source;
  ServiceWorkerRouterFetchEventSource fetch_event_source;
  ServiceWorkerRouterCacheSource cache_source;
};

// This represents a ServiceWorker static routing API's router rule.
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api
// It represents each route.
// When an request matches `conditions`, a response is fetched from `sources`.
// `conditions` are evaluated sequentially to ensure all of them are fulfilled.
// `sources` are tried sequentially, and quit once available source is found
// and used.
struct ServiceWorkerRouterRule {
  // A rule can have one condition object. A condition object may have several
  // different conditions.
  ServiceWorkerRouterCondition condition;
  // There can be a list of sources, and expected to be routed from
  // front to back.
  array<ServiceWorkerRouterSource> sources;
};

// This represents a list of ServiceWorker static routing API's router rules.
// https://github.com/yoshisatoyanagisawa/service-worker-static-routing-api
struct ServiceWorkerRouterRules {
  array<ServiceWorkerRouterRule> rules;
};
