// Copyright 2012 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[
  {
    "namespace":"management",
    "description": "The <code>chrome.management</code> API provides ways to manage the list of extensions/apps that are installed and running. It is particularly useful for extensions that <a href='override'>override</a> the built-in New Tab page.",
    "compiler_options": {
      "modernised_enums": true
    },
    "types": [
      {
        "id": "IconInfo",
        "description": "Information about an icon belonging to an extension, app, or theme.",
        "type": "object",
        "properties": {
          "size": { "type": "integer", "description": "A number representing the width and height of the icon. Likely values include (but are not limited to) 128, 48, 24, and 16."  },
          "url": { "type": "string", "description": "The URL for this icon image. To display a grayscale version of the icon (to indicate that an extension is disabled, for example), append <code>?grayscale=true</code> to the URL." }
        }
      },
      {
        "id": "LaunchType",
        "type": "string",
        "enum": ["OPEN_AS_REGULAR_TAB", "OPEN_AS_PINNED_TAB", "OPEN_AS_WINDOW", "OPEN_FULL_SCREEN"],
        "description": "These are all possible app launch types."
      },
      {
        "id": "ExtensionDisabledReason",
        "description": "A reason the item is disabled.",
        "type": "string",
        "enum": ["unknown", "permissions_increase"]
      },
      {
        "id": "ExtensionType",
        "description": "The type of this extension, app, or theme.",
        "type": "string",
        "enum": ["extension", "hosted_app", "packaged_app", "legacy_packaged_app", "theme", "login_screen_extension"]
      },
      {
        "id": "ExtensionInstallType",
        "description": "How the extension was installed. One of<br><var>admin</var>: The extension was installed because of an administrative policy,<br><var>development</var>: The extension was loaded unpacked in developer mode,<br><var>normal</var>: The extension was installed normally via a .crx file,<br><var>sideload</var>: The extension was installed by other software on the machine,<br><var>other</var>: The extension was installed by other means.",
        "type": "string",
        "enum": ["admin", "development", "normal", "sideload", "other"]
      },
      {
        "id": "ExtensionInfo",
        "description": "Information about an installed extension, app, or theme.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The extension's unique identifier.",
            "type": "string"
          },
          "name": {
            "description": "The name of this extension, app, or theme.",
            "type": "string"
          },
          "shortName": {
            "description": "A short version of the name of this extension, app, or theme.",
            "type": "string"
          },
          "description": {
            "description": "The description of this extension, app, or theme.",
            "type": "string"
          },
          "version": {
            "description": "The <a href='manifest/version'>version</a> of this extension, app, or theme.",
            "type": "string"
          },
          "versionName": {
            "description": "The <a href='manifest/version#version_name'>version name</a> of this extension, app, or theme if the manifest specified one.",
            "type": "string",
            "optional": true
          },
          "mayDisable": {
            "description": "Whether this extension can be disabled or uninstalled by the user.",
            "type": "boolean"
          },
          "mayEnable" : {
            "description": "Whether this extension can be enabled by the user. This is only returned for extensions which are not enabled.",
            "type": "boolean",
            "optional": true
          },
          "enabled": {
            "description": "Whether it is currently enabled or disabled.",
            "type": "boolean"
          },
          "disabledReason": {
            "description": "A reason the item is disabled.",
            "$ref": "ExtensionDisabledReason",
            "optional": true
          },
          "isApp": {
            "description": "True if this is an app.",
            "type": "boolean",
            "deprecated": "Please use $(ref:management.ExtensionInfo.type)."
          },
          "type": {
            "description": "The type of this extension, app, or theme.",
            "$ref": "ExtensionType"
          },
          "appLaunchUrl": {
            "description": "The launch url (only present for apps).",
            "type": "string",
            "optional": true
          },
          "homepageUrl": {
            "description": "The URL of the homepage of this extension, app, or theme.",
            "type": "string",
            "optional": true
          },
          "updateUrl": {
            "description": "The update URL of this extension, app, or theme.",
            "type": "string",
            "optional": true
          },
          "offlineEnabled": {
            "description": "Whether the extension, app, or theme declares that it supports offline.",
            "type": "boolean"
          },
          "optionsUrl": {
            "description": "The url for the item's options page, if it has one.",
            "type": "string"
          },
          "icons": {
            "description": "A list of icon information. Note that this just reflects what was declared in the manifest, and the actual image at that url may be larger or smaller than what was declared, so you might consider using explicit width and height attributes on img tags referencing these images. See the <a href='manifest/icons'>manifest documentation on icons</a> for more details.",
            "type": "array",
            "optional": true,
            "items": {
              "$ref": "IconInfo"
            }
          },
          "permissions": {
            "description": "Returns a list of API based permissions.",
            "type": "array",
            "items" : {
              "type": "string"
            }
          },
          "hostPermissions": {
            "description": "Returns a list of host based permissions.",
            "type": "array",
            "items" : {
              "type": "string"
            }
          },
          "installType": {
            "description": "How the extension was installed.",
            "$ref": "ExtensionInstallType"
          },
          "launchType": {
            "description": "The app launch type (only present for apps).",
            "$ref": "LaunchType",
            "optional": true
          },
          "availableLaunchTypes": {
            "description": "The currently available launch types (only present for apps).",
            "type": "array",
            "optional": true,
            "items": {
              "$ref": "LaunchType"
            }
          }
        }
      },
      {
        "id": "UninstallOptions",
        "description": "Options for how to handle the extension's uninstallation.",
        "type": "object",
        "properties": {
          "showConfirmDialog": {
            "type": "boolean",
            "optional": true,
            "description": "Whether or not a confirm-uninstall dialog should prompt the user. Defaults to false for self uninstalls. If an extension uninstalls another extension, this parameter is ignored and the dialog is always shown."
          }
        }
      }
    ],
    "functions": [
      {
        "name": "getAll",
        "description": "Returns a list of information about installed extensions and apps.",
        "parameters": [],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "type": "array",
              "name": "result",
              "items": {
                "$ref": "ExtensionInfo"
              }
            }
          ]
        }
      },
      {
        "name": "get",
        "description": "Returns information about the installed extension, app, or theme that has the given ID.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "The ID from an item of $(ref:management.ExtensionInfo)."
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "name": "result",
              "$ref": "ExtensionInfo"
            }
          ]
        }
      },
      {
        "name": "getSelf",
        "description": "Returns information about the calling extension, app, or theme. Note: This function can be used without requesting the 'management' permission in the manifest.",
        "parameters": [],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "name": "result",
              "$ref": "ExtensionInfo"
            }
          ]
        }
      },
      {
        "name": "getPermissionWarningsById",
        "description": "Returns a list of <a href='permission_warnings'>permission warnings</a> for the given extension id.",
        "parameters": [
          { "name": "id",
            "type": "string",
            "description": "The ID of an already installed extension."
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "name": "permissionWarnings",
              "type": "array",
              "items": { "type": "string" }
            }
          ]
        }
      },
      {
        "name": "getPermissionWarningsByManifest",
        "description": "Returns a list of <a href='permission_warnings'>permission warnings</a> for the given extension manifest string. Note: This function can be used without requesting the 'management' permission in the manifest.",
        "parameters": [
          {
            "name": "manifestStr",
            "type": "string",
            "description": "Extension manifest JSON string."
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": [
            {
              "name": "permissionWarnings",
              "type": "array",
              "items": { "type": "string" }
            }
          ]
        }
      },
      {
        "name": "setEnabled",
        "description": "Enables or disables an app or extension. In most cases this function must be called in the context of a user gesture (e.g. an onclick handler for a button), and may present the user with a native confirmation UI as a way of preventing abuse.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "This should be the id from an item of $(ref:management.ExtensionInfo)."
          },
          {
            "name": "enabled",
            "type": "boolean",
            "description": "Whether this item should be enabled or disabled."
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      },
      {
        "name": "uninstall",
        "description": "Uninstalls a currently installed app or extension. Note: This function does not work in managed environments when the user is not allowed to uninstall the specified extension/app. If the uninstall fails (e.g. the user cancels the dialog) the promise will be rejected or the callback will be called with $(ref:runtime.lastError) set.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "This should be the id from an item of $(ref:management.ExtensionInfo)."
          },
          {
            "name": "options",
            "$ref": "UninstallOptions",
            "optional": true
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      },
      {
        "name": "uninstallSelf",
        "description": "Uninstalls the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest. This function does not work in managed environments when the user is not allowed to uninstall the specified extension/app.",
        "parameters": [
          {
            "name": "options",
            "$ref": "UninstallOptions",
            "optional": true
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      },
      {
        "name": "launchApp",
        "description": "Launches an application.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "The extension id of the application."
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      },
      {
        "name": "createAppShortcut",
        "description": "Display options to create shortcuts for an app. On Mac, only packaged app shortcuts can be created.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "This should be the id from an app item of $(ref:management.ExtensionInfo)."
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters": []
        }
      },
      {
        "name": "setLaunchType",
        "description": "Set the launch type of an app.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "This should be the id from an app item of $(ref:management.ExtensionInfo)."
          },
          {
            "name": "launchType",
            "$ref": "LaunchType",
            "description": "The target launch type. Always check and make sure this launch type is in $(ref:ExtensionInfo.availableLaunchTypes), because the available launch types vary on different platforms and configurations."
          }
        ],
        "returns_async": {
          "name": "callback",
          "type": "function",
          "optional": true,
          "parameters": []
        }
      },
      {
        "name": "generateAppForLink",
        "description": "Generate an app for a URL. Returns the generated bookmark app.",
        "parameters": [
          {
            "name": "url",
            "type": "string",
            "description": "The URL of a web page. The scheme of the URL can only be \"http\" or \"https\"."
          },
          {
            "name": "title",
            "type": "string",
            "description": "The title of the generated app."
          }
        ],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters":  [
            {
              "name": "result",
              "$ref": "ExtensionInfo"
            }
          ]
        }
      },
      {
        "name": "installReplacementWebApp",
        "description": "Launches the replacement_web_app specified in the manifest. Prompts the user to install if not already installed.",
        "parameters": [],
        "returns_async": {
          "name": "callback",
          "optional": true,
          "parameters":  []
        }
      }
    ],
    "events": [
      {
        "name": "onInstalled",
        "description": "Fired when an app or extension has been installed.",
        "type": "function",
        "parameters": [{"name": "info", "$ref":"ExtensionInfo"}]
      },
      {
        "name": "onUninstalled",
        "description": "Fired when an app or extension has been uninstalled.",
        "type": "function",
        "parameters": [
          {
           "name": "id",
           "type": "string",
           "description": "The id of the extension, app, or theme that was uninstalled."
          }
        ]
      },
      {
        "name": "onEnabled",
        "description": "Fired when an app or extension has been enabled.",
        "type": "function",
        "parameters": [{"name": "info", "$ref":"ExtensionInfo"}]
      },
      {
        "name": "onDisabled",
        "description": "Fired when an app or extension has been disabled.",
        "type": "function",
        "parameters": [{"name": "info", "$ref":"ExtensionInfo"}]
      }
    ]
  }
]
