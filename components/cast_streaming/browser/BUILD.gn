# Copyright 2020 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//testing/test.gni")

source_set("network_context") {
  public = [ "public/network_context_getter.h" ]
  sources = [ "network_context_getter.cc" ]
  public_deps = [ "//base" ]
  deps = [ "//components/openscreen_platform" ]
}

source_set("browser") {
  public = [
    "public/receiver_config.h",
    "public/receiver_session.h",
  ]
  sources = [
    "cast_message_port_converter.h",
    "cast_streaming_session.cc",
    "cast_streaming_session.h",
    "receiver_config.cc",
    "receiver_config_conversions.cc",
    "receiver_config_conversions.h",
    "receiver_session_impl.cc",
    "receiver_session_impl.h",
  ]
  public_deps = [
    ":network_context",
    "//base",
    "//components/cast_streaming/common:mojom",
    "//mojo/public/cpp/bindings",
  ]
  deps = [
    "//base",
    "//components/cast_streaming/browser/common",
    "//components/cast_streaming/browser/control",
    "//components/cast_streaming/browser/control/remoting",
    "//components/cast_streaming/browser/frame",
    "//components/cast_streaming/common",
    "//components/cast_streaming/common:conversions",
    "//components/openscreen_platform",
    "//media",
    "//media/cast/openscreen:config_conversions",
    "//media/cast/openscreen:remoting_utils",
    "//media/mojo/common",
    "//media/mojo/mojom",
    "//mojo/public/cpp/system",
    "//third_party/openscreen/src/cast/streaming:receiver",
  ]

  # MessagePort cannot be used on Windows due to intersection of its
  # PostMessage method with a macro of the same name, so hide the targets that
  # use it and all that depend on it behind a platform check.
  # TODO(crbug.com/1357085): Resolve this and remove this exception.
  if (!is_win) {
    # TODO(crbug.com/1207718): Remove cast_message_port_impl code from this
    # component and replace with a more general interface.
    sources += [
      "cast_message_port_impl.cc",
      "cast_message_port_impl.h",
    ]
    deps += [
      ":network_context",
      "//components/cast/message_port",
      "//components/openscreen_platform",
      "//mojo/public/cpp/bindings",
      "//third_party/openscreen/src/cast/common:public",
      "//third_party/openscreen/src/platform:base",
    ]
  } else {
    sources += [ "cast_message_port_converter_trivial.cc" ]
  }

  friend = [ ":unit_tests" ]
}

# TODO(crbug.com/1207721): Add more unit tests for code in this directory.
source_set("unit_tests") {
  testonly = true
  public = []
  sources = []
  deps = [
    ":browser",
    "//components/cast_streaming/browser/control/remoting:unit_tests",
    "//components/cast_streaming/browser/frame:unit_tests",
  ]

  if (!is_win) {
    sources += [ "cast_message_port_impl_unittest.cc" ]
    deps += [
      "//base/test:test_support",
      "//components/cast/message_port",
      "//components/cast/message_port:test_message_port_receiver",
      "//components/cast_streaming/common:conversions",
      "//testing/gtest",
      "//third_party/openscreen/src/cast/common:public",
    ]
  }
}
