// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module qrcode_generator.mojom;

import "sandbox/policy/mojom/sandbox.mojom";
import "skia/public/mojom/bitmap.mojom";
import "ui/gfx/geometry/mojom/geometry.mojom";

enum QRCodeGeneratorError {
  // No error.
  NONE,

  // Input string was too long.
  INPUT_TOO_LONG,

  // Unknown error.
  UNKNOWN_ERROR,
};

// How to render qr code pixels.
// This does not affect the main locators.
enum ModuleStyle {
  DEFAULT_SQUARES,
  CIRCLES,
};

// Style for the corner locators.
enum LocatorStyle {
  DEFAULT_SQUARE,
  ROUNDED,
};

// The center image to superimpose over the QR code.
enum CenterImage {
  DEFAULT_NONE,
  CHROME_DINO,
  PASSKEY_ICON,
};

// Structure for requesting QR Code data or image.
struct GenerateQRCodeRequest {
  // Data to generate the QR code.
  string data;

  // Whether to render the QR code. If false, provides data back to the caller.
  bool should_render;

  // Style for the individual modules. Does not apply to locators.
  ModuleStyle render_module_style;

  // Whether the renderer should include rounded corners.
  LocatorStyle render_locator_style;

  // The image, if any, to superimpose over the center of the QR code.
  CenterImage center_image;
};

// Structure for returning QR Code image data.
struct GenerateQRCodeResponse {
  // Return code stating success or failure.
  QRCodeGeneratorError error_code;

  // Image data for generated QR code. May be null on error, or if rendering
  // was not requested.
  skia.mojom.BitmapN32? bitmap;

  // QR Code data.
  array<uint8> data;

  // 2-D size of |data| in elements. Note |bitmap| will be upscaled, so this
  // does not represent the returned image size.
  gfx.mojom.Size data_size;
};

// Interface for generating QR codes for a given string of input data.
// This is usually run outside the browser process if the data is untrusted.
[ServiceSandbox=sandbox.mojom.Sandbox.kService]
interface QRCodeGeneratorService {
  // Tries to generate a QR code for |data|.
  // Populates |response.error| on error; if kNone then |response.data|
  // should be considered valid.
  GenerateQRCode(GenerateQRCodeRequest request)
      => (GenerateQRCodeResponse response);
};
