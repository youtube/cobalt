/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __META_DBUS_DEBUG_CONTROL_H__
#define __META_DBUS_DEBUG_CONTROL_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Mutter.DebugControl */

#define META_DBUS_TYPE_DEBUG_CONTROL (meta_dbus_debug_control_get_type())
#define META_DBUS_DEBUG_CONTROL(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_DEBUG_CONTROL, \
                              MetaDBusDebugControl))
#define META_DBUS_IS_DEBUG_CONTROL(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_DEBUG_CONTROL))
#define META_DBUS_DEBUG_CONTROL_GET_IFACE(o)                        \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), META_DBUS_TYPE_DEBUG_CONTROL, \
                                 MetaDBusDebugControlIface))

struct _MetaDBusDebugControl;
typedef struct _MetaDBusDebugControl MetaDBusDebugControl;
typedef struct _MetaDBusDebugControlIface MetaDBusDebugControlIface;

struct _MetaDBusDebugControlIface {
  GTypeInterface parent_iface;

  gboolean (*get_color_management_protocol)(MetaDBusDebugControl* object);

  gboolean (*get_enable_hdr)(MetaDBusDebugControl* object);

  gboolean (*get_force_hdr)(MetaDBusDebugControl* object);

  gboolean (*get_force_linear_blending)(MetaDBusDebugControl* object);

  gboolean (*get_inhibit_hw_cursor)(MetaDBusDebugControl* object);

  guint (*get_luminance_percentage)(MetaDBusDebugControl* object);

  gboolean (*get_session_management_protocol)(MetaDBusDebugControl* object);
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusDebugControl, g_object_unref)
#endif

GType meta_dbus_debug_control_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo* meta_dbus_debug_control_interface_info(void);
guint meta_dbus_debug_control_override_properties(GObjectClass* klass,
                                                  guint property_id_begin);

/* D-Bus property accessors: */
gboolean meta_dbus_debug_control_get_color_management_protocol(
    MetaDBusDebugControl* object);
void meta_dbus_debug_control_set_color_management_protocol(
    MetaDBusDebugControl* object,
    gboolean value);

gboolean meta_dbus_debug_control_get_enable_hdr(MetaDBusDebugControl* object);
void meta_dbus_debug_control_set_enable_hdr(MetaDBusDebugControl* object,
                                            gboolean value);

gboolean meta_dbus_debug_control_get_force_hdr(MetaDBusDebugControl* object);
void meta_dbus_debug_control_set_force_hdr(MetaDBusDebugControl* object,
                                           gboolean value);

gboolean meta_dbus_debug_control_get_force_linear_blending(
    MetaDBusDebugControl* object);
void meta_dbus_debug_control_set_force_linear_blending(
    MetaDBusDebugControl* object,
    gboolean value);

guint meta_dbus_debug_control_get_luminance_percentage(
    MetaDBusDebugControl* object);
void meta_dbus_debug_control_set_luminance_percentage(
    MetaDBusDebugControl* object,
    guint value);

gboolean meta_dbus_debug_control_get_session_management_protocol(
    MetaDBusDebugControl* object);
void meta_dbus_debug_control_set_session_management_protocol(
    MetaDBusDebugControl* object,
    gboolean value);

gboolean meta_dbus_debug_control_get_inhibit_hw_cursor(
    MetaDBusDebugControl* object);
void meta_dbus_debug_control_set_inhibit_hw_cursor(MetaDBusDebugControl* object,
                                                   gboolean value);

/* ---- */

#define META_DBUS_TYPE_DEBUG_CONTROL_PROXY \
  (meta_dbus_debug_control_proxy_get_type())
#define META_DBUS_DEBUG_CONTROL_PROXY(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_DEBUG_CONTROL_PROXY, \
                              MetaDBusDebugControlProxy))
#define META_DBUS_DEBUG_CONTROL_PROXY_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_DEBUG_CONTROL_PROXY, \
                           MetaDBusDebugControlProxyClass))
#define META_DBUS_DEBUG_CONTROL_PROXY_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_DEBUG_CONTROL_PROXY, \
                             MetaDBusDebugControlProxyClass))
#define META_DBUS_IS_DEBUG_CONTROL_PROXY(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_DEBUG_CONTROL_PROXY))
#define META_DBUS_IS_DEBUG_CONTROL_PROXY_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_DEBUG_CONTROL_PROXY))

typedef struct _MetaDBusDebugControlProxy MetaDBusDebugControlProxy;
typedef struct _MetaDBusDebugControlProxyClass MetaDBusDebugControlProxyClass;
typedef struct _MetaDBusDebugControlProxyPrivate
    MetaDBusDebugControlProxyPrivate;

struct _MetaDBusDebugControlProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  MetaDBusDebugControlProxyPrivate* priv;
};

struct _MetaDBusDebugControlProxyClass {
  GDBusProxyClass parent_class;
};

GType meta_dbus_debug_control_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusDebugControlProxy, g_object_unref)
#endif

void meta_dbus_debug_control_proxy_new(GDBusConnection* connection,
                                       GDBusProxyFlags flags,
                                       const gchar* name,
                                       const gchar* object_path,
                                       GCancellable* cancellable,
                                       GAsyncReadyCallback callback,
                                       gpointer user_data);
MetaDBusDebugControl* meta_dbus_debug_control_proxy_new_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusDebugControl* meta_dbus_debug_control_proxy_new_sync(
    GDBusConnection* connection,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_debug_control_proxy_new_for_bus(GBusType bus_type,
                                               GDBusProxyFlags flags,
                                               const gchar* name,
                                               const gchar* object_path,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
MetaDBusDebugControl* meta_dbus_debug_control_proxy_new_for_bus_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusDebugControl* meta_dbus_debug_control_proxy_new_for_bus_sync(
    GBusType bus_type,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

/* ---- */

#define META_DBUS_TYPE_DEBUG_CONTROL_SKELETON \
  (meta_dbus_debug_control_skeleton_get_type())
#define META_DBUS_DEBUG_CONTROL_SKELETON(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_DEBUG_CONTROL_SKELETON, \
                              MetaDBusDebugControlSkeleton))
#define META_DBUS_DEBUG_CONTROL_SKELETON_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_DEBUG_CONTROL_SKELETON, \
                           MetaDBusDebugControlSkeletonClass))
#define META_DBUS_DEBUG_CONTROL_SKELETON_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_DEBUG_CONTROL_SKELETON, \
                             MetaDBusDebugControlSkeletonClass))
#define META_DBUS_IS_DEBUG_CONTROL_SKELETON(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_DEBUG_CONTROL_SKELETON))
#define META_DBUS_IS_DEBUG_CONTROL_SKELETON_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_DEBUG_CONTROL_SKELETON))

typedef struct _MetaDBusDebugControlSkeleton MetaDBusDebugControlSkeleton;
typedef struct _MetaDBusDebugControlSkeletonClass
    MetaDBusDebugControlSkeletonClass;
typedef struct _MetaDBusDebugControlSkeletonPrivate
    MetaDBusDebugControlSkeletonPrivate;

struct _MetaDBusDebugControlSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MetaDBusDebugControlSkeletonPrivate* priv;
};

struct _MetaDBusDebugControlSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType meta_dbus_debug_control_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusDebugControlSkeleton, g_object_unref)
#endif

MetaDBusDebugControl* meta_dbus_debug_control_skeleton_new(void);

G_END_DECLS

#endif /* __META_DBUS_DEBUG_CONTROL_H__ */
