// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     J.module_N

#ifndef TEMP_DIR_HEADER_
#define TEMP_DIR_HEADER_

#include <iterator>

#include "third_party/jni_zero/jni_zero_internal.h"

extern const int64_t kJniZeroHashmoduleWhole = -7714383706413312501LL;
extern const int64_t kJniZeroHashmodulePriority = 0LL;

// Forward Declarations.
JNI_ZERO_MUXED_ENTRYPOINT jboolean Muxed_org_jni_1zero_SampleModule_bar(JNIEnv* env, jboolean a);
JNI_ZERO_MUXED_ENTRYPOINT void Muxed_org_jni_1zero_SampleModule_foo(JNIEnv* env);

// Multiplexing Methods.
JNI_ZERO_BOUNDARY_EXPORT void Java_J_module_1N_V(JNIEnv* env, jclass jcaller) {
  return Muxed_org_jni_1zero_SampleModule_foo(env);
}
JNI_ZERO_BOUNDARY_EXPORT jboolean Java_J_module_1N_ZZ(JNIEnv* env, jclass jcaller, jboolean p0) {
  return Muxed_org_jni_1zero_SampleModule_bar(env, p0);
}

// Helper Methods.
namespace {

bool RegisterNative_J_module_1N(JNIEnv* env) {
  static const JNINativeMethod kMethods[] = {
        {"V",
         "()V",
         reinterpret_cast<void*>(Java_J_module_1N_V)},
         {"ZZ",
         "(Z)Z",
         reinterpret_cast<void*>(Java_J_module_1N_ZZ)},

  };
  jni_zero::ScopedJavaLocalRef<jclass> native_clazz =
      jni_zero::GetClass(env, "J/module_N");
  if (env->RegisterNatives(native_clazz.obj(), kMethods, std::size(kMethods)) < 0) {
    jni_zero::internal::HandleRegistrationError(env, native_clazz.obj(), __FILE__);
    return false;
  }

  return true;
}

}  // namespace

// Main Register Function.
namespace {

bool RegisterNatives(JNIEnv* env) {
  // Register natives in a proxy.
  if (!RegisterNative_J_module_1N(env)) {
    return false;
  }

  return true;
}

}  // namespace


#endif  // TEMP_DIR_HEADER_
