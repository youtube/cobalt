[url-constructor.any.html?exclude=(file|javascript|mailto)]
  [Parsing: <#i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: <#i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <#x> against <sc://ñ>]
    expected: FAIL

  [Parsing: <..//path> against <non-spec:/p>]
    expected: FAIL

  [Parsing: <../i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: <../i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <../path> against <non-spec:/.//p>]
    expected: FAIL

  [Parsing: </..//path> against <non-spec:/p>]
    expected: FAIL

  [Parsing: </.//path> against <non-spec:/p>]
    expected: FAIL

  [Parsing: <////> against <sc://x/>]
    expected: FAIL

  [Parsing: <////x/> against <sc://x/>]
    expected: FAIL

  [Parsing: <///> against <sc://x/>]
    expected: FAIL

  [Parsing: </i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: </i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <> against <non-spec:/..//p>]
    expected: FAIL

  [Parsing: <?i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: <?i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <?x> against <sc://ñ>]
    expected: FAIL

  [Parsing: <\\\\\\.\\Y:> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <\\\\\\.\\y:> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <\\\\x\\hello> against <http://example.org/foo/bar>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <a/..//path> against <non-spec:/p>]
    expected: FAIL

  [Parsing: <a:\t foo.com> against <http://example.org/foo/bar>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <abc:/rooted> against <abc://host/path>]
    expected: FAIL

  [Parsing: <abc:rootless> against <abc://host/path>]
    expected: FAIL

  [Parsing: <abc:rootless> against <abc:/path>]
    expected: FAIL

  [Parsing: <about:/../> without base]
    expected: FAIL

  [Parsing: <asdf://%43%7C/> without base]
    expected: FAIL

  [Parsing: <asdf://%43|/> without base]
    expected: FAIL

  [Parsing: <c:/foo> against <http://example.org/foo/bar>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <data:/../> without base]
    expected: FAIL

  [Parsing: <data:///test> without base]
    expected: FAIL

  [Parsing: <data://:443> without base]
    expected: FAIL

  [Parsing: <data://[:1\]> without base]
    expected: FAIL

  [Parsing: <data://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <data://test/a/../b> without base]
    expected: FAIL

  [Parsing: <data://test:test> without base]
    expected: FAIL

  [Parsing: <dns://fw.example.org:9999/foo.bar.org?type=TXT> without base]
    expected: FAIL

  [Parsing: <foo:// !"$%&'()*+,-.;<=>@[\\\]^_`{|}~@host/> without base]
    expected: FAIL

  [Parsing: <foo://!"$%&'()*+,-.;=_`{}~/> without base]
    expected: FAIL

  [Parsing: <foo://///////> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <foo://///////bar.com/> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <foo:////://///> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <foo://> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <foo://ho\tst/> without base]
    expected: FAIL

  [Parsing: <foo://ho\nst/> without base]
    expected: FAIL

  [Parsing: <foo://ho\rst/> without base]
    expected: FAIL

  [Parsing: <foo://host/ !"$%&'()*+,-./:;<=>@[\\\]^_`{|}~> without base]
    expected: FAIL

  [Parsing: <foo://host/dir/# !"#$%&'()*+,-./:;<=>?@[\\\]^_`{|}~> without base]
    expected: FAIL

  [Parsing: <foo://host/dir/? !"$%&'()*+,-./:;<=>?@[\\\]^_`{|}~> without base]
    expected: FAIL

  [Parsing: <foo://joe: !"$%&'()*+,-.:;<=>@[\\\]^_`{|}~@host/> without base]
    expected: FAIL

  [Parsing: <git+https://github.com/foo/bar> without base]
    expected: FAIL

  [Parsing: <git://github.com/foo/bar.git> without base]
    expected: FAIL

  [Parsing: <gopher://foo:443/> without base]
    expected: FAIL

  [Parsing: <gopher://foo:70/> without base]
    expected: FAIL

  [Parsing: <h://.> without base]
    expected: FAIL

  [Parsing: <http://!"$&'()*+,-.;=_`{}~/> without base]
    expected: FAIL

  [Parsing: <http://%5B::1\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://%ef%bc%85%ef%bc%94%ef%bc%91.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://10.0.0.XN--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://10.0.0.xN--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://10.0.0.xn--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://192.168.0.1 hello> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://GOO 　goo.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://Goo%20 goo%7C|.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::%31\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::1.2.3.\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::1.2.\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::1.\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::127.0.0.1.\]> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <http://a b/> without base]
    expected: FAIL

  [Parsing: <http://a.b.c.XN--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://a.b.c.Xn--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://a.b.c.xn--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://a<b> without base]
    expected: FAIL

  [Parsing: <http://a>b> without base]
    expected: FAIL

  [Parsing: <http://a|b/> without base]
    expected: FAIL

  [Parsing: <http://example example.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://example.com/U+d800𐟾U+dfff﷐﷏﷯ﷰ￾￿?U+d800𐟾U+dfff﷐﷏﷯ﷰ￾￿> without base]
    expected: FAIL

  [Parsing: <http://example.com/foo%00%51> without base]
    expected: FAIL

  [Parsing: <http://example.com/foo%41%7a> without base]
    expected: FAIL

  [Parsing: <http://example.com/foo/%2e%2> without base]
    expected: FAIL

  [Parsing: <http://example.com/foo/%2e./%2e%2e/.%2e/%2e.bar> without base]
    expected: FAIL

  [Parsing: <http://ho%20st/> without base]
    expected: FAIL

  [Parsing: <http://ho%23st/> without base]
    expected: FAIL

  [Parsing: <http://ho%3Cst/> without base]
    expected: FAIL

  [Parsing: <http://ho%3Est/> without base]
    expected: FAIL

  [Parsing: <http://ho%40st/> without base]
    expected: FAIL

  [Parsing: <http://ho%7Cst/> without base]
    expected: FAIL

  [Parsing: <http://www/foo%2Ehtml> without base]
    expected: FAIL

  [Parsing: <http://％４１.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <httpa://foo:80/> without base]
    expected: FAIL

  [Parsing: <https://%43%7C/> without base]
    expected: FAIL

  [Parsing: <https://x x:12> without base]
    expected: FAIL

  [Parsing: <https://x/\x00y> without base]
    expected: FAIL

  [Parsing: <https://x/?#￿y> without base]
    expected: FAIL

  [Parsing: <https://x/?￿y> without base]
    expected: FAIL

  [Parsing: <https://x/￿y> without base]
    expected: FAIL

  [Parsing: <https://xn--/> without base]
    expected: FAIL

  [Parsing: <i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: <i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <intent:///test> without base]
    expected: FAIL

  [Parsing: <intent://:443> without base]
    expected: FAIL

  [Parsing: <intent://[:1\]> without base]
    expected: FAIL

  [Parsing: <intent://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <intent://test/a/../b> without base]
    expected: FAIL

  [Parsing: <intent://test:test> without base]
    expected: FAIL

  [Parsing: <irc://myserver.com:6999/channel?passwd> without base]
    expected: FAIL

  [Parsing: <ldap://localhost:389/ou=People,o=JNDITutorial> without base]
    expected: FAIL

  [Parsing: <non-spec:/..//> without base]
    expected: FAIL

  [Parsing: <non-spec:/..//path> without base]
    expected: FAIL

  [Parsing: <non-spec:/.//> without base]
    expected: FAIL

  [Parsing: <non-spec:/.//path> without base]
    expected: FAIL

  [Parsing: <non-spec://example.org/test?a#b\x00c> without base]
    expected: FAIL

  [Parsing: <non-spec:/a/..//> without base]
    expected: FAIL

  [Parsing: <non-spec:/a/..//path> without base]
    expected: FAIL

  [Parsing: <non-special://%E2%80%A0/> without base]
    expected: FAIL

  [Parsing: <non-special://:@test/x> without base]
    expected: FAIL

  [Parsing: <non-special://H%4fSt/path> without base]
    expected: FAIL

  [Parsing: <non-special://[1:2:0:0:0:0:0:3\]/> without base]
    expected: FAIL

  [Parsing: <non-special://[1:2:0:0:5:0:0:0\]/> without base]
    expected: FAIL

  [Parsing: <non-special://[1:2::3\]:80/> without base]
    expected: FAIL

  [Parsing: <non-special://[:80/> without base]
    expected: FAIL

  [Parsing: <non-special://f:999999/c> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <non-special://test:@test/x> without base]
    expected: FAIL

  [Parsing: <non-special:x/?#￿y> without base]
    expected: FAIL

  [Parsing: <non-special:x/?￿y> without base]
    expected: FAIL

  [Parsing: <non-special:x/￿y> without base]
    expected: FAIL

  [Parsing: <non-special:￿y> without base]
    expected: FAIL

  [Parsing: <notspecial://host/?'> without base]
    expected: FAIL

  [Parsing: <path> against <non-spec:/..//p>]
    expected: FAIL

  [Parsing: <redis://foo:bar@somehost:6379/0?baz=bam&qux=baz> without base]
    expected: FAIL

  [Parsing: <rsync://foo@host:911/sup> without base]
    expected: FAIL

  [Parsing: <sc://\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f!"$%&'()*+,-.;=_`{}~/> without base]
    expected: FAIL

  [Parsing: <sc://#> without base]
    expected: FAIL

  [Parsing: <sc://%/> without base]
    expected: FAIL

  [Parsing: <sc://:/> without base]
    expected: FAIL

  [Parsing: <sc://:12/> without base]
    expected: FAIL

  [Parsing: <sc://?> without base]
    expected: FAIL

  [Parsing: <sc://@/> without base]
    expected: FAIL

  [Parsing: <sc://a\x00b/> without base]
    expected: FAIL

  [Parsing: <sc://a b/> without base]
    expected: FAIL

  [Parsing: <sc://a<b> without base]
    expected: FAIL

  [Parsing: <sc://a>b> without base]
    expected: FAIL

  [Parsing: <sc://a[b/> without base]
    expected: FAIL

  [Parsing: <sc://a\\b/> without base]
    expected: FAIL

  [Parsing: <sc://a\]b/> without base]
    expected: FAIL

  [Parsing: <sc://a^b> without base]
    expected: FAIL

  [Parsing: <sc://a|b/> without base]
    expected: FAIL

  [Parsing: <sc://faß.ExAmPlE/> without base]
    expected: FAIL

  [Parsing: <sc://te@s:t@/> without base]
    expected: FAIL

  [Parsing: <sc://ñ#x> without base]
    expected: FAIL

  [Parsing: <sc://ñ.test/> without base]
    expected: FAIL

  [Parsing: <sc://ñ> without base]
    expected: FAIL

  [Parsing: <sc://ñ?x> without base]
    expected: FAIL

  [Parsing: <ssh://example.com/foo/bar.git> against <http://example.org/>]
    expected: FAIL

  [Parsing: <stun:///test> without base]
    expected: FAIL

  [Parsing: <stun://:443> without base]
    expected: FAIL

  [Parsing: <stun://[:1\]> without base]
    expected: FAIL

  [Parsing: <stun://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <stun://test/a/../b> without base]
    expected: FAIL

  [Parsing: <stun://test:test> without base]
    expected: FAIL

  [Parsing: <telnet://user:pass@foobar.com:23/> without base]
    expected: FAIL

  [Parsing: <test-a-colon-b.html> against <a:b>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <test-a-colon-slash-b.html> against <a:/b>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <test-a-colon-slash-slash-b.html> against <a://b>]
    expected: FAIL

  [Parsing: <test-a-colon-slash-slash.html> against <a://>]
    expected: FAIL

  [Parsing: <test-a-colon-slash.html> against <a:/>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <test-a-colon.html> against <a:>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <tftp://foobar.com/someconfig;mode=netascii> without base]
    expected: FAIL

  [Parsing: <turn:///test> without base]
    expected: FAIL

  [Parsing: <turn://:443> without base]
    expected: FAIL

  [Parsing: <turn://[:1\]> without base]
    expected: FAIL

  [Parsing: <turn://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <turn://test/a/../b> without base]
    expected: FAIL

  [Parsing: <turn://test:test> without base]
    expected: FAIL

  [Parsing: <urn:///test> without base]
    expected: FAIL

  [Parsing: <urn://:443> without base]
    expected: FAIL

  [Parsing: <urn://[:1\]> without base]
    expected: FAIL

  [Parsing: <urn://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <urn://test/a/../b> without base]
    expected: FAIL

  [Parsing: <urn://test:test> without base]
    expected: FAIL

  [Parsing: <ut2004://10.10.10.10:7777/Index.ut2> without base]
    expected: FAIL

  [Parsing: <w://x:0> without base]
    expected: FAIL

  [Parsing: <west://x:0> without base]
    expected: FAIL

  [Parsing: <wow:￿> without base]
    expected: FAIL

  [Parsing: <wss:// !"$%&'()*+,-.;<=>@[\]^_`{|}~@host/> without base]
    expected: FAIL

  [Parsing: <wss://!"$&'()*+,-.;=_`{}~/> without base]
    expected: FAIL

  [Parsing: <wss://host/ !"$%&'()*+,-./:;<=>@[\\\]^_`{|}~> without base]
    expected: FAIL

  [Parsing: <wss://joe: !"$%&'()*+,-.:;<=>@[\]^_`{|}~@host/> without base]
    expected: FAIL

  [Parsing: <x> against <sc://ñ>]
    expected: FAIL


[url-constructor.any.html?include=file]
  [Parsing: <  File:c|////foo\\bar.html> against <file:///tmp/mock/path>]
    expected: FAIL

  [Parsing: <..> against <file:///C:/>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: </////mouse> against <file:///elephant>]
    expected: FAIL

  [Parsing: <////one/two> against <file:///>]
    expected: FAIL

  [Parsing: <//C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <//C|/foo/bar> against <file:///tmp/mock/path>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <//d:/..> against <file:///C:/a/b>]
    expected: FAIL

  [Parsing: <//d:> against <file:///C:/a/b>]
    expected: FAIL

  [Parsing: <//localhost//pig> against <file://lion/>]
    expected: FAIL

  [Parsing: </> against <file:///C:/a/b>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: </> against <file://h/C:/a/b>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: </C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: </C|\\foo\\bar> against <file:///tmp/mock/path>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: </c:/foo/bar> against <file:///c:/baz/qux>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: </c:/foo/bar> against <file://host/path>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: </c|/foo/bar> against <file:///c:/baz/qux>]
    expected: FAIL

  [Parsing: <C|\n/> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|#> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|/> against <file://host/>]
    expected: FAIL

  [Parsing: <C|/> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|/foo/bar> against <file:///tmp/mock/path>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <C|> against <file://host/D:/dir1/dir2/file>]
    expected: FAIL

  [Parsing: <C|> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|?> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|\\> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|a> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <\\/localhost//pig> against <file://lion/>]
    expected: FAIL

  [Parsing: <file:#frag> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:...> against <http://www.example.com/test>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:..> against <http://www.example.com/test>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:.//p> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:/.//p> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file://%43%7C/> without base]
    expected: FAIL

  [Parsing: <file://%43%7C> without base]
    expected: FAIL

  [Parsing: <file://%43|> without base]
    expected: FAIL

  [Parsing: <file:///./y:> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:////foo> without base]
    expected: FAIL

  [Parsing: <file:////one/two> against <file:///>]
    expected: FAIL

  [Parsing: <file:///y:/> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:///y:> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file://C%7C> without base]
    expected: FAIL

  [Parsing: <file://C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <file://C|/> without base]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <file://\\/localhost//cat> without base]
    expected: FAIL

  [Parsing: <file://loC𝐀𝐋𝐇𝐨𝐬𝐭/usr/bin> without base]
    expected: FAIL

  [Parsing: <file://localhost////foo> without base]
    expected: FAIL

  [Parsing: <file://localhost//a//../..//> without base]
    expected: FAIL

  [Parsing: <file://localhost//a//../..//foo> without base]
    expected: FAIL

  [Parsing: <file://localhost/> against <file:///tmp/mock/path>]
    expected: FAIL

  [Parsing: <file://localhost/test> against <file:///tmp/mock/path>]
    expected: FAIL

  [Parsing: <file://localhost> against <file:///tmp/mock/path>]
    expected: FAIL

  [Parsing: <file://xn--/p> without base]
    expected: FAIL

  [Parsing: <file:/C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:/C|/> without base]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <file:/example.com/> against <http://example.org/foo/bar>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:/example.com/> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:?q=v> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:\\\\//> without base]
    expected: FAIL

  [Parsing: <file:\\\\\\\\#guppy> without base]
    expected: FAIL

  [Parsing: <file:\\\\\\\\> without base]
    expected: FAIL

  [Parsing: <file:\\\\\\\\?fox> without base]
    expected: FAIL

  [Parsing: <file:\\\\localhost//> without base]
    expected: FAIL

  [Parsing: <file:\\c:\\foo\\bar> against <file:///c:/baz/qux>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:a> against <http://www.example.com/test>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:c:\\foo\\bar.html> against <file:///tmp/mock/path>]
    expected: FAIL


[url-constructor.any.html?include=javascript]
  [Parsing: <javascript:/../> without base]
    expected: FAIL

  [Parsing: <javascript:///test> without base]
    expected: FAIL

  [Parsing: <javascript://:443> without base]
    expected: FAIL

  [Parsing: <javascript://[:1\]> without base]
    expected: FAIL

  [Parsing: <javascript://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <javascript://test/a/../b> without base]
    expected: FAIL

  [Parsing: <javascript://test:test> without base]
    expected: FAIL


[url-constructor.any.html?include=mailto]
  [Parsing: <mailto:/../> without base]
    expected: FAIL

  [Parsing: <mailto:///test> without base]
    expected: FAIL

  [Parsing: <mailto://:443> without base]
    expected: FAIL

  [Parsing: <mailto://[:1\]> without base]
    expected: FAIL

  [Parsing: <mailto://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <mailto://test/a/../b> without base]
    expected: FAIL

  [Parsing: <mailto://test:test> without base]
    expected: FAIL


[url-constructor.any.worker.html?exclude=(file|javascript|mailto)]
  [Parsing: <#i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: <#i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <#x> against <sc://ñ>]
    expected: FAIL

  [Parsing: <..//path> against <non-spec:/p>]
    expected: FAIL

  [Parsing: <../i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: <../i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <../path> against <non-spec:/.//p>]
    expected: FAIL

  [Parsing: </..//path> against <non-spec:/p>]
    expected: FAIL

  [Parsing: </.//path> against <non-spec:/p>]
    expected: FAIL

  [Parsing: <////> against <sc://x/>]
    expected: FAIL

  [Parsing: <////x/> against <sc://x/>]
    expected: FAIL

  [Parsing: <///> against <sc://x/>]
    expected: FAIL

  [Parsing: </i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: </i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <> against <non-spec:/..//p>]
    expected: FAIL

  [Parsing: <?i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: <?i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <?x> against <sc://ñ>]
    expected: FAIL

  [Parsing: <\\\\\\.\\Y:> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <\\\\\\.\\y:> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <\\\\x\\hello> against <http://example.org/foo/bar>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <a/..//path> against <non-spec:/p>]
    expected: FAIL

  [Parsing: <a:\t foo.com> against <http://example.org/foo/bar>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <abc:/rooted> against <abc://host/path>]
    expected: FAIL

  [Parsing: <abc:rootless> against <abc://host/path>]
    expected: FAIL

  [Parsing: <abc:rootless> against <abc:/path>]
    expected: FAIL

  [Parsing: <about:/../> without base]
    expected: FAIL

  [Parsing: <asdf://%43%7C/> without base]
    expected: FAIL

  [Parsing: <asdf://%43|/> without base]
    expected: FAIL

  [Parsing: <c:/foo> against <http://example.org/foo/bar>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <data:/../> without base]
    expected: FAIL

  [Parsing: <data:///test> without base]
    expected: FAIL

  [Parsing: <data://:443> without base]
    expected: FAIL

  [Parsing: <data://[:1\]> without base]
    expected: FAIL

  [Parsing: <data://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <data://test/a/../b> without base]
    expected: FAIL

  [Parsing: <data://test:test> without base]
    expected: FAIL

  [Parsing: <dns://fw.example.org:9999/foo.bar.org?type=TXT> without base]
    expected: FAIL

  [Parsing: <foo:// !"$%&'()*+,-.;<=>@[\\\]^_`{|}~@host/> without base]
    expected: FAIL

  [Parsing: <foo://!"$%&'()*+,-.;=_`{}~/> without base]
    expected: FAIL

  [Parsing: <foo://///////> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <foo://///////bar.com/> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <foo:////://///> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <foo://> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <foo://ho\tst/> without base]
    expected: FAIL

  [Parsing: <foo://ho\nst/> without base]
    expected: FAIL

  [Parsing: <foo://ho\rst/> without base]
    expected: FAIL

  [Parsing: <foo://host/ !"$%&'()*+,-./:;<=>@[\\\]^_`{|}~> without base]
    expected: FAIL

  [Parsing: <foo://host/dir/# !"#$%&'()*+,-./:;<=>?@[\\\]^_`{|}~> without base]
    expected: FAIL

  [Parsing: <foo://host/dir/? !"$%&'()*+,-./:;<=>?@[\\\]^_`{|}~> without base]
    expected: FAIL

  [Parsing: <foo://joe: !"$%&'()*+,-.:;<=>@[\\\]^_`{|}~@host/> without base]
    expected: FAIL

  [Parsing: <git+https://github.com/foo/bar> without base]
    expected: FAIL

  [Parsing: <git://github.com/foo/bar.git> without base]
    expected: FAIL

  [Parsing: <gopher://foo:443/> without base]
    expected: FAIL

  [Parsing: <gopher://foo:70/> without base]
    expected: FAIL

  [Parsing: <h://.> without base]
    expected: FAIL

  [Parsing: <http://!"$&'()*+,-.;=_`{}~/> without base]
    expected: FAIL

  [Parsing: <http://%5B::1\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://%ef%bc%85%ef%bc%94%ef%bc%91.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://10.0.0.XN--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://10.0.0.xN--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://10.0.0.xn--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://192.168.0.1 hello> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://GOO 　goo.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://Goo%20 goo%7C|.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::%31\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::1.2.3.\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::1.2.\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::1.\]> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://[::127.0.0.1.\]> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <http://a b/> without base]
    expected: FAIL

  [Parsing: <http://a.b.c.XN--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://a.b.c.Xn--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://a.b.c.xn--pokxncvks> without base]
    expected: FAIL

  [Parsing: <http://a<b> without base]
    expected: FAIL

  [Parsing: <http://a>b> without base]
    expected: FAIL

  [Parsing: <http://a|b/> without base]
    expected: FAIL

  [Parsing: <http://example example.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <http://example.com/U+d800𐟾U+dfff﷐﷏﷯ﷰ￾￿?U+d800𐟾U+dfff﷐﷏﷯ﷰ￾￿> without base]
    expected: FAIL

  [Parsing: <http://example.com/foo%00%51> without base]
    expected: FAIL

  [Parsing: <http://example.com/foo%41%7a> without base]
    expected: FAIL

  [Parsing: <http://example.com/foo/%2e%2> without base]
    expected: FAIL

  [Parsing: <http://example.com/foo/%2e./%2e%2e/.%2e/%2e.bar> without base]
    expected: FAIL

  [Parsing: <http://ho%20st/> without base]
    expected: FAIL

  [Parsing: <http://ho%23st/> without base]
    expected: FAIL

  [Parsing: <http://ho%3Cst/> without base]
    expected: FAIL

  [Parsing: <http://ho%3Est/> without base]
    expected: FAIL

  [Parsing: <http://ho%40st/> without base]
    expected: FAIL

  [Parsing: <http://ho%7Cst/> without base]
    expected: FAIL

  [Parsing: <http://www/foo%2Ehtml> without base]
    expected: FAIL

  [Parsing: <http://％４１.com> against <http://other.com/>]
    expected: FAIL

  [Parsing: <httpa://foo:80/> without base]
    expected: FAIL

  [Parsing: <https://%43%7C/> without base]
    expected: FAIL

  [Parsing: <https://x x:12> without base]
    expected: FAIL

  [Parsing: <https://x/\x00y> without base]
    expected: FAIL

  [Parsing: <https://x/?#￿y> without base]
    expected: FAIL

  [Parsing: <https://x/?￿y> without base]
    expected: FAIL

  [Parsing: <https://x/￿y> without base]
    expected: FAIL

  [Parsing: <https://xn--/> without base]
    expected: FAIL

  [Parsing: <i> against <sc:///pa/pa>]
    expected: FAIL

  [Parsing: <i> against <sc://ho/pa>]
    expected: FAIL

  [Parsing: <intent:///test> without base]
    expected: FAIL

  [Parsing: <intent://:443> without base]
    expected: FAIL

  [Parsing: <intent://[:1\]> without base]
    expected: FAIL

  [Parsing: <intent://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <intent://test/a/../b> without base]
    expected: FAIL

  [Parsing: <intent://test:test> without base]
    expected: FAIL

  [Parsing: <irc://myserver.com:6999/channel?passwd> without base]
    expected: FAIL

  [Parsing: <ldap://localhost:389/ou=People,o=JNDITutorial> without base]
    expected: FAIL

  [Parsing: <non-spec:/..//> without base]
    expected: FAIL

  [Parsing: <non-spec:/..//path> without base]
    expected: FAIL

  [Parsing: <non-spec:/.//> without base]
    expected: FAIL

  [Parsing: <non-spec:/.//path> without base]
    expected: FAIL

  [Parsing: <non-spec://example.org/test?a#b\x00c> without base]
    expected: FAIL

  [Parsing: <non-spec:/a/..//> without base]
    expected: FAIL

  [Parsing: <non-spec:/a/..//path> without base]
    expected: FAIL

  [Parsing: <non-special://%E2%80%A0/> without base]
    expected: FAIL

  [Parsing: <non-special://:@test/x> without base]
    expected: FAIL

  [Parsing: <non-special://H%4fSt/path> without base]
    expected: FAIL

  [Parsing: <non-special://[1:2:0:0:0:0:0:3\]/> without base]
    expected: FAIL

  [Parsing: <non-special://[1:2:0:0:5:0:0:0\]/> without base]
    expected: FAIL

  [Parsing: <non-special://[1:2::3\]:80/> without base]
    expected: FAIL

  [Parsing: <non-special://[:80/> without base]
    expected: FAIL

  [Parsing: <non-special://f:999999/c> against <http://example.org/foo/bar>]
    expected: FAIL

  [Parsing: <non-special://test:@test/x> without base]
    expected: FAIL

  [Parsing: <non-special:x/?#￿y> without base]
    expected: FAIL

  [Parsing: <non-special:x/?￿y> without base]
    expected: FAIL

  [Parsing: <non-special:x/￿y> without base]
    expected: FAIL

  [Parsing: <non-special:￿y> without base]
    expected: FAIL

  [Parsing: <notspecial://host/?'> without base]
    expected: FAIL

  [Parsing: <path> against <non-spec:/..//p>]
    expected: FAIL

  [Parsing: <redis://foo:bar@somehost:6379/0?baz=bam&qux=baz> without base]
    expected: FAIL

  [Parsing: <rsync://foo@host:911/sup> without base]
    expected: FAIL

  [Parsing: <sc://\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f!"$%&'()*+,-.;=_`{}~/> without base]
    expected: FAIL

  [Parsing: <sc://#> without base]
    expected: FAIL

  [Parsing: <sc://%/> without base]
    expected: FAIL

  [Parsing: <sc://:/> without base]
    expected: FAIL

  [Parsing: <sc://:12/> without base]
    expected: FAIL

  [Parsing: <sc://?> without base]
    expected: FAIL

  [Parsing: <sc://@/> without base]
    expected: FAIL

  [Parsing: <sc://a\x00b/> without base]
    expected: FAIL

  [Parsing: <sc://a b/> without base]
    expected: FAIL

  [Parsing: <sc://a<b> without base]
    expected: FAIL

  [Parsing: <sc://a>b> without base]
    expected: FAIL

  [Parsing: <sc://a[b/> without base]
    expected: FAIL

  [Parsing: <sc://a\\b/> without base]
    expected: FAIL

  [Parsing: <sc://a\]b/> without base]
    expected: FAIL

  [Parsing: <sc://a^b> without base]
    expected: FAIL

  [Parsing: <sc://a|b/> without base]
    expected: FAIL

  [Parsing: <sc://faß.ExAmPlE/> without base]
    expected: FAIL

  [Parsing: <sc://te@s:t@/> without base]
    expected: FAIL

  [Parsing: <sc://ñ#x> without base]
    expected: FAIL

  [Parsing: <sc://ñ.test/> without base]
    expected: FAIL

  [Parsing: <sc://ñ> without base]
    expected: FAIL

  [Parsing: <sc://ñ?x> without base]
    expected: FAIL

  [Parsing: <ssh://example.com/foo/bar.git> against <http://example.org/>]
    expected: FAIL

  [Parsing: <stun:///test> without base]
    expected: FAIL

  [Parsing: <stun://:443> without base]
    expected: FAIL

  [Parsing: <stun://[:1\]> without base]
    expected: FAIL

  [Parsing: <stun://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <stun://test/a/../b> without base]
    expected: FAIL

  [Parsing: <stun://test:test> without base]
    expected: FAIL

  [Parsing: <telnet://user:pass@foobar.com:23/> without base]
    expected: FAIL

  [Parsing: <test-a-colon-b.html> against <a:b>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <test-a-colon-slash-b.html> against <a:/b>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <test-a-colon-slash-slash-b.html> against <a://b>]
    expected: FAIL

  [Parsing: <test-a-colon-slash-slash.html> against <a://>]
    expected: FAIL

  [Parsing: <test-a-colon-slash.html> against <a:/>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <test-a-colon.html> against <a:>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <tftp://foobar.com/someconfig;mode=netascii> without base]
    expected: FAIL

  [Parsing: <turn:///test> without base]
    expected: FAIL

  [Parsing: <turn://:443> without base]
    expected: FAIL

  [Parsing: <turn://[:1\]> without base]
    expected: FAIL

  [Parsing: <turn://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <turn://test/a/../b> without base]
    expected: FAIL

  [Parsing: <turn://test:test> without base]
    expected: FAIL

  [Parsing: <urn:///test> without base]
    expected: FAIL

  [Parsing: <urn://:443> without base]
    expected: FAIL

  [Parsing: <urn://[:1\]> without base]
    expected: FAIL

  [Parsing: <urn://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <urn://test/a/../b> without base]
    expected: FAIL

  [Parsing: <urn://test:test> without base]
    expected: FAIL

  [Parsing: <ut2004://10.10.10.10:7777/Index.ut2> without base]
    expected: FAIL

  [Parsing: <w://x:0> without base]
    expected: FAIL

  [Parsing: <west://x:0> without base]
    expected: FAIL

  [Parsing: <wow:￿> without base]
    expected: FAIL

  [Parsing: <wss:// !"$%&'()*+,-.;<=>@[\]^_`{|}~@host/> without base]
    expected: FAIL

  [Parsing: <wss://!"$&'()*+,-.;=_`{}~/> without base]
    expected: FAIL

  [Parsing: <wss://host/ !"$%&'()*+,-./:;<=>@[\\\]^_`{|}~> without base]
    expected: FAIL

  [Parsing: <wss://joe: !"$%&'()*+,-.:;<=>@[\]^_`{|}~@host/> without base]
    expected: FAIL

  [Parsing: <x> against <sc://ñ>]
    expected: FAIL


[url-constructor.any.worker.html?include=file]
  [Parsing: <  File:c|////foo\\bar.html> against <file:///tmp/mock/path>]
    expected: FAIL

  [Parsing: <..> against <file:///C:/>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: </////mouse> against <file:///elephant>]
    expected: FAIL

  [Parsing: <////one/two> against <file:///>]
    expected: FAIL

  [Parsing: <//C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <//C|/foo/bar> against <file:///tmp/mock/path>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <//d:/..> against <file:///C:/a/b>]
    expected: FAIL

  [Parsing: <//d:> against <file:///C:/a/b>]
    expected: FAIL

  [Parsing: <//localhost//pig> against <file://lion/>]
    expected: FAIL

  [Parsing: </> against <file:///C:/a/b>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: </> against <file://h/C:/a/b>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: </C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: </C|\\foo\\bar> against <file:///tmp/mock/path>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: </c:/foo/bar> against <file:///c:/baz/qux>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: </c:/foo/bar> against <file://host/path>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: </c|/foo/bar> against <file:///c:/baz/qux>]
    expected: FAIL

  [Parsing: <C|\n/> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|#> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|/> against <file://host/>]
    expected: FAIL

  [Parsing: <C|/> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|/foo/bar> against <file:///tmp/mock/path>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <C|> against <file://host/D:/dir1/dir2/file>]
    expected: FAIL

  [Parsing: <C|> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|?> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|\\> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <C|a> against <file://host/dir/file>]
    expected: FAIL

  [Parsing: <\\/localhost//pig> against <file://lion/>]
    expected: FAIL

  [Parsing: <file:#frag> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:...> against <http://www.example.com/test>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:..> against <http://www.example.com/test>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:.//p> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:/.//p> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file://%43%7C/> without base]
    expected: FAIL

  [Parsing: <file://%43%7C> without base]
    expected: FAIL

  [Parsing: <file://%43|> without base]
    expected: FAIL

  [Parsing: <file:///./y:> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:////foo> without base]
    expected: FAIL

  [Parsing: <file:////one/two> against <file:///>]
    expected: FAIL

  [Parsing: <file:///y:/> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:///y:> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file://C%7C> without base]
    expected: FAIL

  [Parsing: <file://C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <file://C|/> without base]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <file://\\/localhost//cat> without base]
    expected: FAIL

  [Parsing: <file://loC𝐀𝐋𝐇𝐨𝐬𝐭/usr/bin> without base]
    expected: FAIL

  [Parsing: <file://localhost////foo> without base]
    expected: FAIL

  [Parsing: <file://localhost//a//../..//> without base]
    expected: FAIL

  [Parsing: <file://localhost//a//../..//foo> without base]
    expected: FAIL

  [Parsing: <file://localhost/> against <file:///tmp/mock/path>]
    expected: FAIL

  [Parsing: <file://localhost/test> against <file:///tmp/mock/path>]
    expected: FAIL

  [Parsing: <file://localhost> against <file:///tmp/mock/path>]
    expected: FAIL

  [Parsing: <file://xn--/p> without base]
    expected: FAIL

  [Parsing: <file:/C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:/C|/> without base]
    expected:
      if (product == "content_shell") and (os == "win"): PASS
      FAIL

  [Parsing: <file:/example.com/> against <http://example.org/foo/bar>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:/example.com/> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:?q=v> without base]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:C:/> against <file://host/>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:\\\\//> without base]
    expected: FAIL

  [Parsing: <file:\\\\\\\\#guppy> without base]
    expected: FAIL

  [Parsing: <file:\\\\\\\\> without base]
    expected: FAIL

  [Parsing: <file:\\\\\\\\?fox> without base]
    expected: FAIL

  [Parsing: <file:\\\\localhost//> without base]
    expected: FAIL

  [Parsing: <file:\\c:\\foo\\bar> against <file:///c:/baz/qux>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:a> against <http://www.example.com/test>]
    expected:
      if (product == "content_shell") and (os == "win"): FAIL

  [Parsing: <file:c:\\foo\\bar.html> against <file:///tmp/mock/path>]
    expected: FAIL


[url-constructor.any.worker.html?include=javascript]
  [Parsing: <javascript:/../> without base]
    expected: FAIL

  [Parsing: <javascript:///test> without base]
    expected: FAIL

  [Parsing: <javascript://:443> without base]
    expected: FAIL

  [Parsing: <javascript://[:1\]> without base]
    expected: FAIL

  [Parsing: <javascript://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <javascript://test/a/../b> without base]
    expected: FAIL

  [Parsing: <javascript://test:test> without base]
    expected: FAIL


[url-constructor.any.worker.html?include=mailto]
  [Parsing: <mailto:/../> without base]
    expected: FAIL

  [Parsing: <mailto:///test> without base]
    expected: FAIL

  [Parsing: <mailto://:443> without base]
    expected: FAIL

  [Parsing: <mailto://[:1\]> without base]
    expected: FAIL

  [Parsing: <mailto://example.com:8080/pathname?search#hash> without base]
    expected: FAIL

  [Parsing: <mailto://test/a/../b> without base]
    expected: FAIL

  [Parsing: <mailto://test:test> without base]
    expected: FAIL
