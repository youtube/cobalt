// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module cert_verifier.mojom;

import "mojo/public/mojom/base/big_buffer.mojom";
import "mojo/public/mojom/base/file_path.mojom";
import "mojo/public/mojom/base/read_only_buffer.mojom";
import "services/network/public/mojom/cert_verifier_service.mojom";

[EnableIf=is_trial_comparison_cert_verifier_supported]
import "services/cert_verifier/public/mojom/trial_comparison_cert_verifier.mojom";

// Parameters to specify how the net::CertVerifier and net::CertVerifyProc
// objects should be instantiated.
struct CertVerifierCreationParams {
  // Specifies the path to the directory where NSS will store its database.
  // Example: /home/chronos/u-<hash>
  [EnableIf=is_chromeos_ash]
  mojo_base.mojom.FilePath? nss_path;

  // Specifies the path to the software NSS database.
  // Example: /home/chronos/u-<hash>/.pki/nssdb
  [EnableIf=is_chromeos_lacros]
  mojo_base.mojom.FilePath? nss_full_path;

  // This is used in combination with nss_path, to ensure that the NSS database
  // isn't opened multiple times for NetworkContexts in the same profie.
  [EnableIf=is_chromeos_ash]
  string username_hash;

  // Parameters for the cert verifier comparison trial. This is a temporary
  // interface and embedders should not use it.
  // See https://crbug.com/649026
  [EnableIf=is_trial_comparison_cert_verifier_supported]
  TrialComparisonCertVerifierParams? trial_comparison_cert_verifier_params;
};

// Serialized copy of the Chrome Root store.
struct ChromeRootStore {
  // Serialized proto of type chrome_root_store::RootStore.
  mojo_base.mojom.BigBuffer serialized_proto_root_store;
};

// Information about a certificate in the Chrome Root Store
struct ChromeRootCertInfo {
  // Human-readable name for the certificate.
  string name;
  string sha256hash_hex;
};

// Information about the Chrome Root Store
struct ChromeRootStoreInfo {
  int64 version;
  array<ChromeRootCertInfo> root_cert_info;
};

// Parent interface for the CertVerifierProcess. Hands out new
// CertVerifierService's, which have their own underlying CertVerifier's
// underneath.
interface CertVerifierServiceFactory {
  // Gets a new CertVerifierService, which //net code can interface with using
  // cert_verifier::MojoCertVerifier.
  GetNewCertVerifier(pending_receiver<CertVerifierService> receiver,
                     pending_remote<CertVerifierServiceClient> client,
                     CertVerifierCreationParams? creation_params);

  // Updates the CRLSet used in the verification of certificates. CRLSets that
  // cannot be parsed using net::CRLSet::Parse will be ignored, as will older
  // CRLSets (where older is determined by the sequence number). All
  // CertVerifierServices created by the CertVerifierServiceFactory, including
  // those created after this call, will use the same CRLSet.
  // TODO(https://crbug.com/1431347): consider using ReadOnlySharedMemoryRegion
  // or ReadOnlyFile instead of BigBuffer for this and ChromeRootStore.
  UpdateCRLSet(mojo_base.mojom.BigBuffer crl_set) => ();

  // Updates the ChromeRootStore used by the CertVerifierServiceFactory with a
  // new version. The callback will be run once the update has been processed
  // (regardless if it was updated successfully or the update was ignored.)
  [EnableIf=is_chrome_root_store_supported]
  UpdateChromeRootStore(ChromeRootStore new_root_store) => ();

  // Sets whether verification should use the Chrome Root Store or not. All
  // CertVerifierServices created by the CertVerifierServiceFactory, including
  // those created after this call, will use the same setting.
  [EnableIf=is_chrome_root_store_optional]
  SetUseChromeRootStore(bool use_crs) => ();

  // Returns information about the current Chrome Root Store.
  [EnableIf=is_chrome_root_store_supported]
  GetChromeRootStoreInfo() => (ChromeRootStoreInfo root_store_info);
};
