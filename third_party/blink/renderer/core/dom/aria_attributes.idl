// Copyright 2018 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// ARIA reflection, note this doesn't include relationship properties,
// which is defined in AriaRelationshipAttributes.
// https://w3c.github.io/aria/#idl-interface
interface mixin AriaAttributes {
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_atomic] attribute DOMString? ariaAtomic;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_autocomplete] attribute DOMString? ariaAutoComplete;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_busy] attribute DOMString? ariaBusy;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_braillelabel] attribute DOMString? ariaBrailleLabel;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_brailleroledescription] attribute DOMString? ariaBrailleRoleDescription;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_checked] attribute DOMString? ariaChecked;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_colcount] attribute DOMString? ariaColCount;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_colindex] attribute DOMString? ariaColIndex;
    [RuntimeEnabled=AriaRowColIndexText, CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_colindextext] attribute DOMString? ariaColIndexText;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_colspan] attribute DOMString? ariaColSpan;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_current] attribute DOMString? ariaCurrent;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_description] attribute DOMString? ariaDescription;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_disabled] attribute DOMString? ariaDisabled;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_expanded] attribute DOMString? ariaExpanded;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_haspopup] attribute DOMString? ariaHasPopup;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_hidden] attribute DOMString? ariaHidden;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_invalid] attribute DOMString? ariaInvalid;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_keyshortcuts] attribute DOMString? ariaKeyShortcuts;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_label] attribute DOMString? ariaLabel;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_level] attribute DOMString? ariaLevel;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_live] attribute DOMString? ariaLive;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_modal] attribute DOMString? ariaModal;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_multiline] attribute DOMString? ariaMultiLine;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_multiselectable] attribute DOMString? ariaMultiSelectable;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_orientation] attribute DOMString? ariaOrientation;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_placeholder] attribute DOMString? ariaPlaceholder;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_posinset] attribute DOMString? ariaPosInSet;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_pressed] attribute DOMString? ariaPressed;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_readonly] attribute DOMString? ariaReadOnly;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_relevant] attribute DOMString? ariaRelevant;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_required] attribute DOMString? ariaRequired;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_roledescription] attribute DOMString? ariaRoleDescription;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_rowcount] attribute DOMString? ariaRowCount;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_rowindex] attribute DOMString? ariaRowIndex;
    [RuntimeEnabled=AriaRowColIndexText, CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_rowindextext] attribute DOMString? ariaRowIndexText;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_rowspan] attribute DOMString? ariaRowSpan;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_selected] attribute DOMString? ariaSelected;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_setsize] attribute DOMString? ariaSetSize;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_sort] attribute DOMString? ariaSort;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_valuemax] attribute DOMString? ariaValueMax;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_valuemin] attribute DOMString? ariaValueMin;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_valuenow] attribute DOMString? ariaValueNow;
    [CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_valuetext] attribute DOMString? ariaValueText;
    [RuntimeEnabled=AccessibilityAriaVirtualContent, CEReactions, MeasureAs="WebDXFeature::kAriaAttributeReflection", Reflect=aria_virtualcontent] attribute DOMString? ariaVirtualContent;
};

Element includes AriaAttributes;
ElementInternals includes AriaAttributes;
