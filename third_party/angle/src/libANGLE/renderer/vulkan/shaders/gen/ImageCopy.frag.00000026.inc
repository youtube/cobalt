// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000026.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000026[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xdb,0x4f,0x5d,0x55,
    0x10,0xc6,0xd7,0xda,0x07,0x38,0x07,0x28,0x97,0x4a,0x5b,0xda,0x52,0x85,0x7a,0xaa,
    0x95,0x50,0x0a,0xc4,0xd6,0x90,0xa8,0x0d,0xb6,0xb5,0x58,0x45,0xa9,0xca,0x23,0x89,
    0x31,0xf1,0xc5,0x07,0xfa,0xa2,0x2f,0x4d,0x8c,0x31,0xc6,0x6a,0xc2,0x5b,0xff,0x85,
    0x5e,0xac,0xc6,0x60,0xd5,0x58,0xb5,0xb5,0x97,0xc7,0xd6,0x4b,0xa3,0xa1,0x4a,0x34,
    0xa8,0x44,0x9e,0x54,0x62,0x6c,0x23,0x08,0x56,0x4a,0x9c,0xd9,0xeb,0x37,0x32,0x21,
    0x46,0x4f,0xb2,0x72,0xf6,0xfa,0xe6,0xf6,0x7d,0x33,0x73,0x36,0x14,0xb2,0x72,0x31,
    0x84,0x18,0x6a,0x42,0x29,0x1c,0x88,0x21,0xff,0xac,0x0e,0x59,0xd0,0xc7,0xda,0x50,
    0x95,0x7f,0xf7,0x0f,0x3c,0x39,0xb0,0xfd,0xb9,0xe7,0x9f,0xd9,0xbe,0x63,0x67,0xb7,
    0xda,0xeb,0x43,0x21,0xf7,0x53,0x5b,0x43,0x28,0x86,0x0a,0xf9,0xd6,0x33,0xf2,0xf4,
    0xb3,0x07,0x15,0x3f,0x21,0xe7,0xa2,0x9c,0x46,0xf1,0x53,0x5c,0x0a,0x84,0x87,0x42,
    0x65,0x68,0x4e,0xe9,0x43,0x99,0x6f,0xc3,0x22,0x58,0xc9,0x61,0x19,0x58,0xa3,0xc3,
    0x0a,0x60,0x6b,0x1c,0x56,0x01,0xb6,0xde,0x61,0x95,0x60,0x9b,0x1c,0x56,0x05,0xd6,
    0xe6,0xb0,0x22,0xd8,0x16,0x87,0x95,0xc0,0xee,0x72,0x58,0x35,0xd8,0x36,0x87,0xd5,
    0x80,0x75,0x3b,0xac,0x16,0x6c,0x87,0xc3,0x56,0x81,0xf5,0x3a,0xac,0x0e,0xec,0x3e,
    0x87,0xd5,0x83,0xf5,0x69,0xbf,0x45,0xa9,0xf5,0xa0,0x5f,0x14,0x9e,0x20,0x77,0x03,
    0xf7,0x53,0xf2,0x7d,0x3b,0x3d,0xb4,0xfb,0x66,0x77,0xd7,0xde,0xdf,0xc6,0xbd,0x49,
    0xb2,0x64,0xb9,0xbd,0x90,0xf7,0x4f,0x9f,0xd7,0x8a,0x4f,0x15,0xbd,0xd0,0xde,0x37,
    0xcb,0xbd,0x48,0x8f,0x32,0xee,0x75,0xdc,0x2b,0xf0,0x6f,0xc0,0x3f,0x60,0x6f,0x84,
    0x4f,0x45,0x5e,0x6b,0xf5,0x3f,0xfd,0xb4,0x3c,0x76,0x1a,0xfe,0xe7,0x98,0x4f,0x9b,
    0x64,0x5a,0x4f,0xaf,0x35,0xd7,0xbd,0xdc,0x37,0x80,0x75,0xc0,0x79,0x23,0x9c,0xd5,
    0xbf,0x05,0x5b,0xd1,0xd9,0x5b,0x99,0xbf,0xda,0xdb,0xb0,0x37,0xe4,0x3b,0x93,0xe5,
    0xfd,0xed,0x40,0xcb,0x16,0xb4,0x58,0x5c,0x27,0x5c,0xcc,0x7e,0x37,0x75,0xcc,0xde,
    0xcb,0x8c,0xec,0xbe,0x87,0xba,0xda,0x8b,0x01,0x62,0x0b,0xce,0x3e,0xc4,0x2e,0xd9,
    0x7d,0x78,0x45,0xbd,0x91,0x15,0xba,0x0e,0xb1,0x53,0x76,0x3f,0xcc,0x9e,0xa8,0x8e,
    0x57,0xf1,0xad,0x72,0xf6,0x51,0x66,0x65,0xf7,0x23,0xcc,0x62,0x9d,0xb0,0x38,0xca,
    0xac,0x94,0xdb,0x31,0xf9,0x3e,0x8a,0x4d,0x73,0x1d,0x47,0xd7,0x31,0x7a,0x7c,0x9c,
    0xdf,0xab,0xed,0xc1,0xeb,0xf8,0x67,0x79,0xef,0xab,0xc3,0x98,0xdb,0x0b,0xff,0xe1,
    0x55,0x91,0xe7,0x7c,0x9b,0xe7,0x31,0x72,0xea,0xfd,0xd4,0x0a,0xbd,0xa7,0xe9,0x8f,
    0xfa,0x5f,0xe0,0xb9,0x11,0xff,0x0b,0xbc,0x2f,0x14,0xbb,0x47,0xa6,0x97,0xc1,0x37,
    0x80,0x2d,0x08,0xa2,0x33,0xbd,0x1f,0x3d,0x27,0xe1,0x3c,0x28,0x13,0x50,0xbe,0x6f,
    0x80,0x9d,0x74,0xdc,0x0e,0xb2,0xd3,0x6f,0x62,0x7f,0x40,0x32,0xe8,0xbe,0x5c,0x62,
    0xa7,0x36,0x92,0x4f,0x7d,0x2e,0x83,0xbf,0x2c,0x3e,0x7a,0xff,0x84,0xb8,0xcb,0xc4,
    0x69,0x2f,0x3f,0x25,0xae,0x95,0x38,0xdd,0x91,0xcf,0xc0,0xdf,0x12,0x1f,0xdd,0xad,
    0xcf,0xc1,0x74,0xb7,0xe6,0x85,0xf9,0x38,0x7c,0x6e,0x88,0xbf,0xda,0xae,0xc8,0x19,
    0x47,0x8f,0x3e,0x3f,0x2e,0x71,0xda,0x9b,0x2f,0xa8,0xa9,0x9f,0x17,0xe9,0xd7,0x97,
    0xe0,0x4f,0xc8,0x4d,0x39,0xed,0x8c,0x09,0x33,0xbf,0x3f,0x25,0x87,0xe5,0xd2,0xef,
    0x39,0xf1,0x52,0xbf,0x07,0x63,0xf2,0xa9,0x24,0xe6,0x8a,0xd3,0x70,0x15,0x0d,0x9d,
    0x4e,0xc3,0x57,0xe0,0xa6,0xe1,0x6b,0x30,0xd3,0x30,0xe9,0x34,0xa8,0x6d,0x42,0xce,
    0x24,0x75,0x27,0x9c,0x86,0x6f,0xa8,0x1d,0x9d,0x86,0x6f,0xc1,0x4d,0x43,0x6f,0x4c,
    0x98,0xf9,0xa9,0x06,0xcb,0x35,0xe9,0x34,0xec,0x8b,0xc9,0x67,0x9c,0x98,0x09,0xa7,
    0xe1,0x3b,0x34,0xf4,0x3a,0x0d,0xdf,0x83,0x9b,0x86,0x1f,0xc0,0x4c,0xc3,0xb4,0xd3,
    0xa0,0xb6,0x29,0x39,0xd3,0xd4,0x9d,0x62,0x8f,0xb4,0xee,0x8f,0xd4,0xde,0x17,0x97,
    0xf7,0x5b,0x39,0x9a,0xef,0xb4,0xe3,0xd8,0x8f,0xdf,0x24,0x71,0x53,0xf0,0xd1,0xdf,
    0xc0,0x3b,0xec,0xbf,0xed,0xdc,0xbb,0x70,0x1e,0x76,0x3b,0xf7,0x1e,0xf8,0x4b,0xec,
    0xdc,0xfb,0x60,0x9a,0x57,0xe3,0xf4,0x37,0xff,0x01,0x71,0xa7,0x89,0xd3,0x9e,0x7e,
    0x08,0x6e,0x7d,0xff,0x88,0xd8,0xe0,0xb0,0x33,0x60,0xaa,0xe1,0x80,0x20,0xfa,0x7e,
    0x3a,0x8b,0xef,0x19,0x72,0x58,0x8d,0x8f,0xa9,0x31,0xea,0x6a,0x9c,0x03,0x7f,0x4a,
    0x98,0xe9,0x3b,0xe8,0x3c,0x9a,0xce,0xf2,0x1e,0x38,0xe7,0xe6,0xf1,0x13,0xf1,0x7b,
    0xdc,0x3c,0x7e,0x06,0xb7,0x79,0xfc,0x02,0x66,0xf3,0x28,0xc5,0xe5,0x79,0xa8,0x6d,
    0x46,0xce,0x2c,0x3d,0x9e,0x71,0x3a,0x7e,0xa5,0x76,0x21,0x9f,0x51,0x29,0xd7,0xf1,
    0x1b,0xd8,0x79,0xf7,0x5b,0xcf,0x9c,0xce,0x6b,0xc4,0xd9,0x79,0x45,0x72,0x29,0x7e,
    0x9d,0xd8,0x6b,0x79,0xae,0xea,0x5c,0xd7,0xef,0xe4,0xb9,0xce,0xfb,0xa6,0xd2,0xbd,
    0xc7,0x75,0xee,0xca,0x53,0x39,0xcd,0x3a,0xbd,0x73,0xe8,0x1d,0x72,0x7a,0xff,0x00,
    0x37,0xbd,0xf3,0x60,0xa6,0x77,0xd1,0xed,0xdf,0x7c,0xae,0x33,0xe4,0x98,0xe6,0x5e,
    0x70,0x7a,0x6f,0x38,0xbd,0x63,0xe4,0xfa,0x0b,0x7c,0x18,0x4e,0x16,0xb7,0xc8,0x2e,
    0xaa,0xcf,0x4d,0x6a,0xce,0xe2,0xbf,0x40,0xdd,0xa2,0xeb,0xb3,0xfa,0x2c,0xe9,0xdf,
    0x2c,0x34,0x2d,0xb9,0xba,0xda,0xc4,0x95,0x7d,0xce,0xe2,0x7f,0xf7,0xb9,0x10,0x01,
    0x39,0xaf,0xd1,0xe7,0x8a,0x98,0x62,0xd5,0x6e,0x7d,0xae,0x22,0x97,0xda,0xfe,0xad,
    0xcf,0xc6,0x49,0xbf,0xe7,0xd8,0xb9,0x87,0x89,0x59,0x24,0x7e,0x69,0xc5,0x4c,0x4a,
    0xce,0x77,0x7f,0x4c,0xb3,0x9c,0x21,0x4e,0xf3,0xbc,0xc0,0xff,0x28,0x35,0x31,0xd9,
    0x6d,0x7e,0xb5,0x31,0xcd,0x6f,0xc4,0xcd,0x6f,0x55,0x4c,0xb8,0xcd,0xaf,0x2e,0x26,
    0xcc,0xe6,0xd7,0xe3,0xfa,0xa8,0xb6,0x7a,0x39,0x4d,0xf0,0xa8,0x47,0xa7,0xd6,0xba,
    0x25,0xa6,0x7a,0x35,0xe8,0x2c,0xd2,0x33,0xd3,0xd9,0x43,0x4c,0x93,0xe3,0xb3,0x06,
    0x3e,0x87,0x1c,0x9f,0xb5,0x31,0xe1,0xc6,0x67,0x5d,0x4c,0x98,0xf1,0xe9,0x76,0x7c,
    0xd4,0xd6,0x2c,0xa7,0x85,0xdc,0xfa,0xac,0x73,0xd5,0x3c,0x1b,0xe0,0x52,0xe0,0x1d,
    0xac,0x1c,0x77,0xc5,0x65,0xdc,0xde,0x6f,0xdd,0xc4,0xb6,0xb8,0x77,0xcf,0x26,0x78,
    0x1d,0x76,0xef,0x85,0x5b,0x63,0xc2,0x2f,0xb1,0x37,0xad,0x31,0x61,0xa3,0x6e,0xf7,
    0xdb,0x62,0xc2,0x87,0xe1,0x5a,0x76,0x5c,0xd5,0xb6,0x59,0x4e,0x99,0x7a,0xfa,0x6c,
    0xbc,0xfa,0xd0,0x57,0xe3,0xfe,0x36,0x98,0x5f,0x99,0x59,0xab,0xdf,0x23,0x70,0x57,
    0xae,0x7d,0xe4,0x33,0x3e,0x77,0xc0,0xe7,0x88,0xe3,0x73,0x67,0x4c,0xb8,0xf1,0x69,
    0x77,0x7c,0xd4,0xb6,0x55,0x4e,0x3b,0x75,0xb6,0x3a,0x3e,0xbb,0xe1,0xa3,0xf5,0x32,
    0xf8,0x98,0x5f,0xbb,0xe3,0x33,0x10,0x93,0x8f,0x72,0xdc,0x4d,0x3e,0xe3,0xd3,0x01,
    0x9f,0x21,0xc7,0x67,0x5b,0x4c,0xb8,0xf1,0xe9,0x72,0x7c,0xd4,0xd6,0x29,0xa7,0x8b,
    0x3a,0x9d,0x8e,0xcf,0xde,0x98,0xfe,0x27,0x1d,0x88,0xcb,0xfb,0x64,0x7e,0x5d,0x8e,
    0xcf,0x60,0x4c,0x3e,0xca,0x71,0x2f,0xf9,0xfc,0x8c,0xbb,0x9d,0xef,0x63,0x31,0xed,
    0x83,0xee,0xcc,0x20,0x75,0xfd,0x9e,0xf6,0x38,0xdf,0x47,0x63,0xda,0x6f,0xdd,0x77,
    0x8d,0xd3,0x3c,0xbb,0x84,0xc9,0x45,0x6c,0x37,0x65,0x6a,0xbd,0x72,0xfe,0x06,0xc0,
    0xb9,0x65,0x65,0x50,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture3D src;
// layout(location = 0)out uvec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       uvec4 transformSrcValue(ivec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
