#!/bin/bash

# Copyright 2024 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Script for updating WebUI's NPM deps.
#  1) Update package.json file to point to the desired version, or update the
#     versions in download_npm_deps_manually.sh (for packages not pulled via
#     `npm install`).
#  2) Run this script without using any flag to download all the
#     NPM dependencies locally.
#  3) Authenticate using your @google account by running `gsutil.py config`
#     (prerequisite for step #4 below).
#  4) Upload the compressed node_modules.tar.gz file to the
#     Google Cloud Storage and update the DEPS file by running this script with
#     the `--upload` or `-u`, i.e. `update_npm_deps --upload`.
#  5) Land a CL with the changes generated by this script.

set -eu
cd "$(dirname "$0")"

upload=false  # Default value

# The script can take a command line flag and check if it is valid.
# If the flag `--upload` | `-u` is passed in, then the script
# uploads the all the node_modules archive and updates the DEPS.
while [[ $# -gt 0 ]]; do
  case $1 in
    -u|--upload)
      upload=true
      shift
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

node_modules_file="node_modules.tar.gz"

if [[ $upload = true ]]; then
  if [[ ! -e ${node_modules_file} ]]; then
    echo "Error: File '${node_modules_file}' does not exist."
    echo "Please run ./update_npm_deps to download the all the NPM dependencies locally first."
    echo "Exiting..."
    exit 1
  fi
  ./upload_to_gcs_and_update_deps "${node_modules_file}"\
      "src/third_party/node/node_modules"
  echo "DONE uploading ${node_modules_file} and updating DEPS file.."
  exit 0
fi

rm -rf node_modules

echo 'Step 1: Downloading dependencies listed in packages.json, using npm...'
npm install --no-bin-links --only=prod

echo 'Step 2: Downloading dependencies not listed in packages.json, manually...'
./download_npm_deps_manually.sh

echo 'Step 3: Applying local patches...'
patch -d node_modules/@types/d3/ -p1 < patches/chromium_d3_types_index.patch
patch -d node_modules/html-minifier/ -p1 < patches/html_minifier.patch
patch -p1 < patches/lit_html.patch
patch -p1 < patches/types_chai.patch
patch -p1 < patches/typescript.patch

echo 'Step 4: Filtering out unnecessary files...'
rsync -c --delete -r -q --include-from="npm_include.txt" \
    --exclude-from="npm_exclude.txt" \
    --prune-empty-dirs "node_modules/" "node_modules_filtered/"

rsync -c -r -q --files-from="lit_include.txt" "node_modules/" \
    "node_modules_filtered/"

# `npm install` leaves a bunch of local paths in _where and _args.
# This is undesired. See: https://github.com/npm/npm/issues/10393
python3 clean_json_attrs.py --attr_pattern="^_" --file_pattern="^package\.json$" "node_modules_filtered/"

echo -e "\n---------------------------------------------------------"
echo "Before filtering:" size: $(du -h node_modules/ | tail -n1 | cut -f1) ", files: " $(find node_modules/ -type f | wc -l)
rm -r node_modules
mv node_modules_filtered node_modules

echo "After filtering:" size: $(du -h node_modules/ | tail -n1 | cut -f1) ", files: " $(find node_modules/ -type f | wc -l)

# Packs all contents under node_modules directory to node_modules.tar.gz without
# using node_modules as the top level directory.
# The directory to extract the archive is expected to be clear when using
# GCS first class. So the archive needs to be downloaded to
# `src/third_party/node/node_modules/` instead of `src/third_party/node/`.
# The content will be extracted in the same directory.
# By just packing only the contents, all the files will be under
# `src/third_party/node/node_modules/`.
# This aligns with the expected file structure of current dependencies.
tar cfz "${node_modules_file}" -C node_modules .
echo "After compressing:" size: $(du -h "${node_modules_file}" | tail -n1 | cut -f1)

# Updating nod_modules.tar.gz.sha1.
sha1="$(sha1sum node_modules.tar.gz | cut -d ' ' -f1)"
echo "${sha1}" > node_modules.tar.gz.sha1
echo "DONE"
echo -e "---------------------------------------------------------"

echo "Please run './update_npm_deps --upload' to upload the ${node_modules_file}"
