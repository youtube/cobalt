# Copyright 2022 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//third_party/blink/renderer/modules/ml/webnn/features.gni")
import("//third_party/blink/renderer/modules/modules.gni")

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [
    "BUILD_WEBNN_WITH_XNNPACK=$build_webnn_with_xnnpack",
    "BUILD_WEBNN_ON_CROS=$build_webnn_on_cros",
  ]
}

blink_modules_sources("ml") {
  sources = [
    "ml.cc",
    "ml.h",
    "ml_context.cc",
    "ml_context.h",
    "ml_model.cc",
    "ml_model.h",
    "ml_model_loader.cc",
    "ml_model_loader.h",
    "navigator_ml.cc",
    "navigator_ml.h",
    "webnn/ml_activation.cc",
    "webnn/ml_activation.h",
    "webnn/ml_graph.cc",
    "webnn/ml_graph.h",
    "webnn/ml_graph_builder.cc",
    "webnn/ml_graph_builder.h",
    "webnn/ml_graph_utils.cc",
    "webnn/ml_graph_utils.h",
    "webnn/ml_operand.cc",
    "webnn/ml_operand.h",
    "webnn/ml_operator.cc",
    "webnn/ml_operator.h",
  ]

  deps = [
    ":buildflags",
    "//components/ml/mojom:mojom_blink",
    "//components/ml/webnn",
    "//components/ml/webnn:features",
    "//services/webnn/public/mojom:mojom_blink",
  ]

  if (build_webnn_with_xnnpack) {
    sources += [
      "webnn/ml_graph_xnnpack.cc",
      "webnn/ml_graph_xnnpack.h",
    ]

    deps += [ "//third_party/xnnpack" ]
  }

  if (build_webnn_on_cros) {
    sources += [
      "webnn/ml_graph_cros.cc",
      "webnn/ml_graph_cros.h",
    ]

    deps += [
      "//third_party/flatbuffers:flatbuffers",
      "//third_party/tflite:tflite_public_headers",
    ]
  }

  if (!is_chromeos) {
    sources += [
      # Platform independent sources which packages the model information
      # into a neutral struct types, it will be built and executed with hardware
      # accelerated OS machine learning API in WebNN Service which run out of
      # renderer process.
      "webnn/ml_context_mojo.cc",
      "webnn/ml_context_mojo.h",
      "webnn/ml_error_mojo.cc",
      "webnn/ml_error_mojo.h",
      "webnn/ml_graph_mojo.cc",
      "webnn/ml_graph_mojo.h",
      "webnn/ml_graph_type_converter.cc",
      "webnn/ml_graph_type_converter.h",
    ]
  }
}

source_set("unit_tests") {
  testonly = true
  sources = [
    "ml_model_loader_test.cc",
    "ml_model_loader_test_util.cc",
    "ml_model_loader_test_util.h",
    "webnn/ml_graph_builder_test.cc",
    "webnn/ml_graph_builder_test.h",
    "webnn/ml_graph_builder_utils.cc",
    "webnn/ml_graph_builder_utils.h",
    "webnn/ml_graph_test_base.cc",
    "webnn/ml_graph_test_base.h",
  ]

  deps = [
    "//components/ml/mojom:mojom_blink",
    "//components/ml/webnn:features",
    "//services/webnn/public/mojom:mojom_blink",
    "//testing/gtest",
    "//third_party/blink/public:test_headers",
    "//third_party/blink/renderer/controller:blink_bindings_test_sources",
    "//third_party/blink/renderer/core:unit_test_support",
    "//third_party/blink/renderer/modules",
    "//third_party/blink/renderer/platform",
    "//third_party/blink/renderer/platform:test_support",
    "//third_party/blink/renderer/platform/wtf",
  ]

  if (build_webnn_with_xnnpack) {
    sources += [
      "webnn/ml_graph_test.cc",
      "webnn/ml_graph_xnnpack_test.cc",
    ]
    deps += [ "//third_party/xnnpack" ]
  }

  if (is_chromeos && current_cpu == "x64") {
    sources += [ "webnn/ml_graph_test_cros.cc" ]
    deps += [ "//third_party/tflite" ]
  }

  if (!is_chromeos) {
    sources += [ "webnn/ml_graph_test_mojo.cc" ]
    deps += [ "//components/ml/webnn" ]
  }
}
