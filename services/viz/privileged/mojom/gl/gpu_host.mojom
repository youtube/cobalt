// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module viz.mojom;

import "gpu/ipc/common/gpu_disk_cache_type.mojom";
import "gpu/ipc/common/gpu_feature_info.mojom";
import "gpu/ipc/common/gpu_info.mojom";
import "gpu/ipc/common/surface_handle.mojom";
import "mojo/public/mojom/base/byte_string.mojom";
import "services/viz/privileged/mojom/gl/context_lost_reason.mojom";
import "third_party/blink/public/mojom/tokens/tokens.mojom";
import "ui/gfx/mojom/gpu_extra_info.mojom";
import "url/mojom/url.mojom";
[EnableIf=is_win]
import "ui/gfx/mojom/dxgi_info.mojom";

// Communication channel from the gpu process to the gpu host. This interface
// should never have any sync function calls.
interface GpuHost {
  // If |gpu_info| and |gpu_feature_info| are for hardware GPU, then
  // |gpu_info_for_hardware_gpu| and |gpu_feature_info_for_hardware_gpu| can
  // be uninitialized data.
  DidInitialize(gpu.mojom.GpuInfo gpu_info,
                gpu.mojom.GpuFeatureInfo gpu_feature_info,
                gpu.mojom.GpuInfo? gpu_info_for_hardware_gpu,
                gpu.mojom.GpuFeatureInfo? gpu_feature_info_for_hardware_gpu,
                gfx.mojom.GpuExtraInfo gpu_extra_info);
  DidFailInitialize();

  DidCreateContextSuccessfully();
  DidCreateOffscreenContext(url.mojom.Url url);
  DidDestroyOffscreenContext(url.mojom.Url url);

  DidDestroyChannel(int32 client_id);
  // Called when all channels are destroyed by client. Not called for tearing
  // down all channels due to lost context.
  DidDestroyAllChannels();
  DidLoseContext(bool offscreen,
                 ContextLostReason reason,
                 url.mojom.Url active_url);

  // Tells the GPU host that the GPUInfo has been updated in the GPU
  // process.
  DidUpdateGPUInfo(gpu.mojom.GpuInfo gpu_info);

  // Tells the GPU host that the overlay info has been updated in the GPU
  // process.
  [EnableIf=is_win]
  DidUpdateOverlayInfo(gpu.mojom.OverlayInfo overlay_info);

  // Tells the GPU host that the DXGI adapter and output information has been
  // updated in the GPU process.
  [EnableIf=is_win]
  DidUpdateDXGIInfo(gfx.mojom.DXGIInfo dxgi_info);

  // GPU process has decided to disable GPU compositing. Host process keeps
  // track of this decision in case the GPU process crashes.
  DisableGpuCompositing();

  // Asks the host to pass an isolation key for a given token. The client id
  // corresponds to the render process id.
  // TODO(dawn:549) Consider using ExecutionContextToken if DocumentToken
  //     becomes a part of the ExecutionContextToken.
  GetIsolationKey(int32 client_id,
                  blink.mojom.WebGPUExecutionContextToken wgpu_context_token)
      => (string isolation_key);

  // Tells the GPU host to store the blob on the given cache handle.
  StoreBlobToDisk(gpu.mojom.GpuDiskCacheHandle cache_handle,
                  string key,
                  mojo_base.mojom.ByteString blob);

  RecordLogMessage(int32 severity, string header, string message);
};
