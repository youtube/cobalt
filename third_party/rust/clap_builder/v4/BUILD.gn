# Copyright 2023 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# @generated from third_party/rust/BUILD.gn.hbs by tools/crates/gnrt.
# Do not edit!

import("//build/rust/cargo_crate.gni")

cargo_crate("lib") {
  crate_name = "clap_builder"
  epoch = "4"
  crate_type = "rlib"

  # Only for usage from third-party crates. Add the crate to
  # third_party.toml to use it from first-party code.
  visibility = [ "//third_party/rust/*" ]
  crate_root = "crate/src/lib.rs"
  sources = [
    "//third_party/rust/clap_builder/v4/crate/src/builder/action.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/app_settings.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/arg.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/arg_group.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/arg_predicate.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/arg_settings.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/command.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/debug_asserts.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/ext.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/mod.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/os_str.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/possible_value.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/range.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/resettable.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/str.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/styled_str.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/styling.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/tests.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/value_hint.rs",
    "//third_party/rust/clap_builder/v4/crate/src/builder/value_parser.rs",
    "//third_party/rust/clap_builder/v4/crate/src/derive.rs",
    "//third_party/rust/clap_builder/v4/crate/src/error/context.rs",
    "//third_party/rust/clap_builder/v4/crate/src/error/format.rs",
    "//third_party/rust/clap_builder/v4/crate/src/error/kind.rs",
    "//third_party/rust/clap_builder/v4/crate/src/error/mod.rs",
    "//third_party/rust/clap_builder/v4/crate/src/lib.rs",
    "//third_party/rust/clap_builder/v4/crate/src/macros.rs",
    "//third_party/rust/clap_builder/v4/crate/src/mkeymap.rs",
    "//third_party/rust/clap_builder/v4/crate/src/output/fmt.rs",
    "//third_party/rust/clap_builder/v4/crate/src/output/help.rs",
    "//third_party/rust/clap_builder/v4/crate/src/output/help_template.rs",
    "//third_party/rust/clap_builder/v4/crate/src/output/mod.rs",
    "//third_party/rust/clap_builder/v4/crate/src/output/textwrap/core.rs",
    "//third_party/rust/clap_builder/v4/crate/src/output/textwrap/mod.rs",
    "//third_party/rust/clap_builder/v4/crate/src/output/textwrap/word_separators.rs",
    "//third_party/rust/clap_builder/v4/crate/src/output/textwrap/wrap_algorithms.rs",
    "//third_party/rust/clap_builder/v4/crate/src/output/usage.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/arg_matcher.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/error.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/features/mod.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/features/suggestions.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/matches/arg_matches.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/matches/matched_arg.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/matches/mod.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/matches/value_source.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/mod.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/parser.rs",
    "//third_party/rust/clap_builder/v4/crate/src/parser/validator.rs",
    "//third_party/rust/clap_builder/v4/crate/src/util/any_value.rs",
    "//third_party/rust/clap_builder/v4/crate/src/util/color.rs",
    "//third_party/rust/clap_builder/v4/crate/src/util/flat_map.rs",
    "//third_party/rust/clap_builder/v4/crate/src/util/flat_set.rs",
    "//third_party/rust/clap_builder/v4/crate/src/util/graph.rs",
    "//third_party/rust/clap_builder/v4/crate/src/util/id.rs",
    "//third_party/rust/clap_builder/v4/crate/src/util/mod.rs",
    "//third_party/rust/clap_builder/v4/crate/src/util/str_to_bool.rs",
  ]
  inputs = [ "//third_party/rust/clap_builder/v4/crate/README.md" ]

  # Unit tests skipped. Generate with --with-tests to include them.
  build_native_rust_unit_tests = false
  edition = "2021"
  cargo_pkg_version = "4.4.6"
  cargo_pkg_name = "clap_builder"
  cargo_pkg_description = "A simple to use, efficient, and full-featured Command Line Argument Parser"
  library_configs -= [ "//build/config/compiler:chromium_code" ]
  library_configs += [ "//build/config/compiler:no_chromium_code" ]
  executable_configs -= [ "//build/config/compiler:chromium_code" ]
  executable_configs += [ "//build/config/compiler:no_chromium_code" ]
  deps = [
    "//third_party/rust/anstyle/v1:lib",
    "//third_party/rust/clap_lex/v0_5:lib",
    "//third_party/rust/strsim/v0_10:lib",
  ]
  features = [
    "error-context",
    "help",
    "std",
    "suggestions",
    "usage",
  ]
}
