# Copyright 2014 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//chrome/common/features.gni")
import("//third_party/closure_compiler/compile_js.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//tools/polymer/html_to_wrapper.gni")
import("//tools/typescript/ts_definitions.gni")
import("//tools/typescript/ts_library.gni")
import("//ui/file_manager/file_names.gni")
import("//ui/webui/resources/tools/generate_grd.gni")

grit("resources") {
  source = "file_manager_resources.grd"
  defines = [ "optimize_webui=$optimize_webui" ]
  outputs = [
    "grit/file_manager_resources.h",
    "grit/file_manager_resources_map.cc",
    "grit/file_manager_resources_map.h",
    "file_manager_resources.pak",
    "file_manager_resources.rc",
  ]
}

component("file_manager") {
  sources = [ "file_manager_export.h" ]
  public_deps = [
    ":file_manager_gen_resources",
    ":resources",
    "//base",
  ]
  defines = [ "FILE_MANAGER_IMPLEMENTATION" ]
}

group("closure_compile") {
  # Subfolders' closure_compile groups bundle the non-test "module" type-check
  # groups as well as unittests and test_support.
  testonly = true

  deps = [
    "file_manager/background/js:closure_compile",
    "file_manager/common/js:closure_compile",
    "file_manager/foreground/elements:closure_compile",
    "file_manager/foreground/js:closure_compile",
    "file_manager/foreground/js/metadata:closure_compile",
    "file_manager/foreground/js/ui:closure_compile",
    "file_manager/foreground/js/ui/banners:closure_compile",
    "image_loader:closure_compile",
    "integration_tests:closure_compile",
    "integration_tests/file_manager:closure_compile",
  ]
}

group("unit_test_data") {
  testonly = true
  deps = [
    "file_manager/background/js:js_test_type_check",
    "file_manager/common/js:js_test_type_check",
    "file_manager/foreground/elements:js_test_type_check",
    "file_manager/foreground/js:js_test_type_check",
    "file_manager/foreground/js/metadata:js_test_type_check",
    "file_manager/foreground/js/ui:js_test_type_check",
    "file_manager/foreground/js/ui/banners:js_test_type_check",
    "image_loader:js_test_type_check",
  ]
}

preprocess_folder = "$target_gen_dir/preprocessed"

# Move files to the preprocessed folder to combine all resources in the same
# folder for JS bundling with rollup.
# This is for files direct from the src/:  input_folder="./".
preprocess_if_expr("preprocess_static") {
  in_folder = "./"
  out_folder = preprocess_folder
  out_manifest = "$target_gen_dir/manifest_preprocess_static.json"

  in_files = static_js_files

  deps = [
    "//ui/file_manager/file_manager/background/js:js_modules",
    "//ui/file_manager/file_manager/common/js:js_modules",
    "//ui/file_manager/file_manager/foreground/elements:web_components",
    "//ui/file_manager/file_manager/foreground/js:deferred_elements",
    "//ui/file_manager/file_manager/foreground/js:main",
  ]
}

preprocess_if_expr("preprocess_static_image_loader") {
  in_folder = "."
  out_folder = preprocess_folder
  out_manifest = "$target_gen_dir/manifest_preprocess_static_image_loader.json"

  in_files = image_loader_static_js_files

  deps = [
    "//ui/file_manager/image_loader:background",
    "//ui/file_manager/image_loader:js_modules",
  ]
}

# This is for files that are generated in "gen/": input_folder=target_gen_dir.
preprocess_if_expr("preprocess_generated") {
  in_folder = target_gen_dir
  out_folder = preprocess_folder
  out_manifest = "$target_gen_dir/manifest_preprocess_generated.json"

  in_files = generated_js_files + ts_generated_templates

  deps = [
    ":html_wrapper_files",
    "//ui/file_manager/base/gn:file_types_data_gen_js",
    "//ui/file_manager/file_manager/foreground/elements:elements",
    "//ui/file_manager/file_manager/foreground/elements:polymer_elements",
    "//ui/file_manager/file_manager/foreground/elements:web_components",
    "//ui/file_manager/file_manager/foreground/js/ui/banners:web_components",
  ]
}

ts_library("build_ts") {
  root_dir = preprocess_folder
  out_dir = "$target_gen_dir/tsc"
  tsconfig_base = "tsconfig_base.json"
  composite = true

  path_mappings = [
    "tslib|" + rebase_path(
            "//third_party/material_web_components/components-chromium/node_modules/tslib/tslib.d.ts",
            target_gen_dir),
    "chrome://resources/mwc/*|" + rebase_path(
            "//third_party/material_web_components/components-chromium/node_modules/*",
            target_gen_dir),
  ]

  extra_deps = [
    ":copy_definitions_to_gen",
    ":copy_definitions_to_proprocess",
    ":copy_fmp",
    ":copy_ts",
    ":generate_definitions",
    ":preprocess_generated",
    ":preprocess_static",
    ":preprocess_static_image_loader",
    "//ash/webui/common/resources:generate_definitions",
  ]

  deps = [
    "//ash/webui/common/resources:build_ts",
    "//third_party/cros-components:cros_components_ts",
    "//third_party/material_web_components:bundle_lit_ts",
    "//third_party/material_web_components:library",
    "//third_party/polymer/v3_0:library",
    "//ui/webui/resources/cr_elements:build_ts",
    "//ui/webui/resources/js:build_ts",
  ]

  in_files = static_js_files + generated_js_files + ts_files + ts_polymer +
             ts_generated_templates + image_loader_static_js_files +
             [ "file_manager/externs/file_manager_private.js" ]

  manifest_excludes = [ "file_manager/externs/file_manager_private.js" ]

  definitions = [
    "//tools/typescript/definitions/chrome_event.d.ts",
    "//tools/typescript/definitions/runtime.d.ts",
    "//tools/typescript/definitions/tabs.d.ts",
  ]
  foreach(_file, generate_definitions_js_files) {
    definitions +=
        [ "$target_gen_dir/" + string_replace(_file, ".js", ".d.ts") ]
  }
  foreach(_file, checked_in_dts_files) {
    definitions += [ "$preprocess_folder/$_file" ]
  }
}

ts_library("test_build_ts") {
  testonly = true
  root_dir = preprocess_folder
  out_dir = "$target_gen_dir/tsc"
  tsconfig_base = "tsconfig_base.json"

  in_files =
      ts_test_files + [ "file_manager/externs/test/file_manager_private.js" ]

  manifest_excludes = [ "file_manager/externs/test/file_manager_private.js" ]

  path_mappings = [
    # for chai_assert.js.
    "chrome://webui-test/chromeos/*|" +
        rebase_path("$root_gen_dir/chrome/test/data/webui/chromeos/tsc/*",
                    target_gen_dir),
    "chrome://webui-test/*|" +
        rebase_path("$root_gen_dir/chrome/test/data/webui/tsc/*",
                    target_gen_dir),
  ]

  definitions = []
  foreach(_file, generate_definitions_js_files) {
    definitions +=
        [ "$target_gen_dir/" + string_replace(_file, ".js", ".d.ts") ]
  }
  foreach(_file, checked_in_dts_files) {
    definitions += [ "$preprocess_folder/$_file" ]
  }

  deps = [
    ":build_ts",
    "//ash/webui/common/resources:build_ts",
    "//chrome/test/data/webui:build_ts",
    "//chrome/test/data/webui/chromeos:build_ts",
    "//ui/webui/resources/cr_elements:build_ts",
    "//ui/webui/resources/js:build_ts",
  ]
  extra_deps = [
    ":copy_definitions_to_gen",
    ":copy_definitions_to_proprocess",
    ":copy_fmp_test",
    ":copy_ts",
    ":generate_definitions",
  ]
}

ts_definitions("generate_definitions") {
  root_dir = "."
  out_dir = target_gen_dir

  extra_deps = [ "//ash/webui/common/resources:generate_definitions" ]

  js_files = generate_definitions_js_files
}

# Copy definition files to GEN folder, so they can import relatively the
# generated definitions.
copy("copy_definitions_to_gen") {
  sources = checked_in_dts_files
  outputs = [ "$target_gen_dir/{{source_target_relative}}" ]
}

# Copy definition files to $preprocess_folder so TSC can find them.
copy("copy_definitions_to_proprocess") {
  sources = checked_in_dts_files
  outputs = [ "$preprocess_folder/{{source_target_relative}}" ]
}

copy("copy_ts") {
  sources = ts_files + ts_test_files + ts_polymer
  outputs = [ "$preprocess_folder/{{source_target_relative}}" ]
}

copy("copy_fmp") {
  sources = [ "//third_party/closure_compiler/externs/file_manager_private.js" ]
  outputs = [ "$preprocess_folder/file_manager/externs/{{source_file_part}}" ]
}

# Copy file_manager_private.js to a different location than copy_fmp, to
# work-around the fact that both :build_ts__ts_library and :test_build_ts
# generate files in the same folder and both have file_manager_private.js as an
# input file.
copy("copy_fmp_test") {
  sources = [ "//third_party/closure_compiler/externs/file_manager_private.js" ]
  outputs =
      [ "$preprocess_folder/file_manager/externs/test/{{source_file_part}}" ]
}

copy("for_image_loader") {
  sources = [
    "file_manager/externs/ts/state.js",
    "file_manager/foreground/js/metadata/metadata_item.js",
  ]
  outputs = [ "$target_gen_dir/{{source_target_relative}}" ]
}

js_library("js_from_ts") {
  sources = []
  foreach(_t, ts_files) {
    sources += [ "$target_gen_dir/tsc/" + string_replace(_t, ".ts", ".js") ]
  }
  extra_deps = [ ":build_ts" ]
  externs_list =
      [ "//ui/file_manager/file_manager/externs/app_window_common.js" ]
}

grd_prefix = "file_manager_gen"
generated_grd = "$target_gen_dir/${grd_prefix}_resources.grd"

generate_grd("build_grd") {
  out_grd = generated_grd

  grdp_files = [ "$target_gen_dir/file_manager/static_resources.grdp" ]

  deps = [
    ":build_ts",
    "file_manager:build_static_grdp",
    "//ui/file_manager/image_loader:build",
  ]

  input_files_base_dir = rebase_path(target_gen_dir, root_build_dir)
  input_files = [ "image_loader/background.rollup.js" ]

  resource_path_rewrites =
      [ "image_loader/background.rollup.js|image_loader/background.js" ]

  if (optimize_webui) {
    input_files += [
      "file_manager/foreground/js/deferred_elements.rollup.js",
      "file_manager/foreground/js/main.rollup.js",
      "file_manager/foreground/js/metadata/metadata_dispatcher.rollup.js",
      "file_manager/foreground/js/shared.rollup.js",

      # For Image Loader unittests:
      "file_manager/common/js/file_types_data.js",
      "file_manager/externs/ts/state.js",
      "file_manager/foreground/js/metadata/metadata_item.js",
    ]

    resource_path_rewrites += [
      "file_manager/foreground/js/deferred_elements.rollup.js|file_manager/foreground/js/deferred_elements.js",
      "file_manager/foreground/js/main.rollup.js|file_manager/foreground/js/main.js",
      "file_manager/foreground/js/metadata/metadata_dispatcher.rollup.js|file_manager/foreground/js/metadata/metadata_dispatcher.js",
    ]

    deps += [
      ":for_image_loader",
      "//ui/file_manager/file_manager/foreground/elements:elements",
      "//ui/file_manager/file_manager/foreground/js:build",
      "//ui/file_manager/file_manager/foreground/js:build_worker",
    ]
  } else {
    manifest_files =
        filter_include(get_target_outputs(":build_ts"), [ "*.manifest" ])
  }
}

# Resources for the JS modules.
grit("file_manager_gen_resources") {
  defines = chrome_grit_defines

  # These arguments are needed since the grd is generated at build time.
  enable_input_discovery_for_gn_analyze = false

  source = generated_grd
  deps = [ ":build_grd" ]

  outputs = [
    "grit/file_manager_gen_resources.h",
    "grit/file_manager_gen_resources_map.cc",
    "grit/file_manager_gen_resources_map.h",
    "file_manager_gen_resources.pak",
  ]
  output_dir = target_gen_dir
}

html_to_wrapper("html_wrapper_files") {
  in_files = ts_templates
  template = "native"
}

# GRD for test files.
generate_grd("build_tests_grdp") {
  testonly = true
  grd_prefix = "file_manager_test"
  out_grd = "$target_gen_dir/tests_resources.grdp"

  input_files_base_dir = rebase_path(".", "//")
  input_files = unittest_files
}

# GRD for the actual application files that are processed by TS compiler.
generate_grd("build_tests_gen_grdp") {
  testonly = true
  grd_prefix = "file_manager_test"
  out_grd = "$target_gen_dir/tests_gen_resources.grdp"

  manifest_files =
      filter_include(get_target_outputs(":build_ts"), [ "*.manifest" ]) +
      filter_include(get_target_outputs(":test_build_ts"), [ "*.manifest" ])

  deps = [
    ":build_ts",
    ":test_build_ts",
  ]
}
