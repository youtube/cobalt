// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "third_party/blink/public/mojom/permissions/permission_status.mojom";
import "url/mojom/origin.mojom";

enum PermissionName {
  GEOLOCATION,
  NOTIFICATIONS,
  MIDI,
  PROTECTED_MEDIA_IDENTIFIER,
  DURABLE_STORAGE,
  AUDIO_CAPTURE,
  VIDEO_CAPTURE,
  BACKGROUND_SYNC,
  SENSORS,
  ACCESSIBILITY_EVENTS,
  CLIPBOARD_READ,
  CLIPBOARD_WRITE,
  PAYMENT_HANDLER,
  BACKGROUND_FETCH,
  IDLE_DETECTION,
  PERIODIC_BACKGROUND_SYNC,
  SCREEN_WAKE_LOCK,
  SYSTEM_WAKE_LOCK,
  NFC,
  STORAGE_ACCESS,
  WINDOW_MANAGEMENT,
  LOCAL_FONTS,
  DISPLAY_CAPTURE,
  TOP_LEVEL_STORAGE_ACCESS,
};

struct MidiPermissionDescriptor {
  bool sysex;
};

struct ClipboardPermissionDescriptor {
  // True if the clipboard action came with a user activation.
  bool has_user_gesture;
  // True if the clipboard action will be a standard format such as plain text.
  bool will_be_sanitized;
};

struct CameraDevicePermissionDescriptor {
  bool panTiltZoom;
};

struct TopLevelStorageAccessPermissionDescriptor {
  // Site vs Origin applicability is still in flux. Origin is preferred as site
  // can be derived from it and not vice-versa, and because starting stricter
  // is better for any future migration.
  // See, e.g.: https://github.com/privacycg/storage-access/issues/113
  url.mojom.Origin requestedOrigin;
};

// Union of possible extensions to the base PermissionDescriptor type.
union PermissionDescriptorExtension {
  MidiPermissionDescriptor midi;
  ClipboardPermissionDescriptor clipboard;
  CameraDevicePermissionDescriptor camera_device;
  TopLevelStorageAccessPermissionDescriptor top_level_storage_access;
};

// This struct roughly corresponds to the PermissionDescriptor dictionary as
// defined by the Permissions API.
struct PermissionDescriptor {
  PermissionName name;
  PermissionDescriptorExtension? extension;
};

// Interface a client can implement to observe permission changes.
interface PermissionObserver {
  OnPermissionStatusChange(PermissionStatus status);
};

// The Permission service provides permission handling capabilities by exposing
// methods to check, request, and revoke permissions. It also allows a client to
// start listening to permission changes.
interface PermissionService {
  HasPermission(PermissionDescriptor permission) => (PermissionStatus status);
  RequestPermission(PermissionDescriptor permission, bool user_gesture)
      => (PermissionStatus status);
  RequestPermissions(array<PermissionDescriptor> permission, bool user_gesture)
      => (array<PermissionStatus> statuses);
  RevokePermission(PermissionDescriptor permission)
      => (PermissionStatus status);
  // Subscribes |observer| to updates about changes to the current origin's
  // access to |permission|. Closing the pipe will cancel the subscription.
  AddPermissionObserver(PermissionDescriptor permission,
                        PermissionStatus last_known_status,
                        pending_remote<PermissionObserver> observer);
  // Notifies when an event listener with `event_type` was added to
  // PermissionStatus.
  NotifyEventListener(PermissionDescriptor permission, string event_type,
                      bool is_added);
};
