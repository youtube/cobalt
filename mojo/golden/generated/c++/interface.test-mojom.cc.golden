// interface.test-mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "interface.test-mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/thread_pool/thread_pool_instance.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/features.h"
#include "mojo/public/cpp/bindings/lib/default_construct_tag_internal.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/cpp/bindings/urgent_message_scope.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "interface.test-mojom-params-data.h"
#include "interface.test-mojom-shared-message-ids.h"

#include "interface.test-mojom-import-headers.h"
#include "interface.test-mojom-test-utils.h"


namespace golden {
const char IFace::Name_[] = "golden.IFace";

IFace::IPCStableHashFunction IFace::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (static_cast<messages::IFace>(message.name())) {
    case messages::IFace::kMethod: {
      return &IFace::Method_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* IFace::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (static_cast<messages::IFace>(message.name())) {
      case messages::IFace::kMethod:
            return "Receive golden::IFace::Method";
    }
  } else {
    switch (static_cast<messages::IFace>(message.name())) {
      case messages::IFace::kMethod:
            return "Receive reply golden::IFace::Method";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t IFace::Method_Sym::IPCStableHash() {
  // This method's address is used for identifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  static constexpr uint32_t kHash = 0x8f16d37f;  // IPCStableHash for golden::IFace::Method
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class IFace_Method_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IFace_Method_ForwardToCallback(
      IFace::MethodCallback callback
      ) : callback_(std::move(callback)) {
  }

  IFace_Method_ForwardToCallback(const IFace_Method_ForwardToCallback&) = delete;
  IFace_Method_ForwardToCallback& operator=(const IFace_Method_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  IFace::MethodCallback callback_;
};

IFaceProxy::IFaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void IFaceProxy::Method(
    bool in_param, MethodCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send golden::IFace::Method", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("param"), in_param,
                        "<value of type bool>");
   });
#endif

  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  const bool is_urgent = false;

  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt) |
      ((is_urgent) ? mojo::Message::kFlagIsUrgent : 0);

  const size_t estimated_payload_size =
    0;
  mojo::Message message(
      base::to_underlying(messages::IFace::kMethod), kFlags, estimated_payload_size);
  mojo::internal::MessageFragment<
      ::golden::internal::IFace_Method_Params_Data> params(
          message);
  params.Allocate();

  params->param = in_param;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IFace::Name_);
  message.set_method_name("Method");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IFace_Method_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class IFace_Method_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static IFace::MethodCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<IFace_Method_ProxyToResponder> proxy(
        new IFace_Method_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&IFace_Method_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IFace_Method_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      // Instantiate a ScopedFizzleBlockShutdownTasks to allow this request to
      // fizzle if this happens after shutdown and the endpoint is bound to a
      // BLOCK_SHUTDOWN sequence.
      base::ThreadPoolInstance::ScopedFizzleBlockShutdownTasks fizzler;
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  IFace_Method_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IFace::MethodCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_result);
};

bool IFace_Method_ForwardToCallback::Accept(
    mojo::Message* message) {
  DCHECK(message->is_serialized());
  internal::IFace_Method_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IFace_Method_ResponseParams_Data*>(
              message->mutable_payload());
  

  // Validation for IFace.0
  bool success = true;
  std::string p_result{};
  IFace_Method_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IFace::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null()) {
    std::move(callback_).Run(
std::move(p_result));
  }
  return true;
}

void IFace_Method_ProxyToResponder::Run(
    const std::string& in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply golden::IFace::Method", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type const std::string&>");
   });
#endif

  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt) |
      ((false) ? mojo::Message::kFlagIsUrgent : 0);

  const size_t estimated_payload_size =
    0;
  mojo::Message message(
      base::to_underlying(messages::IFace::kMethod), kFlags, estimated_payload_size);
  mojo::internal::MessageFragment<
      ::golden::internal::IFace_Method_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->result)::BaseType> result_fragment(
          params.message());
  
  mojo::internal::Serialize<mojo::StringDataView>(
    in_result,
    result_fragment);

  params->result.Set(
      result_fragment.is_null() ? nullptr : result_fragment.data());

  
  MOJO_INTERNAL_CHECK_SERIALIZATION(
    mojo::internal::SendValidation::kDefault,
    !(params->result.is_null()),
    mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
    "null result in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IFace::Name_);
  message.set_method_name("Method");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool IFaceStubDispatch::Accept(
    IFace* impl,
    mojo::Message* message) {
  switch (static_cast<messages::IFace>(message->header()->name)) {
    case messages::IFace::kMethod: {
      break;
    }
  }
  return false;
}

// static
bool IFaceStubDispatch::AcceptWithResponder(
    IFace* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (static_cast<messages::IFace>(message->header()->name)) {
    case messages::IFace::kMethod: {
      internal::IFace_Method_Params_Data* params =
          reinterpret_cast<
              internal::IFace_Method_Params_Data*>(
                  message->mutable_payload());
      

      // Validation for IFace.0
      bool success = true;
      bool p_param{};
      IFace_Method_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_param = input_data_view.param();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IFace::Name_, 0, false);
        return false;
      }
      auto callback =
          IFace_Method_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Method(        
        std::move(p_param), std::move(callback));
      return true;
    }
  }
  return false;
}
namespace {
}  // namespace
static const mojo::internal::GenericValidationInfo kIFaceValidationInfo[] = {
    { &internal::IFace_Method_Params_Data::Validate,
     &internal::IFace_Method_ResponseParams_Data::Validate},
};

bool IFaceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::golden::IFace::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kIFaceValidationInfo);
}

bool IFaceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::golden::IFace::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kIFaceValidationInfo);
}


}  // golden


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace golden {


void IFaceInterceptorForTesting::Method(bool param, MethodCallback callback) {
  GetForwardingInterface()->Method(
    std::move(param)
    , std::move(callback));
}
IFaceAsyncWaiter::IFaceAsyncWaiter(
    IFace* proxy) : proxy_(proxy) {}

IFaceAsyncWaiter::~IFaceAsyncWaiter() = default;


void IFaceAsyncWaiter::Method(
    bool param, std::string* out_result) {
  base::RunLoop loop;
  proxy_->Method(
      std::move(param),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_result
,
             const std::string& result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}

std::string IFaceAsyncWaiter::Method(
    bool param) {
  std::string async_wait_result;
  Method(std::move(param),&async_wait_result);
  return async_wait_result;
}






}  // golden


#if defined(__clang__)
#pragma clang diagnostic pop
#endif