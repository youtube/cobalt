// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_ENTERPRISE_CLIENT_CERTIFICATES_CORE_PRIVATE_KEY_H_
#define COMPONENTS_ENTERPRISE_CLIENT_CERTIFICATES_CORE_PRIVATE_KEY_H_

#include <optional>
#include <vector>

#include "base/containers/span.h"
#include "base/memory/ref_counted.h"
#include "base/memory/scoped_refptr.h"
#include "components/enterprise/client_certificates/core/private_key_types.h"
#include "components/enterprise/client_certificates/proto/client_certificates_database.pb.h"
#include "crypto/signature_verifier.h"

namespace net {
class SSLPrivateKey;
}  // namespace net

namespace client_certificates {

// Interface representing objects owning references to private keys loaded into
// memory.
class PrivateKey : public base::RefCountedThreadSafe<PrivateKey> {
 public:
  // Returns a signature generated by the private key over `data`. Returns
  // `std::nullopt` if no signature could be generated.
  virtual std::optional<std::vector<uint8_t>> SignSlowly(
      base::span<const uint8_t> data) const = 0;

  // Returns the public key bytes in SPKI format.
  virtual std::vector<uint8_t> GetSubjectPublicKeyInfo() const = 0;

  // Returns the algorithm of the asymmetric key pair.
  virtual crypto::SignatureVerifier::SignatureAlgorithm GetAlgorithm()
      const = 0;

  // Returns a proto representation of the current private key which can be
  // serialized and loaded again through the PrivateKeyFactory.
  virtual client_certificates_pb::PrivateKey ToProto() const = 0;

  // Returns the source from where the private key was created.
  PrivateKeySource GetSource() const;

  // Returns a version of this private key which can be used in TLS protocols.
  // May be nullptr if not supported.
  scoped_refptr<net::SSLPrivateKey> GetSSLPrivateKey();

 protected:
  PrivateKey(PrivateKeySource source,
             scoped_refptr<net::SSLPrivateKey> ssl_private_key);

  virtual ~PrivateKey();

  PrivateKeySource source_;

  scoped_refptr<net::SSLPrivateKey> ssl_private_key_;

 private:
  friend class base::RefCountedThreadSafe<PrivateKey>;
};

}  // namespace client_certificates

#endif  // COMPONENTS_ENTERPRISE_CLIENT_CERTIFICATES_CORE_PRIVATE_KEY_H_
