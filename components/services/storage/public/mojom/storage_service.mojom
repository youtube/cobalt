// Copyright 2019 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module storage.mojom;

import "components/services/storage/public/mojom/partition.mojom";
import "mojo/public/mojom/base/file_path.mojom";
import "sandbox/policy/mojom/sandbox.mojom";

[EnableIf=is_not_android]
import "components/services/storage/public/mojom/filesystem/directory.mojom";

[EnableIf=is_linux_or_chromeos]
const sandbox.mojom.Sandbox kStorageSandbox = sandbox.mojom.Sandbox.kUtility;
[EnableIfNot=is_linux_or_chromeos]
const sandbox.mojom.Sandbox kStorageSandbox = sandbox.mojom.Sandbox.kService;

// The main interface into the Storage Service. The browser maintains a single
// global connection to this interface.
[ServiceSandbox=kStorageSandbox]
interface StorageService {
  // Enables more aggressive flushing of DOM Storage data to disk in order to
  // minimize chance of data loss.
  EnableAggressiveDomStorageFlushing();

  // Must be called early after launching the service (before binding any
  // Partitions) if the service has been launched in a sandboxed environment.
  // Failing to call this will result in the service attempting to perform
  // direct filesystem operations that may be prohibited by the sandbox
  // environment.
  //
  // |path| indicates the absolute filesystem path to which |directory| is
  // scoped.
  //
  // Once called, the service will use begin using |directory| for all
  // privileged filesystem operations.
  [EnableIf=is_not_android]
  SetDataDirectory(mojo_base.mojom.FilePath path,
                   pending_remote<Directory> directory);

  // Binds a new Partition endpoint.
  //
  // |path| if non-null must be an absolute path, and it identifies a persistent
  // filesystem directory controlled by the partition. Persistent partitions
  // support arbitrarily many simultaneous clients.
  //
  // If |path| is null, the bound partition exists only in-memory and is
  // uniquely owned by a single client. Disconnecting the Partition client
  // effectively destroys the partition and its contents.
  BindPartition(mojo_base.mojom.FilePath? path,
                pending_receiver<Partition> receiver);

  // Binds a receiving endpoint for the TestApi interface defined in
  // test_api.mojom. Note that this message is not strongly typed in order to
  // avoid production dependencies on test interface definitions.
  BindTestApi(handle<message_pipe> test_api_receiver);
};
