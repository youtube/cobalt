# Copyright 2022 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#     THIS FILE IS AUTO-GENERATED. DO NOT EDIT.
#
#     See //third_party/xnnpack/generate_build_gn.py
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

import("//build/config/android/config.gni")

config("xnnpack_config") {
  include_dirs = [
    "//third_party/pthreadpool/src/include",
    "src/deps/clog/include",
    "src/include",
    "src/src",
    "src",
  ]

  cflags = [
    "-Wno-unused-function",
    "-Wno-deprecated-comma-subscript",
  ]

  defines = [
    "CHROMIUM",

    # Don't enable this without first talking to Chrome Security!
    # XNNPACK runs in the browser process. The hardening and fuzzing needed
    # to ensure JIT can be used safely is not in place yet.
    "XNN_ENABLE_JIT=0",

    "XNN_ENABLE_ASSEMBLY=1",
    "XNN_ENABLE_GEMM_M_SPECIALIZATION=1",
    "XNN_ENABLE_MEMOPT=1",
    "XNN_ENABLE_CPUINFO=1",
    "XNN_ENABLE_SPARSE=1",
    "XNN_LOG_LEVEL=0",
    "XNN_LOG_TO_STDIO=0",
  ]

  if (current_cpu == "arm64") {
    defines += [
      "XNN_ENABLE_ARM_DOTPROD=1",
      "XNN_ENABLE_ARM_I8MM=1",
    ]
  }

  if (current_cpu == "x86" || current_cpu == "x64") {
    defines += [ "XNN_ENABLE_AVXVNNI=1" ]
  }
}

if (current_cpu == "x64" || current_cpu == "x86") {
  xnnpack_deps = [
    ":configs_x64",
    ":enums_x64",
    ":f16-avgpool_f16c-no-avx2-no-fma",
    ":f16-dwconv_f16c-fma-no-avx2",
    ":f16-f32-vcvt_avx-no-avx2-no-f16c-no-fma",
    ":f16-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":f16-f32-vcvt_f16c-no-avx2-no-fma",
    ":f16-f32-vcvt_sse2-no-sse3",
    ":f16-f32-vcvt_sse4.1-no-sse4.2",
    ":f16-f32-vcvt_x64",
    ":f16-f32acc-gemm_f16c-fma-avx2",
    ":f16-f32acc-igemm_f16c-fma-avx2",
    ":f16-f32acc-rdsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":f16-f32acc-rdsum_f16c-no-avx2-no-fma",
    ":f16-f32acc-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":f16-f32acc-rsum_f16c-no-avx2-no-fma",
    ":f16-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16",
    ":f16-ibilinear_f16c-fma-no-avx2",
    ":f16-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16",
    ":f16-maxpool_f16c-no-avx2-no-fma",
    ":f16-pavgpool_f16c-fma-avx2",
    ":f16-qs8-vcvt_x64",
    ":f16-raddstoreexpminusmax_f16c-fma-avx2",
    ":f16-rminmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":f16-rminmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16",
    ":f16-rminmax_f16c-no-avx2-no-fma",
    ":f16-rminmax_x64",
    ":f16-vbinary_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16",
    ":f16-vbinary_f16c-no-avx2-no-fma",
    ":f16-vclamp_f16c-no-avx2-no-fma",
    ":f16-velu_f16c-fma-avx2",
    ":f16-vhswish_f16c-no-avx2-no-fma",
    ":f16-vlrelu_f16c-no-avx2-no-fma",
    ":f16-vmulcaddc_f16c-fma-no-avx2",
    ":f16-vrnd_f16c-no-avx2-no-fma",
    ":f16-vrsqrt_f16c-no-avx2-no-fma",
    ":f16-vsigmoid_f16c-fma-avx2",
    ":f16-vsqrt_f16c-no-avx2-no-fma",
    ":f16-vtanh_f16c-fma-no-avx2",
    ":f16-vtanh_f16c-no-avx2-no-fma",
    ":f16-vunary_f16c-no-avx2-no-fma",
    ":f16-vunary_sse2-no-sse3",
    ":f32-argmaxpool_sse2-no-sse3",
    ":f32-argmaxpool_x64",
    ":f32-avgpool_sse-no-sse2",
    ":f32-avgpool_x64",
    ":f32-conv-hwc2chw_sse-no-sse2",
    ":f32-conv-hwc2chw_x64",
    ":f32-dwconv2d-chw_sse-no-sse2",
    ":f32-dwconv2d-chw_ssse3-no-sse4.1",
    ":f32-dwconv2d-chw_x64",
    ":f32-dwconv_avx-no-avx2-no-f16c-no-fma",
    ":f32-dwconv_avx512f",
    ":f32-dwconv_f16c-fma-no-avx2",
    ":f32-dwconv_sse-no-sse2",
    ":f32-dwconv_x64",
    ":f32-f16-vcvt_avx-no-avx2-no-f16c-no-fma",
    ":f32-f16-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":f32-f16-vcvt_f16c-no-avx2-no-fma",
    ":f32-f16-vcvt_sse2-no-sse3",
    ":f32-f16-vcvt_sse4.1-no-sse4.2",
    ":f32-f16-vcvt_x64",
    ":f32-gemm_avx-no-avx2-no-f16c-no-fma",
    ":f32-gemm_avx512f",
    ":f32-gemm_f16c-fma-no-avx2",
    ":f32-gemm_sse-no-sse2",
    ":f32-gemm_x64",
    ":f32-ibilinear-chw_sse-no-sse2",
    ":f32-ibilinear-chw_x64",
    ":f32-ibilinear_sse-no-sse2",
    ":f32-ibilinear_x64",
    ":f32-igemm_avx-no-avx2-no-f16c-no-fma",
    ":f32-igemm_avx512f",
    ":f32-igemm_f16c-fma-no-avx2",
    ":f32-igemm_sse-no-sse2",
    ":f32-igemm_x64",
    ":f32-maxpool_sse-no-sse2",
    ":f32-maxpool_x64",
    ":f32-pavgpool_sse-no-sse2",
    ":f32-pavgpool_x64",
    ":f32-qc4w-gemm_avx-no-avx2-no-f16c-no-fma",
    ":f32-qc4w-gemm_f16c-fma-avx2",
    ":f32-qc4w-gemm_f16c-fma-no-avx2",
    ":f32-qc4w-gemm_sse4.1-no-sse4.2",
    ":f32-qc4w-gemm_x64",
    ":f32-qc8w-gemm_avx-no-avx2-no-f16c-no-fma",
    ":f32-qc8w-gemm_f16c-fma-avx2",
    ":f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":f32-qc8w-gemm_f16c-fma-no-avx2",
    ":f32-qc8w-gemm_sse4.1-no-sse4.2",
    ":f32-qc8w-gemm_x64",
    ":f32-qs8-vcvt_avx-no-avx2-no-f16c-no-fma",
    ":f32-qs8-vcvt_f16c-fma-avx2",
    ":f32-qs8-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":f32-qs8-vcvt_sse2-no-sse3",
    ":f32-qs8-vcvt_sse4.1-no-sse4.2",
    ":f32-qs8-vcvt_x64",
    ":f32-qu8-vcvt_avx-no-avx2-no-f16c-no-fma",
    ":f32-qu8-vcvt_f16c-fma-avx2",
    ":f32-qu8-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":f32-qu8-vcvt_sse2-no-sse3",
    ":f32-qu8-vcvt_x64",
    ":f32-raddstoreexpminusmax_avx512f",
    ":f32-raddstoreexpminusmax_f16c-fma-avx2",
    ":f32-raddstoreexpminusmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":f32-raddstoreexpminusmax_sse2-no-sse3",
    ":f32-raddstoreexpminusmax_x64",
    ":f32-rdsum_avx-no-avx2-no-f16c-no-fma",
    ":f32-rdsum_avx512f",
    ":f32-rdsum_sse-no-sse2",
    ":f32-rdsum_x64",
    ":f32-rminmax_avx-no-avx2-no-f16c-no-fma",
    ":f32-rminmax_avx512f",
    ":f32-rminmax_sse-no-sse2",
    ":f32-rminmax_x64",
    ":f32-rsum_avx-no-avx2-no-f16c-no-fma",
    ":f32-rsum_avx512f",
    ":f32-rsum_sse-no-sse2",
    ":f32-rsum_x64",
    ":f32-spmm_sse-no-sse2",
    ":f32-spmm_x64",
    ":f32-vbinary_avx-no-avx2-no-f16c-no-fma",
    ":f32-vbinary_avx512f",
    ":f32-vbinary_sse-no-sse2",
    ":f32-vbinary_sse2-no-sse3",
    ":f32-vbinary_x64",
    ":f32-vclamp_avx-no-avx2-no-f16c-no-fma",
    ":f32-vclamp_avx512f",
    ":f32-vclamp_sse-no-sse2",
    ":f32-vclamp_x64",
    ":f32-vcmul_avx512f",
    ":f32-vcmul_f16c-fma-no-avx2",
    ":f32-vcmul_sse-no-sse2",
    ":f32-vcmul_x64",
    ":f32-vcopysign_avx-no-avx2-no-f16c-no-fma",
    ":f32-vcopysign_avx512f",
    ":f32-vcopysign_sse2-no-sse3",
    ":f32-vcopysign_x64",
    ":f32-velu_avx-no-avx2-no-f16c-no-fma",
    ":f32-velu_avx512f",
    ":f32-velu_f16c-fma-avx2",
    ":f32-velu_sse2-no-sse3",
    ":f32-velu_x64",
    ":f32-vexp_x64",
    ":f32-vgelu_avx-no-avx2-no-f16c-no-fma",
    ":f32-vgelu_avx512f",
    ":f32-vgelu_f16c-fma-no-avx2",
    ":f32-vgelu_sse2-no-sse3",
    ":f32-vgelu_x64",
    ":f32-vhswish_avx-no-avx2-no-f16c-no-fma",
    ":f32-vhswish_avx512f",
    ":f32-vhswish_f16c-fma-no-avx2",
    ":f32-vhswish_sse-no-sse2",
    ":f32-vhswish_x64",
    ":f32-vlog_avx512f",
    ":f32-vlog_f16c-fma-avx2",
    ":f32-vlog_f16c-fma-no-avx2",
    ":f32-vlog_sse2-no-sse3",
    ":f32-vlog_x64",
    ":f32-vlrelu_avx-no-avx2-no-f16c-no-fma",
    ":f32-vlrelu_avx512f",
    ":f32-vlrelu_sse-no-sse2",
    ":f32-vlrelu_sse4.1-no-sse4.2",
    ":f32-vlrelu_x64",
    ":f32-vmulcaddc_sse-no-sse2",
    ":f32-vmulcaddc_x64",
    ":f32-vrelu_x64",
    ":f32-vrnd_avx-no-avx2-no-f16c-no-fma",
    ":f32-vrnd_avx512f",
    ":f32-vrnd_sse2-no-sse3",
    ":f32-vrnd_sse4.1-no-sse4.2",
    ":f32-vrnd_x64",
    ":f32-vrsqrt_avx-no-avx2-no-f16c-no-fma",
    ":f32-vrsqrt_avx512f",
    ":f32-vrsqrt_f16c-fma-no-avx2",
    ":f32-vrsqrt_sse-no-sse2",
    ":f32-vrsqrt_x64",
    ":f32-vsigmoid_avx-no-avx2-no-f16c-no-fma",
    ":f32-vsigmoid_avx512f",
    ":f32-vsigmoid_f16c-fma-avx2",
    ":f32-vsigmoid_sse2-no-sse3",
    ":f32-vsigmoid_sse4.1-no-sse4.2",
    ":f32-vsigmoid_x64",
    ":f32-vsqrt_avx-no-avx2-no-f16c-no-fma",
    ":f32-vsqrt_avx512f",
    ":f32-vsqrt_f16c-fma-no-avx2",
    ":f32-vsqrt_sse-no-sse2",
    ":f32-vsqrt_x64",
    ":f32-vtanh_avx-no-avx2-no-f16c-no-fma",
    ":f32-vtanh_avx512f",
    ":f32-vtanh_f16c-fma-no-avx2",
    ":f32-vtanh_sse2-no-sse3",
    ":f32-vtanh_x64",
    ":f32-vunary_avx-no-avx2-no-f16c-no-fma",
    ":f32-vunary_avx512f",
    ":f32-vunary_sse2-no-sse3",
    ":f32-vunary_x64",
    ":operators_x64",
    ":qd8-f16-qb4w-gemm_f16c-fma-avx2",
    ":qd8-f16-qc4w-gemm_avx2-avxvnni-f16c-fma",
    ":qd8-f16-qc4w-gemm_f16c-fma-avx2",
    ":qd8-f16-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qd8-f16-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qd8-f16-qc8w-gemm_avx2-avxvnni-f16c-fma",
    ":qd8-f16-qc8w-gemm_f16c-fma-avx2",
    ":qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8",
    ":qd8-f16-qc8w-igemm_avx2-avxvnni-f16c-fma",
    ":qd8-f16-qc8w-igemm_f16c-fma-avx2",
    ":qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8",
    ":qd8-f32-qb4w-gemm_avx-no-avx2-no-f16c-no-fma",
    ":qd8-f32-qb4w-gemm_f16c-fma-avx2",
    ":qd8-f32-qb4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qd8-f32-qb4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni",
    ":qd8-f32-qb4w-gemm_sse2-no-sse3",
    ":qd8-f32-qb4w-gemm_sse4.1-no-sse4.2",
    ":qd8-f32-qb4w-gemm_x64",
    ":qd8-f32-qc4w-gemm_avx2-avxvnni-f16c-fma",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx2",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8",
    ":qd8-f32-qc4w-gemm_sse2-no-sse3",
    ":qd8-f32-qc4w-gemm_ssse3-no-sse4.1",
    ":qd8-f32-qc4w-gemm_x64",
    ":qd8-f32-qc8w-gemm_avx2-avxvnni-f16c-fma",
    ":qd8-f32-qc8w-gemm_f16c-fma-avx2",
    ":qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8",
    ":qd8-f32-qc8w-gemm_sse2-no-sse3",
    ":qd8-f32-qc8w-gemm_sse4.1-no-sse4.2",
    ":qd8-f32-qc8w-gemm_x64",
    ":qd8-f32-qc8w-igemm_avx2-avxvnni-f16c-fma",
    ":qd8-f32-qc8w-igemm_f16c-fma-avx2",
    ":qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8",
    ":qd8-f32-qc8w-igemm_sse2-no-sse3",
    ":qd8-f32-qc8w-igemm_sse4.1-no-sse4.2",
    ":qd8-f32-qc8w-igemm_x64",
    ":qs16-qs8-vcvt_avx-no-avx2-no-f16c-no-fma",
    ":qs16-qs8-vcvt_sse2-no-sse3",
    ":qs16-qs8-vcvt_sse4.1-no-sse4.2",
    ":qs16-qs8-vcvt_ssse3-no-sse4.1",
    ":qs16-qs8-vcvt_x64",
    ":qs8-dwconv_avx-no-avx2-no-f16c-no-fma",
    ":qs8-dwconv_f16c-fma-avx2",
    ":qs8-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qs8-dwconv_sse2-no-sse3",
    ":qs8-dwconv_sse4.1-no-sse4.2",
    ":qs8-dwconv_x64",
    ":qs8-f16-vcvt_f16c-fma-avx2",
    ":qs8-f32-vcvt_avx-no-avx2-no-f16c-no-fma",
    ":qs8-f32-vcvt_f16c-fma-avx2",
    ":qs8-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qs8-f32-vcvt_sse2-no-sse3",
    ":qs8-f32-vcvt_sse4.1-no-sse4.2",
    ":qs8-f32-vcvt_x64",
    ":qs8-packw_avx2-avxvnni-f16c-fma",
    ":qs8-packw_x64",
    ":qs8-qc8w-dwconv_avx-no-avx2-no-f16c-no-fma",
    ":qs8-qc8w-dwconv_f16c-fma-avx2",
    ":qs8-qc8w-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qs8-qc8w-dwconv_sse2-no-sse3",
    ":qs8-qc8w-dwconv_sse4.1-no-sse4.2",
    ":qs8-qc8w-dwconv_x64",
    ":qs8-qc8w-gemm_avx-no-avx2-no-f16c-no-fma",
    ":qs8-qc8w-gemm_avx2-avxvnni-f16c-fma",
    ":qs8-qc8w-gemm_avx2-avxvnniint8-f16c-fma",
    ":qs8-qc8w-gemm_f16c-fma-avx2",
    ":qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8",
    ":qs8-qc8w-gemm_sse2-no-sse3",
    ":qs8-qc8w-gemm_sse4.1-no-sse4.2",
    ":qs8-qc8w-gemm_x64",
    ":qs8-qc8w-igemm_avx-no-avx2-no-f16c-no-fma",
    ":qs8-qc8w-igemm_avx2-avxvnni-f16c-fma",
    ":qs8-qc8w-igemm_avx2-avxvnniint8-f16c-fma",
    ":qs8-qc8w-igemm_f16c-fma-avx2",
    ":qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8",
    ":qs8-qc8w-igemm_sse2-no-sse3",
    ":qs8-qc8w-igemm_sse4.1-no-sse4.2",
    ":qs8-qc8w-igemm_x64",
    ":qs8-qu8-packw_avx2-avxvnni-f16c-fma",
    ":qs8-qu8-packw_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qs8-rdsum_f16c-fma-avx2",
    ":qs8-rdsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qs8-rdsum_sse4.1-no-sse4.2",
    ":qs8-rdsum_x64",
    ":qs8-rsum_avx2-avxvnni-f16c-fma",
    ":qs8-rsum_f16c-fma-avx2",
    ":qs8-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qs8-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni",
    ":qs8-rsum_ssse3-no-sse4.1",
    ":qs8-rsum_x64",
    ":qs8-vadd_avx-no-avx2-no-f16c-no-fma",
    ":qs8-vadd_f16c-fma-avx2",
    ":qs8-vadd_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qs8-vadd_sse2-no-sse3",
    ":qs8-vadd_sse4.1-no-sse4.2",
    ":qs8-vadd_x64",
    ":qs8-vaddc_avx-no-avx2-no-f16c-no-fma",
    ":qs8-vaddc_f16c-fma-avx2",
    ":qs8-vaddc_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qs8-vaddc_sse2-no-sse3",
    ":qs8-vaddc_sse4.1-no-sse4.2",
    ":qs8-vaddc_x64",
    ":qs8-vcvt_avx-no-avx2-no-f16c-no-fma",
    ":qs8-vcvt_f16c-fma-avx2",
    ":qs8-vcvt_sse2-no-sse3",
    ":qs8-vcvt_sse4.1-no-sse4.2",
    ":qs8-vcvt_ssse3-no-sse4.1",
    ":qs8-vcvt_x64",
    ":qs8-vlrelu_avx-no-avx2-no-f16c-no-fma",
    ":qs8-vlrelu_f16c-fma-avx2",
    ":qs8-vlrelu_sse2-no-sse3",
    ":qs8-vlrelu_sse4.1-no-sse4.2",
    ":qs8-vlrelu_ssse3-no-sse4.1",
    ":qs8-vlrelu_x64",
    ":qs8-vmul_avx-no-avx2-no-f16c-no-fma",
    ":qs8-vmul_sse2-no-sse3",
    ":qs8-vmul_sse4.1-no-sse4.2",
    ":qs8-vmul_x64",
    ":qs8-vmulc_avx-no-avx2-no-f16c-no-fma",
    ":qs8-vmulc_sse2-no-sse3",
    ":qs8-vmulc_sse4.1-no-sse4.2",
    ":qs8-vmulc_x64",
    ":qu8-avgpool_sse2-no-sse3",
    ":qu8-avgpool_x64",
    ":qu8-dwconv_avx-no-avx2-no-f16c-no-fma",
    ":qu8-dwconv_f16c-fma-avx2",
    ":qu8-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qu8-dwconv_sse2-no-sse3",
    ":qu8-dwconv_sse4.1-no-sse4.2",
    ":qu8-dwconv_x64",
    ":qu8-f32-vcvt_avx-no-avx2-no-f16c-no-fma",
    ":qu8-f32-vcvt_f16c-fma-avx2",
    ":qu8-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qu8-f32-vcvt_sse2-no-sse3",
    ":qu8-f32-vcvt_sse4.1-no-sse4.2",
    ":qu8-f32-vcvt_x64",
    ":qu8-gemm_avx-no-avx2-no-f16c-no-fma",
    ":qu8-gemm_f16c-fma-avx2",
    ":qu8-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qu8-gemm_sse2-no-sse3",
    ":qu8-gemm_sse4.1-no-sse4.2",
    ":qu8-gemm_x64",
    ":qu8-igemm_avx-no-avx2-no-f16c-no-fma",
    ":qu8-igemm_f16c-fma-avx2",
    ":qu8-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qu8-igemm_sse2-no-sse3",
    ":qu8-igemm_sse4.1-no-sse4.2",
    ":qu8-igemm_x64",
    ":qu8-rdsum_ssse3-no-sse4.1",
    ":qu8-rdsum_x64",
    ":qu8-rsum_f16c-fma-avx2",
    ":qu8-rsum_sse2-no-sse3",
    ":qu8-rsum_x64",
    ":qu8-vadd_avx-no-avx2-no-f16c-no-fma",
    ":qu8-vadd_f16c-fma-avx2",
    ":qu8-vadd_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qu8-vadd_sse2-no-sse3",
    ":qu8-vadd_sse4.1-no-sse4.2",
    ":qu8-vadd_x64",
    ":qu8-vaddc_avx-no-avx2-no-f16c-no-fma",
    ":qu8-vaddc_f16c-fma-avx2",
    ":qu8-vaddc_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":qu8-vaddc_sse2-no-sse3",
    ":qu8-vaddc_sse4.1-no-sse4.2",
    ":qu8-vaddc_x64",
    ":qu8-vcvt_avx-no-avx2-no-f16c-no-fma",
    ":qu8-vcvt_f16c-fma-avx2",
    ":qu8-vcvt_sse2-no-sse3",
    ":qu8-vcvt_sse4.1-no-sse4.2",
    ":qu8-vcvt_ssse3-no-sse4.1",
    ":qu8-vcvt_x64",
    ":qu8-vlrelu_avx-no-avx2-no-f16c-no-fma",
    ":qu8-vlrelu_f16c-fma-avx2",
    ":qu8-vlrelu_sse2-no-sse3",
    ":qu8-vlrelu_sse4.1-no-sse4.2",
    ":qu8-vlrelu_ssse3-no-sse4.1",
    ":qu8-vlrelu_x64",
    ":qu8-vmul_avx-no-avx2-no-f16c-no-fma",
    ":qu8-vmul_sse2-no-sse3",
    ":qu8-vmul_sse4.1-no-sse4.2",
    ":qu8-vmul_x64",
    ":qu8-vmulc_avx-no-avx2-no-f16c-no-fma",
    ":qu8-vmulc_sse2-no-sse3",
    ":qu8-vmulc_sse4.1-no-sse4.2",
    ":qu8-vmulc_x64",
    ":s32-f32-vcvt_avx512f",
    ":s32-f32-vcvt_f16c-fma-avx2",
    ":s32-f32-vcvt_x64",
    ":s32-vmul_avx512f",
    ":s32-vmul_f16c-fma-avx2",
    ":s32-vmul_sse4.1-no-sse4.2",
    ":s32-vmul_x64",
    ":s8-ibilinear_sse2-no-sse3",
    ":s8-ibilinear_sse4.1-no-sse4.2",
    ":s8-ibilinear_x64",
    ":s8-maxpool_sse2-no-sse3",
    ":s8-maxpool_sse4.1-no-sse4.2",
    ":s8-maxpool_x64",
    ":s8-vclamp_f16c-fma-avx2",
    ":s8-vclamp_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":s8-vclamp_sse2-no-sse3",
    ":s8-vclamp_sse4.1-no-sse4.2",
    ":s8-vclamp_x64",
    ":subgraph_x64",
    ":tables_x64",
    ":u32-f32-vcvt_avx512f",
    ":u32-f32-vcvt_f16c-fma-avx2",
    ":u32-f32-vcvt_x64",
    ":u8-ibilinear_sse2-no-sse3",
    ":u8-ibilinear_sse4.1-no-sse4.2",
    ":u8-ibilinear_x64",
    ":u8-lut32norm_x64",
    ":u8-maxpool_sse2-no-sse3",
    ":u8-maxpool_x64",
    ":u8-rmax_sse2-no-sse3",
    ":u8-rmax_x64",
    ":u8-vclamp_f16c-fma-avx2",
    ":u8-vclamp_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":u8-vclamp_sse2-no-sse3",
    ":u8-vclamp_x64",
    ":x16-packw_f16c-fma-avx2",
    ":x16-packw_x64",
    ":x16-transposec_f16c-fma-avx2",
    ":x16-transposec_sse2-no-sse3",
    ":x16-transposec_x64",
    ":x24-transposec_ssse3-no-sse4.1",
    ":x24-transposec_x64",
    ":x32-packw_avx-no-avx2-no-f16c-no-fma",
    ":x32-packw_avx512f",
    ":x32-packw_sse2-no-sse3",
    ":x32-packw_x64",
    ":x32-transposec_avx-no-avx2-no-f16c-no-fma",
    ":x32-transposec_sse-no-sse2",
    ":x32-transposec_x64",
    ":x32-unpool_sse2-no-sse3",
    ":x32-unpool_x64",
    ":x32-zip_sse2-no-sse3",
    ":x32-zip_x64",
    ":x64-transposec_avx-no-avx2-no-f16c-no-fma",
    ":x64-transposec_sse2-no-sse3",
    ":x64-transposec_x64",
    ":x8-lut_avx-no-avx2-no-f16c-no-fma",
    ":x8-lut_f16c-fma-avx2",
    ":x8-lut_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl",
    ":x8-lut_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vbmi",
    ":x8-lut_x64",
    ":x8-packq_x64",
    ":x8-packw_x64",
    ":x8-transposec_f16c-fma-avx2",
    ":x8-transposec_sse2-no-sse3",
    ":x8-transposec_x64",
    ":x8-zip_sse2-no-sse3",
    ":x8-zip_x64",
    ":xx-copy_x64",
    ":xx-fill_sse2-no-sse3",
    ":xx-fill_x64",
    ":xx-pad_sse2-no-sse3",
    ":xx-pad_x64",
    ":xx-transposev_x64",
  ]

  xnnpack_standalone_deps = [
    ":configs_x64_standalone",
    ":enums_x64_standalone",
    ":f16-avgpool_f16c-no-avx2-no-fma_standalone",
    ":f16-dwconv_f16c-fma-no-avx2_standalone",
    ":f16-f32-vcvt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f16-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":f16-f32-vcvt_f16c-no-avx2-no-fma_standalone",
    ":f16-f32-vcvt_sse2-no-sse3_standalone",
    ":f16-f32-vcvt_sse4.1-no-sse4.2_standalone",
    ":f16-f32-vcvt_x64_standalone",
    ":f16-f32acc-gemm_f16c-fma-avx2_standalone",
    ":f16-f32acc-igemm_f16c-fma-avx2_standalone",
    ":f16-f32acc-rdsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":f16-f32acc-rdsum_f16c-no-avx2-no-fma_standalone",
    ":f16-f32acc-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":f16-f32acc-rsum_f16c-no-avx2-no-fma_standalone",
    ":f16-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16_standalone",
    ":f16-ibilinear_f16c-fma-no-avx2_standalone",
    ":f16-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16_standalone",
    ":f16-maxpool_f16c-no-avx2-no-fma_standalone",
    ":f16-pavgpool_f16c-fma-avx2_standalone",
    ":f16-qs8-vcvt_x64_standalone",
    ":f16-raddstoreexpminusmax_f16c-fma-avx2_standalone",
    ":f16-rminmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16_standalone",
    ":f16-rminmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":f16-rminmax_f16c-no-avx2-no-fma_standalone",
    ":f16-rminmax_x64_standalone",
    ":f16-vbinary_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16_standalone",
    ":f16-vbinary_f16c-no-avx2-no-fma_standalone",
    ":f16-vclamp_f16c-no-avx2-no-fma_standalone",
    ":f16-velu_f16c-fma-avx2_standalone",
    ":f16-vhswish_f16c-no-avx2-no-fma_standalone",
    ":f16-vlrelu_f16c-no-avx2-no-fma_standalone",
    ":f16-vmulcaddc_f16c-fma-no-avx2_standalone",
    ":f16-vrnd_f16c-no-avx2-no-fma_standalone",
    ":f16-vrsqrt_f16c-no-avx2-no-fma_standalone",
    ":f16-vsigmoid_f16c-fma-avx2_standalone",
    ":f16-vsqrt_f16c-no-avx2-no-fma_standalone",
    ":f16-vtanh_f16c-fma-no-avx2_standalone",
    ":f16-vtanh_f16c-no-avx2-no-fma_standalone",
    ":f16-vunary_f16c-no-avx2-no-fma_standalone",
    ":f16-vunary_sse2-no-sse3_standalone",
    ":f32-argmaxpool_sse2-no-sse3_standalone",
    ":f32-argmaxpool_x64_standalone",
    ":f32-avgpool_sse-no-sse2_standalone",
    ":f32-avgpool_x64_standalone",
    ":f32-conv-hwc2chw_sse-no-sse2_standalone",
    ":f32-conv-hwc2chw_x64_standalone",
    ":f32-dwconv2d-chw_sse-no-sse2_standalone",
    ":f32-dwconv2d-chw_ssse3-no-sse4.1_standalone",
    ":f32-dwconv2d-chw_x64_standalone",
    ":f32-dwconv_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-dwconv_avx512f_standalone",
    ":f32-dwconv_f16c-fma-no-avx2_standalone",
    ":f32-dwconv_sse-no-sse2_standalone",
    ":f32-dwconv_x64_standalone",
    ":f32-f16-vcvt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-f16-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":f32-f16-vcvt_f16c-no-avx2-no-fma_standalone",
    ":f32-f16-vcvt_sse2-no-sse3_standalone",
    ":f32-f16-vcvt_sse4.1-no-sse4.2_standalone",
    ":f32-f16-vcvt_x64_standalone",
    ":f32-gemm_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-gemm_avx512f_standalone",
    ":f32-gemm_f16c-fma-no-avx2_standalone",
    ":f32-gemm_sse-no-sse2_standalone",
    ":f32-gemm_x64_standalone",
    ":f32-ibilinear-chw_sse-no-sse2_standalone",
    ":f32-ibilinear-chw_x64_standalone",
    ":f32-ibilinear_sse-no-sse2_standalone",
    ":f32-ibilinear_x64_standalone",
    ":f32-igemm_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-igemm_avx512f_standalone",
    ":f32-igemm_f16c-fma-no-avx2_standalone",
    ":f32-igemm_sse-no-sse2_standalone",
    ":f32-igemm_x64_standalone",
    ":f32-maxpool_sse-no-sse2_standalone",
    ":f32-maxpool_x64_standalone",
    ":f32-pavgpool_sse-no-sse2_standalone",
    ":f32-pavgpool_x64_standalone",
    ":f32-qc4w-gemm_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-qc4w-gemm_f16c-fma-avx2_standalone",
    ":f32-qc4w-gemm_f16c-fma-no-avx2_standalone",
    ":f32-qc4w-gemm_sse4.1-no-sse4.2_standalone",
    ":f32-qc4w-gemm_x64_standalone",
    ":f32-qc8w-gemm_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-qc8w-gemm_f16c-fma-avx2_standalone",
    ":f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":f32-qc8w-gemm_f16c-fma-no-avx2_standalone",
    ":f32-qc8w-gemm_sse4.1-no-sse4.2_standalone",
    ":f32-qc8w-gemm_x64_standalone",
    ":f32-qs8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-qs8-vcvt_f16c-fma-avx2_standalone",
    ":f32-qs8-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":f32-qs8-vcvt_sse2-no-sse3_standalone",
    ":f32-qs8-vcvt_sse4.1-no-sse4.2_standalone",
    ":f32-qs8-vcvt_x64_standalone",
    ":f32-qu8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-qu8-vcvt_f16c-fma-avx2_standalone",
    ":f32-qu8-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":f32-qu8-vcvt_sse2-no-sse3_standalone",
    ":f32-qu8-vcvt_x64_standalone",
    ":f32-raddstoreexpminusmax_avx512f_standalone",
    ":f32-raddstoreexpminusmax_f16c-fma-avx2_standalone",
    ":f32-raddstoreexpminusmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":f32-raddstoreexpminusmax_sse2-no-sse3_standalone",
    ":f32-raddstoreexpminusmax_x64_standalone",
    ":f32-rdsum_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-rdsum_avx512f_standalone",
    ":f32-rdsum_sse-no-sse2_standalone",
    ":f32-rdsum_x64_standalone",
    ":f32-rminmax_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-rminmax_avx512f_standalone",
    ":f32-rminmax_sse-no-sse2_standalone",
    ":f32-rminmax_x64_standalone",
    ":f32-rsum_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-rsum_avx512f_standalone",
    ":f32-rsum_sse-no-sse2_standalone",
    ":f32-rsum_x64_standalone",
    ":f32-spmm_sse-no-sse2_standalone",
    ":f32-spmm_x64_standalone",
    ":f32-vbinary_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vbinary_avx512f_standalone",
    ":f32-vbinary_sse-no-sse2_standalone",
    ":f32-vbinary_sse2-no-sse3_standalone",
    ":f32-vbinary_x64_standalone",
    ":f32-vclamp_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vclamp_avx512f_standalone",
    ":f32-vclamp_sse-no-sse2_standalone",
    ":f32-vclamp_x64_standalone",
    ":f32-vcmul_avx512f_standalone",
    ":f32-vcmul_f16c-fma-no-avx2_standalone",
    ":f32-vcmul_sse-no-sse2_standalone",
    ":f32-vcmul_x64_standalone",
    ":f32-vcopysign_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vcopysign_avx512f_standalone",
    ":f32-vcopysign_sse2-no-sse3_standalone",
    ":f32-vcopysign_x64_standalone",
    ":f32-velu_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-velu_avx512f_standalone",
    ":f32-velu_f16c-fma-avx2_standalone",
    ":f32-velu_sse2-no-sse3_standalone",
    ":f32-velu_x64_standalone",
    ":f32-vexp_x64_standalone",
    ":f32-vgelu_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vgelu_avx512f_standalone",
    ":f32-vgelu_f16c-fma-no-avx2_standalone",
    ":f32-vgelu_sse2-no-sse3_standalone",
    ":f32-vgelu_x64_standalone",
    ":f32-vhswish_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vhswish_avx512f_standalone",
    ":f32-vhswish_f16c-fma-no-avx2_standalone",
    ":f32-vhswish_sse-no-sse2_standalone",
    ":f32-vhswish_x64_standalone",
    ":f32-vlog_avx512f_standalone",
    ":f32-vlog_f16c-fma-avx2_standalone",
    ":f32-vlog_f16c-fma-no-avx2_standalone",
    ":f32-vlog_sse2-no-sse3_standalone",
    ":f32-vlog_x64_standalone",
    ":f32-vlrelu_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vlrelu_avx512f_standalone",
    ":f32-vlrelu_sse-no-sse2_standalone",
    ":f32-vlrelu_sse4.1-no-sse4.2_standalone",
    ":f32-vlrelu_x64_standalone",
    ":f32-vmulcaddc_sse-no-sse2_standalone",
    ":f32-vmulcaddc_x64_standalone",
    ":f32-vrelu_x64_standalone",
    ":f32-vrnd_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vrnd_avx512f_standalone",
    ":f32-vrnd_sse2-no-sse3_standalone",
    ":f32-vrnd_sse4.1-no-sse4.2_standalone",
    ":f32-vrnd_x64_standalone",
    ":f32-vrsqrt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vrsqrt_avx512f_standalone",
    ":f32-vrsqrt_f16c-fma-no-avx2_standalone",
    ":f32-vrsqrt_sse-no-sse2_standalone",
    ":f32-vrsqrt_x64_standalone",
    ":f32-vsigmoid_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vsigmoid_avx512f_standalone",
    ":f32-vsigmoid_f16c-fma-avx2_standalone",
    ":f32-vsigmoid_sse2-no-sse3_standalone",
    ":f32-vsigmoid_sse4.1-no-sse4.2_standalone",
    ":f32-vsigmoid_x64_standalone",
    ":f32-vsqrt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vsqrt_avx512f_standalone",
    ":f32-vsqrt_f16c-fma-no-avx2_standalone",
    ":f32-vsqrt_sse-no-sse2_standalone",
    ":f32-vsqrt_x64_standalone",
    ":f32-vtanh_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vtanh_avx512f_standalone",
    ":f32-vtanh_f16c-fma-no-avx2_standalone",
    ":f32-vtanh_sse2-no-sse3_standalone",
    ":f32-vtanh_x64_standalone",
    ":f32-vunary_avx-no-avx2-no-f16c-no-fma_standalone",
    ":f32-vunary_avx512f_standalone",
    ":f32-vunary_sse2-no-sse3_standalone",
    ":f32-vunary_x64_standalone",
    ":operators_x64_standalone",
    ":qd8-f16-qb4w-gemm_f16c-fma-avx2_standalone",
    ":qd8-f16-qc4w-gemm_avx2-avxvnni-f16c-fma_standalone",
    ":qd8-f16-qc4w-gemm_f16c-fma-avx2_standalone",
    ":qd8-f16-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qd8-f16-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qd8-f16-qc8w-gemm_avx2-avxvnni-f16c-fma_standalone",
    ":qd8-f16-qc8w-gemm_f16c-fma-avx2_standalone",
    ":qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone",
    ":qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qd8-f16-qc8w-igemm_avx2-avxvnni-f16c-fma_standalone",
    ":qd8-f16-qc8w-igemm_f16c-fma-avx2_standalone",
    ":qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone",
    ":qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qd8-f32-qb4w-gemm_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qd8-f32-qb4w-gemm_f16c-fma-avx2_standalone",
    ":qd8-f32-qb4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni_standalone",
    ":qd8-f32-qb4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qd8-f32-qb4w-gemm_sse2-no-sse3_standalone",
    ":qd8-f32-qb4w-gemm_sse4.1-no-sse4.2_standalone",
    ":qd8-f32-qb4w-gemm_x64_standalone",
    ":qd8-f32-qc4w-gemm_avx2-avxvnni-f16c-fma_standalone",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx2_standalone",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni_standalone",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qd8-f32-qc4w-gemm_sse2-no-sse3_standalone",
    ":qd8-f32-qc4w-gemm_ssse3-no-sse4.1_standalone",
    ":qd8-f32-qc4w-gemm_x64_standalone",
    ":qd8-f32-qc8w-gemm_avx2-avxvnni-f16c-fma_standalone",
    ":qd8-f32-qc8w-gemm_f16c-fma-avx2_standalone",
    ":qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone",
    ":qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qd8-f32-qc8w-gemm_sse2-no-sse3_standalone",
    ":qd8-f32-qc8w-gemm_sse4.1-no-sse4.2_standalone",
    ":qd8-f32-qc8w-gemm_x64_standalone",
    ":qd8-f32-qc8w-igemm_avx2-avxvnni-f16c-fma_standalone",
    ":qd8-f32-qc8w-igemm_f16c-fma-avx2_standalone",
    ":qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone",
    ":qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qd8-f32-qc8w-igemm_sse2-no-sse3_standalone",
    ":qd8-f32-qc8w-igemm_sse4.1-no-sse4.2_standalone",
    ":qd8-f32-qc8w-igemm_x64_standalone",
    ":qs16-qs8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs16-qs8-vcvt_sse2-no-sse3_standalone",
    ":qs16-qs8-vcvt_sse4.1-no-sse4.2_standalone",
    ":qs16-qs8-vcvt_ssse3-no-sse4.1_standalone",
    ":qs16-qs8-vcvt_x64_standalone",
    ":qs8-dwconv_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-dwconv_f16c-fma-avx2_standalone",
    ":qs8-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qs8-dwconv_sse2-no-sse3_standalone",
    ":qs8-dwconv_sse4.1-no-sse4.2_standalone",
    ":qs8-dwconv_x64_standalone",
    ":qs8-f16-vcvt_f16c-fma-avx2_standalone",
    ":qs8-f32-vcvt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-f32-vcvt_f16c-fma-avx2_standalone",
    ":qs8-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qs8-f32-vcvt_sse2-no-sse3_standalone",
    ":qs8-f32-vcvt_sse4.1-no-sse4.2_standalone",
    ":qs8-f32-vcvt_x64_standalone",
    ":qs8-packw_avx2-avxvnni-f16c-fma_standalone",
    ":qs8-packw_x64_standalone",
    ":qs8-qc8w-dwconv_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-qc8w-dwconv_f16c-fma-avx2_standalone",
    ":qs8-qc8w-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qs8-qc8w-dwconv_sse2-no-sse3_standalone",
    ":qs8-qc8w-dwconv_sse4.1-no-sse4.2_standalone",
    ":qs8-qc8w-dwconv_x64_standalone",
    ":qs8-qc8w-gemm_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-qc8w-gemm_avx2-avxvnni-f16c-fma_standalone",
    ":qs8-qc8w-gemm_avx2-avxvnniint8-f16c-fma_standalone",
    ":qs8-qc8w-gemm_f16c-fma-avx2_standalone",
    ":qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone",
    ":qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qs8-qc8w-gemm_sse2-no-sse3_standalone",
    ":qs8-qc8w-gemm_sse4.1-no-sse4.2_standalone",
    ":qs8-qc8w-gemm_x64_standalone",
    ":qs8-qc8w-igemm_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-qc8w-igemm_avx2-avxvnni-f16c-fma_standalone",
    ":qs8-qc8w-igemm_avx2-avxvnniint8-f16c-fma_standalone",
    ":qs8-qc8w-igemm_f16c-fma-avx2_standalone",
    ":qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone",
    ":qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qs8-qc8w-igemm_sse2-no-sse3_standalone",
    ":qs8-qc8w-igemm_sse4.1-no-sse4.2_standalone",
    ":qs8-qc8w-igemm_x64_standalone",
    ":qs8-qu8-packw_avx2-avxvnni-f16c-fma_standalone",
    ":qs8-qu8-packw_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qs8-rdsum_f16c-fma-avx2_standalone",
    ":qs8-rdsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qs8-rdsum_sse4.1-no-sse4.2_standalone",
    ":qs8-rdsum_x64_standalone",
    ":qs8-rsum_avx2-avxvnni-f16c-fma_standalone",
    ":qs8-rsum_f16c-fma-avx2_standalone",
    ":qs8-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone",
    ":qs8-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qs8-rsum_ssse3-no-sse4.1_standalone",
    ":qs8-rsum_x64_standalone",
    ":qs8-vadd_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-vadd_f16c-fma-avx2_standalone",
    ":qs8-vadd_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qs8-vadd_sse2-no-sse3_standalone",
    ":qs8-vadd_sse4.1-no-sse4.2_standalone",
    ":qs8-vadd_x64_standalone",
    ":qs8-vaddc_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-vaddc_f16c-fma-avx2_standalone",
    ":qs8-vaddc_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qs8-vaddc_sse2-no-sse3_standalone",
    ":qs8-vaddc_sse4.1-no-sse4.2_standalone",
    ":qs8-vaddc_x64_standalone",
    ":qs8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-vcvt_f16c-fma-avx2_standalone",
    ":qs8-vcvt_sse2-no-sse3_standalone",
    ":qs8-vcvt_sse4.1-no-sse4.2_standalone",
    ":qs8-vcvt_ssse3-no-sse4.1_standalone",
    ":qs8-vcvt_x64_standalone",
    ":qs8-vlrelu_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-vlrelu_f16c-fma-avx2_standalone",
    ":qs8-vlrelu_sse2-no-sse3_standalone",
    ":qs8-vlrelu_sse4.1-no-sse4.2_standalone",
    ":qs8-vlrelu_ssse3-no-sse4.1_standalone",
    ":qs8-vlrelu_x64_standalone",
    ":qs8-vmul_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-vmul_sse2-no-sse3_standalone",
    ":qs8-vmul_sse4.1-no-sse4.2_standalone",
    ":qs8-vmul_x64_standalone",
    ":qs8-vmulc_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qs8-vmulc_sse2-no-sse3_standalone",
    ":qs8-vmulc_sse4.1-no-sse4.2_standalone",
    ":qs8-vmulc_x64_standalone",
    ":qu8-avgpool_sse2-no-sse3_standalone",
    ":qu8-avgpool_x64_standalone",
    ":qu8-dwconv_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-dwconv_f16c-fma-avx2_standalone",
    ":qu8-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qu8-dwconv_sse2-no-sse3_standalone",
    ":qu8-dwconv_sse4.1-no-sse4.2_standalone",
    ":qu8-dwconv_x64_standalone",
    ":qu8-f32-vcvt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-f32-vcvt_f16c-fma-avx2_standalone",
    ":qu8-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qu8-f32-vcvt_sse2-no-sse3_standalone",
    ":qu8-f32-vcvt_sse4.1-no-sse4.2_standalone",
    ":qu8-f32-vcvt_x64_standalone",
    ":qu8-gemm_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-gemm_f16c-fma-avx2_standalone",
    ":qu8-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qu8-gemm_sse2-no-sse3_standalone",
    ":qu8-gemm_sse4.1-no-sse4.2_standalone",
    ":qu8-gemm_x64_standalone",
    ":qu8-igemm_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-igemm_f16c-fma-avx2_standalone",
    ":qu8-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qu8-igemm_sse2-no-sse3_standalone",
    ":qu8-igemm_sse4.1-no-sse4.2_standalone",
    ":qu8-igemm_x64_standalone",
    ":qu8-rdsum_ssse3-no-sse4.1_standalone",
    ":qu8-rdsum_x64_standalone",
    ":qu8-rsum_f16c-fma-avx2_standalone",
    ":qu8-rsum_sse2-no-sse3_standalone",
    ":qu8-rsum_x64_standalone",
    ":qu8-vadd_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-vadd_f16c-fma-avx2_standalone",
    ":qu8-vadd_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qu8-vadd_sse2-no-sse3_standalone",
    ":qu8-vadd_sse4.1-no-sse4.2_standalone",
    ":qu8-vadd_x64_standalone",
    ":qu8-vaddc_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-vaddc_f16c-fma-avx2_standalone",
    ":qu8-vaddc_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":qu8-vaddc_sse2-no-sse3_standalone",
    ":qu8-vaddc_sse4.1-no-sse4.2_standalone",
    ":qu8-vaddc_x64_standalone",
    ":qu8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-vcvt_f16c-fma-avx2_standalone",
    ":qu8-vcvt_sse2-no-sse3_standalone",
    ":qu8-vcvt_sse4.1-no-sse4.2_standalone",
    ":qu8-vcvt_ssse3-no-sse4.1_standalone",
    ":qu8-vcvt_x64_standalone",
    ":qu8-vlrelu_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-vlrelu_f16c-fma-avx2_standalone",
    ":qu8-vlrelu_sse2-no-sse3_standalone",
    ":qu8-vlrelu_sse4.1-no-sse4.2_standalone",
    ":qu8-vlrelu_ssse3-no-sse4.1_standalone",
    ":qu8-vlrelu_x64_standalone",
    ":qu8-vmul_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-vmul_sse2-no-sse3_standalone",
    ":qu8-vmul_sse4.1-no-sse4.2_standalone",
    ":qu8-vmul_x64_standalone",
    ":qu8-vmulc_avx-no-avx2-no-f16c-no-fma_standalone",
    ":qu8-vmulc_sse2-no-sse3_standalone",
    ":qu8-vmulc_sse4.1-no-sse4.2_standalone",
    ":qu8-vmulc_x64_standalone",
    ":s32-f32-vcvt_avx512f_standalone",
    ":s32-f32-vcvt_f16c-fma-avx2_standalone",
    ":s32-f32-vcvt_x64_standalone",
    ":s32-vmul_avx512f_standalone",
    ":s32-vmul_f16c-fma-avx2_standalone",
    ":s32-vmul_sse4.1-no-sse4.2_standalone",
    ":s32-vmul_x64_standalone",
    ":s8-ibilinear_sse2-no-sse3_standalone",
    ":s8-ibilinear_sse4.1-no-sse4.2_standalone",
    ":s8-ibilinear_x64_standalone",
    ":s8-maxpool_sse2-no-sse3_standalone",
    ":s8-maxpool_sse4.1-no-sse4.2_standalone",
    ":s8-maxpool_x64_standalone",
    ":s8-vclamp_f16c-fma-avx2_standalone",
    ":s8-vclamp_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":s8-vclamp_sse2-no-sse3_standalone",
    ":s8-vclamp_sse4.1-no-sse4.2_standalone",
    ":s8-vclamp_x64_standalone",
    ":subgraph_x64_standalone",
    ":tables_x64_standalone",
    ":u32-f32-vcvt_avx512f_standalone",
    ":u32-f32-vcvt_f16c-fma-avx2_standalone",
    ":u32-f32-vcvt_x64_standalone",
    ":u8-ibilinear_sse2-no-sse3_standalone",
    ":u8-ibilinear_sse4.1-no-sse4.2_standalone",
    ":u8-ibilinear_x64_standalone",
    ":u8-lut32norm_x64_standalone",
    ":u8-maxpool_sse2-no-sse3_standalone",
    ":u8-maxpool_x64_standalone",
    ":u8-rmax_sse2-no-sse3_standalone",
    ":u8-rmax_x64_standalone",
    ":u8-vclamp_f16c-fma-avx2_standalone",
    ":u8-vclamp_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":u8-vclamp_sse2-no-sse3_standalone",
    ":u8-vclamp_x64_standalone",
    ":x16-packw_f16c-fma-avx2_standalone",
    ":x16-packw_x64_standalone",
    ":x16-transposec_f16c-fma-avx2_standalone",
    ":x16-transposec_sse2-no-sse3_standalone",
    ":x16-transposec_x64_standalone",
    ":x24-transposec_ssse3-no-sse4.1_standalone",
    ":x24-transposec_x64_standalone",
    ":x32-packw_avx-no-avx2-no-f16c-no-fma_standalone",
    ":x32-packw_avx512f_standalone",
    ":x32-packw_sse2-no-sse3_standalone",
    ":x32-packw_x64_standalone",
    ":x32-transposec_avx-no-avx2-no-f16c-no-fma_standalone",
    ":x32-transposec_sse-no-sse2_standalone",
    ":x32-transposec_x64_standalone",
    ":x32-unpool_sse2-no-sse3_standalone",
    ":x32-unpool_x64_standalone",
    ":x32-zip_sse2-no-sse3_standalone",
    ":x32-zip_x64_standalone",
    ":x64-transposec_avx-no-avx2-no-f16c-no-fma_standalone",
    ":x64-transposec_sse2-no-sse3_standalone",
    ":x64-transposec_x64_standalone",
    ":x8-lut_avx-no-avx2-no-f16c-no-fma_standalone",
    ":x8-lut_f16c-fma-avx2_standalone",
    ":x8-lut_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vbmi_standalone",
    ":x8-lut_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone",
    ":x8-lut_x64_standalone",
    ":x8-packq_x64_standalone",
    ":x8-packw_x64_standalone",
    ":x8-transposec_f16c-fma-avx2_standalone",
    ":x8-transposec_sse2-no-sse3_standalone",
    ":x8-transposec_x64_standalone",
    ":x8-zip_sse2-no-sse3_standalone",
    ":x8-zip_x64_standalone",
    ":xx-copy_x64_standalone",
    ":xx-fill_sse2-no-sse3_standalone",
    ":xx-fill_x64_standalone",
    ":xx-pad_sse2-no-sse3_standalone",
    ":xx-pad_x64_standalone",
    ":xx-transposev_x64_standalone",
  ]
} else if (current_cpu == "arm64") {
  xnnpack_deps = [
    ":configs_arm64",
    ":enums_arm64",
    ":f16-avgpool_arch=armv8.2-a+fp16",
    ":f16-conv-hwc2chw_arch=armv8.2-a+fp16",
    ":f16-dwconv2d-chw_arch=armv8.2-a+fp16",
    ":f16-dwconv_arch=armv8.2-a+fp16",
    ":f16-f32-vcvt_arm64",
    ":f16-f32acc-rdsum_arch=armv8.2-a+fp16",
    ":f16-f32acc-rsum_arch=armv8.2-a+fp16",
    ":f16-gemm_arch=armv8.2-a+fp16",
    ":f16-gemm_arch=armv8.2-a+fp16+dotprod",
    ":f16-ibilinear-chw_arch=armv8.2-a+fp16",
    ":f16-ibilinear_arch=armv8.2-a+fp16",
    ":f16-igemm_arch=armv8.2-a+fp16",
    ":f16-igemm_arch=armv8.2-a+fp16+dotprod",
    ":f16-maxpool_arch=armv8.2-a+fp16",
    ":f16-pavgpool_arch=armv8.2-a+fp16",
    ":f16-qs8-vcvt_arch=armv8.2-a+fp16",
    ":f16-qs8-vcvt_arm64",
    ":f16-raddstoreexpminusmax_arch=armv8.2-a+fp16",
    ":f16-rminmax_arch=armv8.2-a+fp16",
    ":f16-rminmax_arm64",
    ":f16-spmm_arch=armv8.2-a+fp16",
    ":f16-vbinary_arch=armv8.2-a+fp16",
    ":f16-vclamp_arch=armv8.2-a+fp16",
    ":f16-vcmul_arch=armv8.2-a+fp16",
    ":f16-velu_arch=armv8.2-a+fp16",
    ":f16-vhswish_arch=armv8.2-a+fp16",
    ":f16-vlrelu_arch=armv8.2-a+fp16",
    ":f16-vmulcaddc_arch=armv8.2-a+fp16",
    ":f16-vrnd_arch=armv8.2-a+fp16",
    ":f16-vrsqrt_arch=armv8.2-a+fp16",
    ":f16-vsigmoid_arch=armv8.2-a+fp16",
    ":f16-vsqrt_arch=armv8.2-a+fp16",
    ":f16-vtanh_arch=armv8.2-a+fp16",
    ":f16-vunary_arch=armv8.2-a+fp16",
    ":f32-argmaxpool_arm64",
    ":f32-avgpool_arm64",
    ":f32-conv-hwc2chw_arm64",
    ":f32-dwconv2d-chw_arm64",
    ":f32-dwconv_arch=armv8.2-a+fp16+dotprod",
    ":f32-dwconv_arm64",
    ":f32-f16-vcvt_arm64",
    ":f32-gemm_arch=armv8.2-a+fp16+dotprod",
    ":f32-gemm_arm64",
    ":f32-ibilinear-chw_arm64",
    ":f32-ibilinear_arm64",
    ":f32-igemm_arch=armv8.2-a+fp16+dotprod",
    ":f32-igemm_arm64",
    ":f32-maxpool_arm64",
    ":f32-pavgpool_arm64",
    ":f32-qc4w-gemm_arm64",
    ":f32-qc8w-gemm_arch=armv8.2-a+fp16+dotprod",
    ":f32-qc8w-gemm_arm64",
    ":f32-qs8-vcvt_arm64",
    ":f32-qu8-vcvt_arm64",
    ":f32-raddstoreexpminusmax_arm64",
    ":f32-rdsum_arm64",
    ":f32-rminmax_arm64",
    ":f32-rsum_arm64",
    ":f32-spmm_arm64",
    ":f32-vbinary_arm64",
    ":f32-vclamp_arm64",
    ":f32-vcmul_arm64",
    ":f32-vcopysign_arm64",
    ":f32-velu_arm64",
    ":f32-vexp_arm64",
    ":f32-vgelu_arm64",
    ":f32-vhswish_arm64",
    ":f32-vlog_arm64",
    ":f32-vlrelu_arm64",
    ":f32-vmulcaddc_arm64",
    ":f32-vrelu_arm64",
    ":f32-vrnd_arm64",
    ":f32-vrsqrt_arm64",
    ":f32-vsigmoid_arm64",
    ":f32-vsqrt_arm64",
    ":f32-vtanh_arm64",
    ":f32-vunary_arm64",
    ":operators_arm64",
    ":qd8-f16-qb4w-gemm_arch=armv8.2-a+dotprod+fp16",
    ":qd8-f16-qb4w-gemm_arch=armv8.2-a+fp16",
    ":qd8-f16-qb4w-gemm_arch=armv8.2-a+i8mm+fp16",
    ":qd8-f16-qc4w-gemm_arch=armv8.2-a+dotprod+fp16",
    ":qd8-f16-qc4w-gemm_arch=armv8.2-a+fp16",
    ":qd8-f16-qc4w-gemm_arch=armv8.2-a+i8mm+fp16",
    ":qd8-f16-qc8w-gemm_arch=armv8.2-a+dotprod+fp16",
    ":qd8-f16-qc8w-gemm_arch=armv8.2-a+fp16",
    ":qd8-f16-qc8w-gemm_arch=armv8.2-a+fp16+dotprod",
    ":qd8-f16-qc8w-gemm_arch=armv8.2-a+i8mm+fp16",
    ":qd8-f16-qc8w-igemm_arch=armv8.2-a+dotprod+fp16",
    ":qd8-f16-qc8w-igemm_arch=armv8.2-a+fp16",
    ":qd8-f16-qc8w-igemm_arch=armv8.2-a+fp16+dotprod",
    ":qd8-f16-qc8w-igemm_arch=armv8.2-a+i8mm+fp16",
    ":qd8-f32-qb4w-gemm_arch=armv8.2-a+dotprod",
    ":qd8-f32-qb4w-gemm_arch=armv8.2-a+i8mm+fp16",
    ":qd8-f32-qb4w-gemm_arm64",
    ":qd8-f32-qc4w-gemm_arch=armv8.2-a+dotprod",
    ":qd8-f32-qc4w-gemm_arch=armv8.2-a+i8mm+fp16",
    ":qd8-f32-qc4w-gemm_arm64",
    ":qd8-f32-qc8w-gemm_arch=armv8.2-a+dotprod",
    ":qd8-f32-qc8w-gemm_arch=armv8.2-a+fp16+dotprod",
    ":qd8-f32-qc8w-gemm_arch=armv8.2-a+i8mm+fp16",
    ":qd8-f32-qc8w-gemm_arm64",
    ":qd8-f32-qc8w-igemm_arch=armv8.2-a+dotprod",
    ":qd8-f32-qc8w-igemm_arch=armv8.2-a+fp16+dotprod",
    ":qd8-f32-qc8w-igemm_arch=armv8.2-a+i8mm+fp16",
    ":qd8-f32-qc8w-igemm_arm64",
    ":qp8-f32-qb4w-gemm_arch=armv8.2-a+dotprod",
    ":qp8-f32-qb4w-gemm_arch=armv8.2-a+i8mm+fp16",
    ":qp8-f32-qc4w-gemm_arch=armv8.2-a+dotprod",
    ":qp8-f32-qc4w-gemm_arch=armv8.2-a+i8mm+fp16",
    ":qs16-qs8-vcvt_arm64",
    ":qs8-dwconv_arm64",
    ":qs8-f16-vcvt_arch=armv8.2-a+fp16",
    ":qs8-f32-vcvt_arm64",
    ":qs8-packw_arm64",
    ":qs8-qc8w-dwconv_arm64",
    ":qs8-qc8w-gemm_arch=armv8.2-a+dotprod",
    ":qs8-qc8w-gemm_arch=armv8.2-a+fp16+dotprod",
    ":qs8-qc8w-gemm_arch=armv8.2-a+i8mm+fp16",
    ":qs8-qc8w-gemm_arm64",
    ":qs8-qc8w-igemm_arch=armv8.2-a+dotprod",
    ":qs8-qc8w-igemm_arch=armv8.2-a+fp16+dotprod",
    ":qs8-qc8w-igemm_arch=armv8.2-a+i8mm+fp16",
    ":qs8-qc8w-igemm_arm64",
    ":qs8-rdsum_arm64",
    ":qs8-rsum_arch=armv8.2-a+dotprod",
    ":qs8-rsum_arm64",
    ":qs8-vadd_arm64",
    ":qs8-vaddc_arm64",
    ":qs8-vcvt_arm64",
    ":qs8-vlrelu_arm64",
    ":qs8-vmul_arm64",
    ":qs8-vmulc_arm64",
    ":qu8-avgpool_arm64",
    ":qu8-dwconv_arm64",
    ":qu8-f32-vcvt_arm64",
    ":qu8-gemm_arch=armv8.2-a+fp16+dotprod",
    ":qu8-gemm_arm64",
    ":qu8-igemm_arch=armv8.2-a+fp16+dotprod",
    ":qu8-igemm_arm64",
    ":qu8-rdsum_arm64",
    ":qu8-rsum_arm64",
    ":qu8-vadd_arm64",
    ":qu8-vaddc_arm64",
    ":qu8-vcvt_arm64",
    ":qu8-vlrelu_arm64",
    ":qu8-vmul_arm64",
    ":qu8-vmulc_arm64",
    ":s32-f32-vcvt_arm64",
    ":s32-vmul_arm64",
    ":s8-ibilinear_arm64",
    ":s8-maxpool_arm64",
    ":s8-vclamp_arm64",
    ":subgraph_arm64",
    ":tables_arm64",
    ":u32-f32-vcvt_arm64",
    ":u8-ibilinear_arm64",
    ":u8-lut32norm_arm64",
    ":u8-maxpool_arm64",
    ":u8-rmax_arm64",
    ":u8-vclamp_arm64",
    ":x16-packw_arm64",
    ":x16-transposec_arm64",
    ":x24-transposec_arm64",
    ":x32-packw_arm64",
    ":x32-transposec_arm64",
    ":x32-unpool_arm64",
    ":x32-zip_arm64",
    ":x64-transposec_arm64",
    ":x8-lut_arm64",
    ":x8-packq_arm64",
    ":x8-packw_arm64",
    ":x8-transposec_arm64",
    ":x8-zip_arm64",
    ":xx-copy_arm64",
    ":xx-fill_arm64",
    ":xx-pad_arm64",
    ":xx-transposev_arm64",
  ]

  xnnpack_standalone_deps = [
    ":configs_arm64_standalone",
    ":enums_arm64_standalone",
    ":f16-avgpool_arch=armv8.2-a+fp16_standalone",
    ":f16-conv-hwc2chw_arch=armv8.2-a+fp16_standalone",
    ":f16-dwconv2d-chw_arch=armv8.2-a+fp16_standalone",
    ":f16-dwconv_arch=armv8.2-a+fp16_standalone",
    ":f16-f32-vcvt_arm64_standalone",
    ":f16-f32acc-rdsum_arch=armv8.2-a+fp16_standalone",
    ":f16-f32acc-rsum_arch=armv8.2-a+fp16_standalone",
    ":f16-gemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":f16-gemm_arch=armv8.2-a+fp16_standalone",
    ":f16-ibilinear-chw_arch=armv8.2-a+fp16_standalone",
    ":f16-ibilinear_arch=armv8.2-a+fp16_standalone",
    ":f16-igemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":f16-igemm_arch=armv8.2-a+fp16_standalone",
    ":f16-maxpool_arch=armv8.2-a+fp16_standalone",
    ":f16-pavgpool_arch=armv8.2-a+fp16_standalone",
    ":f16-qs8-vcvt_arch=armv8.2-a+fp16_standalone",
    ":f16-qs8-vcvt_arm64_standalone",
    ":f16-raddstoreexpminusmax_arch=armv8.2-a+fp16_standalone",
    ":f16-rminmax_arch=armv8.2-a+fp16_standalone",
    ":f16-rminmax_arm64_standalone",
    ":f16-spmm_arch=armv8.2-a+fp16_standalone",
    ":f16-vbinary_arch=armv8.2-a+fp16_standalone",
    ":f16-vclamp_arch=armv8.2-a+fp16_standalone",
    ":f16-vcmul_arch=armv8.2-a+fp16_standalone",
    ":f16-velu_arch=armv8.2-a+fp16_standalone",
    ":f16-vhswish_arch=armv8.2-a+fp16_standalone",
    ":f16-vlrelu_arch=armv8.2-a+fp16_standalone",
    ":f16-vmulcaddc_arch=armv8.2-a+fp16_standalone",
    ":f16-vrnd_arch=armv8.2-a+fp16_standalone",
    ":f16-vrsqrt_arch=armv8.2-a+fp16_standalone",
    ":f16-vsigmoid_arch=armv8.2-a+fp16_standalone",
    ":f16-vsqrt_arch=armv8.2-a+fp16_standalone",
    ":f16-vtanh_arch=armv8.2-a+fp16_standalone",
    ":f16-vunary_arch=armv8.2-a+fp16_standalone",
    ":f32-argmaxpool_arm64_standalone",
    ":f32-avgpool_arm64_standalone",
    ":f32-conv-hwc2chw_arm64_standalone",
    ":f32-dwconv2d-chw_arm64_standalone",
    ":f32-dwconv_arch=armv8.2-a+fp16+dotprod_standalone",
    ":f32-dwconv_arm64_standalone",
    ":f32-f16-vcvt_arm64_standalone",
    ":f32-gemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":f32-gemm_arm64_standalone",
    ":f32-ibilinear-chw_arm64_standalone",
    ":f32-ibilinear_arm64_standalone",
    ":f32-igemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":f32-igemm_arm64_standalone",
    ":f32-maxpool_arm64_standalone",
    ":f32-pavgpool_arm64_standalone",
    ":f32-qc4w-gemm_arm64_standalone",
    ":f32-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":f32-qc8w-gemm_arm64_standalone",
    ":f32-qs8-vcvt_arm64_standalone",
    ":f32-qu8-vcvt_arm64_standalone",
    ":f32-raddstoreexpminusmax_arm64_standalone",
    ":f32-rdsum_arm64_standalone",
    ":f32-rminmax_arm64_standalone",
    ":f32-rsum_arm64_standalone",
    ":f32-spmm_arm64_standalone",
    ":f32-vbinary_arm64_standalone",
    ":f32-vclamp_arm64_standalone",
    ":f32-vcmul_arm64_standalone",
    ":f32-vcopysign_arm64_standalone",
    ":f32-velu_arm64_standalone",
    ":f32-vexp_arm64_standalone",
    ":f32-vgelu_arm64_standalone",
    ":f32-vhswish_arm64_standalone",
    ":f32-vlog_arm64_standalone",
    ":f32-vlrelu_arm64_standalone",
    ":f32-vmulcaddc_arm64_standalone",
    ":f32-vrelu_arm64_standalone",
    ":f32-vrnd_arm64_standalone",
    ":f32-vrsqrt_arm64_standalone",
    ":f32-vsigmoid_arm64_standalone",
    ":f32-vsqrt_arm64_standalone",
    ":f32-vtanh_arm64_standalone",
    ":f32-vunary_arm64_standalone",
    ":operators_arm64_standalone",
    ":qd8-f16-qb4w-gemm_arch=armv8.2-a+dotprod+fp16_standalone",
    ":qd8-f16-qb4w-gemm_arch=armv8.2-a+fp16_standalone",
    ":qd8-f16-qb4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qd8-f16-qc4w-gemm_arch=armv8.2-a+dotprod+fp16_standalone",
    ":qd8-f16-qc4w-gemm_arch=armv8.2-a+fp16_standalone",
    ":qd8-f16-qc4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qd8-f16-qc8w-gemm_arch=armv8.2-a+dotprod+fp16_standalone",
    ":qd8-f16-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":qd8-f16-qc8w-gemm_arch=armv8.2-a+fp16_standalone",
    ":qd8-f16-qc8w-gemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qd8-f16-qc8w-igemm_arch=armv8.2-a+dotprod+fp16_standalone",
    ":qd8-f16-qc8w-igemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":qd8-f16-qc8w-igemm_arch=armv8.2-a+fp16_standalone",
    ":qd8-f16-qc8w-igemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qd8-f32-qb4w-gemm_arch=armv8.2-a+dotprod_standalone",
    ":qd8-f32-qb4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qd8-f32-qb4w-gemm_arm64_standalone",
    ":qd8-f32-qc4w-gemm_arch=armv8.2-a+dotprod_standalone",
    ":qd8-f32-qc4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qd8-f32-qc4w-gemm_arm64_standalone",
    ":qd8-f32-qc8w-gemm_arch=armv8.2-a+dotprod_standalone",
    ":qd8-f32-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":qd8-f32-qc8w-gemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qd8-f32-qc8w-gemm_arm64_standalone",
    ":qd8-f32-qc8w-igemm_arch=armv8.2-a+dotprod_standalone",
    ":qd8-f32-qc8w-igemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":qd8-f32-qc8w-igemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qd8-f32-qc8w-igemm_arm64_standalone",
    ":qp8-f32-qb4w-gemm_arch=armv8.2-a+dotprod_standalone",
    ":qp8-f32-qb4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qp8-f32-qc4w-gemm_arch=armv8.2-a+dotprod_standalone",
    ":qp8-f32-qc4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qs16-qs8-vcvt_arm64_standalone",
    ":qs8-dwconv_arm64_standalone",
    ":qs8-f16-vcvt_arch=armv8.2-a+fp16_standalone",
    ":qs8-f32-vcvt_arm64_standalone",
    ":qs8-packw_arm64_standalone",
    ":qs8-qc8w-dwconv_arm64_standalone",
    ":qs8-qc8w-gemm_arch=armv8.2-a+dotprod_standalone",
    ":qs8-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":qs8-qc8w-gemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qs8-qc8w-gemm_arm64_standalone",
    ":qs8-qc8w-igemm_arch=armv8.2-a+dotprod_standalone",
    ":qs8-qc8w-igemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":qs8-qc8w-igemm_arch=armv8.2-a+i8mm+fp16_standalone",
    ":qs8-qc8w-igemm_arm64_standalone",
    ":qs8-rdsum_arm64_standalone",
    ":qs8-rsum_arch=armv8.2-a+dotprod_standalone",
    ":qs8-rsum_arm64_standalone",
    ":qs8-vadd_arm64_standalone",
    ":qs8-vaddc_arm64_standalone",
    ":qs8-vcvt_arm64_standalone",
    ":qs8-vlrelu_arm64_standalone",
    ":qs8-vmul_arm64_standalone",
    ":qs8-vmulc_arm64_standalone",
    ":qu8-avgpool_arm64_standalone",
    ":qu8-dwconv_arm64_standalone",
    ":qu8-f32-vcvt_arm64_standalone",
    ":qu8-gemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":qu8-gemm_arm64_standalone",
    ":qu8-igemm_arch=armv8.2-a+fp16+dotprod_standalone",
    ":qu8-igemm_arm64_standalone",
    ":qu8-rdsum_arm64_standalone",
    ":qu8-rsum_arm64_standalone",
    ":qu8-vadd_arm64_standalone",
    ":qu8-vaddc_arm64_standalone",
    ":qu8-vcvt_arm64_standalone",
    ":qu8-vlrelu_arm64_standalone",
    ":qu8-vmul_arm64_standalone",
    ":qu8-vmulc_arm64_standalone",
    ":s32-f32-vcvt_arm64_standalone",
    ":s32-vmul_arm64_standalone",
    ":s8-ibilinear_arm64_standalone",
    ":s8-maxpool_arm64_standalone",
    ":s8-vclamp_arm64_standalone",
    ":subgraph_arm64_standalone",
    ":tables_arm64_standalone",
    ":u32-f32-vcvt_arm64_standalone",
    ":u8-ibilinear_arm64_standalone",
    ":u8-lut32norm_arm64_standalone",
    ":u8-maxpool_arm64_standalone",
    ":u8-rmax_arm64_standalone",
    ":u8-vclamp_arm64_standalone",
    ":x16-packw_arm64_standalone",
    ":x16-transposec_arm64_standalone",
    ":x24-transposec_arm64_standalone",
    ":x32-packw_arm64_standalone",
    ":x32-transposec_arm64_standalone",
    ":x32-unpool_arm64_standalone",
    ":x32-zip_arm64_standalone",
    ":x64-transposec_arm64_standalone",
    ":x8-lut_arm64_standalone",
    ":x8-packq_arm64_standalone",
    ":x8-packw_arm64_standalone",
    ":x8-transposec_arm64_standalone",
    ":x8-zip_arm64_standalone",
    ":xx-copy_arm64_standalone",
    ":xx-fill_arm64_standalone",
    ":xx-pad_arm64_standalone",
    ":xx-transposev_arm64_standalone",
  ]
} else {
  xnnpack_deps = []
  xnnpack_standalone_deps = []
}

source_set("xnnpack") {
  public = [ "src/include/xnnpack.h" ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
  configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

  sources = [
    "build_identifier.c",
    "src/include/xnnpack.h",
    "src/src/allocator.c",
    "src/src/cache.c",
    "src/src/datatype.c",
    "src/src/indirection.c",
    "src/src/init.c",
    "src/src/log.c",
    "src/src/memory-planner.c",
    "src/src/memory.c",
    "src/src/microkernel-utils.c",
    "src/src/microparams-init.c",
    "src/src/mutex.c",
    "src/src/normalization.c",
    "src/src/operator-delete.c",
    "src/src/operator-run.c",
    "src/src/operator-utils.c",
    "src/src/packing.cc",
    "src/src/params.c",
    "src/src/runtime.c",
    "src/src/subgraph.c",
    "src/src/tensor.c",
  ]

  deps = xnnpack_deps + [
           "//third_party/cpuinfo",
           "//third_party/fp16",
           "//third_party/fxdiv",
           "//third_party/pthreadpool",
         ]

  public_configs = [ ":xnnpack_config" ]
}

# This is a target that cannot depend on //base.
source_set("xnnpack_standalone") {
  public = [ "src/include/xnnpack.h" ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
  configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

  sources = [
    "build_identifier.c",
    "src/include/xnnpack.h",
    "src/src/allocator.c",
    "src/src/cache.c",
    "src/src/datatype.c",
    "src/src/indirection.c",
    "src/src/init.c",
    "src/src/log.c",
    "src/src/memory-planner.c",
    "src/src/memory.c",
    "src/src/microkernel-utils.c",
    "src/src/microparams-init.c",
    "src/src/mutex.c",
    "src/src/normalization.c",
    "src/src/operator-delete.c",
    "src/src/operator-run.c",
    "src/src/operator-utils.c",
    "src/src/packing.cc",
    "src/src/params.c",
    "src/src/runtime.c",
    "src/src/subgraph.c",
    "src/src/tensor.c",
  ]

  deps = xnnpack_standalone_deps + [
           "//third_party/cpuinfo",
           "//third_party/fp16",
           "//third_party/fxdiv",
           "//third_party/pthreadpool:pthreadpool_standalone",
         ]

  public_configs = [ ":xnnpack_config" ]

  if (!(is_android && use_order_profiling)) {
    assert_no_deps = [ "//base" ]
  }
}

if (current_cpu == "x64" || current_cpu == "x86") {
  source_set("configs_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/configs/argmaxpool-config.c",
      "src/src/configs/avgpool-config.c",
      "src/src/configs/binary-elementwise-config.c",
      "src/src/configs/cmul-config.c",
      "src/src/configs/conv-hwc2chw-config.c",
      "src/src/configs/dwconv-config.c",
      "src/src/configs/dwconv2d-chw-config.c",
      "src/src/configs/experiments-config.c",
      "src/src/configs/gemm-config.c",
      "src/src/configs/hardware-config.c",
      "src/src/configs/ibilinear-chw-config.c",
      "src/src/configs/ibilinear-config.c",
      "src/src/configs/lut32norm-config.c",
      "src/src/configs/maxpool-config.c",
      "src/src/configs/pack-lh-config.c",
      "src/src/configs/pavgpool-config.c",
      "src/src/configs/raddstoreexpminusmax-config.c",
      "src/src/configs/reduce-config.c",
      "src/src/configs/rmax-config.c",
      "src/src/configs/spmm-config.c",
      "src/src/configs/transpose-config.c",
      "src/src/configs/unary-elementwise-config.c",
      "src/src/configs/unpool-config.c",
      "src/src/configs/vmulcaddc-config.c",
      "src/src/configs/x8-lut-config.c",
      "src/src/configs/xx-fill-config.c",
      "src/src/configs/xx-pad-config.c",
      "src/src/configs/zip-config.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("configs_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/configs/argmaxpool-config.c",
      "src/src/configs/avgpool-config.c",
      "src/src/configs/binary-elementwise-config.c",
      "src/src/configs/cmul-config.c",
      "src/src/configs/conv-hwc2chw-config.c",
      "src/src/configs/dwconv-config.c",
      "src/src/configs/dwconv2d-chw-config.c",
      "src/src/configs/experiments-config.c",
      "src/src/configs/gemm-config.c",
      "src/src/configs/hardware-config.c",
      "src/src/configs/ibilinear-chw-config.c",
      "src/src/configs/ibilinear-config.c",
      "src/src/configs/lut32norm-config.c",
      "src/src/configs/maxpool-config.c",
      "src/src/configs/pack-lh-config.c",
      "src/src/configs/pavgpool-config.c",
      "src/src/configs/raddstoreexpminusmax-config.c",
      "src/src/configs/reduce-config.c",
      "src/src/configs/rmax-config.c",
      "src/src/configs/spmm-config.c",
      "src/src/configs/transpose-config.c",
      "src/src/configs/unary-elementwise-config.c",
      "src/src/configs/unpool-config.c",
      "src/src/configs/vmulcaddc-config.c",
      "src/src/configs/x8-lut-config.c",
      "src/src/configs/xx-fill-config.c",
      "src/src/configs/xx-pad-config.c",
      "src/src/configs/zip-config.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("enums_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/enums/allocation-type.c",
      "src/src/enums/datatype-strings.c",
      "src/src/enums/microkernel-type.c",
      "src/src/enums/node-type.c",
      "src/src/enums/operator-type.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("enums_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/enums/allocation-type.c",
      "src/src/enums/datatype-strings.c",
      "src/src/enums/microkernel-type.c",
      "src/src/enums/node-type.c",
      "src/src/enums/operator-type.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-avgpool_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-avgpool/f16-avgpool-9p8x-minmax-f16c-c8.c",
      "src/src/f16-avgpool/f16-avgpool-9x-minmax-f16c-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-avgpool_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-avgpool/f16-avgpool-9p8x-minmax-f16c-c8.c",
      "src/src/f16-avgpool/f16-avgpool-9x-minmax-f16c-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-dwconv_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-dwconv/gen/f16-dwconv-25p8c-minmax-fma3-acc2.c",
      "src/src/f16-dwconv/gen/f16-dwconv-3p16c-minmax-fma3.c",
      "src/src/f16-dwconv/gen/f16-dwconv-4p16c-minmax-fma3.c",
      "src/src/f16-dwconv/gen/f16-dwconv-9p16c-minmax-fma3.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-dwconv_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-dwconv/gen/f16-dwconv-25p8c-minmax-fma3-acc2.c",
      "src/src/f16-dwconv/gen/f16-dwconv-3p16c-minmax-fma3.c",
      "src/src/f16-dwconv/gen/f16-dwconv-4p16c-minmax-fma3.c",
      "src/src/f16-dwconv/gen/f16-dwconv-9p16c-minmax-fma3.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32-vcvt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-avx-int16-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32-vcvt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-avx-int16-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f16-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-avx512skx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f16-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-avx512skx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32-vcvt_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32-vcvt_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32-vcvt_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-sse2-int16-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32-vcvt_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-sse2-int16-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32-vcvt_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-sse41-int16-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32-vcvt_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-sse41-int16-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u1.c",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u1.c",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32acc-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-gemm/gen/f16-f32acc-gemm-1x16-minmax-avx2-broadcast.c",
      "src/src/f16-f32acc-gemm/gen/f16-f32acc-gemm-4x16-minmax-avx2-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32acc-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-gemm/gen/f16-f32acc-gemm-1x16-minmax-avx2-broadcast.c",
      "src/src/f16-f32acc-gemm/gen/f16-f32acc-gemm-4x16-minmax-avx2-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32acc-igemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-igemm/gen/f16-f32acc-igemm-1x16-minmax-avx2-broadcast.c",
      "src/src/f16-f32acc-igemm/gen/f16-f32acc-igemm-4x16-minmax-avx2-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32acc-igemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-igemm/gen/f16-f32acc-igemm-1x16-minmax-avx2-broadcast.c",
      "src/src/f16-f32acc-igemm/gen/f16-f32acc-igemm-4x16-minmax-avx2-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f16-f32acc-rdsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rdsum/gen/f16-f32acc-rdsum-7p7x-avx512skx-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f16-f32acc-rdsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rdsum/gen/f16-f32acc-rdsum-7p7x-avx512skx-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32acc-rdsum_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rdsum/gen/f16-f32acc-rdsum-7p7x-f16c-c32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32acc-rdsum_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rdsum/gen/f16-f32acc-rdsum-7p7x-f16c-c32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f16-f32acc-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rsum/gen/f16-f32acc-rsum-avx512skx-u64-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f16-f32acc-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rsum/gen/f16-f32acc-rsum-avx512skx-u64-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32acc-rsum_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rsum/gen/f16-f32acc-rsum-f16c-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32acc-rsum_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rsum/gen/f16-f32acc-rsum-f16c-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f16-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512fp16",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-gemm/gen/f16-gemm-1x64-minmax-avx512fp16-broadcast.c",
      "src/src/f16-gemm/gen/f16-gemm-7x64-minmax-avx512fp16-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f16-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512fp16",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-gemm/gen/f16-gemm-1x64-minmax-avx512fp16-broadcast.c",
      "src/src/f16-gemm/gen/f16-gemm-7x64-minmax-avx512fp16-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-ibilinear_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-ibilinear/gen/f16-ibilinear-fma3-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-ibilinear_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-ibilinear/gen/f16-ibilinear-fma3-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f16-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512fp16",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-igemm/gen/f16-igemm-1x64-minmax-avx512fp16-broadcast.c",
      "src/src/f16-igemm/gen/f16-igemm-7x64-minmax-avx512fp16-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f16-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512fp16",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-igemm/gen/f16-igemm-1x64-minmax-avx512fp16-broadcast.c",
      "src/src/f16-igemm/gen/f16-igemm-7x64-minmax-avx512fp16-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-maxpool_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-maxpool/f16-maxpool-9p8x-minmax-f16c-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-maxpool_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-maxpool/f16-maxpool-9p8x-minmax-f16c-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-pavgpool_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-pavgpool/f16-pavgpool-9p8x-minmax-avx2-c8.c",
      "src/src/f16-pavgpool/f16-pavgpool-9x-minmax-avx2-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-pavgpool_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-pavgpool/f16-pavgpool-9p8x-minmax-avx2-c8.c",
      "src/src/f16-pavgpool/f16-pavgpool-9x-minmax-avx2-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-qs8-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-qs8-vcvt/gen/f16-qs8-vcvt-scalar-imagic-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-qs8-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-qs8-vcvt/gen/f16-qs8-vcvt-scalar-imagic-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-raddstoreexpminusmax_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-raddstoreexpminusmax/gen/f16-raddstoreexpminusmax-avx2-rr1-p2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-raddstoreexpminusmax_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-raddstoreexpminusmax/gen/f16-raddstoreexpminusmax-avx2-rr1-p2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f16-rminmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-avx512skx-u64-acc4.c",
      "src/src/f16-rminmax/gen/f16-rminmax-avx512skx-u64-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f16-rminmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-avx512skx-u64-acc4.c",
      "src/src/f16-rminmax/gen/f16-rminmax-avx512skx-u64-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f16-rminmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512fp16",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-avx512fp16-u128-acc4.c",
      "src/src/f16-rminmax/gen/f16-rminmax-avx512fp16-u128-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f16-rminmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512fp16",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-avx512fp16-u128-acc4.c",
      "src/src/f16-rminmax/gen/f16-rminmax-avx512fp16-u128-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-rminmax_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/f16-rmax-f16c-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-rminmax_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/f16-rmax-f16c-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-rminmax_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-scalar-u2-acc2.c",
      "src/src/f16-rminmax/gen/f16-rminmax-scalar-u2-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-rminmax_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-scalar-u2-acc2.c",
      "src/src/f16-rminmax/gen/f16-rminmax-scalar-u2-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f16-vbinary_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512fp16",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vbinary/gen/f16-vadd-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vaddc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vdiv-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vdivc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmax-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmaxc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmin-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vminc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmul-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmulc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vprelu-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vpreluc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vrdivc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vrpreluc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vrsubc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiff-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiffc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vsub-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vsubc-avx512fp16-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f16-vbinary_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-avx512fp16_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512fp16",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vbinary/gen/f16-vadd-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vaddc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vdiv-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vdivc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmax-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmaxc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmin-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vminc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmul-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vmulc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vprelu-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vpreluc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vrdivc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vrpreluc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vrsubc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiff-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiffc-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vsub-avx512fp16-u64.c",
      "src/src/f16-vbinary/gen/f16-vsubc-avx512fp16-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vbinary_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vbinary/gen/f16-vadd-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vaddc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vdiv-f16c-u8.c",
      "src/src/f16-vbinary/gen/f16-vdivc-f16c-u8.c",
      "src/src/f16-vbinary/gen/f16-vmax-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vmaxc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vmin-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vminc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vmul-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vmulc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vprelu-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vpreluc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vrdivc-f16c-u8.c",
      "src/src/f16-vbinary/gen/f16-vrpreluc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vrsubc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiff-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiffc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vsub-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vsubc-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vbinary_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vbinary/gen/f16-vadd-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vaddc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vdiv-f16c-u8.c",
      "src/src/f16-vbinary/gen/f16-vdivc-f16c-u8.c",
      "src/src/f16-vbinary/gen/f16-vmax-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vmaxc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vmin-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vminc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vmul-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vmulc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vprelu-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vpreluc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vrdivc-f16c-u8.c",
      "src/src/f16-vbinary/gen/f16-vrpreluc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vrsubc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiff-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiffc-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vsub-f16c-u16.c",
      "src/src/f16-vbinary/gen/f16-vsubc-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vclamp_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vclamp/gen/f16-vclamp-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vclamp_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vclamp/gen/f16-vclamp-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-velu_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-velu/gen/f16-velu-avx2-rr1-p3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-velu_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-velu/gen/f16-velu-avx2-rr1-p3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vhswish_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vhswish/gen/f16-vhswish-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vhswish_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vhswish/gen/f16-vhswish-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vlrelu_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vlrelu/gen/f16-vlrelu-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vlrelu_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vlrelu/gen/f16-vlrelu-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vmulcaddc_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vmulcaddc/gen/f16-vmulcaddc-c8-minmax-fma3-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vmulcaddc_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vmulcaddc/gen/f16-vmulcaddc-c8-minmax-fma3-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vrnd_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vrnd/gen/f16-vrndd-f16c-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndne-f16c-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndu-f16c-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndz-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vrnd_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vrnd/gen/f16-vrndd-f16c-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndne-f16c-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndu-f16c-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndz-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vrsqrt_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vrsqrt/gen/f16-vrsqrt-f16c-rsqrt-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vrsqrt_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vrsqrt/gen/f16-vrsqrt-f16c-rsqrt-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vsigmoid_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vsigmoid/gen/f16-vsigmoid-avx2-rr1-p2-rcp-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vsigmoid_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vsigmoid/gen/f16-vsigmoid-avx2-rr1-p2-rcp-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vsqrt_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vsqrt/gen/f16-vsqrt-f16c-rsqrt-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vsqrt_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vsqrt/gen/f16-vsqrt-f16c-rsqrt-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vtanh_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vtanh/gen/f16-vtanh-fma3-polynomial-p19h9t2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vtanh_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vtanh/gen/f16-vtanh-fma3-polynomial-p19h9t2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vtanh_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vtanh/gen/f16-vtanh-f16c-expm1minus-rr1-p3h2ts-rcp-u72.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vtanh_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vtanh/gen/f16-vtanh-f16c-expm1minus-rr1-p3h2ts-rcp-u72.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vunary_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vunary/gen/f16-vsqr-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vunary_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vunary/gen/f16-vsqr-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vunary_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vunary/gen/f16-vabs-sse2-u16.c",
      "src/src/f16-vunary/gen/f16-vneg-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vunary_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vunary/gen/f16-vabs-sse2-u16.c",
      "src/src/f16-vunary/gen/f16-vneg-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-argmaxpool_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-argmaxpool/f32-argmaxpool-4x-sse2-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-sse2-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9x-sse2-c4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-argmaxpool_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-argmaxpool/f32-argmaxpool-4x-sse2-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-sse2-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9x-sse2-c4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-argmaxpool_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-argmaxpool/f32-argmaxpool-4x-scalar-c1.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-scalar-c1.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9x-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-argmaxpool_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-argmaxpool/f32-argmaxpool-4x-scalar-c1.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-scalar-c1.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9x-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-avgpool_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-avgpool/f32-avgpool-9p8x-minmax-sse-c4.c",
      "src/src/f32-avgpool/f32-avgpool-9x-minmax-sse-c4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-avgpool_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-avgpool/f32-avgpool-9p8x-minmax-sse-c4.c",
      "src/src/f32-avgpool/f32-avgpool-9x-minmax-sse-c4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-avgpool_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-avgpool/f32-avgpool-9p8x-minmax-scalar-c1.c",
      "src/src/f32-avgpool/f32-avgpool-9x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-avgpool_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-avgpool/f32-avgpool-9p8x-minmax-scalar-c1.c",
      "src/src/f32-avgpool/f32-avgpool-9x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-conv-hwc2chw_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-sse-2x2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-conv-hwc2chw_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-sse-2x2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-conv-hwc2chw_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-scalar-1x1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-conv-hwc2chw_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-scalar-1x1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv2d-chw_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-sse-2x4-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-sse-1x4-acc3.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-sse-4x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-sse-2x4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv2d-chw_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-sse-2x4-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-sse-1x4-acc3.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-sse-4x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-sse-2x4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv2d-chw_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-ssse3-2x4-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv2d-chw_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-ssse3-2x4-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv2d-chw_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-4x1.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-1x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-1x1-acc5.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-1x1-acc5.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-2x1-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv2d-chw_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-4x1.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-1x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-1x1-acc5.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-1x1-acc5.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-2x1-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-avx.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p16c-minmax-avx.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p16c-minmax-avx.c",
      "src/src/f32-dwconv/gen/f32-dwconv-6f6m7l8c8s4r-minmax-avx.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p16c-minmax-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-avx.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p16c-minmax-avx.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p16c-minmax-avx.c",
      "src/src/f32-dwconv/gen/f32-dwconv-6f6m7l8c8s4r-minmax-avx.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p16c-minmax-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p16c-minmax-avx512f.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p16c-minmax-avx512f.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p16c-minmax-avx512f.c",
      "src/src/f32-dwconv/gen/f32-dwconv-5f5m5l32c16s1r-minmax-avx512f.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p16c-minmax-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p16c-minmax-avx512f.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p16c-minmax-avx512f.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p16c-minmax-avx512f.c",
      "src/src/f32-dwconv/gen/f32-dwconv-5f5m5l32c16s1r-minmax-avx512f.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p16c-minmax-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-fma3.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p16c-minmax-fma3.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p16c-minmax-fma3.c",
      "src/src/f32-dwconv/gen/f32-dwconv-5f5m5l8c8s4r-minmax-fma3.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p16c-minmax-fma3.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-fma3.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p16c-minmax-fma3.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p16c-minmax-fma3.c",
      "src/src/f32-dwconv/gen/f32-dwconv-5f5m5l8c8s4r-minmax-fma3.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p16c-minmax-fma3.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-sse.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p8c-minmax-sse.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p8c-minmax-sse.c",
      "src/src/f32-dwconv/gen/f32-dwconv-8f8m9l16c4s4r-minmax-sse.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p8c-minmax-sse.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-sse.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p8c-minmax-sse.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p8c-minmax-sse.c",
      "src/src/f32-dwconv/gen/f32-dwconv-8f8m9l16c4s4r-minmax-sse.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p8c-minmax-sse.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-2f2m2l4c1s1r-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-scalar-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-2f2m2l4c1s1r-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-scalar-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-f16-vcvt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-avx-u24.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-f16-vcvt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-avx-u24.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f32-f16-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-avx512skx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f32-f16-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-avx512skx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-f16-vcvt_f16c-no-avx2-no-fma") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-f16-vcvt_f16c-no-avx2-no-fma_standalone") {
    cflags = [
      "-mf16c",
      "-mno-avx2",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-f16c-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-f16-vcvt_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-f16-vcvt_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-f16-vcvt_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-sse41-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-f16-vcvt_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-sse41-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-f16-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-bitcast-u4.c",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-fabsf-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-f16-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-bitcast-u4.c",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-fabsf-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-gemm_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x16-minmax-avx-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-5x16-minmax-avx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-gemm_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x16-minmax-avx-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-5x16-minmax-avx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-gemm_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x16-minmax-avx512f-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-7x16-minmax-avx512f-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-gemm_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x16-minmax-avx512f-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-7x16-minmax-avx512f-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-gemm_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x16-minmax-fma3-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-1x16s4-minmax-fma3-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-4x16s4-minmax-fma3-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-5x16-minmax-fma3-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-gemm_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x16-minmax-fma3-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-1x16s4-minmax-fma3-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-4x16s4-minmax-fma3-broadcast.c",
      "src/src/f32-gemm/gen/f32-gemm-5x16-minmax-fma3-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-gemm_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-sse-load1.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2c4-minmax-sse.c",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-sse-load1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-gemm_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-sse-load1.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2c4-minmax-sse.c",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-sse-load1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-gemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-gemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-ibilinear-chw_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-sse-p8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-ibilinear-chw_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-sse-p8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-ibilinear-chw_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-scalar-p4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-ibilinear-chw_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-scalar-p4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-ibilinear_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear/gen/f32-ibilinear-sse-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-ibilinear_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear/gen/f32-ibilinear-sse-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-ibilinear_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear/gen/f32-ibilinear-scalar-c2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-ibilinear_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear/gen/f32-ibilinear-scalar-c2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-igemm_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x16-minmax-avx-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-5x16-minmax-avx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-igemm_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x16-minmax-avx-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-5x16-minmax-avx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-igemm_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x16-minmax-avx512f-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-7x16-minmax-avx512f-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-igemm_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x16-minmax-avx512f-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-7x16-minmax-avx512f-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-igemm_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x16-minmax-fma3-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-1x16s4-minmax-fma3-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-4x16s4-minmax-fma3-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-5x16-minmax-fma3-broadcast-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-igemm_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x16-minmax-fma3-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-1x16s4-minmax-fma3-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-4x16s4-minmax-fma3-broadcast.c",
      "src/src/f32-igemm/gen/f32-igemm-5x16-minmax-fma3-broadcast-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-igemm_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-sse-load1.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2c4-minmax-sse.c",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-sse-load1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-igemm_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-sse-load1.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2c4-minmax-sse.c",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-sse-load1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-igemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-igemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-maxpool_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-maxpool/f32-maxpool-9p8x-minmax-sse-c4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-maxpool_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-maxpool/f32-maxpool-9p8x-minmax-sse-c4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-maxpool_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-maxpool/f32-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-maxpool_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-maxpool/f32-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-pavgpool_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-pavgpool/f32-pavgpool-9p8x-minmax-sse-c4.c",
      "src/src/f32-pavgpool/f32-pavgpool-9x-minmax-sse-c4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-pavgpool_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-pavgpool/f32-pavgpool-9p8x-minmax-sse-c4.c",
      "src/src/f32-pavgpool/f32-pavgpool-9x-minmax-sse-c4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-pavgpool_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-pavgpool/f32-pavgpool-9p8x-minmax-scalar-c1.c",
      "src/src/f32-pavgpool/f32-pavgpool-9x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-pavgpool_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-pavgpool/f32-pavgpool-9p8x-minmax-scalar-c1.c",
      "src/src/f32-pavgpool/f32-pavgpool-9x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc4w-gemm_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x16-minmax-avx-broadcast.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-3x16-minmax-avx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc4w-gemm_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x16-minmax-avx-broadcast.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-3x16-minmax-avx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc4w-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x16-minmax-avx2-broadcast.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-3x16-minmax-avx2-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc4w-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x16-minmax-avx2-broadcast.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-3x16-minmax-avx2-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc4w-gemm_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x16-minmax-fma3-broadcast.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-3x16-minmax-fma3-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc4w-gemm_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x16-minmax-fma3-broadcast.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-3x16-minmax-fma3-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc4w-gemm_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x8-minmax-sse41-dup.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x8-minmax-sse41-dup.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc4w-gemm_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x8-minmax-sse41-dup.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x8-minmax-sse41-dup.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc4w-gemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x4-minmax-scalar.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc4w-gemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x4-minmax-scalar.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc8w-gemm_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x16-minmax-avx-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-5x16-minmax-avx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc8w-gemm_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x16-minmax-avx-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-5x16-minmax-avx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc8w-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x16-minmax-avx2-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-5x16-minmax-avx2-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc8w-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x16-minmax-avx2-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-5x16-minmax-avx2-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc4w-gemm-1x32-minmax-avx512skx-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc4w-gemm-7x32-minmax-avx512skx-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x32-minmax-avx512skx-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-7x32-minmax-avx512skx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc4w-gemm-1x32-minmax-avx512skx-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc4w-gemm-7x32-minmax-avx512skx-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x32-minmax-avx512skx-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-7x32-minmax-avx512skx-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc8w-gemm_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x16-minmax-fma3-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-5x16-minmax-fma3-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc8w-gemm_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x16-minmax-fma3-broadcast.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-5x16-minmax-fma3-broadcast.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc8w-gemm_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-sse41-dup.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x8-minmax-sse41-dup.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc8w-gemm_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-sse41-dup.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x8-minmax-sse41-dup.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc8w-gemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x4-minmax-scalar.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc8w-gemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x4-minmax-scalar.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qs8-vcvt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qs8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qs8-vcvt_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-avx2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qs8-vcvt_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-avx2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f32-qs8-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-avx512skx-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f32-qs8-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-avx512skx-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qs8-vcvt_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qs8-vcvt_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qs8-vcvt_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qs8-vcvt_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qs8-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u1.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u4.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-lrintf-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qs8-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u1.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u4.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-lrintf-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qu8-vcvt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qu8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qu8-vcvt_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-avx2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qu8-vcvt_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-avx2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f32-qu8-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-avx512skx-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f32-qu8-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-avx512skx-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qu8-vcvt_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qu8-vcvt_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qu8-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u1.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u4.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-lrintf-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qu8-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u1.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u4.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-lrintf-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-raddstoreexpminusmax_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-avx512f-rr2-p5-u64-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-raddstoreexpminusmax_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-avx512f-rr2-p5-u64-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-raddstoreexpminusmax_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-avx2-rr2-p5-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-raddstoreexpminusmax_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-avx2-rr2-p5-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "f32-raddstoreexpminusmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-avx256skx-rr2-p5-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "f32-raddstoreexpminusmax_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-avx256skx-rr2-p5-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-raddstoreexpminusmax_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-sse2-rr2-p5-u16-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-raddstoreexpminusmax_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-sse2-rr2-p5-u16-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-raddstoreexpminusmax_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-scalar-rr2-p5-u4-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-raddstoreexpminusmax_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-scalar-rr2-p5-u4-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rdsum_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-avx-c32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rdsum_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-avx-c32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rdsum_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-avx512f-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rdsum_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-avx512f-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rdsum_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-sse-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rdsum_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-sse-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rdsum_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rdsum_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rminmax_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-avx-u32-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-avx-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rminmax_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-avx-u32-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-avx-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rminmax_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-avx512f-u64-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-avx512f-u64-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rminmax_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-avx512f-u64-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-avx512f-u64-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rminmax_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-sse-u16-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-sse-u16-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rminmax_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-sse-u16-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-sse-u16-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rminmax_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-scalar-u4-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-scalar-u4-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rminmax_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-scalar-u4-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-scalar-u4-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rsum_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-avx-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rsum_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-avx-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rsum_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-avx512f-u64-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rsum_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-avx512f-u64-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rsum_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-sse-u16-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rsum_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-sse-u16-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rsum_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-scalar-u4-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rsum_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-scalar-u4-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-spmm_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-spmm/gen/f32-spmm-32x1-minmax-sse.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-spmm_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-spmm/gen/f32-spmm-32x1-minmax-sse.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-spmm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-spmm/gen/f32-spmm-8x1-minmax-scalar.c",
      "src/src/f32-spmm/gen/f32-spmm-8x2-minmax-scalar.c",
      "src/src/f32-spmm/gen/f32-spmm-8x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-spmm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-spmm/gen/f32-spmm-8x1-minmax-scalar.c",
      "src/src/f32-spmm/gen/f32-spmm-8x2-minmax-scalar.c",
      "src/src/f32-spmm/gen/f32-spmm-8x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vbinary_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vaddc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vdiv-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vdivc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmax-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmin-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vminc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmul-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmulc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vprelu-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vsub-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vsubc-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vbinary_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vaddc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vdiv-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vdivc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmax-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmin-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vminc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmul-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vmulc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vprelu-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vsub-avx-u16.c",
      "src/src/f32-vbinary/gen/f32-vsubc-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vbinary_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vaddc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vdiv-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vdivc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmax-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmin-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vminc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmul-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmulc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vprelu-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vsub-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vsubc-avx512f-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vbinary_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vaddc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vdiv-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vdivc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmax-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmin-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vminc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmul-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vmulc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vprelu-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vsub-avx512f-u32.c",
      "src/src/f32-vbinary/gen/f32-vsubc-avx512f-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vbinary_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vaddc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vdiv-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vdivc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmax-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmin-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vminc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmul-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmulc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vsub-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vsubc-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vbinary_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vaddc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vdiv-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vdivc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmax-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmin-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vminc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmul-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vmulc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vsub-sse-u8.c",
      "src/src/f32-vbinary/gen/f32-vsubc-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vbinary_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vprelu-sse2-u8.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-sse2-u8.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-sse2-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vbinary_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vprelu-sse2-u8.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-sse2-u8.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-sse2-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vbinary_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vaddc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vdiv-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vdivc-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vmax-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmin-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vminc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmul-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmulc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vprelu-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsub-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsubc-scalar-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vbinary_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vaddc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vdiv-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vdivc-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vmax-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmin-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vminc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmul-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmulc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vprelu-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsub-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsubc-scalar-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vclamp_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vclamp_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vclamp_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-avx512f-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vclamp_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-avx512f-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vclamp_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vclamp_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vclamp_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vclamp_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcmul_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-avx512f-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcmul_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-avx512f-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcmul_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-fma3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcmul_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-fma3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcmul_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcmul_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcmul_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcmul_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcopysign_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-avx.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-avx.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcopysign_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-avx.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-avx.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcopysign_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-avx512f.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-avx512f.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcopysign_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-avx512f.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-avx512f.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcopysign_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-sse2.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-sse2.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcopysign_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-sse2.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-sse2.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcopysign_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-scalar.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-scalar.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcopysign_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-scalar.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-scalar.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-velu_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-avx-rr2-lut4-p4-perm-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-velu_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-avx-rr2-lut4-p4-perm-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-velu_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-avx512f-rr1-p6-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-velu_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-avx512f-rr1-p6-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-velu_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-avx2-rr1-lut4-p4-perm-u56.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-velu_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-avx2-rr1-lut4-p4-perm-u56.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-velu_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-sse2-rr2-lut16-p3-u12.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-velu_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-sse2-rr2-lut16-p3-u12.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-velu_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u2.c",
      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-velu_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u2.c",
      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vexp_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vexp/gen/f32-vexp-scalar-exp.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vexp_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vexp/gen/f32-vexp-scalar-exp.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vgelu_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-avx-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vgelu_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-avx-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vgelu_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-avx512f-rational-12-10-nr.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vgelu_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-avx512f-rational-12-10-nr.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vgelu_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-fma3-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vgelu_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-fma3-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vgelu_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-sse2-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vgelu_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-sse2-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vgelu_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-scalar-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vgelu_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-scalar-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vhswish_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vhswish_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vhswish_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-avx512f-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vhswish_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-avx512f-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vhswish_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-fma3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vhswish_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-fma3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vhswish_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vhswish_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vhswish_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vhswish_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlog_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-avx512f-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlog_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-avx512f-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlog_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-avx2-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlog_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-avx2-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlog_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-fma3-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlog_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-fma3-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlog_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-sse2-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlog_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-sse2-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlog_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-scalar-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlog_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-scalar-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlrelu_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlrelu_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlrelu_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-avx512f-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlrelu_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-avx512f-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlrelu_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlrelu_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-sse-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlrelu_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-sse41-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlrelu_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-sse41-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlrelu_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlrelu_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vmulcaddc_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c4-minmax-sse-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vmulcaddc_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c4-minmax-sse-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vmulcaddc_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c1-minmax-scalar-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vmulcaddc_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c1-minmax-scalar-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrelu_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrelu/gen/f32-vrelu-scalar-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrelu_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrelu/gen/f32-vrelu-scalar-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrnd_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-avx-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndne-avx-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndu-avx-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndz-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrnd_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-avx-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndne-avx-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndu-avx-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndz-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrnd_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-avx512f-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndne-avx512f-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndu-avx512f-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndz-avx512f-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrnd_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-avx512f-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndne-avx512f-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndu-avx512f-u16.c",
      "src/src/f32-vrnd/gen/f32-vrndz-avx512f-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrnd_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-sse2-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndne-sse2-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndu-sse2-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndz-sse2-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrnd_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-sse2-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndne-sse2-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndu-sse2-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndz-sse2-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrnd_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-sse41-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndne-sse41-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndu-sse41-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndz-sse41-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrnd_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-sse41-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndne-sse41-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndu-sse41-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndz-sse41-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrnd_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrnd_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrsqrt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-avx-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrsqrt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-avx-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrsqrt_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-avx512f-rsqrt-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrsqrt_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-avx512f-rsqrt-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrsqrt_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-fma3-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrsqrt_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-fma3-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrsqrt_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-sse-rsqrt-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrsqrt_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-sse-rsqrt-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrsqrt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u1.c",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrsqrt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u1.c",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsigmoid_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-avx-rr2-p5-nr2-u40.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsigmoid_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-avx-rr2-p5-nr2-u40.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsigmoid_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-avx512f-rr2-lut32-p2-perm2-scalef-div-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsigmoid_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-avx512f-rr2-lut32-p2-perm2-scalef-div-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsigmoid_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-avx2-rr1-p5-div-u40.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsigmoid_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-avx2-rr1-p5-div-u40.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsigmoid_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-sse2-rr2-lut64-p2-div-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsigmoid_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-sse2-rr2-lut64-p2-div-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsigmoid_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-sse41-rr2-lut64-p2-div-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsigmoid_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-sse41-rr2-lut64-p2-div-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsigmoid_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-scalar-rr2-lut64-p2-div-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsigmoid_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-scalar-rr2-lut64-p2-div-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsqrt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-avx-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsqrt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-avx-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsqrt_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-avx512f-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsqrt_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-avx512f-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsqrt_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-fma3-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsqrt_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-fma3-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsqrt_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-sse-rsqrt-u12.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsqrt_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-sse-rsqrt-u12.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsqrt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-scalar-sqrt-u1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsqrt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-scalar-sqrt-u1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vtanh_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-avx-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vtanh_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-avx-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vtanh_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-avx512f-rational-9-8-nr.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vtanh_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-avx512f-rational-9-8-nr.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vtanh_f16c-fma-no-avx2") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-fma3-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vtanh_f16c-fma-no-avx2_standalone") {
    cflags = [
      "-mf16c",
      "-mfma",
      "-mno-avx2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-fma3-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vtanh_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-sse2-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vtanh_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-sse2-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vtanh_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-scalar-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vtanh_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-scalar-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vunary_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-avx.c",
      "src/src/f32-vunary/gen/f32-vneg-avx.c",
      "src/src/f32-vunary/gen/f32-vsqr-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vunary_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-avx.c",
      "src/src/f32-vunary/gen/f32-vneg-avx.c",
      "src/src/f32-vunary/gen/f32-vsqr-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vunary_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-avx512f.c",
      "src/src/f32-vunary/gen/f32-vneg-avx512f.c",
      "src/src/f32-vunary/gen/f32-vsqr-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vunary_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-avx512f.c",
      "src/src/f32-vunary/gen/f32-vneg-avx512f.c",
      "src/src/f32-vunary/gen/f32-vsqr-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vunary_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-sse2.c",
      "src/src/f32-vunary/gen/f32-vneg-sse2.c",
      "src/src/f32-vunary/gen/f32-vsqr-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vunary_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-sse2.c",
      "src/src/f32-vunary/gen/f32-vneg-sse2.c",
      "src/src/f32-vunary/gen/f32-vsqr-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vunary_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-scalar.c",
      "src/src/f32-vunary/gen/f32-vneg-scalar.c",
      "src/src/f32-vunary/gen/f32-vsqr-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vunary_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-scalar.c",
      "src/src/f32-vunary/gen/f32-vneg-scalar.c",
      "src/src/f32-vunary/gen/f32-vsqr-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("operators_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/operators/argmax-pooling-nhwc.c",
      "src/src/operators/average-pooling-nhwc.c",
      "src/src/operators/batch-matrix-multiply-nc.c",
      "src/src/operators/binary-elementwise-nd.c",
      "src/src/operators/channel-shuffle-nc.c",
      "src/src/operators/constant-pad-nd.c",
      "src/src/operators/convolution-nchw.c",
      "src/src/operators/convolution-nhwc.c",
      "src/src/operators/deconvolution-nhwc.c",
      "src/src/operators/dynamic-fully-connected-nc.c",
      "src/src/operators/fully-connected-nc.c",
      "src/src/operators/max-pooling-nhwc.c",
      "src/src/operators/pack-lh.c",
      "src/src/operators/reduce-nd.c",
      "src/src/operators/resize-bilinear-nchw.c",
      "src/src/operators/resize-bilinear-nhwc.c",
      "src/src/operators/rope-nthc.c",
      "src/src/operators/scaled-dot-product-attention-nhtc.c",
      "src/src/operators/slice-nd.c",
      "src/src/operators/softmax-nc.c",
      "src/src/operators/transpose-nd.c",
      "src/src/operators/unary-elementwise-nc.c",
      "src/src/operators/unpooling-nhwc.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("operators_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/operators/argmax-pooling-nhwc.c",
      "src/src/operators/average-pooling-nhwc.c",
      "src/src/operators/batch-matrix-multiply-nc.c",
      "src/src/operators/binary-elementwise-nd.c",
      "src/src/operators/channel-shuffle-nc.c",
      "src/src/operators/constant-pad-nd.c",
      "src/src/operators/convolution-nchw.c",
      "src/src/operators/convolution-nhwc.c",
      "src/src/operators/deconvolution-nhwc.c",
      "src/src/operators/dynamic-fully-connected-nc.c",
      "src/src/operators/fully-connected-nc.c",
      "src/src/operators/max-pooling-nhwc.c",
      "src/src/operators/pack-lh.c",
      "src/src/operators/reduce-nd.c",
      "src/src/operators/resize-bilinear-nchw.c",
      "src/src/operators/resize-bilinear-nhwc.c",
      "src/src/operators/rope-nthc.c",
      "src/src/operators/scaled-dot-product-attention-nhtc.c",
      "src/src/operators/slice-nd.c",
      "src/src/operators/softmax-nc.c",
      "src/src/operators/transpose-nd.c",
      "src/src/operators/unary-elementwise-nc.c",
      "src/src/operators/unpooling-nhwc.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qb4w-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-3x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qb4w-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-3x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc4w-gemm_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc4w-gemm_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc4w-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x8c8-minmax-avx2-madd-prfm.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-4x8c8-minmax-avx2-madd-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc4w-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x8c8-minmax-avx2-madd-prfm.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-4x8c8-minmax-avx2-madd-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f16-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x8c8-minmax-avx256skx-madd-prfm.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-8x8c8-minmax-avx256skx-madd-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f16-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x8c8-minmax-avx256skx-madd-prfm.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-8x8c8-minmax-avx256skx-madd-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f16-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x8c8-minmax-avx256vnni.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-8x8c8-minmax-avx256vnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f16-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x8c8-minmax-avx256vnni.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-8x8c8-minmax-avx256vnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-gemm_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-gemm_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-3x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-3x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c8-minmax-avx256skx.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-5x8c8-minmax-avx256skx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c8-minmax-avx256skx.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-5x8c8-minmax-avx256skx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c8-minmax-avx256vnni.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-8x8c8-minmax-avx256vnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c8-minmax-avx256vnni.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-8x8c8-minmax-avx256vnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f16-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-igemm_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-igemm_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-igemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-3x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-igemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-3x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c8-minmax-avx256skx.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-5x8c8-minmax-avx256skx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c8-minmax-avx256skx.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-5x8c8-minmax-avx256skx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c8-minmax-avx256vnni.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-8x8c8-minmax-avx256vnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c8-minmax-avx256vnni.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-8x8c8-minmax-avx256vnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f16-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qb4w-gemm_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4c8-minmax-avx-ld128.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4c8-minmax-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qb4w-gemm_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4c8-minmax-avx-ld128.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4c8-minmax-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qb4w-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-3x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qb4w-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-3x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qb4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-8x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qb4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-8x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qb4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-14x16c8-minmax-avx512vnnigfni-prfm.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16c8-minmax-avx512vnnigfni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qb4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-14x16c8-minmax-avx512vnnigfni-prfm.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16c8-minmax-avx512vnnigfni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qb4w-gemm_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4c8-minmax-sse2-ld128.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4c8-minmax-sse2-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qb4w-gemm_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4c8-minmax-sse2-ld128.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4c8-minmax-sse2-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qb4w-gemm_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4c8-minmax-sse41-ld128.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-3x4c8-minmax-sse41-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qb4w-gemm_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4c8-minmax-sse41-ld128.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-3x4c8-minmax-sse41-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qb4w-gemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qb4w-gemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc4w-gemm_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc4w-gemm_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc4w-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x8c8-minmax-avx2-madd-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x8c8-minmax-avx2-madd-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc4w-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x8c8-minmax-avx2-madd-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x8c8-minmax-avx2-madd-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c8-minmax-avx512skx-madd-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x8c8-minmax-avx256skx-madd-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-8x16c8-minmax-avx512skx-madd-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-8x8c8-minmax-avx256skx-madd-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c8-minmax-avx512skx-madd-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x8c8-minmax-avx256skx-madd-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-8x16c8-minmax-avx512skx-madd-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-8x8c8-minmax-avx256skx-madd-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-8x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-8x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-14x16c8-minmax-avx512vnnigfni-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c8-minmax-avx512vnnigfni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-14x16c8-minmax-avx512vnnigfni-prfm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c8-minmax-avx512vnnigfni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc4w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc4w-gemm_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4c8-minmax-sse2-ld128.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4c8-minmax-sse2-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc4w-gemm_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4c8-minmax-sse2-ld128.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4c8-minmax-sse2-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc4w-gemm_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4c8-minmax-ssse3-madd.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4c8-minmax-ssse3-madd.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc4w-gemm_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4c8-minmax-ssse3-madd.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4c8-minmax-ssse3-madd.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc4w-gemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc4w-gemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-gemm_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-gemm_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x16c8-minmax-avx512skx-prfm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c8-minmax-avx256skx.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-8x16c8-minmax-avx512skx-prfm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-8x8c8-minmax-avx256skx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x16c8-minmax-avx512skx-prfm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c8-minmax-avx256skx.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-8x16c8-minmax-avx512skx-prfm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-8x8c8-minmax-avx256skx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-10x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-10x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-gemm_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4c8-minmax-sse2-ld64.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4c8-minmax-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-gemm_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4c8-minmax-sse2-ld64.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4c8-minmax-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-gemm_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4c8-minmax-sse41-ld64.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4c8-minmax-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-gemm_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4c8-minmax-sse41-ld64.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4c8-minmax-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-gemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-2x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-gemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-2x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-igemm_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-igemm_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c8-minmax-avxvnni-prfm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-5x8c8-minmax-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-igemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-igemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c8-minmax-avx2.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x8c8-minmax-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x16c8-minmax-avx512skx-prfm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c8-minmax-avx256skx.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-8x16c8-minmax-avx512skx-prfm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-8x8c8-minmax-avx256skx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x16c8-minmax-avx512skx-prfm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c8-minmax-avx256skx.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-8x16c8-minmax-avx512skx-prfm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-8x8c8-minmax-avx256skx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-10x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-10x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qd8-f32-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-16x64c4-minmax-avx512amx.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x64c4-minmax-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-igemm_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4c8-minmax-sse2-ld64.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4c8-minmax-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-igemm_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4c8-minmax-sse2-ld64.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4c8-minmax-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-igemm_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4c8-minmax-sse41-ld64.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4c8-minmax-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-igemm_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4c8-minmax-sse41-ld64.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4c8-minmax-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-igemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-2x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-igemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-2x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs16-qs8-vcvt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs16-qs8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-avx-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs16-qs8-vcvt_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs16-qs8-vcvt_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs16-qs8-vcvt_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-sse41-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs16-qs8-vcvt_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-sse41-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs16-qs8-vcvt_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-ssse3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs16-qs8-vcvt_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-ssse3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs16-qs8-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs16-qs8-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-dwconv_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p16c-minmax-fp32-avx-mul16-add16.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p16c-minmax-fp32-avx-mul16-add16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-dwconv_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p16c-minmax-fp32-avx-mul16-add16.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p16c-minmax-fp32-avx-mul16-add16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-dwconv_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p16c-minmax-fp32-avx2-mul32.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p16c-minmax-fp32-avx2-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-dwconv_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p16c-minmax-fp32-avx2-mul32.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p16c-minmax-fp32-avx2-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p32c-minmax-fp32-avx512skx-mul32.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p32c-minmax-fp32-avx512skx-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p32c-minmax-fp32-avx512skx-mul32.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p32c-minmax-fp32-avx512skx-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-dwconv_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p8c-minmax-fp32-sse2-mul16-add16.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p8c-minmax-fp32-sse2-mul16-add16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-dwconv_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p8c-minmax-fp32-sse2-mul16-add16.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p8c-minmax-fp32-sse2-mul16-add16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-dwconv_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p8c-minmax-fp32-sse41-mul16-add16.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p8c-minmax-fp32-sse41-mul16-add16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-dwconv_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p8c-minmax-fp32-sse41-mul16-add16.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p8c-minmax-fp32-sse41-mul16-add16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-dwconv_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-dwconv_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-f16-vcvt_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f16-vcvt/gen/qs8-f16-vcvt-avx2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-f16-vcvt_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f16-vcvt/gen/qs8-f16-vcvt-avx2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-f32-vcvt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-f32-vcvt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-f32-vcvt_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-avx2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-f32-vcvt_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-avx2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-avx512skx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-avx512skx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-f32-vcvt_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-f32-vcvt_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-f32-vcvt_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-sse41-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-f32-vcvt_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-sse41-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-f32-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u1.c",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-f32-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u1.c",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-packw_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-packw/gen/qs8-packw-x8c8-gemm-goi-avxvnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-packw_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-packw/gen/qs8-packw-x8c8-gemm-goi-avxvnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-packw_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-packw/gen/qs8-packw-x64c4-gemm-goi-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-packw_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-packw/gen/qs8-packw-x64c4-gemm-goi-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-dwconv_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-avx-mul16-add16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-avx-mul16-add16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-avx-mul16-add16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-dwconv_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-avx-mul16-add16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-avx-mul16-add16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-avx-mul16-add16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-dwconv_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-avx2-mul32.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-avx2-mul32.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-avx2-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-dwconv_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-avx2-mul32.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-avx2-mul32.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-avx2-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-qc8w-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p32c-minmax-fp32-avx512skx-mul32.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p32c-minmax-fp32-avx512skx-mul32.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p32c-minmax-fp32-avx512skx-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-qc8w-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p32c-minmax-fp32-avx512skx-mul32.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p32c-minmax-fp32-avx512skx-mul32.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p32c-minmax-fp32-avx512skx-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-dwconv_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-sse2-mul16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p8c-minmax-fp32-sse2-mul16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p8c-minmax-fp32-sse2-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-dwconv_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-sse2-mul16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p8c-minmax-fp32-sse2-mul16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p8c-minmax-fp32-sse2-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-dwconv_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-sse41-mul16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p8c-minmax-fp32-sse41-mul16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p8c-minmax-fp32-sse41-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-dwconv_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-sse41-mul16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p8c-minmax-fp32-sse41-mul16.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p8c-minmax-fp32-sse41-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-dwconv_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-dwconv_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4c8-minmax-fp32-avx-ld128.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x4c8-minmax-fp32-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4c8-minmax-fp32-avx-ld128.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x4c8-minmax-fp32-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-avxvnni-prfm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-5x8c8-minmax-fp32-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-avxvnni-prfm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-5x8c8-minmax-fp32-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_avx2-avxvnniint8-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnniint8",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-avxvnniint8-prfm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-5x8c8-minmax-fp32-avxvnniint8-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_avx2-avxvnniint8-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnniint8",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-avxvnniint8-prfm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-5x8c8-minmax-fp32-avxvnniint8-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-avx2.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x8c8-minmax-fp32-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-avx2.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x8c8-minmax-fp32-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-avx512skx-prfm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-avx256skx.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x8c8-minmax-fp32-avx256skx.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-7x16c8-minmax-fp32-avx512skx-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-avx512skx-prfm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-avx256skx.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x8c8-minmax-fp32-avx256skx.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-7x16c8-minmax-fp32-avx512skx-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-avx512vnni-prfm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-7x16c8-minmax-fp32-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-avx512vnni-prfm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-7x16c8-minmax-fp32-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-16x64c4-minmax-fp32-avx512amx.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x64c4-minmax-fp32-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-qc8w-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-16x64c4-minmax-fp32-avx512amx.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x64c4-minmax-fp32-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4c8-minmax-fp32-sse2-ld64.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4c8-minmax-fp32-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4c8-minmax-fp32-sse2-ld64.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4c8-minmax-fp32-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4c8-minmax-fp32-sse41-ld64.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4c8-minmax-fp32-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4c8-minmax-fp32-sse41-ld64.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4c8-minmax-fp32-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4c8-minmax-fp32-avx-ld128.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x4c8-minmax-fp32-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4c8-minmax-fp32-avx-ld128.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x4c8-minmax-fp32-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-avxvnni-prfm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-5x8c8-minmax-fp32-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-avxvnni-prfm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-5x8c8-minmax-fp32-avxvnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_avx2-avxvnniint8-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnniint8",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-avxvnniint8-prfm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-5x8c8-minmax-fp32-avxvnniint8-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_avx2-avxvnniint8-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnniint8",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-avxvnniint8-prfm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-5x8c8-minmax-fp32-avxvnniint8-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-avx2.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x8c8-minmax-fp32-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-avx2.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x8c8-minmax-fp32-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-fp32-avx512skx-prfm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-avx256skx.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x8c8-minmax-fp32-avx256skx.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-7x16c8-minmax-fp32-avx512skx-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-fp32-avx512skx-prfm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-avx256skx.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x8c8-minmax-fp32-avx256skx.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-7x16c8-minmax-fp32-avx512skx-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-7x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-avx512vnni-prfm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-7x16c8-minmax-avx512vnni-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-16x64c4-minmax-fp32-avx512amx.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x64c4-minmax-fp32-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-qc8w-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni-gfni-amx-tile-amx-int8_standalone") {
    cflags = [
      "-mamx-int8",
      "-mamx-tile",
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
      "-mgfni",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-16x64c4-minmax-fp32-avx512amx.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x64c4-minmax-fp32-avx512amx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4c8-minmax-fp32-sse2-ld64.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4c8-minmax-fp32-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4c8-minmax-fp32-sse2-ld64.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4c8-minmax-fp32-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4c8-minmax-fp32-sse41-ld64.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4c8-minmax-fp32-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4c8-minmax-fp32-sse41-ld64.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4c8-minmax-fp32-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qu8-packw_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x8c8-gemm-goi-avxvnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qu8-packw_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x8c8-gemm-goi-avxvnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-qu8-packw_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x16c8-gemm-goi-avx256vnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-qu8-packw_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qu8-packw/gen/qs8-qu8-packw-x16c8-gemm-goi-avx256vnni.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rdsum_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-avx2-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rdsum_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-avx2-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rdsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-avx512skx-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-rdsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-avx512skx-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rdsum_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-sse41-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rdsum_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-sse41-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rdsum_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rdsum_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rsum_avx2-avxvnni-f16c-fma") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-avxvnni-u128-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rsum_avx2-avxvnni-f16c-fma_standalone") {
    cflags = [
      "-mavx2",
      "-mavxvnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-avxvnni-u128-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rsum_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-avx2-u64-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rsum_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-avx2-u64-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-avx256skx-u64-acc2.c",
      "src/src/qs8-rsum/gen/qs8-rsum-avx512skx-u128-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-avx256skx-u64-acc2.c",
      "src/src/qs8-rsum/gen/qs8-rsum-avx512skx-u128-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qs8-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-avx512vnni-u128-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-rsum_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vnni_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mavx512vnni",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-avx512vnni-u128-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rsum_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-ssse3-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rsum_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-ssse3-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rsum_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rsum_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vadd_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-avx-mul32-ld32-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vadd_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-avx-mul32-ld32-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vadd_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-avx2-mul32-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vadd_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-avx2-mul32-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vadd_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-avx512skx-mul32-ld128-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-vadd_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-avx512skx-mul32-ld128-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vadd_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vadd_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vadd_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-sse41-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vadd_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-sse41-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vadd_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vadd_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vaddc_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-avx-mul32-ld32-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vaddc_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-avx-mul32-ld32-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vaddc_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-avx2-mul32-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vaddc_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-avx2-mul32-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vaddc_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-avx512skx-mul32-ld128-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qs8-vaddc_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-avx512skx-mul32-ld128-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vaddc_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vaddc_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vaddc_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-sse41-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vaddc_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-sse41-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vaddc_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vaddc_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vcvt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vcvt_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-avx2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vcvt_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-avx2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vcvt_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vcvt_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vcvt_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vcvt_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vcvt_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-ssse3-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vcvt_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-ssse3-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vlrelu_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vlrelu_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vlrelu_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-avx2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vlrelu_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-avx2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vlrelu_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vlrelu_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vlrelu_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vlrelu_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vlrelu_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-ssse3-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vlrelu_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-ssse3-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vlrelu_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vlrelu_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmul_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-avx-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmul_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-avx-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmul_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmul_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmul_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-sse41-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmul_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-sse41-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmul_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmul_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmulc_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-avx-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmulc_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-avx-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmulc_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmulc_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmulc_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-sse41-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmulc_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-sse41-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmulc_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmulc_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-avgpool_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-avgpool/qu8-avgpool-9p8x-minmax-fp32-sse2-c8.c",
      "src/src/qu8-avgpool/qu8-avgpool-9x-minmax-fp32-sse2-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-avgpool_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-avgpool/qu8-avgpool-9p8x-minmax-fp32-sse2-c8.c",
      "src/src/qu8-avgpool/qu8-avgpool-9x-minmax-fp32-sse2-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-avgpool_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-avgpool/qu8-avgpool-9p8x-minmax-fp32-scalar-imagic-c1.c",
      "src/src/qu8-avgpool/qu8-avgpool-9x-minmax-fp32-scalar-imagic-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-avgpool_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-avgpool/qu8-avgpool-9p8x-minmax-fp32-scalar-imagic-c1.c",
      "src/src/qu8-avgpool/qu8-avgpool-9x-minmax-fp32-scalar-imagic-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-dwconv_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p16c-minmax-fp32-avx-mul16.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-fp32-avx-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-dwconv_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p16c-minmax-fp32-avx-mul16.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-fp32-avx-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-dwconv_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p16c-minmax-fp32-avx2-mul32.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-fp32-avx2-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-dwconv_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p16c-minmax-fp32-avx2-mul32.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-fp32-avx2-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qu8-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p32c-minmax-fp32-avx512skx-mul32.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p32c-minmax-fp32-avx512skx-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qu8-dwconv_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p32c-minmax-fp32-avx512skx-mul32.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p32c-minmax-fp32-avx512skx-mul32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-dwconv_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-fp32-sse2-mul16.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p8c-minmax-fp32-sse2-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-dwconv_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-fp32-sse2-mul16.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p8c-minmax-fp32-sse2-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-dwconv_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-fp32-sse41-mul16.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p8c-minmax-fp32-sse41-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-dwconv_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-fp32-sse41-mul16.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p8c-minmax-fp32-sse41-mul16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-dwconv_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-dwconv_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-f32-vcvt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-f32-vcvt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-f32-vcvt_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-avx2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-f32-vcvt_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-avx2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "qu8-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-avx512skx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qu8-f32-vcvt_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-avx512skx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-f32-vcvt_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-f32-vcvt_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-f32-vcvt_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-sse41-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-f32-vcvt_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-sse41-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-f32-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u1.c",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-f32-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u1.c",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-gemm_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4c8-minmax-fp32-avx-ld128.c",
      "src/src/qu8-gemm/gen/qu8-gemm-2x4c8-minmax-fp32-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-gemm_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4c8-minmax-fp32-avx-ld128.c",
      "src/src/qu8-gemm/gen/qu8-gemm-2x4c8-minmax-fp32-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-gemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x8c8-minmax-fp32-avx2.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x8c8-minmax-fp32-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-gemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x8c8-minmax-fp32-avx2.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x8c8-minmax-fp32-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x16c8-minmax-fp32-avx512skx-prfm.c",
      "src/src/qu8-gemm/gen/qu8-gemm-7x16c8-minmax-fp32-avx512skx-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qu8-gemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x16c8-minmax-fp32-avx512skx-prfm.c",
      "src/src/qu8-gemm/gen/qu8-gemm-7x16c8-minmax-fp32-avx512skx-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-gemm_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4c8-minmax-fp32-sse2-ld64.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x4c8-minmax-fp32-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-gemm_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4c8-minmax-fp32-sse2-ld64.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x4c8-minmax-fp32-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-gemm_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4c8-minmax-fp32-sse41-ld64.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x4c8-minmax-fp32-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-gemm_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4c8-minmax-fp32-sse41-ld64.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x4c8-minmax-fp32-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-gemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-gemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-igemm_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4c8-minmax-fp32-avx-ld128.c",
      "src/src/qu8-igemm/gen/qu8-igemm-2x4c8-minmax-fp32-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-igemm_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4c8-minmax-fp32-avx-ld128.c",
      "src/src/qu8-igemm/gen/qu8-igemm-2x4c8-minmax-fp32-avx-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-igemm_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x8c8-minmax-fp32-avx2.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x8c8-minmax-fp32-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-igemm_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x8c8-minmax-fp32-avx2.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x8c8-minmax-fp32-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x16c8-minmax-fp32-avx512skx-prfm.c",
      "src/src/qu8-igemm/gen/qu8-igemm-7x16c8-minmax-fp32-avx512skx-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qu8-igemm_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x16c8-minmax-fp32-avx512skx-prfm.c",
      "src/src/qu8-igemm/gen/qu8-igemm-7x16c8-minmax-fp32-avx512skx-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-igemm_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4c8-minmax-fp32-sse2-ld64.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x4c8-minmax-fp32-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-igemm_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4c8-minmax-fp32-sse2-ld64.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x4c8-minmax-fp32-sse2-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-igemm_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4c8-minmax-fp32-sse41-ld64.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x4c8-minmax-fp32-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-igemm_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4c8-minmax-fp32-sse41-ld64.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x4c8-minmax-fp32-sse41-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-igemm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-igemm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-rdsum_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-ssse3-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-rdsum_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-ssse3-c64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-rdsum_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-rdsum_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-rsum_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rsum/gen/qu8-rsum-avx2-u64-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-rsum_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rsum/gen/qu8-rsum-avx2-u64-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-rsum_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rsum/gen/qu8-rsum-sse2-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-rsum_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rsum/gen/qu8-rsum-sse2-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-rsum_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rsum/gen/qu8-rsum-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-rsum_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rsum/gen/qu8-rsum-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vadd_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-avx-mul32-ld32-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vadd_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-avx-mul32-ld32-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vadd_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-avx2-mul32-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vadd_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-avx2-mul32-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vadd_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-avx512skx-mul32-ld128-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qu8-vadd_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-avx512skx-mul32-ld128-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vadd_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vadd_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vadd_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-sse41-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vadd_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-sse41-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vadd_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u1.c",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vadd_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u1.c",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vaddc_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-avx-mul32-ld32-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vaddc_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-avx-mul32-ld32-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vaddc_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-avx2-mul32-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vaddc_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-avx2-mul32-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vaddc_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-avx512skx-mul32-ld128-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "qu8-vaddc_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-avx512skx-mul32-ld128-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vaddc_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vaddc_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vaddc_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-sse41-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vaddc_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-sse41-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vaddc_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u1.c",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vaddc_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u1.c",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vcvt_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vcvt_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vcvt_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-avx2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vcvt_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-avx2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vcvt_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vcvt_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vcvt_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vcvt_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vcvt_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-ssse3-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vcvt_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-ssse3-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u1.c",
      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u1.c",
      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vlrelu_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vlrelu_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-avx-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vlrelu_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-avx2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vlrelu_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-avx2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vlrelu_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vlrelu_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-sse2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vlrelu_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vlrelu_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-sse41-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vlrelu_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-ssse3-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vlrelu_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-ssse3-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vlrelu_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-andxor-u4.c",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-select-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vlrelu_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-andxor-u4.c",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-select-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmul_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-avx-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmul_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-avx-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmul_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmul_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmul_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-sse41-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmul_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-sse41-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmul_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmul_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmulc_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-avx-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmulc_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-avx-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmulc_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmulc_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-sse2-mul16-ld64-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmulc_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-sse41-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmulc_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-sse41-mul16-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmulc_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmulc_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s32-f32-vcvt_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s32-f32-vcvt_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s32-f32-vcvt_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s32-f32-vcvt_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s32-f32-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s32-f32-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s32-vmul_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-avx512f.c",
      "src/src/s32-vmul/gen/s32-vmulc-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s32-vmul_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-avx512f.c",
      "src/src/s32-vmul/gen/s32-vmulc-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s32-vmul_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-avx2.c",
      "src/src/s32-vmul/gen/s32-vmulc-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s32-vmul_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-avx2.c",
      "src/src/s32-vmul/gen/s32-vmulc-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s32-vmul_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-sse41.c",
      "src/src/s32-vmul/gen/s32-vmulc-sse41.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s32-vmul_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-sse41.c",
      "src/src/s32-vmul/gen/s32-vmulc-sse41.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s32-vmul_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-scalar.c",
      "src/src/s32-vmul/gen/s32-vmulc-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s32-vmul_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-scalar.c",
      "src/src/s32-vmul/gen/s32-vmulc-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-ibilinear_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-ibilinear/gen/s8-ibilinear-sse2-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-ibilinear_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-ibilinear/gen/s8-ibilinear-sse2-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-ibilinear_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-ibilinear/gen/s8-ibilinear-sse41-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-ibilinear_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-ibilinear/gen/s8-ibilinear-sse41-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-ibilinear_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-ibilinear/gen/s8-ibilinear-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-ibilinear_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-ibilinear/gen/s8-ibilinear-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-maxpool_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-sse2-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-maxpool_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-sse2-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-maxpool_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-sse41-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-maxpool_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-sse41-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-maxpool_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-maxpool_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-vclamp_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-avx2-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-vclamp_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-avx2-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-vclamp_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-avx512skx-u256.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "s8-vclamp_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-avx512skx-u256.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-vclamp_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-sse2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-vclamp_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-sse2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-vclamp_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-sse41-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-vclamp_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-sse41-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-vclamp_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-vclamp_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("subgraph_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/subgraph/argmax-pooling-2d.c",
      "src/src/subgraph/average-pooling-2d.c",
      "src/src/subgraph/batch-matrix-multiply.c",
      "src/src/subgraph/binary.c",
      "src/src/subgraph/concatenate.c",
      "src/src/subgraph/convolution-2d.c",
      "src/src/subgraph/copy.c",
      "src/src/subgraph/deconvolution-2d.c",
      "src/src/subgraph/deprecated.c",
      "src/src/subgraph/depth-to-space-2d.c",
      "src/src/subgraph/depthwise-convolution-2d.c",
      "src/src/subgraph/even-split.c",
      "src/src/subgraph/fully-connected-sparse.c",
      "src/src/subgraph/fully-connected.c",
      "src/src/subgraph/max-pooling-2d.c",
      "src/src/subgraph/pack-lh.c",
      "src/src/subgraph/reshape-helpers.c",
      "src/src/subgraph/rope.c",
      "src/src/subgraph/scaled-dot-product-attention.c",
      "src/src/subgraph/softmax.c",
      "src/src/subgraph/space-to-depth-2d.c",
      "src/src/subgraph/static-constant-pad.c",
      "src/src/subgraph/static-reduce.c",
      "src/src/subgraph/static-resize-bilinear-2d.c",
      "src/src/subgraph/static-slice.c",
      "src/src/subgraph/static-transpose.c",
      "src/src/subgraph/unary.c",
      "src/src/subgraph/unpooling-2d.c",
      "src/src/subgraph/validation.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("subgraph_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/subgraph/argmax-pooling-2d.c",
      "src/src/subgraph/average-pooling-2d.c",
      "src/src/subgraph/batch-matrix-multiply.c",
      "src/src/subgraph/binary.c",
      "src/src/subgraph/concatenate.c",
      "src/src/subgraph/convolution-2d.c",
      "src/src/subgraph/copy.c",
      "src/src/subgraph/deconvolution-2d.c",
      "src/src/subgraph/deprecated.c",
      "src/src/subgraph/depth-to-space-2d.c",
      "src/src/subgraph/depthwise-convolution-2d.c",
      "src/src/subgraph/even-split.c",
      "src/src/subgraph/fully-connected-sparse.c",
      "src/src/subgraph/fully-connected.c",
      "src/src/subgraph/max-pooling-2d.c",
      "src/src/subgraph/pack-lh.c",
      "src/src/subgraph/reshape-helpers.c",
      "src/src/subgraph/rope.c",
      "src/src/subgraph/scaled-dot-product-attention.c",
      "src/src/subgraph/softmax.c",
      "src/src/subgraph/space-to-depth-2d.c",
      "src/src/subgraph/static-constant-pad.c",
      "src/src/subgraph/static-reduce.c",
      "src/src/subgraph/static-resize-bilinear-2d.c",
      "src/src/subgraph/static-slice.c",
      "src/src/subgraph/static-transpose.c",
      "src/src/subgraph/unary.c",
      "src/src/subgraph/unpooling-2d.c",
      "src/src/subgraph/validation.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("tables_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/tables/exp2-k-over-2048.c",
      "src/src/tables/exp2-k-over-64.c",
      "src/src/tables/exp2minus-k-over-16.c",
      "src/src/tables/exp2minus-k-over-2048.c",
      "src/src/tables/exp2minus-k-over-32.c",
      "src/src/tables/exp2minus-k-over-4.c",
      "src/src/tables/exp2minus-k-over-64.c",
      "src/src/tables/exp2minus-k-over-8.c",
      "src/src/tables/vlog.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("tables_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/tables/exp2-k-over-2048.c",
      "src/src/tables/exp2-k-over-64.c",
      "src/src/tables/exp2minus-k-over-16.c",
      "src/src/tables/exp2minus-k-over-2048.c",
      "src/src/tables/exp2minus-k-over-32.c",
      "src/src/tables/exp2minus-k-over-4.c",
      "src/src/tables/exp2minus-k-over-64.c",
      "src/src/tables/exp2minus-k-over-8.c",
      "src/src/tables/vlog.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u32-f32-vcvt_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u32-f32-vcvt_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-avx512f.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u32-f32-vcvt_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u32-f32-vcvt_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u32-f32-vcvt_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u32-f32-vcvt_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-ibilinear_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-ibilinear/gen/u8-ibilinear-sse2-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-ibilinear_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-ibilinear/gen/u8-ibilinear-sse2-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-ibilinear_sse4.1-no-sse4.2") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-ibilinear/gen/u8-ibilinear-sse41-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-ibilinear_sse4.1-no-sse4.2_standalone") {
    cflags = [
      "-mno-sse4.2",
      "-msse4.1",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-ibilinear/gen/u8-ibilinear-sse41-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-ibilinear_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-ibilinear/gen/u8-ibilinear-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-ibilinear_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-ibilinear/gen/u8-ibilinear-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-lut32norm_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-lut32norm/u8-lut32norm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-lut32norm_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-lut32norm/u8-lut32norm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-maxpool_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-maxpool/u8-maxpool-9p8x-minmax-sse2-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-maxpool_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-maxpool/u8-maxpool-9p8x-minmax-sse2-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-maxpool_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-maxpool/u8-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-maxpool_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-maxpool/u8-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-rmax_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-rmax/u8-rmax-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-rmax_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-rmax/u8-rmax-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-rmax_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-rmax/u8-rmax-scalar-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-rmax_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-rmax/u8-rmax-scalar-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-vclamp_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-avx2-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-vclamp_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-avx2-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-vclamp_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-avx512skx-u256.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "u8-vclamp_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-avx512skx-u256.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-vclamp_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-sse2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-vclamp_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-sse2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-vclamp_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-vclamp_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x16-packw_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-packw/gen/x16-packw-x16-gemm-goi-avx2-u16-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x16-packw_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-packw/gen/x16-packw-x16-gemm-goi-avx2-u16-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x16-packw_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-packw/gen/x16-packw-x64-gemm-goi-scalar-int-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x16-packw_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-packw/gen/x16-packw-x64-gemm-goi-scalar-int-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x16-transposec_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-transposec/gen/x16-transposec-16x16-reuse-switch-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x16-transposec_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-transposec/gen/x16-transposec-16x16-reuse-switch-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x16-transposec_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-transposec/gen/x16-transposec-8x8-reuse-multi-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x16-transposec_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-transposec/gen/x16-transposec-8x8-reuse-multi-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x16-transposec_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-transposec/gen/x16-transposec-2x4-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x16-transposec_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-transposec/gen/x16-transposec-2x4-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x24-transposec_ssse3-no-sse4.1") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x24-transposec/x24-transposec-4x4-ssse3.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x24-transposec_ssse3-no-sse4.1_standalone") {
    cflags = [
      "-mno-sse4.1",
      "-mssse3",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x24-transposec/x24-transposec-4x4-ssse3.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x24-transposec_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x24-transposec/gen/x24-transposec-1x2-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x24-transposec_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x24-transposec/gen/x24-transposec-1x2-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-packw_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x16-gemm-goi-avx-u4.c",
      "src/src/x32-packw/gen/x32-packw-x16s4-gemm-goi-avx-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-packw_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x16-gemm-goi-avx-u4.c",
      "src/src/x32-packw/gen/x32-packw-x16s4-gemm-goi-avx-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-packw_avx512f") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x16-gemm-goi-avx512f-u4-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-packw_avx512f_standalone") {
    cflags = [ "-mavx512f" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x16-gemm-goi-avx512f-u4-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-packw_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x2c4-gemm-goi-sse2-u4.c",
      "src/src/x32-packw/gen/x32-packw-x8-gemm-goi-sse2-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-packw_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x2c4-gemm-goi-sse2-u4.c",
      "src/src/x32-packw/gen/x32-packw-x8-gemm-goi-sse2-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-packw_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-scalar-float-u4.c",
      "src/src/x32-packw/gen/x32-packw-x4-gemm-goi-scalar-float-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-packw_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-scalar-float-u4.c",
      "src/src/x32-packw/gen/x32-packw-x4-gemm-goi-scalar-float-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-transposec_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-transposec/gen/x32-transposec-8x8-reuse-multi-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-transposec_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-transposec/gen/x32-transposec-8x8-reuse-multi-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-transposec_sse-no-sse2") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-transposec/x32-transposec-4x4-sse.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-transposec_sse-no-sse2_standalone") {
    cflags = [
      "-mno-sse2",
      "-msse",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-transposec/x32-transposec-4x4-sse.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-transposec_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-transposec/gen/x32-transposec-2x4-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-transposec_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-transposec/gen/x32-transposec-2x4-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-unpool_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-unpool/x32-unpool-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-unpool_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-unpool/x32-unpool-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-unpool_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-unpool/x32-unpool-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-unpool_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-unpool/x32-unpool-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-zip_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-zip/x32-zip-x2-sse2.c",
      "src/src/x32-zip/x32-zip-x3-sse2.c",
      "src/src/x32-zip/x32-zip-x4-sse2.c",
      "src/src/x32-zip/x32-zip-xm-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-zip_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-zip/x32-zip-x2-sse2.c",
      "src/src/x32-zip/x32-zip-x3-sse2.c",
      "src/src/x32-zip/x32-zip-x4-sse2.c",
      "src/src/x32-zip/x32-zip-xm-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-zip_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-zip/x32-zip-x2-scalar.c",
      "src/src/x32-zip/x32-zip-x3-scalar.c",
      "src/src/x32-zip/x32-zip-x4-scalar.c",
      "src/src/x32-zip/x32-zip-xm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-zip_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-zip/x32-zip-x2-scalar.c",
      "src/src/x32-zip/x32-zip-x3-scalar.c",
      "src/src/x32-zip/x32-zip-x4-scalar.c",
      "src/src/x32-zip/x32-zip-xm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x64-transposec_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x64-transposec/gen/x64-transposec-4x4-reuse-multi-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x64-transposec_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x64-transposec/gen/x64-transposec-4x4-reuse-multi-avx.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x64-transposec_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x64-transposec/gen/x64-transposec-2x2-multi-mov-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x64-transposec_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x64-transposec/gen/x64-transposec-2x2-multi-mov-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x64-transposec_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x64-transposec/gen/x64-transposec-4x2-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x64-transposec_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x64-transposec/gen/x64-transposec-4x2-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-lut_avx-no-avx2-no-f16c-no-fma") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-avx-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-lut_avx-no-avx2-no-f16c-no-fma_standalone") {
    cflags = [
      "-mavx",
      "-mno-avx2",
      "-mno-f16c",
      "-mno-fma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-avx-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-lut_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-avx2-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-lut_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-avx2-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-lut_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-avx512skx-vpshufb-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "x8-lut_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-avx512skx-vpshufb-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set(
      "x8-lut_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vbmi") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vbmi",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-avx512vbmi-vpermx2b-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set(
      "x8-lut_f16c-fma-avx512f-avx512cd-avx512bw-avx512dq-avx512vl-avx512vbmi_standalone") {
    cflags = [
      "-mavx512bw",
      "-mavx512cd",
      "-mavx512dq",
      "-mavx512f",
      "-mavx512vbmi",
      "-mavx512vl",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-avx512vbmi-vpermx2b-u128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-lut_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-lut_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-packq_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-packq/x8-packq-scalar-f32qp8-u1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-packq_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-packq/x8-packq-scalar-f32qp8-u1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-packw_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-packw/gen/x8-packw-x16-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x32-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x4-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x8-gemm-goi-scalar-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-packw_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-packw/gen/x8-packw-x16-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x32-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x4-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x8-gemm-goi-scalar-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-transposec_f16c-fma-avx2") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-transposec/gen/x8-transposec-32x32-reuse-switch-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-transposec_f16c-fma-avx2_standalone") {
    cflags = [
      "-mavx2",
      "-mf16c",
      "-mfma",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-transposec/gen/x8-transposec-32x32-reuse-switch-avx2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-transposec_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-transposec/gen/x8-transposec-16x16-reuse-mov-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-transposec_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-transposec/gen/x8-transposec-16x16-reuse-mov-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-transposec_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-transposec/gen/x8-transposec-2x4-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-transposec_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-transposec/gen/x8-transposec-2x4-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-zip_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-zip/x8-zip-x2-sse2.c",
      "src/src/x8-zip/x8-zip-x3-sse2.c",
      "src/src/x8-zip/x8-zip-x4-sse2.c",
      "src/src/x8-zip/x8-zip-xm-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-zip_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-zip/x8-zip-x2-sse2.c",
      "src/src/x8-zip/x8-zip-x3-sse2.c",
      "src/src/x8-zip/x8-zip-x4-sse2.c",
      "src/src/x8-zip/x8-zip-xm-sse2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-zip_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-zip/x8-zip-x2-scalar.c",
      "src/src/x8-zip/x8-zip-x3-scalar.c",
      "src/src/x8-zip/x8-zip-x4-scalar.c",
      "src/src/x8-zip/x8-zip-xm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-zip_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-zip/x8-zip-x2-scalar.c",
      "src/src/x8-zip/x8-zip-x3-scalar.c",
      "src/src/x8-zip/x8-zip-x4-scalar.c",
      "src/src/x8-zip/x8-zip-xm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-copy_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-copy/xx-copy-scalar-memcpy.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-copy_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-copy/xx-copy-scalar-memcpy.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-fill_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-fill/xx-fill-sse2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-fill_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-fill/xx-fill-sse2-u64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-fill_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-fill/xx-fill-scalar-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-fill_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-fill/xx-fill-scalar-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-pad_sse2-no-sse3") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-pad/xx-pad-p16-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-pad_sse2-no-sse3_standalone") {
    cflags = [
      "-mno-sse3",
      "-msse2",
    ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-pad/xx-pad-p16-sse2-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-pad_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-pad/xx-pad-p4-scalar-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-pad_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-pad/xx-pad-p4-scalar-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-transposev_x64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-transposev/xx-transposev-1x1-scalar-memcpy.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-transposev_x64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-transposev/xx-transposev-1x1-scalar-memcpy.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }
}

if (current_cpu == "arm64") {
  source_set("configs_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/configs/argmaxpool-config.c",
      "src/src/configs/avgpool-config.c",
      "src/src/configs/binary-elementwise-config.c",
      "src/src/configs/cmul-config.c",
      "src/src/configs/conv-hwc2chw-config.c",
      "src/src/configs/dwconv-config.c",
      "src/src/configs/dwconv2d-chw-config.c",
      "src/src/configs/experiments-config.c",
      "src/src/configs/gemm-config.c",
      "src/src/configs/hardware-config.c",
      "src/src/configs/ibilinear-chw-config.c",
      "src/src/configs/ibilinear-config.c",
      "src/src/configs/lut32norm-config.c",
      "src/src/configs/maxpool-config.c",
      "src/src/configs/pack-lh-config.c",
      "src/src/configs/pavgpool-config.c",
      "src/src/configs/raddstoreexpminusmax-config.c",
      "src/src/configs/reduce-config.c",
      "src/src/configs/rmax-config.c",
      "src/src/configs/spmm-config.c",
      "src/src/configs/transpose-config.c",
      "src/src/configs/unary-elementwise-config.c",
      "src/src/configs/unpool-config.c",
      "src/src/configs/vmulcaddc-config.c",
      "src/src/configs/x8-lut-config.c",
      "src/src/configs/xx-fill-config.c",
      "src/src/configs/xx-pad-config.c",
      "src/src/configs/zip-config.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("configs_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/configs/argmaxpool-config.c",
      "src/src/configs/avgpool-config.c",
      "src/src/configs/binary-elementwise-config.c",
      "src/src/configs/cmul-config.c",
      "src/src/configs/conv-hwc2chw-config.c",
      "src/src/configs/dwconv-config.c",
      "src/src/configs/dwconv2d-chw-config.c",
      "src/src/configs/experiments-config.c",
      "src/src/configs/gemm-config.c",
      "src/src/configs/hardware-config.c",
      "src/src/configs/ibilinear-chw-config.c",
      "src/src/configs/ibilinear-config.c",
      "src/src/configs/lut32norm-config.c",
      "src/src/configs/maxpool-config.c",
      "src/src/configs/pack-lh-config.c",
      "src/src/configs/pavgpool-config.c",
      "src/src/configs/raddstoreexpminusmax-config.c",
      "src/src/configs/reduce-config.c",
      "src/src/configs/rmax-config.c",
      "src/src/configs/spmm-config.c",
      "src/src/configs/transpose-config.c",
      "src/src/configs/unary-elementwise-config.c",
      "src/src/configs/unpool-config.c",
      "src/src/configs/vmulcaddc-config.c",
      "src/src/configs/x8-lut-config.c",
      "src/src/configs/xx-fill-config.c",
      "src/src/configs/xx-pad-config.c",
      "src/src/configs/zip-config.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("enums_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/enums/allocation-type.c",
      "src/src/enums/datatype-strings.c",
      "src/src/enums/microkernel-type.c",
      "src/src/enums/node-type.c",
      "src/src/enums/operator-type.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("enums_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/enums/allocation-type.c",
      "src/src/enums/datatype-strings.c",
      "src/src/enums/microkernel-type.c",
      "src/src/enums/node-type.c",
      "src/src/enums/operator-type.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-avgpool_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-avgpool/f16-avgpool-9p8x-minmax-neonfp16arith-c8.c",
      "src/src/f16-avgpool/f16-avgpool-9x-minmax-neonfp16arith-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-avgpool_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-avgpool/f16-avgpool-9p8x-minmax-neonfp16arith-c8.c",
      "src/src/f16-avgpool/f16-avgpool-9x-minmax-neonfp16arith-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-conv-hwc2chw_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-conv-hwc2chw/f16-conv-hwc2chw-3x3s2p1c3x4-neonfp16arith-2x2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-conv-hwc2chw_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-conv-hwc2chw/f16-conv-hwc2chw-3x3s2p1c3x4-neonfp16arith-2x2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-dwconv2d-chw_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-dwconv2d-chw/gen/f16-dwconv2d-chw-3x3p1-minmax-neonfp16arith-2x8.c",
      "src/src/f16-dwconv2d-chw/gen/f16-dwconv2d-chw-3x3s2p1-minmax-neonfp16arith-1x8.c",
      "src/src/f16-dwconv2d-chw/gen/f16-dwconv2d-chw-5x5p2-minmax-neonfp16arith-1x8.c",
      "src/src/f16-dwconv2d-chw/gen/f16-dwconv2d-chw-5x5s2p2-minmax-neonfp16arith-1x8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-dwconv2d-chw_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-dwconv2d-chw/gen/f16-dwconv2d-chw-3x3p1-minmax-neonfp16arith-2x8.c",
      "src/src/f16-dwconv2d-chw/gen/f16-dwconv2d-chw-3x3s2p1-minmax-neonfp16arith-1x8.c",
      "src/src/f16-dwconv2d-chw/gen/f16-dwconv2d-chw-5x5p2-minmax-neonfp16arith-1x8.c",
      "src/src/f16-dwconv2d-chw/gen/f16-dwconv2d-chw-5x5s2p2-minmax-neonfp16arith-1x8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-dwconv_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-dwconv/gen/f16-dwconv-25p8c-minmax-neonfp16arith-acc2.c",
      "src/src/f16-dwconv/gen/f16-dwconv-3p16c-minmax-neonfp16arith.c",
      "src/src/f16-dwconv/gen/f16-dwconv-4p16c-minmax-neonfp16arith.c",
      "src/src/f16-dwconv/gen/f16-dwconv-9p16c-minmax-neonfp16arith.c",
      "src/src/f16-dwconv/gen/f16-dwconv-9p8c-minmax-neonfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-dwconv_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-dwconv/gen/f16-dwconv-25p8c-minmax-neonfp16arith-acc2.c",
      "src/src/f16-dwconv/gen/f16-dwconv-3p16c-minmax-neonfp16arith.c",
      "src/src/f16-dwconv/gen/f16-dwconv-4p16c-minmax-neonfp16arith.c",
      "src/src/f16-dwconv/gen/f16-dwconv-9p16c-minmax-neonfp16arith.c",
      "src/src/f16-dwconv/gen/f16-dwconv-9p8c-minmax-neonfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-neon-int16-u16.c",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-neonfp16-u16.c",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u1.c",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-neon-int16-u16.c",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-neonfp16-u16.c",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u1.c",
      "src/src/f16-f32-vcvt/gen/f16-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32acc-rdsum_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rdsum/gen/f16-f32acc-rdsum-7p7x-minmax-neonfp16arith-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32acc-rdsum_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rdsum/gen/f16-f32acc-rdsum-7p7x-minmax-neonfp16arith-c16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-f32acc-rsum_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rsum/gen/f16-f32acc-rsum-neonfp16arith-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-f32acc-rsum_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-f32acc-rsum/gen/f16-f32acc-rsum-neonfp16arith-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-gemm_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-gemm/gen/f16-gemm-1x16-minmax-neonfp16arith-ld64.c",
      "src/src/f16-gemm/gen/f16-gemm-1x8-minmax-neonfp16arith-ld64.c",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-neonfp16arith-ld64.c",
      "src/src/f16-gemm/gen/f16-gemm-6x8-minmax-neonfp16arith-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-gemm_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-gemm/gen/f16-gemm-1x16-minmax-neonfp16arith-ld64.c",
      "src/src/f16-gemm/gen/f16-gemm-1x8-minmax-neonfp16arith-ld64.c",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-neonfp16arith-ld64.c",
      "src/src/f16-gemm/gen/f16-gemm-6x8-minmax-neonfp16arith-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-gemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-gemm/gen/f16-gemm-1x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
      "src/src/f16-gemm/gen/f16-gemm-4x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a55.S",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a55r0.S",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a75.S",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-gemm/gen/f16-gemm-1x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
      "src/src/f16-gemm/gen/f16-gemm-4x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a55.S",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a55r0.S",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a75.S",
      "src/src/f16-gemm/gen/f16-gemm-6x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-ibilinear-chw_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-ibilinear-chw/gen/f16-ibilinear-chw-neonfp16arith-p8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-ibilinear-chw_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-ibilinear-chw/gen/f16-ibilinear-chw-neonfp16arith-p8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-ibilinear_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-ibilinear/gen/f16-ibilinear-neonfp16arith-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-ibilinear_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-ibilinear/gen/f16-ibilinear-neonfp16arith-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-igemm_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-igemm/gen/f16-igemm-1x16-minmax-neonfp16arith-ld64.c",
      "src/src/f16-igemm/gen/f16-igemm-1x8-minmax-neonfp16arith-ld64.c",
      "src/src/f16-igemm/gen/f16-igemm-6x16-minmax-neonfp16arith-ld64.c",
      "src/src/f16-igemm/gen/f16-igemm-6x8-minmax-neonfp16arith-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-igemm_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-igemm/gen/f16-igemm-1x16-minmax-neonfp16arith-ld64.c",
      "src/src/f16-igemm/gen/f16-igemm-1x8-minmax-neonfp16arith-ld64.c",
      "src/src/f16-igemm/gen/f16-igemm-6x16-minmax-neonfp16arith-ld64.c",
      "src/src/f16-igemm/gen/f16-igemm-6x8-minmax-neonfp16arith-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-igemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-igemm/f16-igemm-1x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
      "src/src/f16-igemm/f16-igemm-4x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
      "src/src/f16-igemm/f16-igemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a55.S",
      "src/src/f16-igemm/f16-igemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a55r0.S",
      "src/src/f16-igemm/f16-igemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a75.S",
      "src/src/f16-igemm/f16-igemm-6x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-igemm/f16-igemm-1x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
      "src/src/f16-igemm/f16-igemm-4x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
      "src/src/f16-igemm/f16-igemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a55.S",
      "src/src/f16-igemm/f16-igemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a55r0.S",
      "src/src/f16-igemm/f16-igemm-6x16-minmax-asm-aarch64-neonfp16arith-cortex-a75.S",
      "src/src/f16-igemm/f16-igemm-6x16-minmax-asm-aarch64-neonfp16arith-ld64.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-maxpool_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-maxpool/f16-maxpool-9p8x-minmax-neonfp16arith-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-maxpool_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-maxpool/f16-maxpool-9p8x-minmax-neonfp16arith-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-pavgpool_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-pavgpool/f16-pavgpool-9p8x-minmax-neonfp16arith-c8.c",
      "src/src/f16-pavgpool/f16-pavgpool-9x-minmax-neonfp16arith-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-pavgpool_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-pavgpool/f16-pavgpool-9p8x-minmax-neonfp16arith-c8.c",
      "src/src/f16-pavgpool/f16-pavgpool-9x-minmax-neonfp16arith-c8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-qs8-vcvt_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-qs8-vcvt/gen/f16-qs8-vcvt-neonfp16arith-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-qs8-vcvt_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-qs8-vcvt/gen/f16-qs8-vcvt-neonfp16arith-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-qs8-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-qs8-vcvt/gen/f16-qs8-vcvt-scalar-imagic-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-qs8-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-qs8-vcvt/gen/f16-qs8-vcvt-scalar-imagic-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-raddstoreexpminusmax_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-raddstoreexpminusmax/gen/f16-raddstoreexpminusmax-neonfp16arith-rr2-p2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-raddstoreexpminusmax_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-raddstoreexpminusmax/gen/f16-raddstoreexpminusmax-neonfp16arith-rr2-p2-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-rminmax_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-neonfp16arith-u32-acc4.c",
      "src/src/f16-rminmax/gen/f16-rminmax-neonfp16arith-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-rminmax_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-neonfp16arith-u32-acc4.c",
      "src/src/f16-rminmax/gen/f16-rminmax-neonfp16arith-u32-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-rminmax_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-scalar-u2-acc2.c",
      "src/src/f16-rminmax/gen/f16-rminmax-scalar-u2-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-rminmax_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-rminmax/gen/f16-rmax-scalar-u2-acc2.c",
      "src/src/f16-rminmax/gen/f16-rminmax-scalar-u2-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-spmm_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-spmm/gen/f16-spmm-32x1-minmax-neonfp16arith-pipelined.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-spmm_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-spmm/gen/f16-spmm-32x1-minmax-neonfp16arith-pipelined.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vbinary_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vbinary/gen/f16-vadd-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vaddc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vdiv-aarch64-neonfp16arith-u8.c",
      "src/src/f16-vbinary/gen/f16-vdiv-fp16arith-u2.c",
      "src/src/f16-vbinary/gen/f16-vdivc-aarch64-neonfp16arith-u8.c",
      "src/src/f16-vbinary/gen/f16-vdivc-fp16arith-u2.c",
      "src/src/f16-vbinary/gen/f16-vmax-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vmaxc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vmin-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vminc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vmul-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vmulc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vprelu-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vpreluc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vrdivc-aarch64-neonfp16arith-u8.c",
      "src/src/f16-vbinary/gen/f16-vrdivc-fp16arith-u2.c",
      "src/src/f16-vbinary/gen/f16-vrpreluc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vrsubc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiff-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiffc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vsub-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vsubc-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vbinary_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vbinary/gen/f16-vadd-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vaddc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vdiv-aarch64-neonfp16arith-u8.c",
      "src/src/f16-vbinary/gen/f16-vdiv-fp16arith-u2.c",
      "src/src/f16-vbinary/gen/f16-vdivc-aarch64-neonfp16arith-u8.c",
      "src/src/f16-vbinary/gen/f16-vdivc-fp16arith-u2.c",
      "src/src/f16-vbinary/gen/f16-vmax-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vmaxc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vmin-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vminc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vmul-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vmulc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vprelu-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vpreluc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vrdivc-aarch64-neonfp16arith-u8.c",
      "src/src/f16-vbinary/gen/f16-vrdivc-fp16arith-u2.c",
      "src/src/f16-vbinary/gen/f16-vrpreluc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vrsubc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiff-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vsqrdiffc-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vsub-neonfp16arith-u16.c",
      "src/src/f16-vbinary/gen/f16-vsubc-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vclamp_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vclamp/gen/f16-vclamp-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vclamp_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vclamp/gen/f16-vclamp-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vcmul_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vcmul/gen/f16-vcmul-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vcmul_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vcmul/gen/f16-vcmul-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-velu_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-velu/gen/f16-velu-neonfp16arith-rr1-p3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-velu_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-velu/gen/f16-velu-neonfp16arith-rr1-p3-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vhswish_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vhswish/gen/f16-vhswish-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vhswish_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vhswish/gen/f16-vhswish-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vlrelu_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vlrelu/gen/f16-vlrelu-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vlrelu_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vlrelu/gen/f16-vlrelu-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vmulcaddc_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vmulcaddc/gen/f16-vmulcaddc-c8-minmax-neonfp16arith-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vmulcaddc_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vmulcaddc/gen/f16-vmulcaddc-c8-minmax-neonfp16arith-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vrnd_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vrnd/gen/f16-vrndd-neonfp16arith-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndne-neonfp16arith-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndu-neonfp16arith-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndz-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vrnd_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vrnd/gen/f16-vrndd-neonfp16arith-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndne-neonfp16arith-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndu-neonfp16arith-u16.c",
      "src/src/f16-vrnd/gen/f16-vrndz-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vrsqrt_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vrsqrt/gen/f16-vrsqrt-neonfp16arith-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vrsqrt_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vrsqrt/gen/f16-vrsqrt-neonfp16arith-rsqrt-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vsigmoid_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vsigmoid/gen/f16-vsigmoid-neonfp16arith-rr2-p2-nr1fma-u40.c",
      "src/src/f16-vsigmoid/gen/f16-vsigmoid-neonfp16arith-rr2-p2-nr1recps-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vsigmoid_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vsigmoid/gen/f16-vsigmoid-neonfp16arith-rr2-p2-nr1fma-u40.c",
      "src/src/f16-vsigmoid/gen/f16-vsigmoid-neonfp16arith-rr2-p2-nr1recps-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vsqrt_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vsqrt/gen/f16-vsqrt-aarch64-neonfp16arith-sqrt-u8.c",
      "src/src/f16-vsqrt/gen/f16-vsqrt-neonfp16arith-nr1fma1adj-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vsqrt_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vsqrt/gen/f16-vsqrt-aarch64-neonfp16arith-sqrt-u8.c",
      "src/src/f16-vsqrt/gen/f16-vsqrt-neonfp16arith-nr1fma1adj-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vtanh_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vtanh/gen/f16-vtanh-aarch64-neonfp16arith-expm1minus-rr1-p3h2ts-div-u32.c",
      "src/src/f16-vtanh/gen/f16-vtanh-neonfp16arith-expm1minus-rr1-p3h2ts-nr1fma-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vtanh_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vtanh/gen/f16-vtanh-aarch64-neonfp16arith-expm1minus-rr1-p3h2ts-div-u32.c",
      "src/src/f16-vtanh/gen/f16-vtanh-neonfp16arith-expm1minus-rr1-p3h2ts-nr1fma-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f16-vunary_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vunary/gen/f16-vabs-neonfp16arith-u16.c",
      "src/src/f16-vunary/gen/f16-vneg-neonfp16arith-u16.c",
      "src/src/f16-vunary/gen/f16-vsqr-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f16-vunary_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/f16-vunary/gen/f16-vabs-neonfp16arith-u16.c",
      "src/src/f16-vunary/gen/f16-vneg-neonfp16arith-u16.c",
      "src/src/f16-vunary/gen/f16-vsqr-neonfp16arith-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-argmaxpool_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-argmaxpool/f32-argmaxpool-4x-neon-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-4x-scalar-c1.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-neon-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-scalar-c1.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9x-neon-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9x-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-argmaxpool_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-argmaxpool/f32-argmaxpool-4x-neon-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-4x-scalar-c1.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-neon-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9p8x-scalar-c1.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9x-neon-c4.c",
      "src/src/f32-argmaxpool/f32-argmaxpool-9x-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-avgpool_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-avgpool/f32-avgpool-9p8x-minmax-neon-c4.c",
      "src/src/f32-avgpool/f32-avgpool-9p8x-minmax-scalar-c1.c",
      "src/src/f32-avgpool/f32-avgpool-9x-minmax-neon-c4.c",
      "src/src/f32-avgpool/f32-avgpool-9x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-avgpool_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-avgpool/f32-avgpool-9p8x-minmax-neon-c4.c",
      "src/src/f32-avgpool/f32-avgpool-9p8x-minmax-scalar-c1.c",
      "src/src/f32-avgpool/f32-avgpool-9x-minmax-neon-c4.c",
      "src/src/f32-avgpool/f32-avgpool-9x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-conv-hwc2chw_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-aarch64-neonfma-2x2.c",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-neon-2x2.c",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-scalar-1x1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-conv-hwc2chw_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-aarch64-neonfma-2x2.c",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-neon-2x2.c",
      "src/src/f32-conv-hwc2chw/f32-conv-hwc2chw-3x3s2p1c3x4-scalar-1x1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv2d-chw_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-aarch64-neonfma-3x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-neon-2x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-4x1.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-aarch64-neonfma-2x4-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-neon-1x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-1x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-aarch64-neonfma-4x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-neon-1x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-1x1-acc5.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-aarch64-neonfma-1x4-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-neon-1x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-1x1-acc5.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-2x1-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv2d-chw_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-aarch64-neonfma-3x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-neon-2x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3p1-minmax-scalar-4x1.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-aarch64-neonfma-2x4-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-neon-1x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-1x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-3x3s2p1-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-aarch64-neonfma-4x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-neon-1x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-1x1-acc5.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5p2-minmax-scalar-2x1-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-aarch64-neonfma-1x4-acc2.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-neon-1x4.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-1x1-acc5.c",
      "src/src/f32-dwconv2d-chw/gen/f32-dwconv2d-chw-5x5s2p2-minmax-scalar-2x1-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/f32-dwconv-9p4c-minmax-asm-aarch64-neonfma-cortex-a55.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/f32-dwconv-9p4c-minmax-asm-aarch64-neonfma-cortex-a55.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-dwconv_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-neon-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-neonfma-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-2f2m2l4c1s1r-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p8c-minmax-neon.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p8c-minmax-neonfma.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p8c-minmax-neon.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p8c-minmax-neonfma.c",
      "src/src/f32-dwconv/gen/f32-dwconv-5f5m5l8c4s4r-minmax-neonfma-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-8f8m9l4c4s4r-minmax-neon-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p8c-minmax-neon.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p8c-minmax-neonfma.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-dwconv_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-25p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-neon-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-25p8c-minmax-neonfma-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-2f2m2l4c1s1r-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p8c-minmax-neon.c",
      "src/src/f32-dwconv/gen/f32-dwconv-3p8c-minmax-neonfma.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p8c-minmax-neon.c",
      "src/src/f32-dwconv/gen/f32-dwconv-4p8c-minmax-neonfma.c",
      "src/src/f32-dwconv/gen/f32-dwconv-5f5m5l8c4s4r-minmax-neonfma-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-8f8m9l4c4s4r-minmax-neon-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-minmax-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p1c-scalar-acc2.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p8c-minmax-neon.c",
      "src/src/f32-dwconv/gen/f32-dwconv-9p8c-minmax-neonfma.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-f16-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-neon-u8.c",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-neonfp16-u16.c",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-bitcast-u4.c",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-fabsf-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-f16-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-neon-u8.c",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-neonfp16-u16.c",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-bitcast-u4.c",
      "src/src/f32-f16-vcvt/gen/f32-f16-vcvt-scalar-fabsf-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-gemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-cortex-a75.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-ld128-acc2.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-ld128-acc4.S",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-asm-aarch64-neonfma-ld128.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a55.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a75.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-ld128.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a55.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a73.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-cortex-a75.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-ld128-acc2.S",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-asm-aarch64-neonfma-ld128-acc4.S",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-asm-aarch64-neonfma-ld128.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a55.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-cortex-a75.S",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-asm-aarch64-neonfma-ld128.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a55.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a73.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-asm-aarch64-neonfma-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-gemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-neon-lane-ld64.c",
      "src/src/f32-gemm/gen/f32-gemm-1x8s4-minmax-neonfma.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-aarch64-neonfma-lane-ld64.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-neon-lane-ld64.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-neon-lane-ld128.c",
      "src/src/f32-gemm/gen/f32-gemm-4x8s4-minmax-neonfma.c",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-gemm/gen/f32-gemm-6x8s4-minmax-neonfma.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-gemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-gemm/gen/f32-gemm-1x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-gemm/gen/f32-gemm-1x8-minmax-neon-lane-ld64.c",
      "src/src/f32-gemm/gen/f32-gemm-1x8s4-minmax-neonfma.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-2x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-aarch64-neonfma-lane-ld64.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-neon-lane-ld64.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x2-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-minmax-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-relu-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x4-scalar.c",
      "src/src/f32-gemm/gen/f32-gemm-4x8-minmax-neon-lane-ld128.c",
      "src/src/f32-gemm/gen/f32-gemm-4x8s4-minmax-neonfma.c",
      "src/src/f32-gemm/gen/f32-gemm-6x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-gemm/gen/f32-gemm-6x8s4-minmax-neonfma.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-ibilinear-chw_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-neon-p8.c",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-neonfma-p8.c",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-scalar-p4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-ibilinear-chw_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-neon-p8.c",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-neonfma-p8.c",
      "src/src/f32-ibilinear-chw/gen/f32-ibilinear-chw-scalar-p4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-ibilinear_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear/gen/f32-ibilinear-neon-c8.c",
      "src/src/f32-ibilinear/gen/f32-ibilinear-neonfma-c8.c",
      "src/src/f32-ibilinear/gen/f32-ibilinear-scalar-c2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-ibilinear_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-ibilinear/gen/f32-ibilinear-neon-c8.c",
      "src/src/f32-ibilinear/gen/f32-ibilinear-neonfma-c8.c",
      "src/src/f32-ibilinear/gen/f32-ibilinear-scalar-c2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-igemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a55.S",
      "src/src/f32-igemm/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a55.S",
      "src/src/f32-igemm/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a73.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-cortex-a75.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-ld64.S",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a75.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-ld128.S",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-asm-aarch64-neonfma-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a55.S",
      "src/src/f32-igemm/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a55.S",
      "src/src/f32-igemm/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a73.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-cortex-a75.S",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-asm-aarch64-neonfma-ld64.S",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-cortex-a75.S",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-asm-aarch64-neonfma-ld128.S",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a53-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a53.S",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-asm-aarch64-neonfma-cortex-a75-prfm.S",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-asm-aarch64-neonfma-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-igemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-neon-lane-ld64.c",
      "src/src/f32-igemm/gen/f32-igemm-1x8s4-minmax-neonfma.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-aarch64-neonfma-lane-ld64.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-neon-lane-ld64.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-neon-lane-ld128.c",
      "src/src/f32-igemm/gen/f32-igemm-4x8s4-minmax-neonfma.c",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-igemm/gen/f32-igemm-6x8s4-minmax-neonfma.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-igemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-igemm/gen/f32-igemm-1x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-igemm/gen/f32-igemm-1x8-minmax-neon-lane-ld64.c",
      "src/src/f32-igemm/gen/f32-igemm-1x8s4-minmax-neonfma.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-2x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-aarch64-neonfma-lane-ld64.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-neon-lane-ld64.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x2-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-minmax-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-relu-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x4-scalar.c",
      "src/src/f32-igemm/gen/f32-igemm-4x8-minmax-neon-lane-ld128.c",
      "src/src/f32-igemm/gen/f32-igemm-4x8s4-minmax-neonfma.c",
      "src/src/f32-igemm/gen/f32-igemm-6x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-igemm/gen/f32-igemm-6x8s4-minmax-neonfma.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-maxpool_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-maxpool/f32-maxpool-9p8x-minmax-neon-c4.c",
      "src/src/f32-maxpool/f32-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-maxpool_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-maxpool/f32-maxpool-9p8x-minmax-neon-c4.c",
      "src/src/f32-maxpool/f32-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-pavgpool_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-pavgpool/f32-pavgpool-9p8x-minmax-neon-c4.c",
      "src/src/f32-pavgpool/f32-pavgpool-9p8x-minmax-scalar-c1.c",
      "src/src/f32-pavgpool/f32-pavgpool-9x-minmax-neon-c4.c",
      "src/src/f32-pavgpool/f32-pavgpool-9x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-pavgpool_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-pavgpool/f32-pavgpool-9p8x-minmax-neon-c4.c",
      "src/src/f32-pavgpool/f32-pavgpool-9p8x-minmax-scalar-c1.c",
      "src/src/f32-pavgpool/f32-pavgpool-9x-minmax-neon-c4.c",
      "src/src/f32-pavgpool/f32-pavgpool-9x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc4w-gemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x4-minmax-scalar.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x8-minmax-neon-lane-ld64.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x4-minmax-scalar.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x8-minmax-neon-lane-ld64.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-6x8-minmax-aarch64-neonfma-lane-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc4w-gemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x4-minmax-scalar.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-1x8-minmax-neon-lane-ld64.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x4-minmax-scalar.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x8-minmax-aarch64-neonfma-lane-ld128.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-4x8-minmax-neon-lane-ld64.c",
      "src/src/f32-qc4w-gemm/gen/f32-qc4w-gemm-6x8-minmax-aarch64-neonfma-lane-ld128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc8w-gemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-asm-aarch64-neonfma-ld128-acc4.S",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-asm-aarch64-neonfma-ld128.S",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-6x8-minmax-asm-aarch64-neonfma-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-asm-aarch64-neonfma-ld128-acc4.S",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-asm-aarch64-neonfma-ld128.S",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-6x8-minmax-asm-aarch64-neonfma-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qc8w-gemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x4-minmax-scalar.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-aarch64-neonfma-lane-ld64.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-neon-lane-ld64.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x4-minmax-scalar.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x8-minmax-neon-lane-ld64.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-6x8-minmax-aarch64-neonfma-lane-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qc8w-gemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x4-minmax-scalar.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-aarch64-neonfma-lane-ld64.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-1x8-minmax-neon-lane-ld64.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x4-minmax-scalar.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-4x8-minmax-neon-lane-ld64.c",
      "src/src/f32-qc8w-gemm/gen/f32-qc8w-gemm-6x8-minmax-aarch64-neonfma-lane-ld64.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qs8-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-neon-u32.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-neonv8-u32.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u1.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u4.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-lrintf-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qs8-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-neon-u32.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-neonv8-u32.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u1.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-imagic-u4.c",
      "src/src/f32-qs8-vcvt/gen/f32-qs8-vcvt-scalar-lrintf-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-qu8-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-neon-u32.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-neonv8-u32.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u1.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u4.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-lrintf-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-qu8-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-neon-u32.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-neonv8-u32.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u1.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-imagic-u4.c",
      "src/src/f32-qu8-vcvt/gen/f32-qu8-vcvt-scalar-lrintf-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-raddstoreexpminusmax_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-neonfma-rr1-lut64-p2-u16-acc2.c",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-scalar-rr2-p5-u4-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-raddstoreexpminusmax_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-neonfma-rr1-lut64-p2-u16-acc2.c",
      "src/src/f32-raddstoreexpminusmax/gen/f32-raddstoreexpminusmax-scalar-rr2-p5-u4-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rdsum_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-neon-c16.c",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rdsum_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-neon-c16.c",
      "src/src/f32-rdsum/gen/f32-rdsum-7p7x-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rminmax_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-neon-u16-acc4.c",
      "src/src/f32-rminmax/gen/f32-rmax-scalar-u4-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-neon-u16-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-scalar-u4-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rminmax_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rminmax/gen/f32-rmax-neon-u16-acc4.c",
      "src/src/f32-rminmax/gen/f32-rmax-scalar-u4-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-neon-u16-acc4.c",
      "src/src/f32-rminmax/gen/f32-rminmax-scalar-u4-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-rsum_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-neon-u16-acc4.c",
      "src/src/f32-rsum/gen/f32-rsum-scalar-u4-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-rsum_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-rsum/gen/f32-rsum-neon-u16-acc4.c",
      "src/src/f32-rsum/gen/f32-rsum-scalar-u4-acc4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-spmm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-spmm/gen/f32-spmm-32x1-minmax-neon.c",
      "src/src/f32-spmm/gen/f32-spmm-32x1-minmax-neonfma-pipelined.c",
      "src/src/f32-spmm/gen/f32-spmm-32x2-minmax-aarch64-neonfma.c",
      "src/src/f32-spmm/gen/f32-spmm-32x4-minmax-aarch64-neonfma.c",
      "src/src/f32-spmm/gen/f32-spmm-8x1-minmax-scalar.c",
      "src/src/f32-spmm/gen/f32-spmm-8x2-minmax-scalar.c",
      "src/src/f32-spmm/gen/f32-spmm-8x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-spmm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-spmm/gen/f32-spmm-32x1-minmax-neon.c",
      "src/src/f32-spmm/gen/f32-spmm-32x1-minmax-neonfma-pipelined.c",
      "src/src/f32-spmm/gen/f32-spmm-32x2-minmax-aarch64-neonfma.c",
      "src/src/f32-spmm/gen/f32-spmm-32x4-minmax-aarch64-neonfma.c",
      "src/src/f32-spmm/gen/f32-spmm-8x1-minmax-scalar.c",
      "src/src/f32-spmm/gen/f32-spmm-8x2-minmax-scalar.c",
      "src/src/f32-spmm/gen/f32-spmm-8x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vbinary_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vadd-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vaddc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vaddc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vdiv-aarch64-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vdiv-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vdivc-aarch64-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vdivc-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vmax-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmax-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmin-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmin-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vminc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vminc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmul-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmul-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmulc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmulc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vprelu-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vprelu-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-aarch64-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsub-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vsub-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsubc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vsubc-scalar-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vbinary_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vbinary/gen/f32-vadd-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vadd-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vaddc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vaddc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vdiv-aarch64-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vdiv-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vdivc-aarch64-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vdivc-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vmax-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmax-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmaxc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmin-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmin-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vminc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vminc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmul-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmul-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vmulc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vmulc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vprelu-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vprelu-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vpreluc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-aarch64-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vrdivc-scalar-u2.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vrpreluc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vrsubc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiff-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vsqrdiffc-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsub-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vsub-scalar-u8.c",
      "src/src/f32-vbinary/gen/f32-vsubc-neon-u8.c",
      "src/src/f32-vbinary/gen/f32-vsubc-scalar-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vclamp_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-neon-u16.c",
      "src/src/f32-vclamp/gen/f32-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vclamp_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vclamp/gen/f32-vclamp-neon-u16.c",
      "src/src/f32-vclamp/gen/f32-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcmul_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-neon-u8.c",
      "src/src/f32-vcmul/gen/f32-vcmul-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcmul_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcmul/gen/f32-vcmul-neon-u8.c",
      "src/src/f32-vcmul/gen/f32-vcmul-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vcopysign_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-neon.c",
      "src/src/f32-vcopysign/gen/f32-vcopysign-scalar.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-neon.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-scalar.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-neon.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vcopysign_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vcopysign/gen/f32-vcopysign-neon.c",
      "src/src/f32-vcopysign/gen/f32-vcopysign-scalar.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-neon.c",
      "src/src/f32-vcopysign/gen/f32-vcopysignc-scalar.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-neon.c",
      "src/src/f32-vcopysign/gen/f32-vrcopysignc-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-velu_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-neon-rr2-lut16-p3-u8.c",
      "src/src/f32-velu/gen/f32-velu-neonfma-rr1-lut16-p3-u16.c",
      "src/src/f32-velu/gen/f32-velu-neonfma-rr1-p6-u8.c",
      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u2.c",
      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-velu_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-velu/gen/f32-velu-neon-rr2-lut16-p3-u8.c",
      "src/src/f32-velu/gen/f32-velu-neonfma-rr1-lut16-p3-u16.c",
      "src/src/f32-velu/gen/f32-velu-neonfma-rr1-p6-u8.c",
      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u2.c",
      "src/src/f32-velu/gen/f32-velu-scalar-rr2-lut16-p3-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vexp_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vexp/gen/f32-vexp-scalar-exp.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vexp_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vexp/gen/f32-vexp-scalar-exp.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vgelu_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-neon-rational-12-10-div.c",
      "src/src/f32-vgelu/gen/f32-vgelu-scalar-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vgelu_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vgelu/gen/f32-vgelu-neon-rational-12-10-div.c",
      "src/src/f32-vgelu/gen/f32-vgelu-scalar-rational-12-10-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vhswish_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-neon-u16.c",
      "src/src/f32-vhswish/gen/f32-vhswish-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vhswish_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vhswish/gen/f32-vhswish-neon-u16.c",
      "src/src/f32-vhswish/gen/f32-vhswish-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlog_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-neon-rational-3-3-div.c",
      "src/src/f32-vlog/gen/f32-vlog-scalar-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlog_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlog/gen/f32-vlog-neon-rational-3-3-div.c",
      "src/src/f32-vlog/gen/f32-vlog-scalar-rational-3-3-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vlrelu_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-neon-u8.c",
      "src/src/f32-vlrelu/gen/f32-vlrelu-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vlrelu_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vlrelu/gen/f32-vlrelu-neon-u8.c",
      "src/src/f32-vlrelu/gen/f32-vlrelu-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vmulcaddc_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c1-minmax-scalar-2x.c",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c4-minmax-neon-2x.c",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c4-minmax-neonfma-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vmulcaddc_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c1-minmax-scalar-2x.c",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c4-minmax-neon-2x.c",
      "src/src/f32-vmulcaddc/gen/f32-vmulcaddc-c4-minmax-neonfma-2x.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrelu_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrelu/gen/f32-vrelu-scalar-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrelu_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrelu/gen/f32-vrelu-scalar-u8.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrnd_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-neon-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndd-neonv8-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndne-neon-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndne-neonv8-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndu-neon-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndu-neonv8-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndz-neon-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndz-neonv8-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrnd_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrnd/gen/f32-vrndd-neon-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndd-neonv8-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndd-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndne-neon-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndne-neonv8-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndne-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndu-neon-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndu-neonv8-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndu-scalar-libm-u4.c",
      "src/src/f32-vrnd/gen/f32-vrndz-neon-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndz-neonv8-u8.c",
      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u1.c",
      "src/src/f32-vrnd/gen/f32-vrndz-scalar-libm-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vrsqrt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-neon-rsqrt-u16.c",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u1.c",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vrsqrt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-neon-rsqrt-u16.c",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u1.c",
      "src/src/f32-vrsqrt/gen/f32-vrsqrt-scalar-rsqrt-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsigmoid_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-neon-rr2-lut64-p2-nr2recps-u8.c",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-neonfma-rr1-lut64-p2-nr2recps-u16.c",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-scalar-rr2-lut64-p2-div-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsigmoid_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-neon-rr2-lut64-p2-nr2recps-u8.c",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-neonfma-rr1-lut64-p2-nr2recps-u16.c",
      "src/src/f32-vsigmoid/gen/f32-vsigmoid-scalar-rr2-lut64-p2-div-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vsqrt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-aarch64-neon-sqrt-u4.c",
      "src/src/f32-vsqrt/gen/f32-vsqrt-scalar-sqrt-u1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vsqrt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vsqrt/gen/f32-vsqrt-aarch64-neon-sqrt-u4.c",
      "src/src/f32-vsqrt/gen/f32-vsqrt-scalar-sqrt-u1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vtanh_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-neon-rational-9-8-div.c",
      "src/src/f32-vtanh/gen/f32-vtanh-scalar-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vtanh_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vtanh/gen/f32-vtanh-neon-rational-9-8-div.c",
      "src/src/f32-vtanh/gen/f32-vtanh-scalar-rational-9-8-div.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("f32-vunary_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-neon.c",
      "src/src/f32-vunary/gen/f32-vabs-scalar.c",
      "src/src/f32-vunary/gen/f32-vneg-neon.c",
      "src/src/f32-vunary/gen/f32-vneg-scalar.c",
      "src/src/f32-vunary/gen/f32-vsqr-neon.c",
      "src/src/f32-vunary/gen/f32-vsqr-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("f32-vunary_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/f32-vunary/gen/f32-vabs-neon.c",
      "src/src/f32-vunary/gen/f32-vabs-scalar.c",
      "src/src/f32-vunary/gen/f32-vneg-neon.c",
      "src/src/f32-vunary/gen/f32-vneg-scalar.c",
      "src/src/f32-vunary/gen/f32-vsqr-neon.c",
      "src/src/f32-vunary/gen/f32-vsqr-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("operators_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/operators/argmax-pooling-nhwc.c",
      "src/src/operators/average-pooling-nhwc.c",
      "src/src/operators/batch-matrix-multiply-nc.c",
      "src/src/operators/binary-elementwise-nd.c",
      "src/src/operators/channel-shuffle-nc.c",
      "src/src/operators/constant-pad-nd.c",
      "src/src/operators/convolution-nchw.c",
      "src/src/operators/convolution-nhwc.c",
      "src/src/operators/deconvolution-nhwc.c",
      "src/src/operators/dynamic-fully-connected-nc.c",
      "src/src/operators/fully-connected-nc.c",
      "src/src/operators/max-pooling-nhwc.c",
      "src/src/operators/pack-lh.c",
      "src/src/operators/reduce-nd.c",
      "src/src/operators/resize-bilinear-nchw.c",
      "src/src/operators/resize-bilinear-nhwc.c",
      "src/src/operators/rope-nthc.c",
      "src/src/operators/scaled-dot-product-attention-nhtc.c",
      "src/src/operators/slice-nd.c",
      "src/src/operators/softmax-nc.c",
      "src/src/operators/transpose-nd.c",
      "src/src/operators/unary-elementwise-nc.c",
      "src/src/operators/unpooling-nhwc.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("operators_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/operators/argmax-pooling-nhwc.c",
      "src/src/operators/average-pooling-nhwc.c",
      "src/src/operators/batch-matrix-multiply-nc.c",
      "src/src/operators/binary-elementwise-nd.c",
      "src/src/operators/channel-shuffle-nc.c",
      "src/src/operators/constant-pad-nd.c",
      "src/src/operators/convolution-nchw.c",
      "src/src/operators/convolution-nhwc.c",
      "src/src/operators/deconvolution-nhwc.c",
      "src/src/operators/dynamic-fully-connected-nc.c",
      "src/src/operators/fully-connected-nc.c",
      "src/src/operators/max-pooling-nhwc.c",
      "src/src/operators/pack-lh.c",
      "src/src/operators/reduce-nd.c",
      "src/src/operators/resize-bilinear-nchw.c",
      "src/src/operators/resize-bilinear-nhwc.c",
      "src/src/operators/rope-nthc.c",
      "src/src/operators/scaled-dot-product-attention-nhtc.c",
      "src/src/operators/slice-nd.c",
      "src/src/operators/softmax-nc.c",
      "src/src/operators/transpose-nd.c",
      "src/src/operators/unary-elementwise-nc.c",
      "src/src/operators/unpooling-nhwc.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qb4w-gemm_arch=armv8.2-a+dotprod+fp16") {
    cflags = [ "-march=armv8.2-a+dotprod+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-1x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-4x16c4-minmax-neondotfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qb4w-gemm_arch=armv8.2-a+dotprod+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-1x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-4x16c4-minmax-neondotfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qb4w-gemm_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-1x16-minmax-neonfp16arith-mlal-lane.c",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-6x16-minmax-neonfp16arith-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qb4w-gemm_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-1x16-minmax-neonfp16arith-mlal-lane.c",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-6x16-minmax-neonfp16arith-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qb4w-gemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qb4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f16-qb4w-gemm/gen/qd8-f16-qb4w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc4w-gemm_arch=armv8.2-a+dotprod+fp16") {
    cflags = [ "-march=armv8.2-a+dotprod+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-4x16c4-minmax-neondotfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc4w-gemm_arch=armv8.2-a+dotprod+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-4x16c4-minmax-neondotfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc4w-gemm_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x16-minmax-neonfp16arith-mlal-lane.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-6x16-minmax-neonfp16arith-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc4w-gemm_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x16-minmax-neonfp16arith-mlal-lane.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-6x16-minmax-neonfp16arith-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc4w-gemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f16-qc4w-gemm/gen/qd8-f16-qc4w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-gemm_arch=armv8.2-a+dotprod+fp16") {
    cflags = [ "-march=armv8.2-a+dotprod+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x8c4-minmax-neondotfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-gemm_arch=armv8.2-a+dotprod+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x8c4-minmax-neondotfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-gemm_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c2s4-minmax-neonfp16arith.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-2x8c2s4-minmax-neonfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-gemm_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x8c2s4-minmax-neonfp16arith.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-2x8c2s4-minmax-neonfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-gemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x16c4-minmax-asm-aarch64-neondot-ld128.S",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x16c4-minmax-asm-aarch64-neondotfp16arith-cortex-a55.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x16c4-minmax-asm-aarch64-neondot-ld128.S",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x16c4-minmax-asm-aarch64-neondotfp16arith-cortex-a55.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-gemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f16-qc8w-gemm/gen/qd8-f16-qc8w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-igemm_arch=armv8.2-a+dotprod+fp16") {
    cflags = [ "-march=armv8.2-a+dotprod+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x8c4-minmax-neondotfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-igemm_arch=armv8.2-a+dotprod+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x16c4-minmax-neondotfp16arith.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x8c4-minmax-neondotfp16arith.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-igemm_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c2s4-minmax-neonfp16arith-mlal.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-2x8c2s4-minmax-neonfp16arith-mlal.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-igemm_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x8c2s4-minmax-neonfp16arith-mlal.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-2x8c2s4-minmax-neonfp16arith-mlal.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-igemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x16c4-minmax-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x16c4-minmax-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x16c4-minmax-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x16c4-minmax-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f16-qc8w-igemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f16-qc8w-igemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f16-qc8w-igemm/gen/qd8-f16-qc8w-igemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qb4w-gemm_arch=armv8.2-a+dotprod") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x16c4-minmax-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qb4w-gemm_arch=armv8.2-a+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x16c4-minmax-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qb4w-gemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qb4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qb4w-gemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16-minmax-neon-mlal-lane.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4-minmax-scalar.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-6x16-minmax-neon-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qb4w-gemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x16-minmax-neon-mlal-lane.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-4x4-minmax-scalar.c",
      "src/src/qd8-f32-qb4w-gemm/gen/qd8-f32-qb4w-gemm-6x16-minmax-neon-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc4w-gemm_arch=armv8.2-a+dotprod") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x16c4-minmax-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc4w-gemm_arch=armv8.2-a+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x16c4-minmax-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc4w-gemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc4w-gemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16-minmax-neon-mlal-lane.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4-minmax-scalar.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-6x16-minmax-neon-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc4w-gemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x16-minmax-neon-mlal-lane.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-4x4-minmax-scalar.c",
      "src/src/qd8-f32-qc4w-gemm/gen/qd8-f32-qc4w-gemm-6x16-minmax-neon-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-gemm_arch=armv8.2-a+dotprod") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x8c4-minmax-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-gemm_arch=armv8.2-a+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x8c4-minmax-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-gemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x16c4-minmax-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x16c4-minmax-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x16c4-minmax-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x16c4-minmax-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-gemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-gemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c2s4-minmax-neon-mlal.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-2x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-2x8c2s4-minmax-neon-mlal.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-gemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-1x8c2s4-minmax-neon-mlal.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-2x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-2x8c2s4-minmax-neon-mlal.c",
      "src/src/qd8-f32-qc8w-gemm/gen/qd8-f32-qc8w-gemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-igemm_arch=armv8.2-a+dotprod") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x8c4-minmax-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-igemm_arch=armv8.2-a+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x16c4-minmax-neondot.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x8c4-minmax-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-igemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x16c4-minmax-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x16c4-minmax-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x16c4-minmax-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x16c4-minmax-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-igemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-igemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x16c8-minmax-neoni8mm.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x16c8-minmax-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qd8-f32-qc8w-igemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c2s4-minmax-neon-mlal.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-2x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-2x8c2s4-minmax-neon-mlal.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qd8-f32-qc8w-igemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x4-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-1x8c2s4-minmax-neon-mlal.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-2x2-minmax-scalar.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-2x8c2s4-minmax-neon-mlal.c",
      "src/src/qd8-f32-qc8w-igemm/gen/qd8-f32-qc8w-igemm-4x4-minmax-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qp8-f32-qb4w-gemm_arch=armv8.2-a+dotprod") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qp8-f32-qb4w-gemm/qp8-f32-qb4w-gemm-minmax-1x4c16s2-aarch64-neondot.c",
      "src/src/qp8-f32-qb4w-gemm/qp8-f32-qb4w-gemm-minmax-1x8c16s2-aarch64-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qp8-f32-qb4w-gemm_arch=armv8.2-a+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qp8-f32-qb4w-gemm/qp8-f32-qb4w-gemm-minmax-1x4c16s2-aarch64-neondot.c",
      "src/src/qp8-f32-qb4w-gemm/qp8-f32-qb4w-gemm-minmax-1x8c16s2-aarch64-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qp8-f32-qb4w-gemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qp8-f32-qb4w-gemm/qp8-f32-qb4w-gemm-minmax-16x4c16s2-mstep4-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qp8-f32-qb4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qp8-f32-qb4w-gemm/qp8-f32-qb4w-gemm-minmax-16x4c16s2-mstep4-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qp8-f32-qc4w-gemm_arch=armv8.2-a+dotprod") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qp8-f32-qc4w-gemm/qp8-f32-qc4w-gemm-minmax-1x8c16s2-aarch64-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qp8-f32-qc4w-gemm_arch=armv8.2-a+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qp8-f32-qc4w-gemm/qp8-f32-qc4w-gemm-minmax-1x8c16s2-aarch64-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qp8-f32-qc4w-gemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qp8-f32-qc4w-gemm/qp8-f32-qc4w-gemm-minmax-8x8c16s2-mstep2-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qp8-f32-qc4w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qp8-f32-qc4w-gemm/qp8-f32-qc4w-gemm-minmax-8x8c16s2-mstep2-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs16-qs8-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-neon-u32.c",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs16-qs8-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-neon-u32.c",
      "src/src/qs16-qs8-vcvt/gen/qs16-qs8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-dwconv_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p16c-minmax-rndnu-neon-mla8-ld64.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p8c-minmax-rndnu-neon-mla8-ld64.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p16c-minmax-rndnu-neon-mla8-ld64.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-dwconv_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p16c-minmax-rndnu-neon-mla8-ld64.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-25p8c-minmax-rndnu-neon-mla8-ld64.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p16c-minmax-rndnu-neon-mla8-ld64.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-dwconv/gen/qs8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-f16-vcvt_arch=armv8.2-a+fp16") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f16-vcvt/gen/qs8-f16-vcvt-neonfp16arith-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-f16-vcvt_arch=armv8.2-a+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f16-vcvt/gen/qs8-f16-vcvt-neonfp16arith-u32.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-f32-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-neon-u32.c",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u1.c",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-f32-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-neon-u32.c",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u1.c",
      "src/src/qs8-f32-vcvt/gen/qs8-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-packw_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-packw/gen/qs8-packw-x64c4-gemm-goi-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-packw_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-packw/gen/qs8-packw-x64c4-gemm-goi-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-dwconv_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-neonv8-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neon-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neonv8-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neon-mla8-ld128.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld128.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neon-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neonv8-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-dwconv_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p16c-minmax-fp32-neonv8-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neon-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-25p8c-minmax-fp32-neonv8-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neon-mla8-ld128.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p16c-minmax-fp32-neonv8-mla8-ld128.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-3p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neon-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p16c-minmax-fp32-neonv8-mla8-ld64.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-dwconv/gen/qs8-qc8w-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_arch=armv8.2-a+dotprod") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x8c4-minmax-fp32-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_arch=armv8.2-a+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x8c4-minmax-fp32-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-neoni8mm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c8-minmax-fp32-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16c8-minmax-fp32-neoni8mm.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-4x16c8-minmax-fp32-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-gemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neon-mlal.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neon-mlal.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-gemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neon-mlal.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neon-mlal.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
      "src/src/qs8-qc8w-gemm/gen/qs8-qc8w-gemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_arch=armv8.2-a+dotprod") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x8c4-minmax-fp32-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_arch=armv8.2-a+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-neondot.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x8c4-minmax-fp32-neondot.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-cortex-a53-prfm.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal-prfm.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c8-minmax-fp32-asm-aarch64-neon-mlal.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-cortex-a53.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16-minmax-fp32-asm-aarch64-neon-mlal-lane-ld64.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-cortex-a55.S",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c4-minmax-fp32-asm-aarch64-neondot-ld128.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_arch=armv8.2-a+i8mm+fp16") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-fp32-neoni8mm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c8-minmax-fp32-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_arch=armv8.2-a+i8mm+fp16_standalone") {
    cflags = [ "-march=armv8.2-a+i8mm+fp16" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16c8-minmax-fp32-neoni8mm.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-4x16c8-minmax-fp32-neoni8mm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-qc8w-igemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neon-mlal.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neon-mlal.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-qc8w-igemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x16-minmax-fp32-neonv8-mlal-lane.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neon-mlal.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-1x8c2s4-minmax-fp32-neonv8-mlal.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neon-mlal.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-2x8c2s4-minmax-fp32-neonv8-mlal.c",
      "src/src/qs8-qc8w-igemm/gen/qs8-qc8w-igemm-3x4-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rdsum_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-neon-c32.c",
      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rdsum_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rdsum/gen/qs8-rdsum-7p7x-minmax-fp32-neon-c32.c",
      "src/src/qs8-rdsum/gen/qs8-rdsum-minmax-fp32-scalar-u1-acc1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rsum_arch=armv8.2-a+dotprod") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-neondot-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rsum_arch=armv8.2-a+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+dotprod" ]

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-neondot-u32-acc2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-rsum_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-neon-u32-acc2.c",
      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-rsum_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-rsum/gen/qs8-rsum-neon-u32-acc2.c",
      "src/src/qs8-rsum/gen/qs8-rsum-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vadd_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u16.c",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u32.c",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vadd_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u16.c",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-neon-ld64-u32.c",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u1.c",
      "src/src/qs8-vadd/gen/qs8-vadd-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vaddc_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u16.c",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u32.c",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vaddc_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u16.c",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-neon-ld64-u32.c",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u1.c",
      "src/src/qs8-vaddc/gen/qs8-vaddc-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-neon-u32.c",
      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vcvt/gen/qs8-vcvt-neon-u32.c",
      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u1.c",
      "src/src/qs8-vcvt/gen/qs8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vlrelu_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-neon-u32.c",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vlrelu_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-neon-u32.c",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-andxor-u4.c",
      "src/src/qs8-vlrelu/gen/qs8-vlrelu-scalar-select-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmul_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-rndnu-neon-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmul_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-fp32-scalar-u4.c",
      "src/src/qs8-vmul/gen/qs8-vmul-minmax-rndnu-neon-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qs8-vmulc_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-rndnu-neon-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qs8-vmulc_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-fp32-scalar-u4.c",
      "src/src/qs8-vmulc/gen/qs8-vmulc-minmax-rndnu-neon-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-avgpool_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-avgpool/qu8-avgpool-9p8x-minmax-fp32-neon-c8.c",
      "src/src/qu8-avgpool/qu8-avgpool-9p8x-minmax-fp32-scalar-imagic-c1.c",
      "src/src/qu8-avgpool/qu8-avgpool-9x-minmax-fp32-neon-c8.c",
      "src/src/qu8-avgpool/qu8-avgpool-9x-minmax-fp32-scalar-imagic-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-avgpool_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-avgpool/qu8-avgpool-9p8x-minmax-fp32-neon-c8.c",
      "src/src/qu8-avgpool/qu8-avgpool-9p8x-minmax-fp32-scalar-imagic-c1.c",
      "src/src/qu8-avgpool/qu8-avgpool-9x-minmax-fp32-neon-c8.c",
      "src/src/qu8-avgpool/qu8-avgpool-9x-minmax-fp32-scalar-imagic-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-dwconv_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-rndnu-neon-mul8.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-rndnu-neon-mul8.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-dwconv_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p1c-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p2c-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-25p8c-minmax-rndnu-neon-mul8.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p16c-minmax-rndnu-neon-mul8.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p1c-minmax-fp32-scalar-fmagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-dwconv/gen/qu8-dwconv-9p2c-minmax-fp32-scalar-lrintf.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-f32-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-neon-u32.c",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u1.c",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-f32-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-neon-u32.c",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u1.c",
      "src/src/qu8-f32-vcvt/gen/qu8-f32-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-gemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-gemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-gemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-gemm/gen/qu8-gemm-1x8-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x8-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-neon-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-gemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-gemm/gen/qu8-gemm-1x16-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-gemm/gen/qu8-gemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-gemm/gen/qu8-gemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-gemm/gen/qu8-gemm-1x8-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-gemm/gen/qu8-gemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-gemm/gen/qu8-gemm-3x8-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-gemm/gen/qu8-gemm-4x16-minmax-rndnu-neon-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-igemm_arch=armv8.2-a+fp16+dotprod") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-igemm_arch=armv8.2-a+fp16+dotprod_standalone") {
    cflags = [ "-march=armv8.2-a+fp16+dotprod" ]

    asmflags = cflags

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a53-prfm.S",
      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75-prfm.S",
      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-asm-aarch64-neon-mlal-lane-cortex-a75.S",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-igemm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-igemm/gen/qu8-igemm-1x8-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x8-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-neon-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-igemm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-igemm/gen/qu8-igemm-1x16-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-igemm/gen/qu8-igemm-1x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-igemm/gen/qu8-igemm-1x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-igemm/gen/qu8-igemm-1x8-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-igemm/gen/qu8-igemm-2x2-minmax-fp32-scalar-imagic.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x4-minmax-fp32-scalar-lrintf.c",
      "src/src/qu8-igemm/gen/qu8-igemm-3x8-minmax-rndnu-neon-mlal-lane.c",
      "src/src/qu8-igemm/gen/qu8-igemm-4x16-minmax-rndnu-neon-mlal-lane.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-rdsum_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u16.c",
      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u32.c",
      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-rdsum_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u16.c",
      "src/src/qu8-rdsum/gen/qu8-rdsum-7p7x-neon-u32.c",
      "src/src/qu8-rdsum/gen/qu8-rdsum-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-rsum_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rsum/gen/qu8-rsum-neon-u32-acc2.c",
      "src/src/qu8-rsum/gen/qu8-rsum-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-rsum_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-rsum/gen/qu8-rsum-neon-u32-acc2.c",
      "src/src/qu8-rsum/gen/qu8-rsum-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vadd_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u16.c",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u32.c",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u1.c",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vadd_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u16.c",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-neon-ld64-u32.c",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u1.c",
      "src/src/qu8-vadd/gen/qu8-vadd-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vaddc_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u16.c",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u32.c",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u1.c",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vaddc_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u16.c",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-neon-ld64-u32.c",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u1.c",
      "src/src/qu8-vaddc/gen/qu8-vaddc-minmax-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-neon-u32.c",
      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u1.c",
      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vcvt/gen/qu8-vcvt-neon-u32.c",
      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u1.c",
      "src/src/qu8-vcvt/gen/qu8-vcvt-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vlrelu_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-neon-u32.c",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-andxor-u4.c",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-select-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vlrelu_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-neon-u32.c",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-andxor-u4.c",
      "src/src/qu8-vlrelu/gen/qu8-vlrelu-scalar-select-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmul_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-scalar-u4.c",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-rndnu-neon-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmul_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-fp32-scalar-u4.c",
      "src/src/qu8-vmul/gen/qu8-vmul-minmax-rndnu-neon-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("qu8-vmulc_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-scalar-u4.c",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-rndnu-neon-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("qu8-vmulc_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-fp32-scalar-u4.c",
      "src/src/qu8-vmulc/gen/qu8-vmulc-minmax-rndnu-neon-ld64-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s32-f32-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-neon.c",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s32-f32-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-neon.c",
      "src/src/s32-f32-vcvt/gen/s32-f32-vcvt-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s32-vmul_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-neon.c",
      "src/src/s32-vmul/gen/s32-vmul-scalar.c",
      "src/src/s32-vmul/gen/s32-vmulc-neon.c",
      "src/src/s32-vmul/gen/s32-vmulc-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s32-vmul_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s32-vmul/gen/s32-vmul-neon.c",
      "src/src/s32-vmul/gen/s32-vmul-scalar.c",
      "src/src/s32-vmul/gen/s32-vmulc-neon.c",
      "src/src/s32-vmul/gen/s32-vmulc-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-ibilinear_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c16.c",
      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c8.c",
      "src/src/s8-ibilinear/gen/s8-ibilinear-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-ibilinear_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c16.c",
      "src/src/s8-ibilinear/gen/s8-ibilinear-neon-c8.c",
      "src/src/s8-ibilinear/gen/s8-ibilinear-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-maxpool_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-neon-c16.c",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-maxpool_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-neon-c16.c",
      "src/src/s8-maxpool/s8-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("s8-vclamp_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-neon-u64.c",
      "src/src/s8-vclamp/s8-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("s8-vclamp_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/s8-vclamp/s8-vclamp-neon-u64.c",
      "src/src/s8-vclamp/s8-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("subgraph_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/subgraph/argmax-pooling-2d.c",
      "src/src/subgraph/average-pooling-2d.c",
      "src/src/subgraph/batch-matrix-multiply.c",
      "src/src/subgraph/binary.c",
      "src/src/subgraph/concatenate.c",
      "src/src/subgraph/convolution-2d.c",
      "src/src/subgraph/copy.c",
      "src/src/subgraph/deconvolution-2d.c",
      "src/src/subgraph/deprecated.c",
      "src/src/subgraph/depth-to-space-2d.c",
      "src/src/subgraph/depthwise-convolution-2d.c",
      "src/src/subgraph/even-split.c",
      "src/src/subgraph/fully-connected-sparse.c",
      "src/src/subgraph/fully-connected.c",
      "src/src/subgraph/max-pooling-2d.c",
      "src/src/subgraph/pack-lh.c",
      "src/src/subgraph/reshape-helpers.c",
      "src/src/subgraph/rope.c",
      "src/src/subgraph/scaled-dot-product-attention.c",
      "src/src/subgraph/softmax.c",
      "src/src/subgraph/space-to-depth-2d.c",
      "src/src/subgraph/static-constant-pad.c",
      "src/src/subgraph/static-reduce.c",
      "src/src/subgraph/static-resize-bilinear-2d.c",
      "src/src/subgraph/static-slice.c",
      "src/src/subgraph/static-transpose.c",
      "src/src/subgraph/unary.c",
      "src/src/subgraph/unpooling-2d.c",
      "src/src/subgraph/validation.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("subgraph_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/subgraph/argmax-pooling-2d.c",
      "src/src/subgraph/average-pooling-2d.c",
      "src/src/subgraph/batch-matrix-multiply.c",
      "src/src/subgraph/binary.c",
      "src/src/subgraph/concatenate.c",
      "src/src/subgraph/convolution-2d.c",
      "src/src/subgraph/copy.c",
      "src/src/subgraph/deconvolution-2d.c",
      "src/src/subgraph/deprecated.c",
      "src/src/subgraph/depth-to-space-2d.c",
      "src/src/subgraph/depthwise-convolution-2d.c",
      "src/src/subgraph/even-split.c",
      "src/src/subgraph/fully-connected-sparse.c",
      "src/src/subgraph/fully-connected.c",
      "src/src/subgraph/max-pooling-2d.c",
      "src/src/subgraph/pack-lh.c",
      "src/src/subgraph/reshape-helpers.c",
      "src/src/subgraph/rope.c",
      "src/src/subgraph/scaled-dot-product-attention.c",
      "src/src/subgraph/softmax.c",
      "src/src/subgraph/space-to-depth-2d.c",
      "src/src/subgraph/static-constant-pad.c",
      "src/src/subgraph/static-reduce.c",
      "src/src/subgraph/static-resize-bilinear-2d.c",
      "src/src/subgraph/static-slice.c",
      "src/src/subgraph/static-transpose.c",
      "src/src/subgraph/unary.c",
      "src/src/subgraph/unpooling-2d.c",
      "src/src/subgraph/validation.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("tables_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/tables/exp2-k-over-2048.c",
      "src/src/tables/exp2-k-over-64.c",
      "src/src/tables/exp2minus-k-over-16.c",
      "src/src/tables/exp2minus-k-over-2048.c",
      "src/src/tables/exp2minus-k-over-32.c",
      "src/src/tables/exp2minus-k-over-4.c",
      "src/src/tables/exp2minus-k-over-64.c",
      "src/src/tables/exp2minus-k-over-8.c",
      "src/src/tables/vlog.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("tables_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/tables/exp2-k-over-2048.c",
      "src/src/tables/exp2-k-over-64.c",
      "src/src/tables/exp2minus-k-over-16.c",
      "src/src/tables/exp2minus-k-over-2048.c",
      "src/src/tables/exp2minus-k-over-32.c",
      "src/src/tables/exp2minus-k-over-4.c",
      "src/src/tables/exp2minus-k-over-64.c",
      "src/src/tables/exp2minus-k-over-8.c",
      "src/src/tables/vlog.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u32-f32-vcvt_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-neon.c",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u32-f32-vcvt_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-neon.c",
      "src/src/u32-f32-vcvt/gen/u32-f32-vcvt-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-ibilinear_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c16.c",
      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c8.c",
      "src/src/u8-ibilinear/gen/u8-ibilinear-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-ibilinear_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c16.c",
      "src/src/u8-ibilinear/gen/u8-ibilinear-neon-c8.c",
      "src/src/u8-ibilinear/gen/u8-ibilinear-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-lut32norm_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-lut32norm/u8-lut32norm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-lut32norm_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-lut32norm/u8-lut32norm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-maxpool_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-maxpool/u8-maxpool-9p8x-minmax-neon-c16.c",
      "src/src/u8-maxpool/u8-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-maxpool_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-maxpool/u8-maxpool-9p8x-minmax-neon-c16.c",
      "src/src/u8-maxpool/u8-maxpool-9p8x-minmax-scalar-c1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-rmax_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-rmax/u8-rmax-neon-u16.c",
      "src/src/u8-rmax/u8-rmax-scalar-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-rmax_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-rmax/u8-rmax-neon-u16.c",
      "src/src/u8-rmax/u8-rmax-scalar-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("u8-vclamp_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-neon-u64.c",
      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("u8-vclamp_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/u8-vclamp/u8-vclamp-neon-u64.c",
      "src/src/u8-vclamp/u8-vclamp-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x16-packw_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-packw/gen/x16-packw-x16-gemm-goi-neon-ld4lane-u8-prfm.c",
      "src/src/x16-packw/gen/x16-packw-x64-gemm-goi-scalar-int-u4.c",
      "src/src/x16-packw/gen/x16-packw-x8-gemm-goi-neon-ld4lane-u8-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x16-packw_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-packw/gen/x16-packw-x16-gemm-goi-neon-ld4lane-u8-prfm.c",
      "src/src/x16-packw/gen/x16-packw-x64-gemm-goi-scalar-int-u4.c",
      "src/src/x16-packw/gen/x16-packw-x8-gemm-goi-neon-ld4lane-u8-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x16-transposec_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-transposec/gen/x16-transposec-2x4-scalar-int.c",
      "src/src/x16-transposec/gen/x16-transposec-8x8-reuse-dec-zip-neon.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x16-transposec_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x16-transposec/gen/x16-transposec-2x4-scalar-int.c",
      "src/src/x16-transposec/gen/x16-transposec-8x8-reuse-dec-zip-neon.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x24-transposec_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x24-transposec/gen/x24-transposec-1x2-scalar.c",
      "src/src/x24-transposec/x24-transposec-2x2-neon-tbl64.c",
      "src/src/x24-transposec/x24-transposec-4x4-aarch64-neon-tbl128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x24-transposec_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x24-transposec/gen/x24-transposec-1x2-scalar.c",
      "src/src/x24-transposec/x24-transposec-2x2-neon-tbl64.c",
      "src/src/x24-transposec/x24-transposec-4x4-aarch64-neon-tbl128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-packw_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-neon-ld2lane-u2-prfm.c",
      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-scalar-float-u4.c",
      "src/src/x32-packw/gen/x32-packw-x4-gemm-goi-scalar-float-u4.c",
      "src/src/x32-packw/gen/x32-packw-x8-gemm-goi-neon-ld4lane-u4-prfm.c",
      "src/src/x32-packw/gen/x32-packw-x8s4-gemm-goi-neon-ld4lane-u4-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-packw_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-neon-ld2lane-u2-prfm.c",
      "src/src/x32-packw/gen/x32-packw-x2-gemm-goi-scalar-float-u4.c",
      "src/src/x32-packw/gen/x32-packw-x4-gemm-goi-scalar-float-u4.c",
      "src/src/x32-packw/gen/x32-packw-x8-gemm-goi-neon-ld4lane-u4-prfm.c",
      "src/src/x32-packw/gen/x32-packw-x8s4-gemm-goi-neon-ld4lane-u4-prfm.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-transposec_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-transposec/gen/x32-transposec-2x4-scalar-int.c",
      "src/src/x32-transposec/gen/x32-transposec-4x4-reuse-dec-zip-neon.c",
      "src/src/x32-transposec/x32-transposec-4x4-aarch64-neon-tbl128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-transposec_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-transposec/gen/x32-transposec-2x4-scalar-int.c",
      "src/src/x32-transposec/gen/x32-transposec-4x4-reuse-dec-zip-neon.c",
      "src/src/x32-transposec/x32-transposec-4x4-aarch64-neon-tbl128.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-unpool_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-unpool/x32-unpool-neon.c",
      "src/src/x32-unpool/x32-unpool-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-unpool_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-unpool/x32-unpool-neon.c",
      "src/src/x32-unpool/x32-unpool-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x32-zip_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-zip/x32-zip-x2-neon.c",
      "src/src/x32-zip/x32-zip-x2-scalar.c",
      "src/src/x32-zip/x32-zip-x3-neon.c",
      "src/src/x32-zip/x32-zip-x3-scalar.c",
      "src/src/x32-zip/x32-zip-x4-neon.c",
      "src/src/x32-zip/x32-zip-x4-scalar.c",
      "src/src/x32-zip/x32-zip-xm-neon.c",
      "src/src/x32-zip/x32-zip-xm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x32-zip_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x32-zip/x32-zip-x2-neon.c",
      "src/src/x32-zip/x32-zip-x2-scalar.c",
      "src/src/x32-zip/x32-zip-x3-neon.c",
      "src/src/x32-zip/x32-zip-x3-scalar.c",
      "src/src/x32-zip/x32-zip-x4-neon.c",
      "src/src/x32-zip/x32-zip-x4-scalar.c",
      "src/src/x32-zip/x32-zip-xm-neon.c",
      "src/src/x32-zip/x32-zip-xm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x64-transposec_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x64-transposec/gen/x64-transposec-2x2-multi-dec-zip-neon.c",
      "src/src/x64-transposec/gen/x64-transposec-2x2-reuse-dec-zip-neon.c",
      "src/src/x64-transposec/gen/x64-transposec-4x2-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x64-transposec_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x64-transposec/gen/x64-transposec-2x2-multi-dec-zip-neon.c",
      "src/src/x64-transposec/gen/x64-transposec-2x2-reuse-dec-zip-neon.c",
      "src/src/x64-transposec/gen/x64-transposec-4x2-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-lut_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-aarch64-neon-tbx128x4-u64.c",
      "src/src/x8-lut/gen/x8-lut-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-lut_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-lut/gen/x8-lut-aarch64-neon-tbx128x4-u64.c",
      "src/src/x8-lut/gen/x8-lut-scalar-u4.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-packq_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-packq/x8-packq-aarch64-neon-f32qp8-u2.c",
      "src/src/x8-packq/x8-packq-scalar-f32qp8-u1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-packq_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-packq/x8-packq-aarch64-neon-f32qp8-u2.c",
      "src/src/x8-packq/x8-packq-scalar-f32qp8-u1.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-packw_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-packw/gen/x8-packw-x16-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x32-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x4-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x8-gemm-goi-scalar-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-packw_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-packw/gen/x8-packw-x16-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x32-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x4-gemm-goi-scalar-u2.c",
      "src/src/x8-packw/gen/x8-packw-x8-gemm-goi-scalar-u2.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-transposec_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-transposec/gen/x8-transposec-16x16-reuse-dec-zip-neon.c",
      "src/src/x8-transposec/gen/x8-transposec-2x4-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-transposec_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-transposec/gen/x8-transposec-16x16-reuse-dec-zip-neon.c",
      "src/src/x8-transposec/gen/x8-transposec-2x4-scalar-int.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("x8-zip_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-zip/x8-zip-x2-neon.c",
      "src/src/x8-zip/x8-zip-x2-scalar.c",
      "src/src/x8-zip/x8-zip-x3-neon.c",
      "src/src/x8-zip/x8-zip-x3-scalar.c",
      "src/src/x8-zip/x8-zip-x4-neon.c",
      "src/src/x8-zip/x8-zip-x4-scalar.c",
      "src/src/x8-zip/x8-zip-xm-neon.c",
      "src/src/x8-zip/x8-zip-xm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("x8-zip_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/x8-zip/x8-zip-x2-neon.c",
      "src/src/x8-zip/x8-zip-x2-scalar.c",
      "src/src/x8-zip/x8-zip-x3-neon.c",
      "src/src/x8-zip/x8-zip-x3-scalar.c",
      "src/src/x8-zip/x8-zip-x4-neon.c",
      "src/src/x8-zip/x8-zip-x4-scalar.c",
      "src/src/x8-zip/x8-zip-xm-neon.c",
      "src/src/x8-zip/x8-zip-xm-scalar.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-copy_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-copy/xx-copy-scalar-memcpy.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-copy_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-copy/xx-copy-scalar-memcpy.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-fill_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-fill/xx-fill-neon-u64.c",
      "src/src/xx-fill/xx-fill-scalar-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-fill_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-fill/xx-fill-neon-u64.c",
      "src/src/xx-fill/xx-fill-scalar-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-pad_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-pad/xx-pad-p16-neon-u16.c",
      "src/src/xx-pad/xx-pad-p4-scalar-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-pad_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-pad/xx-pad-p16-neon-u16.c",
      "src/src/xx-pad/xx-pad-p4-scalar-u16.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }

  source_set("xx-transposev_arm64") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-transposev/xx-transposev-1x1-scalar-memcpy.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool",
    ]

    public_configs = [ ":xnnpack_config" ]
  }

  # This is a target that cannot depend on //base.
  source_set("xx-transposev_arm64_standalone") {
    cflags = []

    sources = [
      "src/include/xnnpack.h",
      "src/src/xx-transposev/xx-transposev-1x1-scalar-memcpy.c",
    ]

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [ "//build/config/compiler:no_chromium_code" ]
    configs += [ "//build/config/sanitizers:cfi_icall_generalize_pointers" ]

    deps = [
      "//third_party/cpuinfo",
      "//third_party/fp16",
      "//third_party/fxdiv",
      "//third_party/pthreadpool:pthreadpool_standalone",
    ]

    public_configs = [ ":xnnpack_config" ]

    if (!(is_android && use_order_profiling)) {
      assert_no_deps = [ "//base" ]
    }
  }
}
