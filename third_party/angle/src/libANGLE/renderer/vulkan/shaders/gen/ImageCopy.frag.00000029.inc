// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000029.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000029[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xcb,0x4f,0x5d,0x55,
    0x14,0xc6,0xf7,0x3e,0x17,0xb8,0x17,0x28,0x94,0x4a,0x5b,0xda,0x52,0x85,0x0a,0x5a,
    0x09,0xa5,0x40,0xd2,0x9a,0x9b,0xa8,0x0d,0xb6,0xb5,0xf8,0xa0,0x52,0x35,0x8c,0x8d,
    0x89,0x13,0x07,0x74,0xa2,0x83,0x0e,0x8c,0x31,0xb6,0x31,0x84,0x51,0xff,0x85,0x3e,
    0xac,0x26,0x62,0xd5,0x58,0x1f,0xad,0x7d,0x0c,0x5b,0x1f,0x8d,0x06,0x95,0x68,0x50,
    0x89,0x8c,0x54,0x62,0x6c,0x23,0x08,0x56,0x4a,0x5c,0xeb,0xec,0xdf,0x92,0x25,0x31,
    0x7a,0x93,0x9d,0x73,0xf6,0xb7,0x5e,0xdf,0xb7,0xd6,0x3e,0x1b,0x0a,0x59,0x5b,0x31,
    0x84,0x18,0x6a,0x42,0x29,0x1c,0x88,0x21,0xff,0xad,0x09,0x59,0xd0,0xd7,0xda,0x50,
    0x95,0x3f,0xfb,0x07,0x9e,0x18,0xd8,0xfe,0xec,0x73,0x4f,0x6f,0xdf,0xb1,0xb3,0x47,
    0xed,0xf5,0xa1,0x90,0xfb,0xa9,0x6d,0x75,0x28,0x86,0x0a,0x79,0xea,0x1a,0x7e,0xea,
    0x99,0x83,0x8a,0x9f,0x94,0x75,0x49,0x56,0x83,0xf8,0x29,0x2e,0x05,0xc2,0x83,0xa1,
    0x32,0x34,0xa5,0xf4,0xa1,0x8d,0xa7,0x61,0x11,0xac,0xe4,0xb0,0x0c,0xac,0xc1,0x61,
    0x05,0xb0,0xb5,0x0e,0xab,0x00,0xdb,0xe0,0xb0,0x4a,0xb0,0xcd,0x0e,0xab,0x02,0x6b,
    0x75,0x58,0x11,0xac,0xdd,0x61,0x25,0xb0,0xbb,0x1c,0x56,0x0d,0xb6,0xcd,0x61,0x35,
    0x60,0x3d,0x0e,0xab,0x05,0xdb,0xe1,0xb0,0x55,0x60,0x65,0x87,0xd5,0x81,0xdd,0xeb,
    0xb0,0x7a,0xb0,0x3e,0xed,0xb7,0x28,0xb5,0x1e,0xf4,0x8b,0xc2,0x93,0xe4,0x5e,0xcd,
    0xfe,0xb4,0x3c,0x6f,0xa7,0x87,0xb6,0xdf,0xe2,0xf6,0xda,0xfb,0xdb,0xd8,0x37,0x4a,
    0x96,0x2c,0xb7,0x17,0xf2,0xfe,0xe9,0xfb,0x3a,0xf1,0xa9,0xa2,0x17,0xda,0xfb,0x26,
    0xd9,0x17,0xe9,0x91,0xd9,0xeb,0xb0,0x07,0xec,0xf5,0xf0,0xae,0x60,0xdf,0x80,0x7f,
    0x45,0x5e,0x6b,0xcd,0xdf,0xfd,0xb4,0x3c,0xb6,0xea,0xfe,0x67,0x99,0x4f,0xab,0x64,
    0xda,0x40,0xaf,0x35,0xd7,0x3d,0xec,0x37,0x82,0x75,0xc2,0x79,0x13,0x9c,0xd5,0xbf,
    0x19,0x5b,0xd1,0xd9,0x5b,0x98,0xbf,0xda,0x5b,0xb1,0xd7,0xe5,0x67,0x26,0xcb,0xfb,
    0xdb,0x89,0xb6,0x76,0xb4,0x59,0x5c,0x17,0x5c,0x6c,0x5f,0x66,0x26,0xb6,0xdf,0x43,
    0x1d,0xd5,0xbe,0x9f,0x9c,0x05,0x67,0x1f,0xe2,0xec,0xd8,0x7e,0x78,0x05,0xef,0x43,
    0x9c,0x19,0xdb,0x1f,0x76,0xba,0x8f,0xe0,0xeb,0xeb,0x8f,0x30,0x0b,0xdb,0x8f,0xae,
    0xe0,0x7b,0x94,0xde,0xaf,0x17,0x16,0xc7,0x98,0x95,0x72,0x3b,0x2e,0xcf,0x63,0xd8,
    0x34,0xf7,0x09,0xfa,0x75,0x9c,0x9e,0x9e,0xe0,0xfb,0xb4,0xb9,0xbf,0x82,0x7f,0x96,
    0xf7,0xba,0x3a,0x8c,0xc1,0x2b,0x0b,0xff,0xfc,0x71,0x35,0xe4,0x39,0xdf,0xe0,0x7d,
    0x8c,0x9c,0xba,0x3f,0xbd,0x82,0xdf,0x19,0xfa,0xa3,0x35,0xde,0x47,0x5b,0x81,0xf8,
    0x8b,0xbc,0x37,0x10,0x7f,0x91,0xfb,0x42,0xb1,0xbb,0x65,0x7a,0x19,0xfc,0x03,0xd8,
    0x82,0x20,0x3a,0xd3,0xfb,0xd0,0x77,0x0a,0x0d,0x83,0x32,0x11,0xe5,0xff,0x2a,0xd8,
    0x29,0xc7,0xf5,0x20,0x67,0xfa,0x35,0xec,0xf7,0x4b,0x06,0x3d,0x2f,0x97,0x39,0x53,
    0x9b,0xc8,0xa7,0x3e,0x57,0xc0,0x5f,0x12,0x1f,0xdd,0x7f,0x44,0xdc,0x15,0xe2,0xb4,
    0xb7,0x1f,0x13,0xd7,0x42,0x9c,0xf6,0xe8,0x13,0xf0,0xd7,0xc5,0x47,0xcf,0xd6,0xa7,
    0x60,0x7a,0xb6,0xe6,0x85,0xf9,0x38,0x7c,0x6e,0x88,0xbf,0xda,0xae,0xca,0x1a,0x47,
    0x8f,0xbe,0x3f,0x26,0x71,0xda,0x97,0xcf,0xa8,0xa9,0xbf,0x17,0xe8,0xdf,0xe7,0xe0,
    0x8f,0xcb,0x4e,0x39,0xed,0x8c,0x09,0x33,0xbf,0x3f,0x24,0x87,0xe5,0xd2,0xe7,0x9c,
    0x78,0xa9,0xdf,0x03,0x31,0xf9,0x54,0x12,0x73,0xd5,0x69,0xf8,0x02,0x0d,0x5d,0x4e,
    0xc3,0x97,0xe0,0xa6,0xe1,0x2b,0x30,0xd3,0x30,0xe9,0x34,0xa8,0x6d,0x42,0xd6,0x24,
    0x75,0x27,0x9c,0x86,0xaf,0xa9,0x1d,0x9d,0x86,0x6f,0xc0,0x4d,0x43,0x39,0x26,0xcc,
    0xfc,0x54,0x83,0xe5,0x9a,0x74,0x1a,0xf6,0xc5,0xe4,0x33,0x4e,0xcc,0x84,0xd3,0xf0,
    0x2d,0x1a,0xca,0x4e,0xc3,0x77,0xe0,0xa6,0xe1,0x7b,0x30,0xd3,0x30,0xed,0x34,0xa8,
    0x6d,0x4a,0xd6,0x34,0x75,0xa7,0x38,0x47,0x5a,0xf7,0x07,0x6a,0xef,0x8b,0xcb,0xe7,
    0x5d,0x39,0x9a,0xef,0xb4,0xe3,0xd8,0x8f,0xdf,0x24,0x71,0x53,0xf0,0xd1,0x6f,0xe2,
    0x4d,0xbe,0x07,0x3b,0x73,0x6f,0xc1,0x79,0xd4,0x9d,0xb9,0xb7,0xc1,0x5f,0xe4,0xcc,
    0xbd,0x03,0xa6,0x79,0x35,0x4e,0xef,0x84,0x77,0x89,0x3b,0x43,0x9c,0xf6,0xf4,0x3d,
    0x70,0xeb,0xfb,0x07,0xc4,0x06,0x87,0x9d,0x05,0x53,0x0d,0x07,0x04,0xd1,0xef,0xef,
    0x1c,0xbe,0x67,0xc9,0x61,0x35,0x3e,0xa4,0xc6,0x88,0xab,0x71,0x1e,0xfc,0x49,0x61,
    0xa6,0x77,0xe0,0x05,0x34,0x9d,0xe3,0x5e,0x38,0xef,0xe6,0xf1,0x23,0xf1,0x7b,0xdc,
    0x3c,0x7e,0x02,0xb7,0x79,0xfc,0x0c,0x66,0xf3,0x28,0xc5,0xe5,0x79,0xa8,0x6d,0x46,
    0xd6,0x2c,0x3d,0x9e,0x41,0x87,0xe6,0xf9,0x85,0xda,0x85,0x7c,0x46,0xa5,0xfc,0xde,
    0xfd,0x15,0xec,0x82,0xfb,0xd6,0x33,0x74,0xaa,0xfd,0x1a,0x71,0xb6,0x8e,0x48,0x2e,
    0xc5,0xaf,0x13,0x7b,0x2d,0xcf,0x55,0x9d,0xeb,0xfa,0x8d,0x3c,0xd7,0xb9,0x6f,0x2a,
    0xdd,0x3d,0xa5,0x73,0x57,0x9e,0xca,0x69,0xd6,0xe9,0x9d,0x43,0xef,0x90,0xd3,0xfb,
    0x3b,0xb8,0xe9,0x9d,0x07,0x33,0xbd,0x8b,0xee,0xfc,0xcd,0xe7,0x3a,0x43,0x8e,0x69,
    0xee,0x05,0xa7,0xf7,0x86,0xd3,0x3b,0x46,0xae,0x3f,0xc1,0xdb,0xe1,0x64,0x71,0x8b,
    0x9c,0x45,0xf5,0xb9,0x49,0xcd,0x59,0xfc,0x17,0xa8,0x5b,0x74,0x7d,0x56,0x9f,0x25,
    0xfd,0x1b,0x86,0xa6,0x25,0x57,0x57,0x9b,0xb8,0xb2,0xcf,0x59,0xfc,0xef,0x3e,0x17,
    0x22,0x20,0xeb,0x65,0xfa,0x5c,0x11,0x53,0xac,0xda,0xad,0xcf,0x55,0xe4,0x52,0xdb,
    0xbf,0xf5,0xd9,0x38,0xe9,0x73,0x8e,0x33,0xf7,0x30,0x31,0x8b,0xc4,0x2f,0xad,0x98,
    0x49,0xc9,0xf9,0x3e,0x14,0xd3,0x2c,0x67,0x88,0xd3,0x3c,0xcf,0xf3,0x3f,0x4a,0x4d,
    0x4c,0x76,0x9b,0x5f,0x6d,0x4c,0xf3,0x1b,0x76,0xf3,0x5b,0x15,0x13,0x6e,0xf3,0xab,
    0x8b,0x09,0xb3,0xf9,0xf5,0xba,0x3e,0xaa,0xad,0x5e,0x56,0x23,0x3c,0xea,0xd1,0xa9,
    0xb5,0x6e,0x89,0xa9,0x5e,0x0d,0x3a,0x8b,0xf4,0xcc,0x74,0xf6,0x12,0xd3,0xe8,0xf8,
    0xac,0x85,0xcf,0x21,0xc7,0x67,0x5d,0x4c,0xb8,0xf1,0x59,0x1f,0x13,0x66,0x7c,0x7a,
    0x1c,0x1f,0xb5,0x35,0xc9,0x6a,0x26,0xb7,0xbe,0xdb,0x3d,0xb0,0x11,0x2e,0x05,0xee,
    0x60,0xe5,0xb8,0x2b,0x2e,0xe3,0x76,0xbf,0xf5,0x10,0xdb,0xec,0xee,0x9e,0xcd,0xf0,
    0x3a,0xec,0xee,0x85,0x5b,0x63,0xc2,0x2f,0x93,0xbf,0x25,0x26,0x6c,0xc4,0x9d,0xfd,
    0xd6,0x98,0xf0,0x51,0xb8,0xb6,0x39,0xae,0x6a,0xdb,0x22,0xab,0x8d,0x7a,0xfa,0x6e,
    0xbc,0xfa,0x88,0xa9,0x71,0x7f,0x1b,0xcc,0xaf,0x8d,0x59,0xab,0xdf,0x23,0x70,0x57,
    0xae,0x7d,0xe4,0x33,0x3e,0x77,0xc0,0xe7,0xa8,0xe3,0x73,0x67,0x4c,0xb8,0xf1,0xe9,
    0x70,0x7c,0xd4,0xb6,0x55,0x56,0x07,0x75,0xb6,0x3a,0x3e,0xbb,0x89,0xd1,0x7a,0x19,
    0x7c,0xcc,0xaf,0xc3,0xf1,0x19,0x88,0xc9,0x47,0x39,0xee,0x26,0x9f,0xf1,0xe9,0x84,
    0xcf,0x90,0xe3,0xb3,0x2d,0x26,0xdc,0xf8,0x74,0x3b,0x3e,0x6a,0xeb,0x92,0xd5,0x4d,
    0x9d,0x2e,0xc7,0x67,0x6f,0x4c,0xff,0xb3,0x0c,0xc4,0xe5,0xf3,0x64,0x7e,0xdd,0x8e,
    0xcf,0x60,0x4c,0x3e,0xca,0x71,0x2f,0xf9,0xfc,0x8c,0x7b,0x9c,0xef,0xa3,0x31,0x9d,
    0x07,0x3d,0x33,0x83,0xd4,0xf5,0xe7,0xb4,0xd7,0xf9,0xee,0x8f,0xe9,0x7c,0xeb,0x79,
    0xd7,0x38,0xcd,0xb3,0x4b,0x98,0x5c,0xc2,0x76,0x53,0xa6,0x56,0x96,0xf5,0x17,0x8d,
    0xab,0xb4,0xba,0x50,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out ivec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       ivec4 transformSrcValue(uvec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
