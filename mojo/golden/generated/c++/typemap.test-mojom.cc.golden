// typemap.test-mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "typemap.test-mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/task/thread_pool/thread_pool_instance.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/features.h"
#include "mojo/public/cpp/bindings/lib/default_construct_tag_internal.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/cpp/bindings/urgent_message_scope.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "typemap.test-mojom-params-data.h"
#include "typemap.test-mojom-shared-message-ids.h"

#include "typemap.test-mojom-import-headers.h"
#include "typemap.test-mojom-test-utils.h"


namespace golden {
Typemapped::Typemapped()
    : field(),
      optional(),
      optional_container() {}

Typemapped::Typemapped(
    uint8_t field_in,
    std::optional<int32_t> optional_in,
    std::vector<std::optional<bool>> optional_container_in)
    : field(std::move(field_in)),
      optional(std::move(optional_in)),
      optional_container(std::move(optional_container_in)) {}

Typemapped::~Typemapped() = default;

void Typemapped::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "field"), this->field,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "optional"), this->optional,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::optional<int32_t>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "optional_container"), this->optional_container,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<std::optional<bool>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool Typemapped::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char IFaceWithTypemap::Name_[] = "golden.IFaceWithTypemap";

IFaceWithTypemap::IPCStableHashFunction IFaceWithTypemap::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (static_cast<messages::IFaceWithTypemap>(message.name())) {
    case messages::IFaceWithTypemap::kEcho: {
      return &IFaceWithTypemap::Echo_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* IFaceWithTypemap::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (static_cast<messages::IFaceWithTypemap>(message.name())) {
      case messages::IFaceWithTypemap::kEcho:
            return "Receive golden::IFaceWithTypemap::Echo";
    }
  } else {
    switch (static_cast<messages::IFaceWithTypemap>(message.name())) {
      case messages::IFaceWithTypemap::kEcho:
            return "Receive reply golden::IFaceWithTypemap::Echo";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t IFaceWithTypemap::Echo_Sym::IPCStableHash() {
  // This method's address is used for identifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  static constexpr uint32_t kHash = 0xdfc8d278;  // IPCStableHash for golden::IFaceWithTypemap::Echo
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class IFaceWithTypemap_Echo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IFaceWithTypemap_Echo_ForwardToCallback(
      IFaceWithTypemap::EchoCallback callback
      ) : callback_(std::move(callback)) {
  }

  IFaceWithTypemap_Echo_ForwardToCallback(const IFaceWithTypemap_Echo_ForwardToCallback&) = delete;
  IFaceWithTypemap_Echo_ForwardToCallback& operator=(const IFaceWithTypemap_Echo_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  IFaceWithTypemap::EchoCallback callback_;
};

IFaceWithTypemapProxy::IFaceWithTypemapProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void IFaceWithTypemapProxy::Echo(
    TypemappedPtr in_param, EchoCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send golden::IFaceWithTypemap::Echo", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("param"), in_param,
                        "<value of type TypemappedPtr>");
   });
#endif

  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  const bool is_urgent = false;

  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt) |
      ((is_urgent) ? mojo::Message::kFlagIsUrgent : 0);

  const size_t estimated_payload_size =
    0;
  mojo::Message message(
      base::to_underlying(messages::IFaceWithTypemap::kEcho), kFlags, estimated_payload_size);
  mojo::internal::MessageFragment<
      ::golden::internal::IFaceWithTypemap_Echo_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->param)::BaseType> param_fragment(
          params.message());
  
  mojo::internal::Serialize<::golden::TypemappedDataView>(
    in_param,
    param_fragment);

  params->param.Set(
      param_fragment.is_null() ? nullptr : param_fragment.data());

  
  MOJO_INTERNAL_CHECK_SERIALIZATION(
    mojo::internal::SendValidation::kDefault,
    !(params->param.is_null()),
    mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
    "null param in IFaceWithTypemap.Echo request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IFaceWithTypemap::Name_);
  message.set_method_name("Echo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IFaceWithTypemap_Echo_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class IFaceWithTypemap_Echo_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static IFaceWithTypemap::EchoCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<IFaceWithTypemap_Echo_ProxyToResponder> proxy(
        new IFaceWithTypemap_Echo_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&IFaceWithTypemap_Echo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IFaceWithTypemap_Echo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      // Instantiate a ScopedFizzleBlockShutdownTasks to allow this request to
      // fizzle if this happens after shutdown and the endpoint is bound to a
      // BLOCK_SHUTDOWN sequence.
      base::ThreadPoolInstance::ScopedFizzleBlockShutdownTasks fizzler;
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  IFaceWithTypemap_Echo_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IFaceWithTypemap::EchoCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      TypemappedPtr in_out);
};

bool IFaceWithTypemap_Echo_ForwardToCallback::Accept(
    mojo::Message* message) {
  DCHECK(message->is_serialized());
  internal::IFaceWithTypemap_Echo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IFaceWithTypemap_Echo_ResponseParams_Data*>(
              message->mutable_payload());
  

  // Validation for IFaceWithTypemap.0
  bool success = true;
  TypemappedPtr p_out{};
  IFaceWithTypemap_Echo_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadOut(&p_out))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IFaceWithTypemap::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null()) {
    std::move(callback_).Run(
std::move(p_out));
  }
  return true;
}

void IFaceWithTypemap_Echo_ProxyToResponder::Run(
    TypemappedPtr in_out) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply golden::IFaceWithTypemap::Echo", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("out"), in_out,
                        "<value of type TypemappedPtr>");
   });
#endif

  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt) |
      ((false) ? mojo::Message::kFlagIsUrgent : 0);

  const size_t estimated_payload_size =
    0;
  mojo::Message message(
      base::to_underlying(messages::IFaceWithTypemap::kEcho), kFlags, estimated_payload_size);
  mojo::internal::MessageFragment<
      ::golden::internal::IFaceWithTypemap_Echo_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->out)::BaseType> out_fragment(
          params.message());
  
  mojo::internal::Serialize<::golden::TypemappedDataView>(
    in_out,
    out_fragment);

  params->out.Set(
      out_fragment.is_null() ? nullptr : out_fragment.data());

  
  MOJO_INTERNAL_CHECK_SERIALIZATION(
    mojo::internal::SendValidation::kDefault,
    !(params->out.is_null()),
    mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
    "null out in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IFaceWithTypemap::Name_);
  message.set_method_name("Echo");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool IFaceWithTypemapStubDispatch::Accept(
    IFaceWithTypemap* impl,
    mojo::Message* message) {
  switch (static_cast<messages::IFaceWithTypemap>(message->header()->name)) {
    case messages::IFaceWithTypemap::kEcho: {
      break;
    }
  }
  return false;
}

// static
bool IFaceWithTypemapStubDispatch::AcceptWithResponder(
    IFaceWithTypemap* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (static_cast<messages::IFaceWithTypemap>(message->header()->name)) {
    case messages::IFaceWithTypemap::kEcho: {
      internal::IFaceWithTypemap_Echo_Params_Data* params =
          reinterpret_cast<
              internal::IFaceWithTypemap_Echo_Params_Data*>(
                  message->mutable_payload());
      

      // Validation for IFaceWithTypemap.0
      bool success = true;
      TypemappedPtr p_param{};
      IFaceWithTypemap_Echo_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadParam(&p_param))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IFaceWithTypemap::Name_, 0, false);
        return false;
      }
      auto callback =
          IFaceWithTypemap_Echo_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Echo(        
        std::move(p_param), std::move(callback));
      return true;
    }
  }
  return false;
}
namespace {
}  // namespace
static const mojo::internal::GenericValidationInfo kIFaceWithTypemapValidationInfo[] = {
    { &internal::IFaceWithTypemap_Echo_Params_Data::Validate,
     &internal::IFaceWithTypemap_Echo_ResponseParams_Data::Validate},
};

bool IFaceWithTypemapRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::golden::IFaceWithTypemap::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kIFaceWithTypemapValidationInfo);
}

bool IFaceWithTypemapResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::golden::IFaceWithTypemap::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kIFaceWithTypemapValidationInfo);
}


}  // golden


namespace mojo {


// static
bool StructTraits<::golden::Typemapped::DataView, ::golden::TypemappedPtr>::Read(
    ::golden::Typemapped::DataView input,
    ::golden::TypemappedPtr* output) {
  bool success = true;
  ::golden::TypemappedPtr result(::golden::Typemapped::New());
  
      if (success)
        result->field = input.field();
      if (success) {
        result->optional = input.optional();
      }
      if (success && !input.ReadOptionalContainer(&result->optional_container))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace golden {


void IFaceWithTypemapInterceptorForTesting::Echo(TypemappedPtr param, EchoCallback callback) {
  GetForwardingInterface()->Echo(
    std::move(param)
    , std::move(callback));
}
IFaceWithTypemapAsyncWaiter::IFaceWithTypemapAsyncWaiter(
    IFaceWithTypemap* proxy) : proxy_(proxy) {}

IFaceWithTypemapAsyncWaiter::~IFaceWithTypemapAsyncWaiter() = default;


void IFaceWithTypemapAsyncWaiter::Echo(
    TypemappedPtr param, TypemappedPtr* out_out) {
  base::RunLoop loop;
  proxy_->Echo(
      std::move(param),
      base::BindOnce(
          [](base::RunLoop* loop,
             TypemappedPtr* out_out
,
             TypemappedPtr out) {*out_out = std::move(out);
            loop->Quit();
          },
          &loop,
          out_out));
  loop.Run();
}

TypemappedPtr IFaceWithTypemapAsyncWaiter::Echo(
    TypemappedPtr param) {
  TypemappedPtr async_wait_result;
  Echo(std::move(param),&async_wait_result);
  return async_wait_result;
}






}  // golden


#if defined(__clang__)
#pragma clang diagnostic pop
#endif