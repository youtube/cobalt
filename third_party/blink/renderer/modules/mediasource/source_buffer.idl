/*
 * Copyright (C) 2013 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://w3c.github.io/media-source/#idl-def-sourcebuffer

// This typedef is needed for MSE-for-WebCodecs. Explainer:
// https://github.com/wolenetz/mse-for-webcodecs/blob/main/explainer.md
typedef (sequence<(EncodedAudioChunk or EncodedVideoChunk)> or EncodedAudioChunk or EncodedVideoChunk) EncodedChunks;

enum AppendMode {
    "segments",
    "sequence"
};

[
    ActiveScriptWrappable,
    Exposed=(Window, DedicatedWorker)
] interface SourceBuffer : EventTarget {

    // Gets or sets the AppendMode.
    [RaisesException=Setter] attribute AppendMode mode;

    readonly attribute boolean updating;

    // Returns the time ranges buffered.
    [RaisesException=Getter] readonly attribute TimeRanges buffered;

    // Applies an offset to media segment timestamps.
    [RaisesException=Setter] attribute double timestampOffset;

    [RuntimeEnabled=AudioVideoTracks] readonly attribute AudioTrackList audioTracks;
    [RuntimeEnabled=AudioVideoTracks] readonly attribute VideoTrackList videoTracks;

    // Presentation timestamp for the start of append window.
    [RaisesException=Setter] attribute double appendWindowStart;

    // Presentation timestamp for the end of append window.
    [RaisesException=Setter] attribute unrestricted double appendWindowEnd;

    attribute EventHandler onupdatestart;
    attribute EventHandler onupdate;
    attribute EventHandler onupdateend;
    attribute EventHandler onerror;
    attribute EventHandler onabort;

    // Append segment data.
    [RaisesException] void appendBuffer(ArrayBuffer data);
    [RaisesException] void appendBuffer(ArrayBufferView data);

    // Append WebCodecs structured, "containerless" media. Explainer:
    // https://github.com/wolenetz/mse-for-webcodecs/blob/main/explainer.md
    [
        CallWith=ScriptState,
        RaisesException,
        RuntimeEnabled=MediaSourceExtensionsForWebCodecs,
        Measure
    ] Promise<void> appendEncodedChunks(EncodedChunks chunks);

    // Abort the current segment append sequence.
    [RaisesException] void abort();
    [RaisesException] void remove(double start, unrestricted double end);

    // Explicitly change the container or codecs
    [RaisesException, Measure] void changeType(DOMString type);

    // For MSE-for-WebCodecs. Explainer:
    // https://github.com/wolenetz/mse-for-webcodecs/blob/main/explainer.md
    [
      RaisesException,
      RuntimeEnabled=MediaSourceExtensionsForWebCodecs,
      ImplementedAs=ChangeTypeUsingConfig,
      MeasureAs=ChangeTypeUsingConfig,
      CallWith=ExecutionContext
    ] void changeType(SourceBufferConfig config);

    // Gets or sets the TrackDefaultList this SourceBuffer may consult during
    // the initialization segment algorithm.
    [RaisesException=Setter, RuntimeEnabled=MediaSourceExperimental] attribute TrackDefaultList trackDefaults;
};
