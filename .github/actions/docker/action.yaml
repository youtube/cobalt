name: Docker Image Build
description: Builds Cobalt build docker images.
inputs:
  docker_service:
    description: "Docker compose service."
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout files
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1
      with:
        driver-opts: |
          image=ghcr.io/youtube/cobalt/moby-buildkit-mirror:main
    - name: Set env vars
      run: |
        set -x
        echo "DOCKER_REPO=${{ github.repository }}" >> $GITHUB_ENV
        tag=${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref_name }}
        tag=${tag//\//__}
        tag="${tag%.1[+,-]}"
        echo "FLOATING_TAG=${tag}" >> $GITHUB_ENV
        echo "GIT_BRANCH=${tag}" >> $GITHUB_ENV
        short_git_sha="${{ github.sha }}::7}"
        echo "GIT_SHA=${short_git_sha}" >> $GITHUB_ENV
        docker_source_git_hash=$(git log -n 1 --pretty=format:%h -- cobalt/docker docker-compose.yaml)
        echo "DOCKER_SOURCE_GIT_HASH=${docker_source_git_hash}" >> $GITHUB_ENV
      shell: bash
    - name: Set Docker Tag
      id: set-docker-tag-github
      if: ${{ (github.event_name != 'pull_request') || (github.event.pull_request.head.repo.full_name == github.repository) }}
      run: |
        set -x
        echo "DOCKER_TAG=ghcr.io/${{ github.repository }}/${{ inputs.docker_service }}:${GIT_SHA}" >> $GITHUB_ENV
        echo "DOCKER_FLOATING_TAG=ghcr.io/${{ github.repository }}/${{ inputs.docker_service }}:${FLOATING_TAG}" >> $GITHUB_ENV
      shell: bash
    # Handle Google Artifact Registry used for pull requests off forked repos.
    - name: Set up Cloud SDK
      uses: isarkis/setup-gcloud@40dce7857b354839efac498d3632050f568090b6 # v1.1.1
    - name: Login to GAR and set tag
      if: ${{ (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name != github.repository) }}
      run: |
        # Need to login to GAR to be able to push images created by fork based PR workflows.
        PROJECT_NAME=$(gcloud config get-value project)
        METADATA="http://metadata.google.internal./computeMetadata/v1"
        SVC_ACCT="${METADATA}/instance/service-accounts/default"
        ACCESS_TOKEN=$(curl -H 'Metadata-Flavor: Google' ${SVC_ACCT}/token | cut -d'"' -f 4)
        printf ${ACCESS_TOKEN} | docker login -u oauth2accesstoken --password-stdin https://us-central1-docker.pkg.dev
        echo "DOCKER_TAG=us-central1-docker.pkg.dev/${PROJECT_NAME}/github/${{ inputs.docker_service }}:${GIT_SHA}" >> $GITHUB_ENV
        echo "DOCKER_FLOATING_TAG=us-central1-docker.pkg.dev/${PROJECT_NAME}/github/${{ inputs.docker_service }}:${FLOATING_TAG}" >> $GITHUB_ENV
      shell: bash
    - name: Login to Marketplace GAR
      run: |
        # Need to login to Marketplace to be able to pull image metadata.
        PROJECT_NAME=$(gcloud config get-value project)
        METADATA="http://metadata.google.internal./computeMetadata/v1"
        SVC_ACCT="${METADATA}/instance/service-accounts/default"
        ACCESS_TOKEN=$(curl -H 'Metadata-Flavor: Google' ${SVC_ACCT}/token | cut -d'"' -f 4)
        printf ${ACCESS_TOKEN} | docker login -u oauth2accesstoken --password-stdin https://marketplace.gcr.io
      shell: bash
    - name: Docker Pull Cache
      id: docker-pull
      continue-on-error: true
      run: |
        set -x
        docker pull "${DOCKER_TAG}"
      shell: bash
    - name: Docker Build
      if: steps.docker-pull.outcome != 'success'
      run: |
        set -x
        cat ${GITHUB_WORKSPACE}/cobalt/docker/unittest/Dockerfile
        docker compose build ${{ inputs.docker_service }}
        SOURCE_IMAGE="ghcr.io/${{ github.repository }}/${{ inputs.docker_service }}:${FLOATING_TAG}"
        docker tag "${SOURCE_IMAGE}" "${DOCKER_TAG}"
        docker tag "${DOCKER_TAG}" "${DOCKER_FLOATING_TAG}"
      shell: bash
    - name: Docker Push Git SHA Tag
      if: steps.docker-pull.outcome != 'success'
      run: |
        set -x
        docker push ${DOCKER_TAG}
        docker push ${DOCKER_FLOATING_TAG}
      shell: bash
