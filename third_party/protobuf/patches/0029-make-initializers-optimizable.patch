diff --git a/src/google/protobuf/generated_message_util.cc b/src/google/protobuf/generated_message_util.cc
index 09b7db5d66226..887f97cc28639 100644
--- a/src/google/protobuf/generated_message_util.cc
+++ b/src/google/protobuf/generated_message_util.cc
@@ -87,26 +87,17 @@ static void InitWeakDefaults() {
 void InitWeakDefaults() {}
 #endif
 
-PROTOBUF_CONSTINIT std::atomic<bool> init_protobuf_defaults_state{false};
-static bool InitProtobufDefaultsImpl() {
+PROTOBUF_CONSTINIT bool init_protobuf_defaults_state{false};
+void InitProtobufDefaultsSlow() {
   fixed_address_empty_string.DefaultConstruct();
-  OnShutdownDestroyString(fixed_address_empty_string.get_mutable());
+  init_protobuf_defaults_state = true;
   InitWeakDefaults();
-
-
-  init_protobuf_defaults_state.store(true, std::memory_order_release);
-  return true;
-}
-
-void InitProtobufDefaultsSlow() {
-  static bool is_inited = InitProtobufDefaultsImpl();
-  (void)is_inited;
 }
 // Force the initialization of the empty string.
 // Normally, registration would do it, but we don't have any guarantee that
 // there is any object with reflection.
 PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 static std::true_type init_empty_string =
-    (InitProtobufDefaultsSlow(), std::true_type{});
+    (InitProtobufDefaults(), std::true_type{});
 
 size_t StringSpaceUsedExcludingSelfLong(const std::string& str) {
   const void* start = &str;
diff --git a/src/google/protobuf/generated_message_util.h b/src/google/protobuf/generated_message_util.h
index ab676e406be78..99bb53ef7c5cb 100644
--- a/src/google/protobuf/generated_message_util.h
+++ b/src/google/protobuf/generated_message_util.h
@@ -66,11 +66,14 @@ namespace internal {
 // This fastpath inlines a single branch instead of having to make the
 // InitProtobufDefaults function call.
 // It also generates less inlined code than a function-scope static initializer.
-PROTOBUF_EXPORT extern std::atomic<bool> init_protobuf_defaults_state;
+PROTOBUF_EXPORT extern bool init_protobuf_defaults_state;
 PROTOBUF_EXPORT void InitProtobufDefaultsSlow();
 PROTOBUF_EXPORT inline void InitProtobufDefaults() {
-  if (PROTOBUF_PREDICT_FALSE(
-          !init_protobuf_defaults_state.load(std::memory_order_acquire))) {
+  // This is not thread-safe, but is called within a static initializer. As long
+  // as there are no calls to this function from off the main thread, before
+  // main() starts, this is safe. After main() starts,
+  // init_protobuf_defaults_state will always be true.
+  if (PROTOBUF_PREDICT_FALSE(!init_protobuf_defaults_state)) {
     InitProtobufDefaultsSlow();
   }
 }
diff --git a/src/google/protobuf/port_def.inc b/src/google/protobuf/port_def.inc
index 8200a61ba8ad9..33ff5fd1d3219 100644
--- a/src/google/protobuf/port_def.inc
+++ b/src/google/protobuf/port_def.inc
@@ -657,14 +657,6 @@ static_assert(PROTOBUF_ABSL_MIN(20230125, 3),
 #define PROTOBUF_FINAL final
 #endif
 
-// Determines the platforms where descriptor weak messages can be used.
-#ifdef PROTOBUF_DESCRIPTOR_WEAK_MESSAGES_ALLOWED
-#error PROTOBUF_DESCRIPTOR_WEAK_MESSAGES_ALLOWED was previously defined
-#endif
-#if defined(__GNUC__) && defined(__clang__) && !defined(__APPLE__) && \
-    !defined(_MSC_VER)
-#define PROTOBUF_DESCRIPTOR_WEAK_MESSAGES_ALLOWED
-#endif
 
 
 // TODO: Enable the feature by default and remove this flag.
