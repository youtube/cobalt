// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000022.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000022[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x57,0x6d,0x68,0x95,0x65,
    0x18,0x7e,0xef,0x73,0x76,0xb6,0x39,0xb7,0x39,0x99,0x9b,0x39,0x4c,0x6c,0x9a,0x19,
    0x1b,0x63,0xe5,0xfc,0x58,0xea,0xd4,0xa4,0x4d,0x49,0x5d,0xdb,0x10,0x2b,0x85,0x69,
    0x49,0x68,0xb4,0x31,0xa6,0x48,0x99,0xae,0xb0,0x0f,0x53,0x4a,0xfd,0x65,0x89,0xb2,
    0xd2,0x5f,0xa2,0x38,0x2a,0x87,0x49,0x4b,0x21,0x0c,0x02,0x11,0x31,0xa7,0x26,0x32,
    0x37,0x4d,0xfb,0xd0,0xfc,0xf8,0x15,0x7d,0x11,0xf6,0x5c,0xef,0x7d,0xdd,0xec,0xe6,
    0x90,0x34,0x78,0x3c,0xe7,0xb9,0xee,0xaf,0xeb,0xbe,0x9e,0xfb,0x79,0xcf,0x6b,0x32,
    0x31,0x2e,0x2b,0x8a,0x24,0xca,0x89,0xb2,0xa3,0x6b,0x12,0xc5,0x7f,0xc3,0xa3,0x44,
    0x84,0xaf,0x43,0xa3,0xcc,0xf8,0xb3,0x6e,0x41,0xd3,0x82,0x8a,0x35,0x6b,0x57,0x56,
    0x54,0x4d,0xae,0x84,0x3d,0x3f,0x4a,0xc6,0x7e,0xb0,0x0d,0x8b,0xb2,0xa2,0x8c,0xf0,
    0x89,0xd5,0xb2,0x62,0x75,0x2b,0xf0,0x73,0x61,0xdd,0x0d,0xab,0x20,0xf8,0x01,0x0f,
    0x05,0xa2,0x79,0x51,0x2a,0x7a,0x4c,0xd3,0x47,0xe3,0xf8,0x69,0x98,0x10,0xcb,0x76,
    0x58,0x82,0x58,0x81,0xc3,0x92,0xc4,0x46,0x38,0x2c,0x83,0xd8,0x03,0x0e,0x4b,0x11,
    0x1b,0xed,0xb0,0x4c,0x62,0x63,0x1d,0x96,0x45,0x6c,0xbc,0xc3,0xb2,0x89,0x4d,0x74,
    0xd8,0x10,0x62,0xe5,0x0e,0xcb,0x21,0x56,0xe9,0xb0,0xa1,0xc4,0xaa,0x1c,0x96,0x4b,
    0x6c,0x9a,0xc3,0xf2,0x88,0xcd,0x70,0x58,0x3e,0xb1,0xd9,0xd0,0x3b,0x74,0x6a,0x1a,
    0xd4,0x85,0x0e,0xcf,0x31,0xf7,0x30,0xee,0xfb,0xc3,0x67,0x29,0x35,0xb4,0xfd,0x43,
    0x6e,0x0f,0xed,0xc7,0x70,0x5f,0x18,0xb2,0x24,0x62,0x7b,0x32,0xd6,0x0f,0xdf,0x8b,
    0xc3,0xb7,0x4c,0x6a,0x51,0x14,0xfc,0x73,0xf9,0x1d,0xe7,0x30,0x32,0xec,0xf3,0xc8,
    0x3b,0xc1,0x7d,0x21,0xf5,0xcb,0xa0,0x7f,0x11,0xfd,0x23,0xda,0x8b,0x63,0x5c,0xed,
    0x65,0xe1,0xdf,0x4c,0x6a,0x3f,0xba,0x62,0xe1,0xf4,0x11,0x21,0xcb,0x83,0x0e,0x07,
    0xef,0xc6,0xa3,0x8b,0xe6,0xd8,0xfe,0x91,0xb0,0x16,0x2f,0x3e,0x5f,0x63,0xfb,0x47,
    0xc3,0x9a,0x99,0xb3,0x79,0x96,0xed,0xcb,0xc2,0xea,0xaa,0x5b,0x31,0x73,0x4c,0x98,
    0x4a,0xd3,0xce,0xf8,0xd9,0x2a,0xfa,0x9f,0x65,0x3e,0x63,0x43,0xce,0xc7,0x79,0x9e,
    0xc8,0x35,0x9d,0xfb,0x49,0xc4,0xca,0xa8,0x45,0x15,0xb5,0x80,0xff,0x64,0xda,0xf2,
    0x9c,0xbd,0x9a,0x33,0x06,0xfb,0x13,0xb4,0x17,0xd1,0x8e,0xcf,0x99,0xd4,0xc6,0xfc,
    0x6b,0xa9,0x9f,0xd9,0x17,0x30,0xbf,0xd9,0x1b,0x78,0xfe,0xb6,0x5f,0xc6,0xf3,0xb6,
    0x7d,0x3b,0x67,0x15,0x5a,0xbf,0xce,0x5c,0x49,0x67,0xdf,0xc4,0xb9,0x35,0xcd,0xb6,
    0xba,0xfa,0xd8,0x7f,0x18,0xef,0xde,0x98,0x6b,0xfe,0x9d,0x69,0xfd,0x1e,0xe0,0x3c,
    0xdb,0xfe,0x08,0xfb,0x45,0x7f,0x5f,0xd0,0x37,0xd7,0xd9,0x7b,0x38,0x1b,0xb6,0x3f,
    0x96,0xd6,0xef,0x09,0xce,0x02,0xe2,0x7b,0xd9,0x6b,0x21,0xf5,0xee,0xe5,0xf3,0xc1,
    0x66,0xed,0x3c,0xfb,0x41,0xbe,0x51,0xa1,0x52,0x9f,0xdb,0xfb,0x3f,0x3e,0x9a,0xe2,
    0x9c,0x97,0xf9,0xbd,0x8f,0x39,0xb1,0xef,0x4f,0xe3,0x70,0x9d,0x1a,0xa1,0xc6,0xcf,
    0xe4,0x9f,0x64,0xfc,0x1d,0x7e,0x2f,0x66,0xfc,0x1d,0x3e,0xaf,0x80,0x4d,0x09,0x27,
    0x9b,0x20,0xff,0x88,0xd8,0x1f,0x01,0x49,0xc5,0xe7,0xaa,0x77,0xe1,0x02,0x7b,0xa8,
    0x0f,0xa7,0x02,0xfe,0xdf,0x13,0xbb,0xe0,0xb8,0xb6,0xf2,0x1e,0x5d,0xa4,0x7d,0x4e,
    0xc8,0x80,0x59,0xba,0xc7,0x79,0xab,0x62,0xbe,0x3c,0x06,0xdc,0x8b,0xcf,0x31,0x15,
    0xef,0x45,0x34,0x0e,0x38,0xe2,0x30,0x63,0x09,0xd1,0xb8,0x6a,0xc6,0x61,0x8e,0x92,
    0xa2,0xf8,0xc1,0xe0,0x83,0x3b,0x96,0x21,0x8a,0x61,0xfe,0x7e,0x0f,0xcc,0x73,0x28,
    0xda,0x5f,0xc1,0x1f,0xb6,0x54,0x58,0xc0,0xe2,0x7e,0x04,0x73,0x97,0x8a,0x75,0xc9,
    0x12,0xad,0x89,0xbf,0x0e,0xea,0x97,0x2d,0x8a,0x37,0x86,0xd3,0x00,0xa7,0xa3,0xa2,
    0x98,0xf9,0xfd,0x19,0x72,0x58,0x2e,0x7c,0xfe,0x16,0xb4,0x80,0xdf,0x77,0xf4,0x49,
    0x31,0x26,0xe5,0x7a,0x18,0xca,0x1e,0x6a,0x5d,0x0f,0xb9,0xa2,0xb8,0xf5,0x90,0x27,
    0x8a,0x59,0x0f,0x85,0xae,0x07,0xd8,0xf2,0xc3,0x2a,0x64,0xdd,0x7c,0xd7,0x43,0x81,
    0xb0,0xb6,0xeb,0x61,0xb8,0x28,0x6e,0x3d,0xf4,0x88,0x62,0xe6,0x87,0x1e,0x2c,0x57,
    0xa1,0xeb,0xe1,0x2c,0x7d,0xd0,0x57,0x0f,0x6b,0x5a,0x0f,0x23,0xd8,0x43,0x83,0xeb,
    0xa1,0x48,0x14,0xb7,0x1e,0x8a,0x45,0x31,0xeb,0xa1,0xc4,0xf5,0x00,0xdb,0xc8,0xb0,
    0x4a,0x58,0x17,0xdf,0xeb,0x59,0x77,0x94,0x68,0xed,0xb3,0x32,0x38,0xef,0xe0,0x68,
    0xbe,0x25,0x8e,0x63,0x2f,0xfd,0xc0,0x7b,0x14,0x73,0x82,0x0f,0xee,0xc4,0x00,0xef,
    0x83,0xcd,0xdc,0x15,0xce,0xdc,0x31,0x37,0x73,0x57,0x89,0xbf,0xc9,0x99,0xbb,0x46,
    0xac,0x97,0xbd,0xe2,0xde,0xff,0xc8,0xb8,0xeb,0x8c,0x83,0xa6,0x3f,0x11,0x37,0xdd,
    0x7f,0x61,0x6c,0xe4,0xb0,0x1b,0xc4,0xd0,0xc3,0x33,0x41,0x7b,0xdc,0xbf,0x9b,0xf4,
    0xbd,0xc1,0x1c,0x56,0xe3,0x57,0xd6,0xe8,0x71,0x35,0x6e,0x11,0x6f,0x0e,0xbd,0xe2,
    0xbe,0xdd,0x66,0x4f,0x37,0xf9,0x5c,0xb8,0x15,0x0d,0x9e,0xc7,0x38,0x9e,0xc7,0x32,
    0x77,0x1e,0xe3,0x45,0x71,0x3b,0x8f,0x87,0x45,0x31,0x3b,0x8f,0x49,0xee,0x3c,0x60,
    0x9b,0x80,0x1c,0xd4,0x78,0x02,0x67,0x0a,0xcf,0xa0,0x89,0xa2,0xb5,0x23,0xc6,0xed,
    0x60,0xdc,0xdf,0xe1,0x3b,0x72,0xbd,0xcd,0x18,0x7c,0x7e,0xc5,0x5a,0xef,0x8a,0xc6,
    0x8d,0x66,0xcc,0x76,0x57,0x0b,0xb6,0xcd,0x61,0x6d,0x65,0x1c,0x3e,0x73,0x43,0x8f,
    0xa8,0xf5,0x3e,0xcf,0xbc,0x84,0x75,0xf1,0xbb,0xf8,0x0e,0x79,0x7c,0x20,0x6a,0xc7,
    0x6f,0xe3,0x5b,0xc4,0xb6,0x89,0xe2,0x65,0x9c,0x91,0x1d,0xcc,0x89,0xfc,0x16,0xb7,
    0x85,0x5c,0x4a,0xd3,0x7c,0xb6,0xc7,0xcf,0x1b,0x89,0xbf,0xef,0xe0,0x4c,0xc1,0xff,
    0x9c,0x68,0x5e,0xf0,0xda,0x42,0xae,0xb8,0x3b,0x38,0x83,0xe3,0xa2,0xf6,0xdb,0xee,
    0xac,0x11,0x53,0x4e,0x4c,0xd8,0xef,0xbe,0x34,0x8d,0x76,0xb2,0xe6,0x4e,0xa7,0xd1,
    0x47,0xa2,0x71,0xa6,0xd1,0x5e,0xa7,0x11,0x6c,0xbb,0xc2,0xda,0xc3,0xb8,0x3d,0x4e,
    0xa3,0x4e,0xa7,0x51,0x79,0x9a,0x46,0x1f,0x8b,0xda,0xbd,0x46,0x9f,0x88,0xe2,0xa6,
    0xd1,0x3e,0xe6,0xdc,0xe5,0x34,0xda,0x4d,0x2e,0xa5,0x69,0x3e,0x7b,0x9d,0x46,0xfb,
    0x9c,0x46,0x17,0x44,0xf3,0x82,0xd7,0x6e,0x72,0x35,0x8d,0xbe,0x16,0xb5,0x1f,0x27,
    0x4f,0xd3,0xa8,0x92,0x1a,0x25,0xd8,0x6f,0x77,0x9a,0x46,0xfb,0x59,0x73,0xbf,0xd3,
    0xe8,0x80,0x68,0x9c,0x69,0x74,0xd8,0x69,0x04,0xdb,0xc1,0xb0,0xba,0x18,0xd7,0xe5,
    0x34,0xfa,0xd4,0x69,0x54,0x99,0xa6,0xd1,0x67,0xa2,0x76,0xaf,0xd1,0xe7,0xa2,0xb8,
    0x69,0xd4,0xcd,0x9c,0x07,0x9d,0x46,0x87,0xc8,0xa5,0x34,0xcd,0xe7,0xb0,0xd3,0xa8,
    0xdb,0x69,0x74,0x51,0x34,0x2f,0x78,0x1d,0x22,0x57,0xd3,0xe8,0x1b,0x51,0x3b,0xb4,
    0x4a,0x30,0x9f,0xdd,0xbd,0x49,0xcc,0x01,0xbf,0x4b,0xd4,0x0c,0xcf,0x3c,0xc4,0x74,
    0xbb,0x67,0x70,0x15,0xef,0x7c,0xbb,0xbb,0xf3,0x93,0x45,0x71,0xbb,0xf3,0x53,0x44,
    0x31,0xbb,0xf3,0x4d,0x4e,0x3f,0xd8,0xa6,0x86,0x35,0x8b,0x75,0x67,0xb9,0xdc,0xb3,
    0x99,0x7b,0x93,0xcb,0x3d,0x47,0x14,0xb7,0xdc,0x4f,0x8a,0x62,0x96,0xbb,0xce,0xe5,
    0x86,0x6d,0x6e,0x58,0x75,0xcc,0x3d,0xd7,0x3d,0x4f,0x9e,0x12,0xed,0x0b,0xef,0x14,
    0x5f,0x32,0x57,0xad,0x28,0xbe,0x95,0x5a,0x58,0x5c,0x1d,0xb5,0x80,0xcf,0x3c,0xd1,
    0x9a,0xe0,0x59,0xcb,0xfc,0xa8,0xdb,0xe8,0xea,0xc2,0x67,0x3e,0x74,0x66,0xfc,0x7c,
    0x57,0xf7,0x69,0x57,0xb7,0x3e,0xbc,0x29,0xe2,0x1d,0x72,0x21,0xb1,0x4b,0x32,0xf8,
    0xce,0x92,0xe0,0xf3,0x1a,0xf6,0x45,0xa2,0x71,0xb6,0xde,0x0b,0xb9,0x80,0xd7,0x8b,
    0xc6,0x2e,0x8a,0x7f,0xb7,0x86,0xc4,0x67,0xd5,0xc0,0x3c,0xb0,0x65,0xf0,0xdd,0xd8,
    0xde,0x51,0xd1,0x93,0x71,0x6a,0x74,0xe7,0x7b,0x99,0x31,0xe8,0xb3,0x81,0xdc,0xe1,
    0xdb,0x44,0xdf,0xa9,0x8e,0x7f,0xf5,0x7f,0xf0,0x9f,0x7e,0x1f,0xfe,0xdb,0xc8,0x73,
    0x86,0xa8,0x4f,0xb5,0xe3,0x59,0x43,0xff,0x19,0xf7,0xe1,0x69,0xb5,0x9b,0x1c,0xcf,
    0x3e,0x51,0xae,0xe0,0x5e,0xc3,0xb9,0x41,0x0d,0xd8,0x16,0x8b,0xda,0xf1,0x7e,0xdd,
    0xc2,0xff,0x07,0x2d,0x11,0xc5,0x6d,0x9e,0x9e,0xe5,0x3c,0x75,0xba,0x79,0x7a,0x4e,
    0x14,0xb7,0x79,0x7a,0x5e,0x14,0xb3,0x79,0xea,0x70,0xe7,0x0a,0xdb,0xd2,0xb0,0x96,
    0x93,0xdb,0x72,0x97,0x7b,0x05,0x73,0x1f,0x70,0xb9,0x5f,0x10,0xc5,0x2d,0xf7,0x8b,
    0xa2,0x98,0xe5,0xde,0xe8,0x72,0xc3,0xb6,0x32,0xac,0x55,0xcc,0xbd,0xca,0xfd,0xf6,
    0xaf,0x66,0xee,0x23,0xee,0x77,0xf9,0x65,0x51,0xfc,0x5b,0xfe,0xce,0xbf,0x22,0x8a,
    0xe1,0xb7,0xdb,0xea,0xb5,0x88,0xe2,0xc7,0x58,0xaf,0xcd,0xd5,0x83,0xad,0x35,0xac,
    0x36,0xd6,0x6b,0xe5,0x73,0x01,0xba,0x9d,0x22,0xc7,0x25,0xee,0xdd,0xcc,0xfc,0xda,
    0x78,0x1e,0xf0,0xeb,0x17,0xf5,0x01,0xd7,0x53,0xcc,0x67,0x7c,0xda,0xc9,0xe7,0x84,
    0xe3,0xb3,0x46,0x14,0x37,0x3e,0xeb,0x1c,0x1f,0xd8,0xd6,0x86,0xb5,0x8e,0x75,0xd6,
    0x3a,0x3e,0xa7,0xc9,0xa7,0xdf,0x3d,0xa7,0xcc,0x6f,0x9d,0xe3,0x33,0x20,0xea,0x03,
    0x8e,0xa7,0x99,0xcf,0xf8,0xbc,0x4a,0x3e,0x9b,0x1c,0x9f,0xd7,0x44,0x71,0xe3,0xb3,
    0xc1,0xf1,0x81,0x6d,0x7d,0x58,0x1b,0x58,0x67,0xbd,0xe3,0x73,0x46,0xf4,0xff,0x8d,
    0x03,0x32,0x38,0xaf,0xe6,0xb7,0xc1,0xf1,0xf9,0x41,0xd4,0x07,0x1c,0xcf,0x30,0x1f,
    0x7c,0x37,0xd2,0x77,0x25,0xef,0x15,0x66,0xe5,0x25,0x6a,0x89,0x7c,0x56,0xe7,0xa4,
    0x0c,0xe2,0xf6,0xfe,0x69,0xb1,0x1b,0x5d,0x9d,0xab,0xa2,0xb5,0x50,0xfb,0x24,0xe7,
    0x08,0xbe,0x1d,0xf4,0x5d,0xca,0x7b,0x07,0xdf,0x66,0xe6,0x5b,0xc2,0x7b,0x97,0xc5,
    0xbb,0x6a,0x7d,0x58,0x4c,0x87,0xcb,0x7f,0x45,0xb4,0x06,0x6a,0x36,0xf3,0x0e,0xd4,
    0x84,0x88,0xbb,0xb4,0xfd,0x13,0xa6,0x64,0x5a,0x58,0xff,0x02,0x81,0x0d,0xc7,0x64,
    0xc0,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture3D src;
// layout(location = 0)out uvec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       uvec4 transformSrcValue(vec4 srcValue)
// {
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//           uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           vec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
