# Copyright 2025 The Cobalt Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/chromecast_build.gni")
import("//build/config/ui.gni")
import("//mojo/public/tools/bindings/mojom.gni")
import("//starboard/build/buildflags.gni")
import("//tools/grit/grit_rule.gni")

# TODO(crbug.com/1336055, spang): Investigate using shell_views with cast builds as
# true.
shell_use_toolkit_views = toolkit_views && !is_castos

# Web test support only built for the linux-x64x11-no-starboard target.
support_web_tests = !is_android && !is_starboard

# TODO(b/384748332): Changes below are for removing dependency on content shell
config("content_shell_lib_warnings") {
  if (is_clang) {
    # TODO(thakis): Remove this once http://crbug.com/383820 is figured out
    cflags = [ "-Wno-nonnull" ]
  }
}

# TODO(b/384748332): Remove dependency on content shell
group("content_shell_lib_deps") {
  testonly = true
  public_deps = [
    "//content/shell:android_shell_descriptors",

    # content_shell_lib also exposes all public content APIs.
    ":content_browsertests_mojom",
    ":resources",
    ":shell_controller_mojom",
    "//base",
    "//base:base_static",
    "//base/third_party/dynamic_annotations",
    "//cc/base",
    "//components/cdm/renderer",
    "//components/crash/content/browser",
    "//components/crash/core/app",
    "//components/custom_handlers",
    "//components/custom_handlers:test_support",
    "//components/keyed_service/content",
    "//components/metrics",
    "//components/metrics:net",
    "//components/metrics:test_support",
    "//components/network_hints/browser:browser",
    "//components/network_hints/renderer",
    "//components/network_session_configurator/common",
    "//components/origin_trials:browser",
    "//components/origin_trials:common",
    "//components/performance_manager",
    "//components/prefs",
    "//components/services/storage/test_api",
    "//components/url_formatter",
    "//components/variations",
    "//components/variations/service",
    "//components/web_cache/renderer",
    "//content:content_resources",
    "//content:dev_ui_content_resources",
    "//content/common:main_frame_counter",
    "//content/public/app",
    "//content/public/browser",
    "//content/public/child",
    "//content/public/common",
    "//content/public/gpu",
    "//content/public/renderer",
    "//content/public/utility",
    "//content/test:content_test_mojo_bindings",
    "//content/test:test_support",
    "//media",
    "//media/mojo:buildflags",
    "//net",
    "//net:net_resources",
    "//ppapi/buildflags",
    "//services/device/public/cpp:test_support",
    "//services/network:network_service",
    "//services/network/public/cpp",
    "//services/test/echo:lib",
    "//services/test/echo/public/mojom",
    "//third_party/blink/public:blink",
    "//third_party/blink/public:image_resources",
    "//third_party/blink/public:resources",
    "//third_party/blink/public/strings",
    "//third_party/blink/public/strings:accessibility_strings",
    "//url",
    "//v8",
  ]

  if (!is_android) {
    public_deps += [
      "//ui/base",
      "//ui/base/clipboard",
      "//ui/base/ime/init",
      "//ui/gfx",
      "//ui/gfx/geometry",
      "//ui/platform_window",
    ]
  }

  if (enable_cast_renderer) {
    public_deps += [ "//media/mojo/services" ]
  }

  if (is_linux) {
    public_deps += [ "//ui/linux:linux_ui_factory" ]
  }

  if (is_ios) {
    public_deps += [
      "//services/tracing/public/cpp",
      "//services/tracing/public/mojom:mojom",
      "//ui/shell_dialogs",
    ]
  }

  if (is_android) {
    public_deps += [
      "//components/embedder_support/android:view",
      "//content/shell/android:content_shell_jni_headers",
      "//ui/android",
    ]
  }

  if (use_aura) {
    public_deps += [
      "//ui/aura",
      "//ui/aura:test_support",
      "//ui/events",
      "//ui/wm",
    ]

    if (shell_use_toolkit_views) {
      public_deps += [
        "//ui/color:color_headers",
        "//ui/native_theme",
        "//ui/resources",
        "//ui/views:test_support",
        "//ui/views/controls/webview",
        "//ui/wm:test_support",
      ]
    }
  }

  if (shell_use_toolkit_views) {
    public_deps += [ "//ui/views" ]
  }

  if (is_linux) {
    public_deps += [ "//build/config/freetype" ]
  }

  if (use_ozone) {
    public_deps += [ "//ui/ozone" ]
  }

  if (is_cobalt && use_starboard_media) {
    public_deps += [ "//starboard:starboard_group" ]
    if (is_android) {
      public_deps += [ "//starboard/android/shared:starboard_platform" ]
    }
  }
}

# TODO(b/422171398): Refactor source set to not depend on content shell
static_library("content_shell_lib") {
  testonly = true
  public_deps = [ ":content_shell_lib_deps" ]
  sources = [
    "browser/shell.cc",
    "browser/shell.h",
    "browser/shell_browser_context.cc",
    "browser/shell_browser_context.h",
    "browser/shell_browser_main_parts.cc",
    "browser/shell_browser_main_parts.h",
    "browser/shell_content_browser_client.cc",
    "browser/shell_content_browser_client.h",
    "browser/shell_content_index_provider.cc",
    "browser/shell_content_index_provider.h",
    "browser/shell_devtools_bindings.cc",
    "browser/shell_devtools_bindings.h",
    "browser/shell_devtools_frontend.cc",
    "browser/shell_devtools_frontend.h",
    "browser/shell_devtools_manager_delegate.cc",
    "browser/shell_devtools_manager_delegate.h",
    "browser/shell_javascript_dialog.h",
    "browser/shell_javascript_dialog_manager.cc",
    "browser/shell_javascript_dialog_manager.h",
    "browser/shell_paths.cc",
    "browser/shell_paths.h",
    "browser/shell_platform_data_aura.cc",
    "browser/shell_platform_data_aura.h",
    "browser/shell_platform_delegate.cc",
    "browser/shell_platform_delegate.h",
    "browser/shell_speech_recognition_manager_delegate.cc",
    "browser/shell_speech_recognition_manager_delegate.h",
    "browser/shell_web_contents_view_delegate.h",
    "browser/shell_web_contents_view_delegate_creator.h",
    "common/main_frame_counter_test_impl.cc",
    "common/main_frame_counter_test_impl.h",
    "common/power_monitor_test_impl.cc",
    "common/power_monitor_test_impl.h",
    "common/shell_content_client.cc",
    "common/shell_content_client.h",
    "common/shell_origin_trial_policy.cc",
    "common/shell_origin_trial_policy.h",
    "common/shell_switches.cc",
    "common/shell_switches.h",
    "gpu/shell_content_gpu_client.cc",
    "gpu/shell_content_gpu_client.h",
    "renderer/render_frame_test_helper.cc",
    "renderer/render_frame_test_helper.h",
    "renderer/shell_content_renderer_client.cc",
    "renderer/shell_content_renderer_client.h",
    "renderer/shell_render_frame_observer.cc",
    "renderer/shell_render_frame_observer.h",
    "utility/shell_content_utility_client.cc",
    "utility/shell_content_utility_client.h",
  ]

  if (is_android) {
    sources += [
      "android/shell_manager.cc",
      "android/shell_manager.h",
      "browser/shell_platform_delegate_android.cc",
      "browser/shell_web_contents_view_delegate_android.cc",
    ]
  }

  if (is_ios) {
    sources += [
      "browser/shell_file_select_helper.cc",
      "browser/shell_file_select_helper.h",
      "browser/shell_platform_delegate_ios.mm",
      "browser/shell_web_contents_view_delegate_ios.mm",
    ]
    configs += [ "//build/config/compiler:enable_arc" ]
  }

  configs += [
    ":content_shell_lib_warnings",
    "//build/config:precompiled_headers",
  ]

  defines = [
    "CONTENT_SHELL_VERSION=\"1.0.0\"",
    "CONTENT_SHELL_MAJOR_VERSION=\"1\"",
  ]

  if (shell_use_toolkit_views) {
    # All content_shell code should use this define instead of TOOLKIT_VIEWS,
    # since any transitive dependency on //ui/views from another component will
    # cause TOOLKIT_VIEWS to be defined, even when content_shell does not want
    # to use it internally. See https://crbug.com/1218907.
    defines += [ "SHELL_USE_TOOLKIT_VIEWS=1" ]
  }

  # This is to support our dependency on //content/browser.
  # See comment at the top of //content/BUILD.gn for why this is disabled in
  # component builds.
  if (is_component_build) {
    check_includes = false
  }

  if (use_aura) {
    if (shell_use_toolkit_views) {
      sources += [
        "browser/shell_platform_delegate_views.cc",
        "browser/shell_web_contents_view_delegate_views.cc",
      ]
    } else {
      sources += [
        "browser/shell_platform_delegate_aura.cc",
        "browser/shell_web_contents_view_delegate_aura.cc",
      ]
    }
  } else {
    sources -= [
      "browser/shell_platform_data_aura.cc",
      "browser/shell_platform_data_aura.h",
    ]
  }
}

# This component provides a ContentMainDelegate for Content Shell and derived
# applications. This delegate is the central place that creates interfaces for
# each type of process (browser, renderer, etc). This implementation of
# ContentMainDelegate will create either production or test-based
# implementations.
#
# This component needs to be linked into every process in a Content Shell-based
# application that wants to use ShellMainDelegate.
#
# TODO(danakj): This component will depend on {renderer,browser}/web_test. The
# content_shell_lib component will not, to avoid circular deps, as web_test
# inherits from things in content_shell_lib.
static_library("content_shell_app") {
  testonly = true
  sources = [
    "app/shell_crash_reporter_client.cc",
    "app/shell_crash_reporter_client.h",
    "app/shell_main_delegate.cc",
    "app/shell_main_delegate.h",
  ]
  public_deps = [ ":content_shell_app_deps" ]
  if (is_ios) {
    sources += [
      "app/ios/shell_application_ios.h",
      "app/ios/shell_application_ios.mm",
    ]
  }
  defines = [
    "CONTENT_SHELL_VERSION=\"1.0.0\"",
    "CONTENT_SHELL_MAJOR_VERSION=\"1\"",
  ]
}

group("content_shell_app_deps") {
  testonly = true
  public_deps = [
    ":content_shell_lib",
    "//components/crash/core/app",
    "//components/crash/core/app:test_support",
    "//components/crash/core/common:crash_key",
    "//components/memory_system",
    "//content/public/app",
    "//content/public/renderer",
    "//v8",
  ]
  if (support_web_tests) {
    public_deps += [
      "//content/web_test:web_test_browser",
      "//content/web_test:web_test_common",
      "//content/web_test:web_test_renderer",
    ]
  }
}

grit("content_shell_resources_grit") {
  testonly = true

  # External code should depend on ":resources" instead.
  visibility = [ ":*" ]
  source = "shell_resources.grd"
  outputs = [
    "grit/shell_resources.h",
    "cobalt_shell_resources.pak",
  ]
}

copy("copy_shell_resources") {
  testonly = true

  sources = [ "$target_gen_dir/cobalt_shell_resources.pak" ]
  outputs = [ "$root_out_dir/cobalt_shell_resources.pak" ]

  public_deps = [ ":content_shell_resources_grit" ]
}

group("resources") {
  testonly = true

  public_deps = [ ":copy_shell_resources" ]
}

mojom("content_browsertests_mojom") {
  sources = [
    "common/main_frame_counter_test.mojom",
    "common/power_monitor_test.mojom",
    "common/render_frame_test_helper.mojom",
  ]
  public_deps = [
    "//sandbox/policy/mojom",
    "//third_party/blink/public/mojom/tokens",
  ]
}

mojom("shell_controller_mojom") {
  testonly = true
  sources = [ "common/shell_controller.test-mojom" ]
  public_deps = [ "//mojo/public/mojom/base" ]
}
