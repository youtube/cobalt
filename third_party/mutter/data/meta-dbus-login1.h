/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __META_DBUS_LOGIN1_H__
#define __META_DBUS_LOGIN1_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.login1.Session */

#define META_DBUS_TYPE_LOGIN1_SESSION (meta_dbus_login1_session_get_type())
#define META_DBUS_LOGIN1_SESSION(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_LOGIN1_SESSION, \
                              MetaDBusLogin1Session))
#define META_DBUS_IS_LOGIN1_SESSION(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_LOGIN1_SESSION))
#define META_DBUS_LOGIN1_SESSION_GET_IFACE(o)                        \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), META_DBUS_TYPE_LOGIN1_SESSION, \
                                 MetaDBusLogin1SessionIface))

struct _MetaDBusLogin1Session;
typedef struct _MetaDBusLogin1Session MetaDBusLogin1Session;
typedef struct _MetaDBusLogin1SessionIface MetaDBusLogin1SessionIface;

struct _MetaDBusLogin1SessionIface {
  GTypeInterface parent_iface;

  gboolean (*handle_activate)(MetaDBusLogin1Session* object,
                              GDBusMethodInvocation* invocation);

  gboolean (*handle_pause_device_complete)(MetaDBusLogin1Session* object,
                                           GDBusMethodInvocation* invocation,
                                           guint arg_major,
                                           guint arg_minor);

  gboolean (*handle_release_control)(MetaDBusLogin1Session* object,
                                     GDBusMethodInvocation* invocation);

  gboolean (*handle_release_device)(MetaDBusLogin1Session* object,
                                    GDBusMethodInvocation* invocation,
                                    guint arg_major,
                                    guint arg_minor);

  gboolean (*handle_take_control)(MetaDBusLogin1Session* object,
                                  GDBusMethodInvocation* invocation,
                                  gboolean arg_force);

  gboolean (*handle_take_device)(MetaDBusLogin1Session* object,
                                 GDBusMethodInvocation* invocation,
                                 GUnixFDList* fd_list,
                                 guint arg_major,
                                 guint arg_minor);

  gboolean (*get_active)(MetaDBusLogin1Session* object);

  void (*pause_device)(MetaDBusLogin1Session* object,
                       guint arg_major,
                       guint arg_minor,
                       const gchar* arg_type);

  void (*resume_device)(MetaDBusLogin1Session* object,
                        guint arg_major,
                        guint arg_minor,
                        GVariant* arg_fd);
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusLogin1Session, g_object_unref)
#endif

GType meta_dbus_login1_session_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo* meta_dbus_login1_session_interface_info(void);
guint meta_dbus_login1_session_override_properties(GObjectClass* klass,
                                                   guint property_id_begin);

/* D-Bus method call completion functions: */
void meta_dbus_login1_session_complete_activate(
    MetaDBusLogin1Session* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_login1_session_complete_take_control(
    MetaDBusLogin1Session* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_login1_session_complete_release_control(
    MetaDBusLogin1Session* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_login1_session_complete_take_device(
    MetaDBusLogin1Session* object,
    GDBusMethodInvocation* invocation,
    GUnixFDList* fd_list,
    GVariant* fd,
    gboolean paused);

void meta_dbus_login1_session_complete_release_device(
    MetaDBusLogin1Session* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_login1_session_complete_pause_device_complete(
    MetaDBusLogin1Session* object,
    GDBusMethodInvocation* invocation);

/* D-Bus signal emissions functions: */
void meta_dbus_login1_session_emit_pause_device(MetaDBusLogin1Session* object,
                                                guint arg_major,
                                                guint arg_minor,
                                                const gchar* arg_type);

void meta_dbus_login1_session_emit_resume_device(MetaDBusLogin1Session* object,
                                                 guint arg_major,
                                                 guint arg_minor,
                                                 GVariant* arg_fd);

/* D-Bus method calls: */
void meta_dbus_login1_session_call_activate(MetaDBusLogin1Session* proxy,
                                            GCancellable* cancellable,
                                            GAsyncReadyCallback callback,
                                            gpointer user_data);

gboolean meta_dbus_login1_session_call_activate_finish(
    MetaDBusLogin1Session* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_login1_session_call_activate_sync(
    MetaDBusLogin1Session* proxy,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_login1_session_call_take_control(MetaDBusLogin1Session* proxy,
                                                gboolean arg_force,
                                                GCancellable* cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);

gboolean meta_dbus_login1_session_call_take_control_finish(
    MetaDBusLogin1Session* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_login1_session_call_take_control_sync(
    MetaDBusLogin1Session* proxy,
    gboolean arg_force,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_login1_session_call_release_control(MetaDBusLogin1Session* proxy,
                                                   GCancellable* cancellable,
                                                   GAsyncReadyCallback callback,
                                                   gpointer user_data);

gboolean meta_dbus_login1_session_call_release_control_finish(
    MetaDBusLogin1Session* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_login1_session_call_release_control_sync(
    MetaDBusLogin1Session* proxy,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_login1_session_call_take_device(MetaDBusLogin1Session* proxy,
                                               guint arg_major,
                                               guint arg_minor,
                                               GUnixFDList* fd_list,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);

gboolean meta_dbus_login1_session_call_take_device_finish(
    MetaDBusLogin1Session* proxy,
    GVariant** out_fd,
    gboolean* out_paused,
    GUnixFDList** out_fd_list,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_login1_session_call_take_device_sync(
    MetaDBusLogin1Session* proxy,
    guint arg_major,
    guint arg_minor,
    GUnixFDList* fd_list,
    GVariant** out_fd,
    gboolean* out_paused,
    GUnixFDList** out_fd_list,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_login1_session_call_release_device(MetaDBusLogin1Session* proxy,
                                                  guint arg_major,
                                                  guint arg_minor,
                                                  GCancellable* cancellable,
                                                  GAsyncReadyCallback callback,
                                                  gpointer user_data);

gboolean meta_dbus_login1_session_call_release_device_finish(
    MetaDBusLogin1Session* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_login1_session_call_release_device_sync(
    MetaDBusLogin1Session* proxy,
    guint arg_major,
    guint arg_minor,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_login1_session_call_pause_device_complete(
    MetaDBusLogin1Session* proxy,
    guint arg_major,
    guint arg_minor,
    GCancellable* cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_login1_session_call_pause_device_complete_finish(
    MetaDBusLogin1Session* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_login1_session_call_pause_device_complete_sync(
    MetaDBusLogin1Session* proxy,
    guint arg_major,
    guint arg_minor,
    GCancellable* cancellable,
    GError** error);

/* D-Bus property accessors: */
gboolean meta_dbus_login1_session_get_active(MetaDBusLogin1Session* object);
void meta_dbus_login1_session_set_active(MetaDBusLogin1Session* object,
                                         gboolean value);

/* ---- */

#define META_DBUS_TYPE_LOGIN1_SESSION_PROXY \
  (meta_dbus_login1_session_proxy_get_type())
#define META_DBUS_LOGIN1_SESSION_PROXY(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_LOGIN1_SESSION_PROXY, \
                              MetaDBusLogin1SessionProxy))
#define META_DBUS_LOGIN1_SESSION_PROXY_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_LOGIN1_SESSION_PROXY, \
                           MetaDBusLogin1SessionProxyClass))
#define META_DBUS_LOGIN1_SESSION_PROXY_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_LOGIN1_SESSION_PROXY, \
                             MetaDBusLogin1SessionProxyClass))
#define META_DBUS_IS_LOGIN1_SESSION_PROXY(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_LOGIN1_SESSION_PROXY))
#define META_DBUS_IS_LOGIN1_SESSION_PROXY_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_LOGIN1_SESSION_PROXY))

typedef struct _MetaDBusLogin1SessionProxy MetaDBusLogin1SessionProxy;
typedef struct _MetaDBusLogin1SessionProxyClass MetaDBusLogin1SessionProxyClass;
typedef struct _MetaDBusLogin1SessionProxyPrivate
    MetaDBusLogin1SessionProxyPrivate;

struct _MetaDBusLogin1SessionProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  MetaDBusLogin1SessionProxyPrivate* priv;
};

struct _MetaDBusLogin1SessionProxyClass {
  GDBusProxyClass parent_class;
};

GType meta_dbus_login1_session_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusLogin1SessionProxy, g_object_unref)
#endif

void meta_dbus_login1_session_proxy_new(GDBusConnection* connection,
                                        GDBusProxyFlags flags,
                                        const gchar* name,
                                        const gchar* object_path,
                                        GCancellable* cancellable,
                                        GAsyncReadyCallback callback,
                                        gpointer user_data);
MetaDBusLogin1Session* meta_dbus_login1_session_proxy_new_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusLogin1Session* meta_dbus_login1_session_proxy_new_sync(
    GDBusConnection* connection,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_login1_session_proxy_new_for_bus(GBusType bus_type,
                                                GDBusProxyFlags flags,
                                                const gchar* name,
                                                const gchar* object_path,
                                                GCancellable* cancellable,
                                                GAsyncReadyCallback callback,
                                                gpointer user_data);
MetaDBusLogin1Session* meta_dbus_login1_session_proxy_new_for_bus_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusLogin1Session* meta_dbus_login1_session_proxy_new_for_bus_sync(
    GBusType bus_type,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

/* ---- */

#define META_DBUS_TYPE_LOGIN1_SESSION_SKELETON \
  (meta_dbus_login1_session_skeleton_get_type())
#define META_DBUS_LOGIN1_SESSION_SKELETON(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_LOGIN1_SESSION_SKELETON, \
                              MetaDBusLogin1SessionSkeleton))
#define META_DBUS_LOGIN1_SESSION_SKELETON_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_LOGIN1_SESSION_SKELETON, \
                           MetaDBusLogin1SessionSkeletonClass))
#define META_DBUS_LOGIN1_SESSION_SKELETON_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_LOGIN1_SESSION_SKELETON, \
                             MetaDBusLogin1SessionSkeletonClass))
#define META_DBUS_IS_LOGIN1_SESSION_SKELETON(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_LOGIN1_SESSION_SKELETON))
#define META_DBUS_IS_LOGIN1_SESSION_SKELETON_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_LOGIN1_SESSION_SKELETON))

typedef struct _MetaDBusLogin1SessionSkeleton MetaDBusLogin1SessionSkeleton;
typedef struct _MetaDBusLogin1SessionSkeletonClass
    MetaDBusLogin1SessionSkeletonClass;
typedef struct _MetaDBusLogin1SessionSkeletonPrivate
    MetaDBusLogin1SessionSkeletonPrivate;

struct _MetaDBusLogin1SessionSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MetaDBusLogin1SessionSkeletonPrivate* priv;
};

struct _MetaDBusLogin1SessionSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType meta_dbus_login1_session_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusLogin1SessionSkeleton, g_object_unref)
#endif

MetaDBusLogin1Session* meta_dbus_login1_session_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.login1.Seat */

#define META_DBUS_TYPE_LOGIN1_SEAT (meta_dbus_login1_seat_get_type())
#define META_DBUS_LOGIN1_SEAT(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_LOGIN1_SEAT, \
                              MetaDBusLogin1Seat))
#define META_DBUS_IS_LOGIN1_SEAT(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_LOGIN1_SEAT))
#define META_DBUS_LOGIN1_SEAT_GET_IFACE(o)                        \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), META_DBUS_TYPE_LOGIN1_SEAT, \
                                 MetaDBusLogin1SeatIface))

struct _MetaDBusLogin1Seat;
typedef struct _MetaDBusLogin1Seat MetaDBusLogin1Seat;
typedef struct _MetaDBusLogin1SeatIface MetaDBusLogin1SeatIface;

struct _MetaDBusLogin1SeatIface {
  GTypeInterface parent_iface;

  gboolean (*handle_switch_to)(MetaDBusLogin1Seat* object,
                               GDBusMethodInvocation* invocation,
                               guint arg_vt);
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusLogin1Seat, g_object_unref)
#endif

GType meta_dbus_login1_seat_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo* meta_dbus_login1_seat_interface_info(void);
guint meta_dbus_login1_seat_override_properties(GObjectClass* klass,
                                                guint property_id_begin);

/* D-Bus method call completion functions: */
void meta_dbus_login1_seat_complete_switch_to(
    MetaDBusLogin1Seat* object,
    GDBusMethodInvocation* invocation);

/* D-Bus method calls: */
void meta_dbus_login1_seat_call_switch_to(MetaDBusLogin1Seat* proxy,
                                          guint arg_vt,
                                          GCancellable* cancellable,
                                          GAsyncReadyCallback callback,
                                          gpointer user_data);

gboolean meta_dbus_login1_seat_call_switch_to_finish(MetaDBusLogin1Seat* proxy,
                                                     GAsyncResult* res,
                                                     GError** error);

gboolean meta_dbus_login1_seat_call_switch_to_sync(MetaDBusLogin1Seat* proxy,
                                                   guint arg_vt,
                                                   GCancellable* cancellable,
                                                   GError** error);

/* ---- */

#define META_DBUS_TYPE_LOGIN1_SEAT_PROXY \
  (meta_dbus_login1_seat_proxy_get_type())
#define META_DBUS_LOGIN1_SEAT_PROXY(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_LOGIN1_SEAT_PROXY, \
                              MetaDBusLogin1SeatProxy))
#define META_DBUS_LOGIN1_SEAT_PROXY_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_LOGIN1_SEAT_PROXY, \
                           MetaDBusLogin1SeatProxyClass))
#define META_DBUS_LOGIN1_SEAT_PROXY_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_LOGIN1_SEAT_PROXY, \
                             MetaDBusLogin1SeatProxyClass))
#define META_DBUS_IS_LOGIN1_SEAT_PROXY(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_LOGIN1_SEAT_PROXY))
#define META_DBUS_IS_LOGIN1_SEAT_PROXY_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_LOGIN1_SEAT_PROXY))

typedef struct _MetaDBusLogin1SeatProxy MetaDBusLogin1SeatProxy;
typedef struct _MetaDBusLogin1SeatProxyClass MetaDBusLogin1SeatProxyClass;
typedef struct _MetaDBusLogin1SeatProxyPrivate MetaDBusLogin1SeatProxyPrivate;

struct _MetaDBusLogin1SeatProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  MetaDBusLogin1SeatProxyPrivate* priv;
};

struct _MetaDBusLogin1SeatProxyClass {
  GDBusProxyClass parent_class;
};

GType meta_dbus_login1_seat_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusLogin1SeatProxy, g_object_unref)
#endif

void meta_dbus_login1_seat_proxy_new(GDBusConnection* connection,
                                     GDBusProxyFlags flags,
                                     const gchar* name,
                                     const gchar* object_path,
                                     GCancellable* cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
MetaDBusLogin1Seat* meta_dbus_login1_seat_proxy_new_finish(GAsyncResult* res,
                                                           GError** error);
MetaDBusLogin1Seat* meta_dbus_login1_seat_proxy_new_sync(
    GDBusConnection* connection,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_login1_seat_proxy_new_for_bus(GBusType bus_type,
                                             GDBusProxyFlags flags,
                                             const gchar* name,
                                             const gchar* object_path,
                                             GCancellable* cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
MetaDBusLogin1Seat* meta_dbus_login1_seat_proxy_new_for_bus_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusLogin1Seat* meta_dbus_login1_seat_proxy_new_for_bus_sync(
    GBusType bus_type,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

/* ---- */

#define META_DBUS_TYPE_LOGIN1_SEAT_SKELETON \
  (meta_dbus_login1_seat_skeleton_get_type())
#define META_DBUS_LOGIN1_SEAT_SKELETON(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_LOGIN1_SEAT_SKELETON, \
                              MetaDBusLogin1SeatSkeleton))
#define META_DBUS_LOGIN1_SEAT_SKELETON_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_LOGIN1_SEAT_SKELETON, \
                           MetaDBusLogin1SeatSkeletonClass))
#define META_DBUS_LOGIN1_SEAT_SKELETON_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_LOGIN1_SEAT_SKELETON, \
                             MetaDBusLogin1SeatSkeletonClass))
#define META_DBUS_IS_LOGIN1_SEAT_SKELETON(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_LOGIN1_SEAT_SKELETON))
#define META_DBUS_IS_LOGIN1_SEAT_SKELETON_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_LOGIN1_SEAT_SKELETON))

typedef struct _MetaDBusLogin1SeatSkeleton MetaDBusLogin1SeatSkeleton;
typedef struct _MetaDBusLogin1SeatSkeletonClass MetaDBusLogin1SeatSkeletonClass;
typedef struct _MetaDBusLogin1SeatSkeletonPrivate
    MetaDBusLogin1SeatSkeletonPrivate;

struct _MetaDBusLogin1SeatSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MetaDBusLogin1SeatSkeletonPrivate* priv;
};

struct _MetaDBusLogin1SeatSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType meta_dbus_login1_seat_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusLogin1SeatSkeleton, g_object_unref)
#endif

MetaDBusLogin1Seat* meta_dbus_login1_seat_skeleton_new(void);

G_END_DECLS

#endif /* __META_DBUS_LOGIN1_H__ */
