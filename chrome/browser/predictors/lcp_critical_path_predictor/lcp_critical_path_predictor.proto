// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Protocol buffers used for storing in SQLite.

syntax = "proto2";

package predictors;

// Required in Chrome.
option optimize_for = LITE_RUNTIME;

// `LcpElementLocatorBucket` is a bucket of lcp_element_locator's histogram.
message LcpElementLocatorBucket {
  // `lcp_element_locator` contains LCP element locator information as bytes
  // encoded with a protobuf wire format.
  optional bytes lcp_element_locator = 1;
  optional double frequency = 2;
}

message LcpElementLocatorStat {
  // Conceptually, `lcp_element_locator_buckets` could be a `map<bytes,
  // double>`. But proto3 doesn't support bytes as a key. Hence we use
  // `repeated`. (see: https://protobuf.dev/programming-guides/proto3/#maps)
  repeated LcpElementLocatorBucket lcp_element_locator_buckets = 1;
  optional double other_bucket_frequency = 2;
}

// A string-keyed data structure for applying the algorithm explained in:
// https://docs.google.com/document/d/1T80d4xW8xIEqfo792g1nC1deFqzMraunFJW_5ft4ziQ/edit
// Explanation can be found in resource_prefetch_predictor.cc.
message LcppStringFrequencyStatData {
  map<string, double> main_buckets = 1;
  optional double other_bucket_frequency = 2;
}

// `LcppStat` contains all LCP predictor related statistics
// accessed from a host.
message LcppStat {
  optional LcpElementLocatorStat lcp_element_locator_stat = 1;
  optional LcppStringFrequencyStatData lcp_script_url_stat = 2;
  optional LcppStringFrequencyStatData fetched_font_url_stat = 3;
  optional LcppStringFrequencyStatData fetched_subresource_url_stat = 4;
  optional LcppStringFrequencyStatData preconnect_origin_stat = 5;
  optional LcppStringFrequencyStatData unused_preload_stat = 6;
  map<string, int32> fetched_subresource_url_destination = 7;
}

// `LcppKeyStat` contains `LcppStat` for each key in `lcpp_stat_map`, where
// the keys are maintained by the k-top algorithm using `key_frequency_stat`.
message LcppKeyStat {
  map<string, LcppStat> lcpp_stat_map = 1;
  optional LcppStringFrequencyStatData key_frequency_stat = 2;
}

// [LCP Critical Path Predictor (LCPP)]
// `LcppData` stores LCP related optimization data.
// TODO(crbug.com/40063266): This feature is still under development and proto
// definition will likely change in the future.
// LCPP:
// https://docs.google.com/document/d/18qTNRyv_9K2CtvVrl_ancLzPxiAnfAcbvrCNegU9IBM
// LCP: https://web.dev/lcp/
message LcppData {
  optional string host = 1;
  optional uint64 last_visit_time = 2;
  optional LcppStat lcpp_stat = 3;
  optional LcppKeyStat lcpp_key_stat = 4;
}

// `LcppOrigin` contains `LcppData` for each initiator origin in
// `lcpp_stat_map`, where
// the keys are maintained by the k-top algorithm using `key_frequency_stat`.
message LcppOrigin {
  optional uint64 last_visit_time = 1;
  map<string, LcppData> origin_data_map = 2;
  optional LcppStringFrequencyStatData key_frequency_stat = 3;
}
