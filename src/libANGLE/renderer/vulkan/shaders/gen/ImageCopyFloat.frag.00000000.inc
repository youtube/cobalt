// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopyFloat.frag.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopyFloat_frag_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x58,0x7b,0x68,0x97,0x65,
    0x14,0xfe,0xce,0xbb,0xab,0x5a,0x6e,0xe6,0x9c,0x97,0x4a,0xd4,0x65,0x94,0x5b,0xa6,
    0x69,0x66,0xea,0x9a,0xce,0x36,0x03,0x35,0x6b,0xb6,0x34,0x24,0x4c,0xa7,0x79,0xcb,
    0xad,0x4c,0x2d,0xa2,0x42,0xad,0xe8,0x66,0x42,0x21,0x81,0x66,0x81,0x56,0x16,0x1a,
    0x36,0xa4,0x44,0x4a,0xd4,0x7f,0xec,0x82,0x51,0x19,0x04,0x52,0x29,0xd9,0x24,0x50,
    0x8a,0xa2,0xd2,0x4a,0x2d,0x3b,0xcf,0xce,0x73,0xdc,0xf1,0x47,0xd1,0xe0,0xdd,0xef,
    0xf7,0x3e,0xe7,0xf6,0x9c,0xe7,0xbd,0x7c,0xdf,0x96,0x97,0x2a,0x8a,0xb2,0x4c,0xb2,
    0xce,0x59,0x71,0xb6,0x38,0x65,0xed,0x3f,0xdd,0xb2,0xa4,0x88,0x7d,0x5e,0xa3,0x9f,
    0x5d,0xb2,0xc2,0xf6,0xf9,0x84,0x49,0x53,0x27,0x0d,0xbe,0x7f,0xe9,0x9c,0xc1,0xc3,
    0xaf,0x1d,0x02,0xbf,0xae,0x59,0x5e,0xbb,0x3f,0x6c,0x25,0x59,0x51,0x96,0xaf,0x9f,
    0x18,0x8b,0x67,0x2d,0x68,0x06,0x7e,0x5a,0x47,0xb9,0x1a,0x4b,0xd5,0x0f,0xb8,0x16,
    0xca,0x6e,0xca,0x0a,0xb2,0xf1,0x56,0x26,0xab,0xe0,0xa7,0x63,0x42,0xac,0x38,0x60,
    0x89,0x58,0x69,0xc0,0xf2,0x88,0x95,0x05,0x2c,0x9f,0x58,0xaf,0x80,0x15,0x10,0xbb,
    0x24,0x60,0x85,0xc4,0xfa,0x05,0xac,0x88,0xd8,0x65,0x01,0x2b,0x26,0x76,0x45,0xc0,
    0x3a,0x11,0xab,0x0a,0x58,0x67,0x62,0x43,0x02,0xd6,0x85,0xd8,0xf0,0x80,0x5d,0x40,
    0x6c,0x64,0xc0,0x2e,0x24,0x36,0x26,0x60,0x5d,0x89,0x8d,0x85,0xde,0xda,0xa9,0x6b,
    0x30,0x41,0x3b,0x3c,0xcd,0xdc,0x25,0x9c,0x17,0xa8,0x60,0x03,0xa8,0xa1,0xcf,0xfb,
    0x87,0x39,0xb4,0xef,0xcb,0x79,0x77,0xcd,0x82,0x3c,0xfd,0x35,0x67,0x1e,0x73,0x96,
    0xeb,0xb7,0x42,0x6a,0xd1,0x43,0xfd,0x4b,0xf8,0x1d,0xeb,0xd0,0x53,0xe7,0xa5,0xac,
    0x95,0x38,0x2f,0xa7,0x7e,0xd0,0xba,0x52,0x7f,0xe3,0xfb,0xa5,0xd0,0x77,0xf0,0xe4,
    0xd1,0x65,0xea,0xd5,0x37,0xe0,0xe8,0xa1,0x61,0xe7,0xcd,0xe3,0x7c,0x0e,0x1d,0x1b,
    0x1b,0xbf,0xbc,0xc1,0xe7,0x83,0x74,0x54,0x77,0x7e,0xb2,0xc6,0xe7,0xd0,0x74,0xdb,
    0x84,0x59,0xd5,0x3e,0x1f,0xaa,0xe3,0xfb,0x6d,0x03,0xcf,0xcd,0xa1,0xd1,0xfa,0x75,
    0xbd,0xc7,0x82,0x67,0x2d,0x79,0xe2,0xa7,0xaf,0xee,0xd2,0xf1,0xdc,0x1f,0xce,0xd7,
    0x47,0xed,0xff,0x0c,0xf7,0xe9,0xa7,0x39,0x6f,0xe4,0xfa,0x22,0xd7,0x68,0xce,0xeb,
    0x88,0x55,0x52,0x9b,0x7a,0x6a,0x03,0xff,0x09,0xb4,0x95,0x06,0xfb,0x44,0xee,0x39,
    0xd8,0x27,0xd1,0x5e,0x4b,0x3b,0x3e,0xa7,0x90,0xb3,0xfb,0x4f,0xa7,0x9e,0x3e,0x6f,
    0xe2,0xfa,0xfb,0xbc,0x99,0xeb,0xed,0xf3,0xc7,0xb9,0x57,0xb1,0x16,0xcf,0x31,0x36,
    0x2f,0xd8,0xd7,0x72,0xdf,0xba,0x66,0x1b,0x72,0xea,0xb5,0x72,0x1f,0xfa,0x7c,0x1f,
    0x39,0x22,0xdf,0x7e,0xe6,0x4b,0xc1,0x7e,0x80,0xfb,0xdb,0xe7,0xdf,0x70,0xcf,0xa2,
    0xbf,0x43,0x8c,0x2d,0x09,0xf6,0x23,0x39,0xf1,0x6d,0x39,0xf5,0x8f,0xe5,0xec,0x9d,
    0xdf,0xda,0xad,0x2b,0x6a,0x90,0xef,0x14,0xb5,0x2d,0xa7,0xfe,0xa7,0x78,0x7f,0x00,
    0xeb,0xad,0x95,0x92,0x18,0x3f,0xc9,0xce,0xff,0xf1,0xf9,0xc5,0xd8,0xd7,0x3a,0x81,
    0x1f,0xf2,0xe5,0xd3,0x00,0x6c,0x34,0xe7,0x05,0xc4,0x60,0xef,0x21,0xa6,0x9d,0xd7,
    0xc3,0xbc,0x5c,0x3a,0xf4,0x44,0xad,0x06,0x6d,0xa6,0xe5,0x8d,0x25,0xe7,0xf6,0xe8,
    0x54,0x9d,0x3f,0xff,0xd8,0x2b,0xd5,0x23,0x74,0x95,0x13,0x7b,0xc9,0xb8,0x06,0x7f,
    0x28,0x82,0xb5,0xaf,0xe6,0x39,0x39,0x43,0xfe,0x53,0x74,0xc5,0xa0,0xed,0x5f,0xc4,
    0xce,0x04,0xde,0xcd,0x3c,0x63,0x7f,0xd3,0x3e,0x4e,0x33,0x60,0x5f,0x55,0x8a,0xed,
    0xbd,0x7a,0xe6,0x83,0x4f,0x95,0x18,0xbe,0x4a,0x7d,0x30,0xbf,0x4a,0x2c,0x0e,0x38,
    0xe2,0xb0,0xdf,0x06,0x33,0x6e,0x22,0xe3,0xb0,0xe7,0xae,0x16,0xc3,0xb7,0xaa,0x0f,
    0xce,0xe7,0x10,0x31,0x0c,0x7b,0xf1,0x77,0x65,0x3e,0x82,0x9a,0x9c,0x52,0x7f,0xd8,
    0x86,0xea,0x00,0x86,0x7e,0xf0,0xfd,0x56,0x8d,0xc3,0xda,0x0d,0x13,0xab,0x89,0x9f,
    0x47,0xb9,0x9e,0xc3,0xc5,0xf0,0x06,0x55,0x07,0x9c,0x86,0x24,0xc3,0xdc,0xef,0x4f,
    0xcd,0xe1,0xb9,0xf0,0x79,0x42,0xb5,0x80,0xdf,0x6d,0xc9,0x7c,0x0a,0x18,0x33,0x34,
    0xf4,0x70,0x1d,0x7b,0x98,0x1e,0x7a,0x18,0x29,0x86,0x7b,0x0f,0xd7,0x8b,0x61,0xde,
    0x43,0x4d,0xe8,0x01,0xb6,0x51,0x3a,0x6a,0x58,0x77,0x54,0xe8,0x61,0x8c,0x58,0x6d,
    0x09,0x3d,0x54,0x8b,0xe1,0xde,0xc3,0xb0,0x64,0x98,0xfb,0xa1,0x07,0xcf,0x55,0x13,
    0x7a,0x68,0x4c,0xe6,0x83,0xbe,0x10,0x33,0x2a,0xf4,0x30,0x96,0x3d,0x34,0x85,0x1e,
    0xc6,0x89,0xe1,0xde,0x43,0xad,0x18,0xe6,0x3d,0xd4,0x87,0x1e,0x60,0x1b,0xaf,0xa3,
    0x9e,0x75,0xc7,0x8b,0xed,0x23,0xd4,0xad,0x13,0xab,0xdd,0x98,0x3a,0xf6,0x3e,0x38,
    0xba,0x6f,0x7d,0xe0,0x78,0x3b,0xfd,0xc0,0xbb,0x8e,0x39,0xc1,0x07,0x67,0xa2,0x90,
    0xe7,0xc1,0xf7,0x5c,0x11,0x39,0xb7,0x85,0x3d,0x57,0x2c,0x86,0xaf,0xe0,0x9e,0xeb,
    0x2c,0x86,0x21,0x6f,0x0b,0xef,0x8c,0x2e,0x62,0xf8,0x1c,0x9d,0xe3,0xec,0x5d,0xc8,
    0xdc,0xf3,0x18,0xd3,0x95,0x18,0xf2,0x7a,0x4c,0x89,0x18,0xfe,0x94,0xfa,0x60,0x5e,
    0x2a,0x96,0xa7,0x84,0x7c,0x70,0xb7,0x74,0x23,0x9f,0x23,0xe4,0x83,0xb5,0xba,0x48,
    0x0c,0x6f,0xe1,0x79,0xec,0x2e,0x86,0x4d,0xd3,0x7e,0x71,0xe6,0xca,0x58,0x1b,0xf9,
    0x84,0x76,0x5f,0x93,0x06,0xe6,0x6b,0x0e,0x6b,0x32,0x55,0x0c,0xf7,0x35,0xb9,0x4d,
    0x0c,0xf3,0x35,0x99,0x1d,0xd6,0x04,0xb6,0x46,0x1d,0xb3,0xa9,0x73,0x23,0xf7,0x15,
    0x78,0x4c,0x13,0xab,0x9d,0x31,0xee,0x0b,0x7e,0x3f,0xad,0xdf,0x91,0xeb,0x03,0xc6,
    0xe0,0x73,0x17,0x6b,0x7d,0x24,0x16,0x77,0x29,0x63,0x0e,0x84,0x5a,0xb0,0x7d,0xac,
    0xe3,0x13,0xc6,0xe1,0xf3,0x02,0xed,0x11,0xb5,0x3e,0x65,0x6f,0x7d,0x58,0x17,0xcf,
    0xd5,0x27,0xc8,0xe3,0x33,0x31,0x3b,0x9e,0xad,0x8f,0x11,0xfb,0x5c,0x0c,0xaf,0xe2,
    0x3e,0xf9,0x82,0x39,0x91,0xdf,0xe3,0xf6,0x93,0x4b,0x45,0x8e,0x0f,0x38,0x9d,0xd5,
    0x6a,0x7f,0x10,0x3b,0x41,0x0e,0xd3,0x92,0xe5,0x05,0xaf,0xfd,0xe4,0x8a,0xf3,0x83,
    0x35,0x18,0x91,0xcc,0xee,0x7a,0xb8,0x46,0x33,0xa8,0x91,0xb0,0xdf,0xa3,0x39,0x1a,
    0x1d,0x64,0xcd,0x83,0x41,0xa3,0xaf,0xc4,0xe2,0x5c,0xa3,0xb6,0xa0,0x11,0x6c,0x5f,
    0xeb,0x38,0xcc,0xb8,0xc3,0x41,0xa3,0x6f,0x83,0x46,0x33,0x72,0x34,0x3a,0x22,0x66,
    0x8f,0x1a,0x7d,0x27,0x86,0xbb,0x46,0x47,0x99,0xf3,0xeb,0xa0,0xd1,0x21,0x72,0xa9,
    0xc8,0xf1,0x69,0x0b,0x1a,0x1d,0x0d,0x1a,0xdd,0x91,0x2c,0x2f,0x78,0x1d,0x22,0x57,
    0xd7,0xe8,0xfa,0x64,0xf6,0x11,0x3c,0xc3,0xae,0xd1,0x4c,0x6a,0x94,0xd8,0xef,0xc9,
    0x1c,0x8d,0x8e,0xb3,0xe6,0xf1,0xa0,0xd1,0x0f,0x62,0x71,0xae,0xd1,0x89,0xa0,0x11,
    0x6c,0x3f,0xea,0xf8,0x99,0x71,0x3f,0x07,0x8d,0x7e,0x09,0x1a,0xcd,0xcc,0xd1,0xe8,
    0x57,0x31,0x7b,0xd4,0xe8,0x37,0x31,0xdc,0x35,0x3a,0xc9,0x9c,0x3f,0x06,0x8d,0x7e,
    0x22,0x97,0x8a,0x1c,0x9f,0x13,0x41,0xa3,0x93,0x41,0xa3,0x19,0xc9,0xf2,0x82,0xd7,
    0x4f,0xe4,0xea,0x1a,0x8d,0x49,0x66,0x87,0x56,0x89,0xf9,0xfc,0xec,0xcd,0x66,0x0e,
    0xf8,0xdd,0xc9,0xbd,0x86,0x7b,0x0f,0x31,0x27,0xc3,0x99,0x6f,0xe2,0x99,0x7f,0x3c,
    0x9c,0xf9,0x39,0x62,0xb8,0x9f,0xf9,0xb9,0x62,0x98,0x9f,0xf9,0x55,0x41,0x3f,0xd8,
    0xee,0xd6,0xd1,0xcc,0xba,0xcd,0x21,0x77,0x0b,0x73,0xaf,0x0d,0xb9,0xef,0x15,0xc3,
    0x3d,0xf7,0x7d,0x62,0x98,0xe7,0x5e,0x1e,0x72,0xc3,0xb6,0x44,0xc7,0x72,0xe6,0x5e,
    0x12,0xee,0x93,0xa5,0x62,0x7d,0xe1,0xbd,0xe2,0x3d,0xe6,0x5a,0x26,0x86,0x6f,0xa0,
    0x16,0x1e,0xb7,0x9c,0x5a,0xc0,0xe7,0x01,0xb1,0x9a,0xe0,0xb9,0x8c,0xf9,0x51,0x77,
    0x65,0xa8,0x0b,0x9f,0x07,0x75,0xac,0x64,0xfc,0x83,0xa1,0xee,0x43,0xa1,0xee,0x14,
    0x7d,0x93,0xc4,0x3b,0xe6,0xc3,0xc4,0xee,0x4c,0x1d,0xef,0x2d,0xf8,0x7a,0x8b,0x46,
    0xc0,0xfe,0x88,0x58,0x9c,0x0f,0xdc,0xe9,0xc0,0x1f,0x15,0x8b,0x7d,0xa4,0xbd,0xff,
    0x4e,0xed,0x6b,0xb5,0x82,0xb9,0x60,0xcb,0xe7,0xbb,0xb2,0xbf,0xc3,0xa2,0x27,0xe7,
    0xb4,0x32,0xac,0xef,0x5d,0xac,0x8d,0x3e,0x57,0x90,0x3b,0x7c,0x57,0xd1,0xf7,0xee,
    0xc0,0x7f,0xfe,0xbf,0xf0,0x5f,0xf8,0x1f,0xfc,0xd7,0x90,0xe7,0x22,0x31,0x9f,0xf9,
    0x81,0xe7,0x62,0xc6,0x2c,0xfa,0x0f,0x9e,0x5e,0x7b,0x55,0xe0,0x39,0x33,0x19,0x57,
    0x70,0x5f,0xcc,0x7d,0xe3,0x7b,0xe5,0x69,0xee,0x95,0xd6,0xb0,0x57,0x9e,0x11,0xc3,
    0x7d,0xaf,0x3c,0x2b,0x86,0xf9,0x5e,0x59,0x17,0xd6,0x0c,0xb6,0xd5,0x3a,0xd6,0xb1,
    0xee,0xea,0xd0,0xf3,0x1a,0xb1,0xda,0xfe,0xec,0x29,0x4e,0xe7,0xdf,0x19,0x67,0x18,
    0x73,0x26,0xdc,0x19,0x7f,0x8b,0xc5,0x0d,0x65,0x4c,0x51,0xea,0xa8,0x05,0xdb,0x59,
    0xdc,0x41,0xc9,0xe2,0xf0,0xb9,0x92,0xb5,0xf2,0x93,0xc5,0x55,0x85,0xbb,0xa2,0x20,
    0x19,0x8e,0x77,0x65,0xbf,0x5b,0x0a,0x53,0xc7,0xdd,0x02,0xfb,0x18,0xea,0x56,0xcc,
    0x9c,0x67,0xc3,0x9d,0x21,0xcc,0x89,0x77,0xeb,0xe8,0x03,0x4e,0x7e,0x67,0x00,0xf3,
    0x3b,0x63,0x56,0xb2,0xfc,0xe0,0x85,0xd8,0xb3,0xe1,0xce,0xa8,0x4d,0x66,0x77,0x3d,
    0x5c,0xa3,0x17,0xa8,0x91,0x3f,0x7b,0xfa,0xe4,0x68,0xd4,0x95,0x35,0xf1,0xe9,0x1a,
    0x95,0x26,0x8b,0x73,0x8d,0x7a,0x07,0x8d,0x60,0xeb,0x86,0x7b,0x87,0x71,0x65,0x41,
    0xa3,0x72,0xc6,0x45,0x8d,0x7a,0x26,0xc3,0xa3,0x46,0xbd,0x82,0x46,0x3d,0x83,0x46,
    0x7d,0x98,0x13,0xf9,0x3d,0xbe,0x3b,0x73,0xba,0x46,0xee,0xd3,0x3b,0x68,0xd4,0x27,
    0x68,0xd4,0x94,0x2c,0x3f,0x78,0x75,0x27,0x57,0xd7,0xa8,0x2e,0x99,0xbd,0x36,0xe7,
    0xd9,0xf3,0x22,0x35,0xf2,0x67,0x4f,0x55,0x8e,0x46,0xfd,0x58,0xb3,0x5f,0xd0,0x68,
    0x40,0xb2,0x38,0xd7,0xa8,0x32,0x68,0x04,0x5b,0x85,0x8e,0xcb,0x19,0x77,0x79,0xd0,
    0xe8,0x0a,0xc6,0x45,0x8d,0xae,0x4c,0x86,0x47,0x8d,0x06,0x05,0x8d,0xae,0x0c,0x1a,
    0x55,0x31,0x67,0x45,0xd0,0x68,0x20,0x73,0xba,0x46,0xee,0x53,0x19,0x34,0xaa,0x0a,
    0x1a,0xcd,0x4d,0x96,0x1f,0xbc,0x06,0x92,0xab,0x6b,0x74,0x53,0x32,0x7b,0x5d,0x78,
    0xf6,0xf8,0xd9,0x5b,0x17,0xce,0xfc,0x3c,0xee,0x35,0xdc,0x03,0x88,0x41,0x7e,0x3f,
    0xf3,0xeb,0x79,0xe6,0xf7,0x85,0x33,0xff,0x92,0x18,0xee,0x67,0x7e,0x83,0x18,0xe6,
    0x67,0x7e,0x6f,0x38,0xf3,0xb0,0xbd,0xac,0x63,0x13,0xeb,0x6e,0x0a,0xf7,0xc9,0xab,
    0xcc,0x7d,0x20,0xe4,0x7e,0x4d,0x0c,0xf7,0xdc,0xaf,0x8b,0x61,0x9e,0x7b,0x4f,0xc8,
    0x0d,0xdb,0x66,0x1d,0x5b,0x98,0x7b,0x4b,0x78,0xef,0xde,0xca,0xdc,0xdf,0x84,0xf7,
    0xee,0xb7,0xc4,0xf0,0x0f,0xf9,0x77,0xd4,0x36,0x31,0x0c,0xef,0xe6,0x5e,0xef,0x6d,
    0x31,0xbc,0x8d,0xf5,0xb6,0x87,0x7a,0xb0,0xb5,0xea,0xd8,0xce,0x7a,0xad,0xe1,0xcc,
    0x4e,0x4e,0xf6,0x4c,0x9b,0x17,0xfe,0xde,0x72,0xbf,0xed,0x41,0xeb,0xf9,0xc9,0x7c,
    0xc0,0x15,0x31,0xad,0x81,0xcf,0x3b,0xe4,0x73,0x2c,0xf0,0x79,0x57,0x0c,0x77,0x3e,
    0x3b,0x03,0x1f,0xd8,0x76,0xe8,0xd8,0xc9,0x3a,0x3b,0x02,0x9f,0x29,0xe4,0x33,0x3f,
    0xac,0xbd,0xfb,0xed,0x0c,0x7c,0x16,0x24,0xf3,0x01,0x47,0xc4,0xec,0x08,0x7c,0xde,
    0x23,0x9f,0xb5,0x81,0xcf,0xfb,0x62,0xb8,0xf3,0xd9,0x1d,0xf8,0xc0,0xb6,0x4b,0xc7,
    0x6e,0xd6,0xd9,0x15,0xf8,0xdc,0x9a,0xec,0xff,0x24,0x0b,0x52,0xc7,0xf3,0xc7,0xfd,
    0x76,0x07,0x3e,0xf7,0x24,0xf3,0x01,0x47,0xc4,0xec,0xe2,0x73,0x72,0x0f,0x7d,0x37,
    0x87,0x67,0xc6,0x9b,0x62,0x5a,0x22,0x9f,0xd7,0x99,0x98,0x3a,0x70,0xff,0x9b,0xd2,
    0x63,0xf7,0x84,0x3a,0x8b,0x92,0xd5,0x42,0x6d,0xc4,0x6c,0x66,0x9d,0xbd,0xf4,0x7d,
    0x39,0x3c,0x47,0x37,0x32,0x1f,0x86,0xff,0xff,0x37,0x85,0xe7,0xa8,0xc7,0xec,0x0d,
    0xf9,0x17,0x26,0xab,0x81,0x9a,0x1b,0x79,0x06,0x6e,0xd0,0x08,0xfc,0x6f,0x06,0xb6,
    0xbf,0x74,0x97,0x8c,0xd4,0xf1,0x0f,0x32,0x90,0xe5,0x21,0xb8,0x16,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform sampler2D src;
// layout(location = 0)out vec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       vec4 transformSrcValue(vec4 srcValue)
// {
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           vec4 dstValue = vec4(srcValue);
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 30 "shaders/src/ImageCopyFloat.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           vec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
