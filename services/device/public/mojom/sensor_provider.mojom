// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module device.mojom;

import "mojo/public/mojom/base/shared_memory.mojom";
import "services/device/public/mojom/sensor.mojom";

struct SensorInitParams {
  // The Sensor interface.
  pending_remote<Sensor> sensor;

  // The SensorClient interface used to report sensor events.
  pending_receiver<SensorClient> client_receiver;

  // The shared memory handle used to fetch the sensor reading.
  mojo_base.mojom.ReadOnlySharedMemoryRegion memory;

  // The offset at which shared buffer must be mapped.
  uint64 buffer_offset;

  // The ReportingMode supported by the sensor.
  ReportingMode mode;

  // Default sensor configuration.
  SensorConfiguration default_configuration;

  // Maximum sampling frequency for the sensor: it considers both
  // |SensorConfiguration::kMaxAllowedFrequency| and actual sensor
  // capabilities.
  double maximum_frequency;

  // Minimum sampling frequency for the sensor.
  double minimum_frequency;

  // Each sensor's read buffer contains 5 tightly packed 64-bit floating
  // point fields (please see sensor_reading.h) and a seqlock, so its size is
  // 6 * 8 = 48 bytes.
  const uint64 kReadBufferSizeForTests = 48;
};

enum SensorCreationResult {
  SUCCESS,
  ERROR_NOT_AVAILABLE, // Sensor is not available on the platform.
  ERROR_NOT_ALLOWED,  // The required permissions are not granted.
};

interface SensorProvider {
  // Gets the sensor interface by the given type.
  //
  // |type| type of the sensor.
  //
  // |result| on success contains SUCCESS, otherwise contains the
  //          SensorCreationResult describing the failure reason.
  // |init_params| on success will contain the SensorInitParams describing
  //               the sensor, contains null on failure.
  GetSensor(SensorType type) => (SensorCreationResult result,
                                 SensorInitParams? init_params);
};
