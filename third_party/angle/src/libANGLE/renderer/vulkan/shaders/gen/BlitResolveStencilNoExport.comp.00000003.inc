// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolveStencilNoExport.comp.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolveStencilNoExport_comp_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x96,0x6d,0x68,0x95,0x65,
    0x18,0xc7,0x9f,0xf3,0xe2,0x39,0xdb,0xb1,0x6d,0xae,0x36,0xdf,0x5f,0x5a,0x93,0x59,
    0x1d,0x51,0x83,0xea,0x98,0x35,0x33,0x07,0x99,0xb5,0xad,0xd9,0xaa,0x8d,0xbe,0xb4,
    0x81,0xda,0x82,0x0a,0xb7,0x85,0x51,0x3b,0xe4,0xdb,0xa4,0x36,0x30,0x2b,0x87,0x9a,
    0x5a,0x68,0x85,0xa1,0x09,0x39,0x2a,0xfc,0x10,0xe8,0x1a,0x99,0x06,0x91,0x2f,0x7d,
    0x0b,0xfa,0x26,0xa8,0x39,0xfa,0xd6,0xbb,0x51,0xd7,0x75,0x3f,0xbf,0x2b,0x2e,0x0e,
    0x1d,0xb8,0x79,0x9e,0xfb,0x7f,0xbd,0xfe,0xaf,0xfb,0xba,0xaf,0xf3,0xa4,0x92,0xf5,
    0xd9,0x28,0x4a,0x44,0xb9,0xa8,0x2c,0xca,0x25,0xa2,0xf0,0xab,0x8e,0x92,0x91,0xbe,
    0x4e,0x8e,0x32,0xe1,0xb9,0xaa,0xb9,0xbd,0x79,0x51,0xff,0x8b,0x6b,0x17,0xdd,0x79,
    0xd7,0x12,0x95,0x57,0x46,0xa9,0xa0,0xa7,0xb2,0x2a,0xd1,0x99,0x24,0xcf,0xb4,0xac,
    0xe7,0xbb,0x9f,0x7d,0x41,0xf1,0x0a,0x59,0x53,0x04,0x4f,0x07,0x5f,0x91,0x78,0x8e,
    0x57,0xf0,0x25,0x68,0x45,0xf0,0x1d,0x45,0xb3,0x65,0x3d,0x24,0xd6,0x73,0xe2,0xb0,
    0x51,0x3d,0x4f,0xc3,0x12,0x60,0x65,0x0e,0x4b,0x82,0x4d,0x71,0x58,0x0a,0x6c,0xba,
    0xc3,0xd2,0x60,0x3e,0xc6,0x24,0xb0,0x9b,0x1d,0x96,0x01,0x9b,0xef,0xb0,0x2c,0xd8,
    0xad,0x0e,0x2b,0x03,0x5b,0xe8,0xb0,0x72,0xb0,0x25,0x0e,0xcb,0x81,0xad,0x08,0x5c,
    0x53,0xff,0xe5,0xac,0xbc,0xf7,0xca,0xf3,0x16,0x38,0xda,0xbe,0xce,0xd5,0xe5,0x14,
    0xf9,0xa4,0xf1,0x37,0x56,0x52,0x17,0xf5,0x37,0x06,0x5f,0xd5,0x1f,0x2f,0xf1,0x37,
    0x8e,0x3f,0xdb,0x5f,0xa0,0xce,0x33,0x64,0xdd,0x24,0x59,0x24,0x83,0x3c,0x15,0xec,
    0xf5,0xbd,0x56,0x74,0x32,0xd4,0x43,0x73,0x98,0x26,0xfb,0x2c,0x39,0x98,0x3c,0x87,
    0x3c,0x42,0x3e,0x19,0x8e,0xa9,0x80,0xa7,0xa3,0x1b,0xb0,0x55,0xfc,0x5e,0xf6,0x15,
    0x60,0x79,0xec,0x2b,0xb1,0x57,0xfd,0x2a,0x64,0x39,0x27,0xbf,0x11,0xce,0xb6,0xaf,
    0x45,0x67,0xaa,0x44,0x99,0x49,0x7c,0x8d,0x3d,0x4b,0x9e,0x33,0xc9,0x4d,0xf7,0xb3,
    0x5d,0xbd,0xe6,0x4a,0x54,0x3b,0xbb,0x59,0xac,0x8c,0x5b,0x39,0xb7,0xcc,0x4e,0xf3,
    0x99,0xcb,0x39,0xce,0x21,0x7f,0xdd,0xcf,0x03,0xcb,0xbb,0xfa,0x94,0xa3,0x5f,0xc7,
    0xbb,0xfa,0xa8,0x91,0x4c,0x1a,0xc8,0x65,0x81,0x3c,0x1b,0xc8,0xcd,0xec,0x0a,0x8e,
    0xf7,0x52,0xec,0xb2,0x4e,0xde,0xe8,0xf2,0x58,0x8e,0x3c,0xe7,0xe4,0xab,0x4b,0xf4,
    0xdb,0xe9,0x43,0xdb,0xaf,0x93,0xf5,0x8f,0xfc,0x6c,0xbf,0xde,0xd5,0x5d,0xf7,0x1b,
    0xa9,0x8d,0xfa,0xdf,0x84,0xff,0x8c,0x93,0xef,0xe0,0x4e,0xcc,0x10,0xc9,0x6e,0x62,
    0x33,0x02,0xc2,0x33,0xe1,0xf6,0xea,0x63,0x0f,0xef,0xbb,0xa9,0x95,0xee,0xf7,0x82,
    0x99,0xcf,0xfd,0xf4,0x86,0xd6,0xe4,0x3d,0xe2,0xd9,0xfe,0x7d,0x62,0xf8,0xb3,0x3e,
    0xac,0x1c,0x42,0xfd,0x53,0xa1,0xff,0x73,0xe1,0x2c,0xe3,0x3e,0x3f,0x45,0xdc,0x2f,
    0xa9,0xeb,0x18,0x71,0x75,0x3f,0x5e,0x52,0xeb,0xd3,0xd8,0xaa,0xfe,0x77,0xc8,0x7c,
    0x8f,0x9d,0xa7,0x76,0x0b,0x45,0x5b,0x7b,0xf5,0x02,0xd8,0x79,0xfa,0xed,0x6e,0xa9,
    0x44,0x92,0xdc,0x22,0x72,0xfe,0x5d,0x10,0xad,0xcf,0x6f,0xb2,0xbb,0x08,0xfe,0x97,
    0xbc,0x6b,0x3f,0x7f,0x8f,0x5c,0x9f,0x0f,0x88,0x56,0x15,0x33,0xa9,0x82,0x7e,0x6f,
    0x24,0x6e,0x35,0xf8,0xa0,0xe8,0xe4,0xc2,0x3d,0x8c,0x31,0xed,0xf9,0x22,0xb9,0xd7,
    0x80,0x9b,0x9f,0xa9,0xf8,0xa9,0x75,0x7e,0xa6,0x81,0x9b,0xcd,0x74,0xb0,0x36,0xb1,
    0xc9,0x72,0xc7,0x6b,0xc0,0xd5,0x4f,0x1d,0xb3,0x61,0x1e,0xfd,0xdb,0xc8,0x7d,0xa9,
    0x07,0x7f,0x54,0xac,0xb2,0xcc,0xbd,0x7a,0x56,0x12,0xde,0x9f,0x8a,0xfd,0x02,0xe6,
    0xdf,0x7c,0x7c,0xef,0x13,0x7b,0xed,0xef,0xdb,0xc0,0xb5,0x26,0x79,0x6a,0xf2,0xa7,
    0xc8,0x14,0xbf,0x3d,0xd4,0x3b,0xae,0x8b,0xbe,0xff,0x21,0xcf,0x8b,0xec,0xf3,0x2e,
    0xe6,0x62,0x17,0xd3,0x7a,0x6d,0x33,0x3c,0xee,0x20,0xde,0x62,0x78,0xe8,0xbd,0xb9,
    0x07,0x1e,0x05,0x78,0xa8,0xde,0x32,0xf0,0xad,0xd8,0xdd,0x87,0xed,0x32,0xec,0xf4,
    0x3e,0xdd,0x8f,0x5d,0xa3,0xab,0xe3,0x0a,0xf0,0x8f,0x45,0xa7,0x21,0xe8,0xc6,0x58,
    0x25,0x9c,0x9a,0x1c,0x27,0x95,0xad,0x94,0xd5,0x04,0x07,0x7d,0x5f,0x23,0x76,0x5a,
    0xff,0x07,0x89,0xa9,0xbf,0x57,0x39,0x93,0x55,0xe0,0x8f,0xc9,0x4e,0x73,0xfa,0x01,
    0xcc,0xf4,0xb4,0x1e,0xe6,0x4b,0x9f,0xbf,0x50,0x8f,0x2b,0xe8,0xe4,0xb1,0x59,0xe9,
    0x38,0x3c,0x0c,0x87,0xd5,0x8e,0xc3,0x23,0xe0,0xc6,0xa1,0x19,0xcc,0x38,0xb4,0x3a,
    0x0e,0x2a,0x6b,0x91,0xd5,0x4a,0xdc,0x16,0xc7,0xa1,0x8d,0xd8,0x09,0xc7,0x61,0x0d,
    0xb8,0x71,0xf8,0x11,0xcc,0xf4,0x94,0x83,0xf9,0x6a,0x75,0x1c,0xae,0xa2,0xd3,0x84,
    0x4d,0x8b,0xe3,0xf0,0x38,0x1c,0xda,0x1d,0x87,0x27,0xc0,0x8d,0xc3,0x93,0x60,0xc6,
    0xa1,0xd3,0x71,0x50,0x59,0x87,0xac,0x4e,0xe2,0x76,0xb8,0x5e,0x7a,0x8a,0xd8,0x57,
    0xdd,0xac,0xd2,0x1c,0x4d,0xb7,0xd3,0xe5,0xf8,0x33,0x7a,0xad,0xd8,0x75,0x10,0xab,
    0xbb,0x24,0x56,0x97,0xac,0x1e,0xec,0xf5,0xfd,0x88,0xd4,0x42,0x6b,0xf3,0x0c,0xb5,
    0x5e,0xc7,0xac,0xd5,0x38,0xdd,0xe8,0xf5,0x38,0xbd,0xe7,0xe8,0xab,0xff,0xd3,0xeb,
    0x26,0x9f,0x30,0x17,0x13,0xb1,0xcf,0x2e,0x7a,0xbb,0xc7,0xc9,0xae,0x83,0x75,0xe1,
    0xaf,0x07,0x3f,0x1b,0xf0,0xb3,0xc1,0xf1,0x9a,0x80,0x9b,0xfa,0x2e,0x17,0x9f,0xfd,
    0xc8,0xb4,0xce,0xd7,0xa8,0xa9,0xca,0xca,0x9c,0x4c,0x63,0xfc,0x44,0x0c,0x95,0x9d,
    0x8c,0x62,0xd9,0x28,0xe7,0xf1,0x12,0x72,0xfd,0x0f,0xf9,0x55,0xea,0xd2,0x87,0xdc,
    0xea,0xa4,0xf2,0x5e,0x59,0x7d,0xe4,0xd3,0xeb,0xfa,0xea,0x65,0x72,0xd2,0xdf,0x27,
    0xf8,0x7b,0x05,0xbc,0x40,0xcd,0x8b,0xce,0x97,0xca,0x06,0xc2,0x6c,0x8b,0x7d,0x0d,
    0xd0,0x3b,0x9b,0xc2,0x5c,0x88,0x7b,0x67,0x23,0xbd,0xa3,0xfe,0xb7,0x80,0x5b,0xae,
    0x5b,0xf1,0xbd,0x85,0x1a,0x99,0x9f,0x22,0x5c,0x55,0x67,0x1b,0x39,0xf4,0xa2,0x3f,
    0x40,0x1e,0xdb,0x5d,0x1e,0xdb,0xc2,0x9c,0x8e,0x02,0xa6,0xf6,0x83,0x8e,0xd3,0x6b,
    0x70,0x4a,0x38,0x4e,0xaf,0x83,0x1b,0xa7,0x61,0xe7,0x4b,0x65,0x43,0xb2,0x86,0xf1,
    0x35,0xe4,0x38,0xbd,0x01,0xa7,0x1d,0x8e,0xd3,0x4e,0x70,0xe3,0xf4,0x26,0xbe,0x77,
    0xc2,0xc9,0xfc,0x0c,0x3b,0x4e,0x6f,0x91,0xc3,0x20,0xfa,0x43,0xe8,0x5a,0xfe,0xdb,
    0x9d,0xee,0xdb,0xd4,0xa0,0x88,0xdd,0x30,0x39,0x8f,0xb8,0x9c,0x55,0x67,0x97,0xac,
    0x11,0xec,0x77,0x91,0x9f,0xfe,0xdf,0xbf,0xc3,0x7f,0xbd,0x71,0x38,0x00,0x87,0xfd,
    0x8e,0xc3,0xbb,0xe0,0x56,0xb3,0x83,0xae,0x66,0x6d,0x82,0xe8,0xf7,0xc0,0x21,0xce,
    0xea,0x20,0xfa,0x4f,0x4b,0x7e,0xfa,0x5d,0xf0,0x01,0x31,0x0e,0x31,0x8f,0x0b,0xf8,
    0xd1,0x1e,0xfe,0x10,0xb9,0xfe,0xce,0x80,0x7d,0x04,0x7e,0x98,0xff,0xd6,0x4c,0xb8,
    0x7f,0x71,0xcf,0xea,0x9c,0xf9,0x0a,0xbd,0xa3,0xe8,0x1e,0x09,0xdf,0x08,0x31,0x76,
    0x8c,0x7b,0x71,0x94,0x7a,0x19,0xdf,0x11,0x77,0x6f,0xf4,0xae,0x5c,0xa3,0x17,0x8e,
    0x51,0x17,0xad,0xd7,0x68,0xc9,0xac,0x38,0x2e,0xeb,0x04,0xf6,0xc7,0x1d,0xf7,0xcf,
    0x1c,0xf7,0xcd,0x60,0x9f,0x83,0xeb,0xbd,0xb7,0xf9,0x7a,0x09,0x7c,0xc2,0xcd,0xd7,
    0x51,0xfc,0x9d,0x70,0xb6,0x5f,0x50,0xb7,0xeb,0x6e,0x36,0x5f,0x06,0x9f,0x70,0x73,
    0xcf,0x6c,0x47,0xdd,0x7c,0xd0,0x99,0x70,0x89,0x5c,0x2f,0x93,0xaf,0xea,0xf6,0xa3,
    0xdb,0xef,0xe2,0x9c,0xa4,0x86,0xeb,0x4b,0xe6,0x4d,0x9f,0x3b,0xfb,0xaf,0x39,0xfb,
    0xd3,0xee,0xec,0xcf,0x80,0x17,0x99,0xef,0x67,0xc1,0xec,0xbb,0xe7,0x1b,0xbe,0x57,
    0xce,0x12,0x4b,0xb1,0x6f,0xc1,0xab,0x83,0xef,0x4c,0xf8,0x6e,0x3b,0xc7,0xb7,0x5d,
    0x01,0xf9,0x72,0xa9,0xf9,0x39,0xce,0xcb,0x7f,0x4f,0xe8,0xf3,0x6f,0xa9,0xd8,0x52,
    0x59,0xff,0x02,0x60,0x4c,0xcd,0x8e,0xc4,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int srcWidth;
//     int srcHeight;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
//
//     ivec4 blitArea;
//     int destPitch;
// } params;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)uniform utexture2DMSArray stencil;
//
// void main()
// {
//     ivec2 destSubImageCoords = ivec2(gl_GlobalInvocationID . x * 4, gl_GlobalInvocationID . y);
//     if(any(lessThanEqual(params . blitArea . zw, destSubImageCoords)))
//     {
//         return;
//     }
//
//     destSubImageCoords += params . blitArea . xy;
//             ivec2 srcImageCoords = ivec2(destSubImageCoords);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     int xDir = 0, yDir = 0;
//     if(params . rotateXY)
//     {
//         yDir = params . flipY ? - 1 : 1;
//     }
//     else
//     {
//         xDir = params . flipX ? - 1 : 1;
//     }
//
//     uint outStencils = 0;
//
//     for(int i = 0;i < 4;++ i)
//     {
//
//         if((srcImageCoords . x >= 0 && srcImageCoords . x < params . srcWidth)&&
//             (srcImageCoords . y >= 0 && srcImageCoords . y < params . srcHeight))
//         {
//
//             uint stencilValue = texelFetch(stencil, ivec3(srcImageCoords, params . srcLayer), 0). x;
//
//             outStencils |=(stencilValue & 0xFF)<<(i * 8);
//
//         }
//
//         if(params . rotateXY)
//         {
//             srcImageCoords . y += yDir;
//         }
//         else
//         {
//             srcImageCoords . x += xDir;
//         }
//     }
//
//     destData[gl_GlobalInvocationID . y * params . destPitch + gl_GlobalInvocationID . x]= outStencils;
// }
