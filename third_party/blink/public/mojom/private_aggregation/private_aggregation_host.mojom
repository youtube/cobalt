// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "third_party/blink/public/mojom/aggregation_service/aggregatable_report.mojom";

// Wrapper to allow for a null debug key.
// TODO(alexmt): Remove wrapper and replace with nullable uint64.
struct DebugKey {
  uint64 value;
};

// TODO(alexmt): Consider removing or moving to auction_worklet.
struct DebugModeDetails {
  // Whether debug mode is enabled.
  bool is_enabled = false;

  // Must be null if the debug mode is disabled. Can still be null even if the
  // debug mode is enabled.
  DebugKey? debug_key;
};

// A Private Aggregation error condition. Histogram contributions can be made
// conditional on one of these conditions. Note that error events are triggered
// based on a report's unconditional contributions only, i.e. what would've
// happened if there were no conditional contributions. (This avoids circular
// logic; for example, when kEmptyReportDropped is triggered.)
// Note: this functionality is gated behind the
// `kPrivateAggregationApiErrorReporting` feature and is not fully implemented.
// TODO(crbug.com/381788013): Finish implementation and expose new
// PrivateAggregationHost call.
enum PrivateAggregationErrorEvent {
  // A report was scheduled and no contributions were dropped.
  kReportSuccess,

  // A report was scheduled, but some contributions were dropped due to the per-
  // report limit.
  kTooManyContributions,

  // A report was not scheduled as it had no contributions.
  kEmptyReportDropped,

  // A report was scheduled, but the limit of pending reports was reached. That
  // is, the next report would be dropped due to the limit.
  kPendingReportLimitReached,

  // One or more contributions were dropped (or the whole report) as there was
  // not enough contribution budget.
  kInsufficientBudget,

  // The JavaScript context was still running when the contribution timeout
  // occurred. (This currently only applies to Shared Storage.)
  kContributionTimeoutReached,

  // Represents an error event that is not internal to Private Aggregation (i.e.
  // is not enumerated above) and that has (already) occurred. Embedding APIs
  // (i.e. Shared Storage and Protected Audience) can define their own error
  // events that they handle before passing any conditional contributions to the
  // PrivateAggregationHost interface. If the event did not occur, the
  // contributions should be dropped before a mojo call is made. A call to
  // `ContributeToHistogramOnEvent()` using this error event is mostly
  // equivalent to just calling `ContributeToHistogram()`, but there
  // are some differences, see details of the two-phase flows in
  // `PrivateAggregationPendingContributions`.
  kAlreadyTriggeredExternalError
};

// Interface implemented in the browser for worklets and renderers to forward
// histogram report requests. Requests a histogram report with the specified
// contributions (and debug details) be sent to the origin associated with the
// remote. Waits until the pipe disconnects before sending the report. Note that
// only a small number of fields in the eventual report are controllable by the
// worklet/renderer.
// TODO(crbug.com/1459338): Support sending a report on a timeout as well.
interface PrivateAggregationHost {
  // Adds `contributions` to the list of contributions to be embedded in the
  // report.
  ContributeToHistogram(
      array<AggregatableReportHistogramContribution> contributions);

  // Adds `contributions` to the list of contributions to be embedded in the
  // report if the `error_event` is triggered.
  // Only valid to call if the `kPrivateAggregationApiErrorReporting` feature is
  // enabled.
  ContributeToHistogramOnEvent(
      PrivateAggregationErrorEvent error_event,
      array<AggregatableReportHistogramContribution> contributions);

  // If a non-null report is sent from this mojo pipe, enables debug mode for
  // that report. If `debug_key` is non-null, the provided debug key will also
  // be used. Should only be called at most once.
  // TODO(crbug.com/1466668): Consider applying to null reports too.
  EnableDebugMode(DebugKey? debug_key);
};
