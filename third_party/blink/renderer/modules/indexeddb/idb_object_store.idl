/*
 * Copyright (C) 2010 Google Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1.  Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 * 2.  Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://w3c.github.io/IndexedDB/#object-store-interface

[
    Exposed=(Window,Worker)
] interface IDBObjectStore {
    [RaisesException=Setter] attribute DOMString name;
    [CallWith=ScriptState, CachedAttribute=IsKeyPathDirty] readonly attribute any keyPath;
    readonly attribute DOMStringList indexNames;
    [SameObject] readonly attribute IDBTransaction transaction;
    readonly attribute boolean autoIncrement;

    [CallWith=ScriptState, MeasureAs=IndexedDBWrite, NewObject, RaisesException]
    IDBRequest put(any value, optional any key);

    [CallWith=ScriptState, MeasureAs=IndexedDBWrite, NewObject, RaisesException]
    IDBRequest add(any value, optional any key);

    [
      CallWith=ScriptState,
      ImplementedAs=Delete,
      MeasureAs=IndexedDBWrite,
      NewObject,
      RaisesException
    ] IDBRequest delete(any key);

    [
      CallWith = ScriptState,
      MeasureAs=IndexedDBRead,
      NewObject,
      RaisesException,
      RuntimeEnabled=IDBBatchGetAll
    ] IDBRequest batchGetAll(optional sequence<any> keys = [],
                           optional [EnforceRange] unsigned long count);

    [CallWith=ScriptState, MeasureAs=IndexedDBWrite, NewObject, RaisesException]
    IDBRequest clear();

    [CallWith=ScriptState, MeasureAs=IndexedDBRead, NewObject, RaisesException]
    IDBRequest get(any key);

    [CallWith=ScriptState, MeasureAs=IndexedDBRead, NewObject, RaisesException]
    IDBRequest getKey(any key);

    [CallWith=ScriptState, MeasureAs=IndexedDBRead, NewObject, RaisesException]
    IDBRequest getAll(optional any query = null,
                      optional [EnforceRange] unsigned long count);

    [CallWith=ScriptState, MeasureAs=IndexedDBRead, NewObject, RaisesException]
    IDBRequest getAllKeys(optional any query = null,
                          optional [EnforceRange] unsigned long count);

    [CallWith=ScriptState, MeasureAs=IndexedDBRead, NewObject, RaisesException]
    IDBRequest count(optional any key = null);

    [CallWith=ScriptState, MeasureAs=IndexedDBRead, NewObject, RaisesException]
    IDBRequest openCursor(optional any range = null,
                          optional IDBCursorDirection direction = "next");

    [CallWith=ScriptState, MeasureAs=IndexedDBRead, NewObject, RaisesException]
    IDBRequest openKeyCursor(optional any range = null,
                             optional IDBCursorDirection direction = "next");

    [MeasureAs=IndexedDBRead, RaisesException] IDBIndex index(DOMString name);

    [CallWith=ScriptState, MeasureAs=IndexedDBWrite, NewObject, RaisesException]
    IDBIndex createIndex(DOMString name,
                         (DOMString or sequence<DOMString>) keyPath,
                         optional IDBIndexParameters options = {});

    [MeasureAs=IndexedDBWrite, RaisesException]
    void deleteIndex(DOMString name);
};
