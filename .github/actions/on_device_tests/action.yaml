name: On Device Test
description: Runs on-device tests.
inputs:
  test_targets:
    description: "The test targets in a JSON array."
    required: true
  gcs_results_path:
    description: "GCS path for the test results."
    required: true
  test_results_key:
    description: "Artifact key used to store test results."
    required: true
  test_dimensions:
    description: "Test dimensions JSON string."
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Requirements
      run: |
        pip3 install --require-hashes --no-deps -r ${GITHUB_WORKSPACE}/cobalt/tools/requirements.txt
      shell: bash
    - name: Generate gRPC files
      run: |
        python -m grpc_tools.protoc -I${GITHUB_WORKSPACE}/cobalt/tools/ \
            --python_out=${GITHUB_WORKSPACE}/cobalt/tools/ \
            --grpc_python_out=${GITHUB_WORKSPACE}/cobalt/tools/ \
            ${GITHUB_WORKSPACE}/cobalt/tools/on_device_tests_gateway.proto
      shell: bash
    - name: Set Up Cloud SDK
      uses: isarkis/setup-gcloud@40dce7857b354839efac498d3632050f568090b6 # v1.1.1
    - name: Set GCS Project Name
      run: |
        echo "PROJECT_NAME=$(gcloud config get-value project)" >> $GITHUB_ENV
      shell: bash
    - name: Run Tests on ${{ matrix.platform }} Platform
      env:
        TEST_TARGETS_JSON: ${{ inputs.test_targets }}
        GCS_ARTIFACTS_PATH: /bigstore/${{ env.PROJECT_NAME }}-test-artifacts/${{ github.workflow }}/${{ github.run_number }}/${{ matrix.platform }}
        GCS_RESULTS_PATH: gs://cobalt-unittest-storage/results/${{ matrix.name }}/${{ github.run_id }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_TRIGGERING_ACTOR: ${{ github.triggering_actor }}
        GITHUB_ACTOR_ID: ${{ github.actor_id }}
        GITHUB_REPO: ${{ github.repository }}
        GITHUB_PR_HEAD_USER_LOGIN: ${{ github.event.pull_request.head.user.login }}
        GITHUB_PR_HEAD_USER_ID: ${{ github.event.pull_request.head.user.id }}
        GITHUB_COMMIT_AUTHOR_USERNAME: ${{ github.event.commits[0].author.username }}
        GITHUB_COMMIT_AUTHOR_EMAIL: ${{ github.event.commits[0].author.email }}
        GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        GITHUB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
      run: |
        set -x
        test_targets=$(echo "${TEST_TARGETS_JSON}" | jq -cr '. | join(",")')

        # TODO(oxv): Fix dimensions. Pass as json? key-value pair?
        python3 -u cobalt/tools/on_device_tests_gateway_client.py \
          --token ${GITHUB_TOKEN} \
          trigger \
          --targets ${test_targets} \
          --filter_json_dir "${GITHUB_WORKSPACE}/cobalt/testing/filters/${{ matrix.platform}}" \
          --label chrobalt_on_device_test \
          --label github_${GITHUB_PR_NUMBER:-postsubmit} \
          --label builder-${{ matrix.platform }} \
          --label builder_url-${GITHUB_RUN_URL} \
          --label github \
          --label ${GITHUB_EVENT_NAME} \
          --label ${GITHUB_WORKFLOW} \
          --label actor-${GITHUB_ACTOR} \
          --label actor_id-${GITHUB_ACTOR_ID} \
          --label triggering_actor-${GITHUB_TRIGGERING_ACTOR} \
          --label sha-${GITHUB_SHA} \
          --label repository-${GITHUB_REPO} \
          --label author-${GITHUB_PR_HEAD_USER_LOGIN:-$GITHUB_COMMIT_AUTHOR_USERNAME} \
          --label author_id-${GITHUB_PR_HEAD_USER_ID:-$GITHUB_COMMIT_AUTHOR_EMAIL} \
          --dimensions '${{ inputs.test_dimensions }}' \
          ${ON_DEVICE_TEST_ATTEMPTS:+"--test_attempts" "$ON_DEVICE_TEST_ATTEMPTS"} \
          --gcs_archive_path "${GCS_ARTIFACTS_PATH}" \
          --gcs_result_path "${GCS_RESULTS_PATH}" || {
            echo "Finished running tests..."
            echo "The test session failed. See logs for details."
            # Fail the job so it's easy to retrigger.
            exit 1
          }
        echo "Finished running tests..."
      shell: bash
    - name: Download ${{ matrix.platform }} Test Results from GCS
      if: always()
      env:
        GCS_RESULTS_PATH: ${{ inputs.gcs_results_path }}
      run: |
        set -uxe
        test_output="${GITHUB_WORKSPACE}/results"
        echo "test_output=${test_output}" >> $GITHUB_ENV

        # Test results (xml and logs) must be in a subfolder in results_dir
        # to be picked up by the test result processor.
        mkdir -p "${test_output}/${{ matrix.platform }}"
        gsutil cp -r "${GCS_RESULTS_PATH}/" "${test_output}/${{ matrix.platform }}"
      shell: bash
    - name: Archive Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ inputs.test_results_key }}
        path: ${{ env.test_output }}/*
