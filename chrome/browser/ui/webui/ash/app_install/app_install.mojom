// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.app_install.mojom;

import "ui/gfx/geometry/mojom/geometry.mojom";
import "url/mojom/url.mojom";

union DialogArgs {
  AppInfoArgs app_info_args;
  NoAppErrorArgs no_app_error_args;
  pending_remote<ConnectionErrorActions> connection_error_actions;
};

struct AppInfoArgs {
  AppInfoData data;
  pending_remote<AppInfoActions> actions;
};

struct AppInfoData {
  string name;

  url.mojom.Url url;

  string description;

  url.mojom.Url icon_url;

  array<Screenshot> screenshots;

  bool is_already_installed;
};

struct Screenshot {
  url.mojom.Url url;

  gfx.mojom.Size size;
};

// Lives in the browser process, provides actions the dialog can perform when
// displaying app info to the user.
interface AppInfoActions {
  // Runs the callback to install the app and returns whether the app was
  // successfully installed.
  InstallApp() => (bool installed);

  // Opens the app that was just installed.
  LaunchApp();
};

struct NoAppErrorArgs {};

// Lives in the browser process, provides actions the dialog can perform when
// displaying an error to the user.
interface ConnectionErrorActions {
  // Retries the install dialog flow.
  TryAgain();
};

// Lives in the browser process. A renderer uses this to create a page handler
// that enables communication between a renderer and the browser process.
interface PageHandlerFactory {
  // Creates a page handler to enable communication with the browser process.
  CreatePageHandler(pending_receiver<PageHandler> handler);
};

// Lives in the browser process. A renderer uses this to invoke methods that
// are implemented in the browser process.
interface PageHandler {
  // Returns arguments passed to the dialog on creation.
  // Union sub type determines what kind of dialog to show.
  GetDialogArgs() => (DialogArgs dialog_args);

  // Closes the dialog.
  CloseDialog();
};
