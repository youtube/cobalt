name: mac_build

on:
  workflow_call:
    inputs:
      platform:
        description: 'Cobalt platform.'
        required: true
        type: string
      nightly:
        description: 'Nightly workflow.'
        required: true
        type: string
        default: 'false'
    secrets:
      datadog_api_key:
        required: false
      SCCACHE_GCS_KEY:
        required: true

concurrency:
  # Cancel existing jobs on the same workflow, platform, and branch (or sha if merged).
  group: ${{ github.workflow }}-${{ inputs.platform }} @ ${{ github.head_ref || github.sha }}-${{ github.ref }}
  cancel-in-progress: true


jobs:
  # Retrieves configuration from json file.
  initialize:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      # Tell gclient not to automatically update depot tools every time it runs.
      DEPOT_TOOLS_UPDATE: 0
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PR_REPO_URL: ${{ github.event.pull_request.base.repo.url }}
      GITHUB_EVENT_NUMBER: ${{ github.event.number }}
    if: |
      github.event.action != 'labeled' ||
      (github.event.pull_request.merged == false && github.event.label.name == 'runtest')
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Cache CI Essentials
        uses: actions/upload-artifact@v4
        with:
          name: ci-essentials-${{ inputs.platform }}
          include-hidden-files: true
          retention-days: 14
          path: |
            .github
            cobalt/build
            cobalt/docker
            cobalt/testing/filters
            cobalt/tools
            docker-compose.yaml
      - name: Set platforms
        id: set-platforms
        shell: bash
        run: |
          set -x
          platforms=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.platforms')
          echo "platforms=${platforms}" >> $GITHUB_OUTPUT
      - name: Set build targets
        id: set-targets
        shell: bash
        run: |
          set -x
          targets=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -cr '.targets')
          echo "targets=${targets}" >> $GITHUB_OUTPUT
      - name: Set build configs
        id: set-build-configs
        shell: bash
        run: |
          set -x
          # Attempt to load build configs from JSON. If not present use default.
          build_configs=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -cr '.build_configs')
          if [[ "${build_configs}" == "null" ]]; then
            build_configs='["devel", "qa", "gold"]'
          fi
          echo "build_configs=${build_configs}" >> $GITHUB_OUTPUT
      - name: Set platform extra includes
        id: set-includes
        shell: bash
        run: |
          set -x
          includes=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.includes')
          echo "includes=${includes}" >> $GITHUB_OUTPUT
    outputs:
      platforms: ${{ steps.set-platforms.outputs.platforms }}
      targets: ${{ steps.set-targets.outputs.targets }}
      build_configs: ${{ steps.set-build-configs.outputs.build_configs }}
      includes: ${{ steps.set-includes.outputs.includes }}
  build_on_mac:
    needs: [initialize]
    permissions: {}
    runs-on: macos-14-large
    name: ${{ matrix.name }}_${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
        config: ${{ fromJson(needs.initialize.outputs.build_configs) }}
    env:
      DEPOT_TOOLS_UPDATE: 0
      DEPOT_TOOLS_REPORT_BUILD: 0
      DEPOT_TOOLS_COLLECT_METRICS: 0
      DEPOT_TOOLS_METRICS: 0
      IS_CI: 1
    steps:
      - name: Install sccache
        run: brew install sccache
      - name: Install ccache
        run: brew install ccache
      - name: Configure sccache
        shell: bash
        run: |
          set -x
          if [ -z "${{ secrets.SCCACHE_GCS_KEY }}" ]; then
            echo "ERROR: SCCACHE_GCS_KEY secret is empty or not set"
            exit 1
          fi
          echo "Secret length: $(echo '${{ secrets.SCCACHE_GCS_KEY }}' | wc -c)"
          echo "${{ secrets.SCCACHE_GCS_KEY }}" | tr -d '\n\r ' | base64 --decode > "${HOME}/gcloud.json"
          echo "Verifying decoded GCS key:"
          jq -r '.client_email, .project_id' "${HOME}/gcloud.json"
          echo "SCCACHE_GCS_KEY_PATH=${HOME}/gcloud.json" >> $GITHUB_ENV
          echo "SCCACHE=1" >> $GITHUB_ENV
          echo "SCCACHE_GCS_BUCKET=cobalt-sscache-mac" >> $GITHUB_ENV
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
          echo "SCCACHE_IDLE_TIMEOUT=0" >> $GITHUB_ENV
      - name: Check sccache status
        run: |
          sccache -s
      - name: Check ccache status
        run: |
          ccache -s
      - name: Test sccache compilation
        run: |
          echo "int main() { return 0; }" > test.cc
          sccache gcc -c test.cc -o test.o
          echo "sccache compilation test successful"
          rm -f test.cc test.o
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src
          # Set fetch-depth to 2 to make checkout faster for pull requests and cobalt_sandbox repo.
          # Set fetch-dept to 0 for non pull request workflows in production repo which is needed
          # to properly calculate build id.
          fetch-depth: ${{ ( github.event_name == 'pull_request' || github.repository == 'youtube/cobalt_sandbox' ) && 2 || 0 }}
      - name: Set Up Depot Tools
        uses: ./src/.github/actions/depot_tools
      - name: Build Cobalt
        id: build
        uses: ./src/.github/actions/build
        with:
          targets: ${{ needs.initialize.outputs.targets }}
          test_artifacts_key: None
          test_root_target: None
          test_targets_json_file: out/${{ matrix.platform }}_${{ matrix.config }}/test_targets.json
          upload_on_host_test_artifacts: false
          upload_on_device_test_artifacts: false
          upload_web_test_artifacts: false
