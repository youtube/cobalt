// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module webnn.mojom;

// Represents the `MLInputOperandLayout` that specifies the layout format of
// the input tensor. `kChannelsFirst` means `nchw` (batches, channels, height,
// width), `kChannelsLast` means `nhwc` (batches, height, width, channels).
// The type is used to get the spatial dimension from input tensor, thus safe to
// represent as enum.
enum InputOperandLayout {
  kChannelsFirst,
  kChannelsLast,
};

// Represents supported resample2d axes for this context.
// kChannelsFirst means axes = [2,3], kChannelsLast means axes = [1,2],
// kAny means any arbitrary axes.
enum Resample2DAxes {
  kAny,
  kChannelsFirst,
  kChannelsLast,
};

// Represents supported batchNormalization axis for this context.
// kChannelsFirst means axis = 1.
// kAny means any arbitrary axis.
enum BatchNormalizationAxis {
  kAny,
  kChannelsFirst,
};

struct SupportedDataTypes {
  bool float32;
  bool float16;
  bool int32;
  bool uint32;
  bool int64;
  bool uint64;
  bool int8;
  bool uint8;
  bool int4;
  bool uint4;
};

struct SupportedRanks {
  uint32 min;
  uint32 max;
};

struct SupportedTensors {
  SupportedDataTypes data_types;
  SupportedRanks ranks;
};

// Represents the data type limits exposed through
// `MLContext::opSupportLimits()`.
// Keep the order as the same as build methods of `MLGraphBuilder`, for
// operator with multiple parameters, maintain the parameter positions order.
struct DataTypeLimits {
  SupportedDataTypes input;
  SupportedDataTypes constant;

  // ArgMin/Max.
  SupportedTensors arg_min_max_input;
  SupportedDataTypes arg_min_max_output;

  SupportedTensors batch_normalization_input;
  // Also used to validate variance, scale and bias.
  SupportedTensors batch_normalization_mean;
  SupportedTensors cast_input;
  SupportedTensors clamp_input;
  SupportedTensors concat_inputs;
  // Also used to validate filter.
  SupportedTensors conv2d_input;
  SupportedTensors conv2d_bias;
  // Also used to validate filter.
  SupportedTensors conv_transpose2d_input;
  SupportedTensors conv_transpose2d_bias;
  SupportedTensors cumulative_sum_input;

  // DequantizeLinear.
  SupportedTensors dequantize_linear_input;
  SupportedTensors dequantize_linear_scale;
  SupportedTensors dequantize_linear_zero_point;

  // Element-wise binary ops.
  SupportedTensors add_input;
  SupportedTensors sub_input;
  SupportedTensors mul_input;
  SupportedTensors div_input;
  SupportedTensors max_input;
  SupportedTensors min_input;
  SupportedTensors pow_input;

  // Element-wise logical ops.
  SupportedTensors equal_input;
  SupportedTensors greater_input;
  SupportedTensors greater_or_equal_input;
  SupportedTensors lesser_input;
  SupportedTensors lesser_or_equal_input;
  SupportedTensors not_equal_input;
  SupportedTensors logical_and_input;
  SupportedTensors logical_or_input;
  SupportedTensors logical_xor_input;
  SupportedTensors logical_not_input;
  SupportedDataTypes logical_output;

  // Element-wise unary ops.
  SupportedTensors abs_input;
  SupportedTensors ceil_input;
  SupportedTensors cos_input;
  SupportedTensors erf_input;
  SupportedTensors exp_input;
  SupportedTensors floor_input;
  SupportedTensors identity_input;
  SupportedTensors log_input;
  SupportedTensors neg_input;
  SupportedTensors reciprocal_input;
  SupportedTensors sign_input;
  SupportedTensors sin_input;
  SupportedTensors sqrt_input;
  SupportedTensors tan_input;

  SupportedTensors elu_input;
  SupportedTensors expand_input;

  // Gather.
  SupportedTensors gather_input;
  SupportedTensors gather_indices;

  // GatherElements.
  SupportedTensors gather_elements_input;
  SupportedTensors gather_elements_indices;

  // GatherND.
  SupportedTensors gather_nd_input;
  SupportedTensors gather_nd_indices;

  SupportedTensors gelu_input;
  // Also used to validate b;
  SupportedTensors gemm_a;
  SupportedTensors gemm_c;
  // Also used to validate weight, recurrentWeight and initialHiddenState.
  SupportedTensors gru_input;
  // Also used to validate recurrentBias.
  SupportedTensors gru_bias;
  // Also used to validate weight, recurrentWeight and hiddenState.
  SupportedTensors gru_cell_input;
  // Also used to validate recurrentBias.
  SupportedTensors gru_cell_bias;
  SupportedTensors hard_sigmoid_input;
  SupportedTensors hard_swish_input;
  SupportedTensors instance_normalization_input;
  // Also used to validate bias.
  SupportedTensors instance_normalization_scale;
  SupportedTensors layer_normalization_input;
  SupportedTensors leaky_relu_input;
  SupportedTensors linear_input;
  // Also used to validate weight, recurrentWeight, initialHiddenState and
  // initialCellState.
  SupportedTensors lstm_input;
  // Also used to validate recurrentBias and peepholeWeight.
  SupportedTensors lstm_bias;
  // Also used to validate weight, recurrentWeight, hiddenState and cellState.
  SupportedTensors lstm_cell_input;
  // Also used to validate recurrentBias and peepholeWeight.
  SupportedTensors lstm_cell_bias;
  SupportedTensors matmul_input;
  SupportedTensors pad_input;

  // Pool2d.
  SupportedTensors average_pool2d_input;
  SupportedTensors l2_pool2d_input;
  SupportedTensors max_pool2d_input;

  SupportedTensors prelu_input;

  // QuantizeLinear.
  SupportedTensors quantize_linear_input;
  SupportedTensors quantize_linear_zero_point;

  // Reduction ops.
  SupportedTensors reduce_l1_input;
  SupportedTensors reduce_l2_input;
  SupportedTensors reduce_log_sum_input;
  SupportedTensors reduce_log_sum_exp_input;
  SupportedTensors reduce_max_input;
  SupportedTensors reduce_mean_input;
  SupportedTensors reduce_min_input;
  SupportedTensors reduce_product_input;
  SupportedTensors reduce_sum_input;
  SupportedTensors reduce_sum_square_input;

  SupportedTensors relu_input;
  SupportedTensors resample2d_input;
  SupportedTensors reshape_input;
  SupportedTensors reverse_input;

  // ScatterElements.
  SupportedTensors scatter_elements_input;
  SupportedTensors scatter_elements_indices;

  // ScatterND.
  SupportedTensors scatter_nd_input;
  SupportedTensors scatter_nd_indices;
  SupportedTensors scatter_nd_updates;

  SupportedTensors sigmoid_input;
  SupportedTensors slice_input;
  SupportedTensors softmax_input;
  SupportedTensors softplus_input;
  SupportedTensors softsign_input;
  SupportedTensors split_input;
  SupportedTensors tanh_input;
  SupportedTensors tile_input;
  SupportedTensors transpose_input;
  SupportedTensors triangular_input;

  // Where.
  SupportedTensors where_condition;
  SupportedTensors where_value;
};

// Represents properties of the `WebNNContext` implementation that has been
// provided.
struct ContextProperties {
  InputOperandLayout input_operand_layout;
  Resample2DAxes resample_2d_axes;
  BatchNormalizationAxis batch_normalization_axis;
  // All tensors in graph will not exceed the byte length limit.
  uint64 tensor_byte_length_limit;
  DataTypeLimits data_type_limits;
};
