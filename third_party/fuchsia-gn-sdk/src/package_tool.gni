# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/fuchsia/gn_configs.gni")

# Template for running the ffx package-tool tool for building and archiving
# fuchsia packages.
#
# Parameters
#   package_name - defaults to target_name
#   archive_manifest - required
#   command - the packaging step to perform valid steps are build, archive
#
# Forwarded parameters
#       testonly
#       deps
#       public_deps
#       visibility
template("fuchsia_package_tool") {
  forward_variables_from(invoker, [ "*" ])
  action(target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "deps",
                             "public_deps",
                             "visibility",
                           ])
    _valid_commands = [
      "build",
      "archive",
    ]
    assert(defined(invoker.archive_manifest), "archive_manifest is required.")
    archive_manifest = invoker.archive_manifest

    assert(defined(invoker.command), "command is required")
    assert(invoker.command == "build" || invoker.command == "archive",
           "invalid command. valid commands are ${_valid_commands}")
    command = invoker.command

    package_name = target_name
    if (defined(invoker.package_name)) {
      package_name = invoker.package_name
    }

    # tool path
    _ffx_package_tool_path = "${fuchsia_tool_dir}/ffx_tools/ffx-package"
    script = "//third_party/fuchsia-gn-sdk/src/gn_run_binary.py"

    # output files
    _pkg_out_dir = "${target_gen_dir}/${package_name}"
    _pkg_output_manifest = "${_pkg_out_dir}/package_manifest.json"
    _meta_far_file = "${_pkg_out_dir}/meta.far"

    inputs = [
      # Depend on the SDK hash, to ensure rebuild if the SDK tools change.
      fuchsia_sdk_manifest_file,
      _ffx_package_tool_path,
      archive_manifest,
    ]

    args = [
      rebase_path(_ffx_package_tool_path, root_build_dir),
      "package",
    ]

    if (command == "build") {
      # "ffx package build" flow
      _meta_far_file = "${_pkg_out_dir}/meta.far"

      outputs = [
        _meta_far_file,
        _pkg_output_manifest,
      ]
      depfile = "${_meta_far_file}.d"
      args += [
        "build",
        rebase_path(archive_manifest, root_build_dir),
        "--out",
        rebase_path(_pkg_out_dir, root_build_dir),
        "--published-name",
        package_name,
        "--depfile",
      ]

      if (fuchsia_target_api_level != -1) {
        args += [
          "--api-level",
          "${fuchsia_target_api_level}",
        ]
      }
    } else if (command == "archive") {
      # "ffx package archive create" flow
      _final_far_file = "$_pkg_out_dir/${package_name}.far"
      _final_far_depfile = "${_final_far_file}.d"

      inputs += [ _meta_far_file ]
      outputs = [ _final_far_file ]
      depfile = _final_far_depfile
      args += [
        "archive",
        "create",
        rebase_path(_pkg_output_manifest, root_build_dir),
        "--out",
        rebase_path(_final_far_file, root_build_dir),
        "--depfile",
        rebase_path(_final_far_depfile, root_build_dir),
      ]
    }
  }
}
