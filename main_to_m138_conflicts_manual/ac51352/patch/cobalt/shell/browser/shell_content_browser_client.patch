--- cobalt/shell/browser/shell_content_browser_client.cc
+++ cobalt/shell/browser/shell_content_browser_client.cc
@@ -154,38 +154,6 @@
 
 #endif
 
-<<<<<<< HEAD
-#if defined(RUN_BROWSER_TESTS)
-class ShellControllerImpl : public mojom::ShellController {
- public:
-  ShellControllerImpl() = default;
-  ~ShellControllerImpl() override = default;
-
-  // mojom::ShellController:
-  void GetSwitchValue(const std::string& name,
-                      GetSwitchValueCallback callback) override {
-    const auto& command_line = *base::CommandLine::ForCurrentProcess();
-    if (command_line.HasSwitch(name)) {
-      std::move(callback).Run(command_line.GetSwitchValueASCII(name));
-    } else {
-      std::move(callback).Run(std::nullopt);
-    }
-  }
-
-  void ExecuteJavaScript(const std::u16string& script,
-                         ExecuteJavaScriptCallback callback) override {
-    CHECK(!Shell::windows().empty());
-    WebContents* contents = Shell::windows()[0]->web_contents();
-    contents->GetPrimaryMainFrame()->ExecuteJavaScriptForTests(
-        script, std::move(callback), ISOLATED_WORLD_ID_GLOBAL);
-  }
-
-  void ShutDown() override { Shell::Shutdown(); }
-};
-#endif  // defined(RUN_BROWSER_TESTS)
-
-=======
->>>>>>> ac513523b22 (Refactor ShellContentBrowserClient into prod and test classes (#7592))
 // TODO(crbug/1219642): Consider not needing VariationsServiceClient just to use
 // VariationsFieldTrialCreator.
 class ShellVariationsServiceClient
@@ -227,12 +195,8 @@
   std::string cmdline_origins(
       base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
           switches::kIsolatedContextOrigins));
-<<<<<<< HEAD
 
   std::vector<std::string_view> origin_strings = base::SplitStringPiece(
-=======
-  std::vector<base::StringPiece> origin_strings = base::SplitStringPiece(
->>>>>>> ac513523b22 (Refactor ShellContentBrowserClient into prod and test classes (#7592))
       cmdline_origins, ",", base::TRIM_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
   base::flat_set<url::Origin> origin_set;
   for (const std::string_view& origin_string : origin_strings) {
@@ -258,41 +222,6 @@
   return *g_shared_state;
 }
 
-<<<<<<< HEAD
-#if defined(RUN_BROWSER_TESTS)
-std::unique_ptr<PrefService> CreateLocalState() {
-  auto pref_registry = base::MakeRefCounted<PrefRegistrySimple>();
-
-  metrics::MetricsService::RegisterPrefs(pref_registry.get());
-  variations::VariationsService::RegisterPrefs(pref_registry.get());
-
-  base::FilePath path;
-  CHECK(base::PathService::Get(SHELL_DIR_USER_DATA, &path));
-  path = path.AppendASCII("Local State");
-
-  PrefServiceFactory pref_service_factory;
-  pref_service_factory.set_user_prefs(
-      base::MakeRefCounted<JsonPrefStore>(path));
-
-  return pref_service_factory.Create(pref_registry);
-}
-#endif  // defined(RUN_BROWSER_TESTS)
-
-}  // namespace
-=======
-std::string GetShellUserAgent() {
-  if (base::FeatureList::IsEnabled(blink::features::kFullUserAgent)) {
-    return GetShellFullUserAgent();
-  }
-
-  if (base::FeatureList::IsEnabled(blink::features::kReduceUserAgent)) {
-    return GetShellReducedUserAgent();
-  }
-
-  return GetShellFullUserAgent();
-}
->>>>>>> ac513523b22 (Refactor ShellContentBrowserClient into prod and test classes (#7592))
-
 std::string GetShellLanguage() {
   return "en-us,en";
 }
@@ -388,19 +317,6 @@
   command_line->CopySwitchesFrom(*base::CommandLine::ForCurrentProcess(),
                                  kForwardSwitches);
 
-<<<<<<< HEAD
-#if defined(RUN_BROWSER_TESTS)
-  static const char* kForwardTestSwitches[] = {
-      switches::kExposeInternalsForTesting,
-      switches::kRunWebTests,
-  };
-
-  command_line->CopySwitchesFrom(*base::CommandLine::ForCurrentProcess(),
-                                 kForwardTestSwitches);
-#endif  // defined(RUN_BROWSER_TESTS)
-
-=======
->>>>>>> ac513523b22 (Refactor ShellContentBrowserClient into prod and test classes (#7592))
 #if BUILDFLAG(IS_LINUX)
   if (base::CommandLine::ForCurrentProcess()->HasSwitch(
           switches::kEnableCrashReporter)) {
@@ -751,97 +667,7 @@
 
 void ShellContentBrowserClient::CreateFeatureListAndFieldTrials() {}
 
-<<<<<<< HEAD
-void ShellContentBrowserClient::SetUpFieldTrials() {
-#if defined(RUN_BROWSER_TESTS)
-  metrics::TestEnabledStateProvider enabled_state_provider(/*consent=*/false,
-                                                           /*enabled=*/false);
-  base::FilePath path;
-  base::PathService::Get(SHELL_DIR_USER_DATA, &path);
-  std::unique_ptr<metrics::MetricsStateManager> metrics_state_manager =
-      metrics::MetricsStateManager::Create(
-          GetSharedState().local_state.get(), &enabled_state_provider,
-          std::wstring(), path, metrics::StartupVisibility::kUnknown,
-          {
-              .force_benchmarking_mode =
-                  base::CommandLine::ForCurrentProcess()->HasSwitch(
-                      switches::kEnableGpuBenchmarking),
-          });
-  metrics_state_manager->InstantiateFieldTrialList();
-
-  std::vector<std::string> variation_ids;
-  auto feature_list = std::make_unique<base::FeatureList>();
-
-  std::unique_ptr<variations::SeedResponse> initial_seed;
-#if BUILDFLAG(IS_ANDROID)
-  if (!GetSharedState().local_state->HasPrefPath(
-          variations::prefs::kVariationsSeedSignature)) {
-    DVLOG(1) << "Importing first run seed from Java preferences.";
-    initial_seed = variations::android::GetVariationsFirstRunSeed();
-  }
-#endif
-
-  ShellVariationsServiceClient variations_service_client;
-  variations::VariationsFieldTrialCreator field_trial_creator(
-      &variations_service_client,
-      std::make_unique<variations::VariationsSeedStore>(
-          GetSharedState().local_state.get(), std::move(initial_seed),
-          /*signature_verification_enabled=*/true,
-          std::make_unique<variations::VariationsSafeSeedStoreLocalState>(
-              GetSharedState().local_state.get(),
-              variations_service_client.GetVariationsSeedFileDir(),
-              variations_service_client.GetChannelForVariations(),
-              /*entropy_providers=*/nullptr),
-          variations_service_client.GetChannelForVariations(),
-          variations_service_client.GetVariationsSeedFileDir()),
-      variations::UIStringOverrider(),
-      // The limited entropy synthetic trial will not be registered for this
-      // purpose.
-      /*limited_entropy_synthetic_trial=*/nullptr);
-
-  variations::SafeSeedManager safe_seed_manager(
-      GetSharedState().local_state.get());
-
-  const base::CommandLine& command_line =
-      *base::CommandLine::ForCurrentProcess();
-
-  // Overrides for content/common and lower layers' switches.
-  std::vector<base::FeatureList::FeatureOverrideInfo> feature_overrides =
-      content::GetSwitchDependentFeatureOverrides(command_line);
-
-  // Overrides for content/shell switches.
-
-  // Overrides for --run-web-tests.
-  if (switches::IsRunWebTestsSwitchPresent()) {
-    // Disable artificial timeouts for PNA-only preflights in warning-only mode
-    // for web tests. We do not exercise this behavior with web tests as it is
-    // intended to be a temporary rollout stage, and the short timeout causes
-    // flakiness when the test server takes just a tad too long to respond.
-    feature_overrides.emplace_back(
-        std::cref(
-            network::features::kPrivateNetworkAccessPreflightShortTimeout),
-        base::FeatureList::OVERRIDE_DISABLE_FEATURE);
-  }
-
-  // Since this is a test-only code path, some arguments to SetUpFieldTrials are
-  // null.
-  // TODO(crbug/1248066): Consider passing a low entropy source.
-  variations::PlatformFieldTrials platform_field_trials;
-  variations::SyntheticTrialRegistry synthetic_trial_registry;
-  field_trial_creator.SetUpFieldTrials(
-      variation_ids,
-      command_line.GetSwitchValueASCII(
-          variations::switches::kForceVariationIds),
-      feature_overrides, std::move(feature_list), metrics_state_manager.get(),
-      &synthetic_trial_registry, &platform_field_trials, &safe_seed_manager,
-      /*add_entropy_source_to_variations_ids=*/false,
-      *metrics_state_manager->CreateEntropyProviders(
-          /*enable_limited_entropy_mode=*/false));
-#endif  // defined(RUN_BROWSER_TESTS)
-}
-=======
 void ShellContentBrowserClient::SetUpFieldTrials() {}
->>>>>>> ac513523b22 (Refactor ShellContentBrowserClient into prod and test classes (#7592))
 
 std::optional<network::ParsedPermissionsPolicy>
 ShellContentBrowserClient::GetPermissionsPolicyForIsolatedWebApp(
