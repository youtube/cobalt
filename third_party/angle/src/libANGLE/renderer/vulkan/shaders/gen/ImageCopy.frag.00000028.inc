// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000028.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000028[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x57,0x6d,0x68,0x96,0x65,
    0x14,0x7e,0xce,0xfb,0xee,0xc3,0x8f,0x4d,0x57,0x73,0x53,0x73,0x89,0x65,0xa6,0x34,
    0x1d,0x53,0xb7,0xda,0x5c,0xcb,0x85,0x1f,0x8b,0x32,0x3f,0xaa,0x1f,0x81,0x96,0x88,
    0x66,0x16,0xba,0xcc,0x46,0x89,0x94,0x6c,0x96,0x11,0x8a,0x91,0xe5,0x9f,0x24,0x73,
    0x64,0xae,0x1f,0x0d,0x45,0xc9,0xb6,0x1f,0x43,0x21,0x18,0x09,0x81,0x88,0x88,0xd3,
    0x14,0x35,0xab,0xf9,0x99,0x1f,0x3f,0x24,0x2b,0xa2,0xce,0xf5,0x9e,0xeb,0xb0,0xe3,
    0x28,0x1c,0xdc,0x3e,0xcf,0x7d,0x9d,0x73,0xae,0x73,0xce,0x75,0xdf,0xf7,0x73,0xbf,
    0xa6,0x53,0xa3,0x73,0x93,0x44,0x92,0x01,0x49,0xbf,0xe4,0x8a,0x24,0x99,0xbf,0xbb,
    0x92,0x54,0x82,0xd7,0x81,0x49,0x4e,0xe6,0x59,0x3f,0xeb,0xd9,0x59,0x65,0x6f,0x34,
    0x2e,0x29,0xab,0xa8,0x2c,0x87,0x7d,0x50,0x92,0xce,0xf8,0xc1,0x36,0x38,0xc9,0x4d,
    0xb2,0xf4,0x89,0xb1,0x62,0xd1,0x2b,0x0d,0xc0,0xbb,0x75,0xdc,0xd0,0x51,0xa0,0x7e,
    0xc0,0x35,0x41,0xf2,0x44,0x92,0x9d,0x4c,0x34,0xfa,0x64,0x34,0x9f,0x8e,0x09,0xb1,
    0x7e,0x01,0x4b,0x11,0x2b,0x08,0x58,0x9a,0xd8,0x90,0x80,0x65,0x11,0x1b,0x16,0xb0,
    0x6c,0x62,0x25,0x01,0xcb,0x21,0x36,0x2a,0x60,0xb9,0xc4,0x1e,0x08,0x58,0x3f,0x62,
    0xe3,0x02,0xd6,0x9f,0xd8,0xf8,0x80,0x0d,0x20,0x56,0x1e,0xb0,0x81,0xc4,0x2a,0x02,
    0x96,0x47,0xac,0x2a,0x60,0xf9,0xc4,0x1e,0x0d,0xd8,0x20,0x62,0x75,0xd0,0x5b,0x3b,
    0x75,0x0d,0xea,0xb5,0xc3,0x6e,0x72,0x0f,0xe6,0xfc,0xac,0x3e,0xef,0xa7,0x86,0x3e,
    0xbf,0x2f,0xcc,0xa1,0xfd,0x48,0xce,0x0b,0x95,0x25,0x95,0xb1,0xa7,0x33,0xfa,0xe1,
    0xbd,0x58,0xdf,0x72,0xa8,0x45,0x91,0xfa,0xe7,0xf1,0x1d,0xeb,0x30,0x54,0xe7,0xf9,
    0xac,0x3b,0x45,0x7b,0x21,0xed,0x09,0xed,0x43,0x32,0xbc,0xa6,0x3d,0xe6,0xc5,0xd4,
    0x17,0xf3,0x52,0xfd,0x37,0x87,0xda,0xf7,0xec,0x1a,0x53,0x3b,0x44,0x59,0xee,0x0d,
    0xf8,0x58,0x1d,0xbb,0xea,0x17,0xd5,0xfa,0xbc,0x54,0xc7,0xd6,0x4f,0x87,0xd7,0x8d,
    0xd4,0x5d,0xe7,0xda,0x78,0x7e,0x1f,0x85,0x77,0x18,0xee,0x33,0x4a,0x39,0x27,0x71,
    0xbd,0xc0,0x55,0xc3,0xf9,0x64,0x62,0xa5,0xec,0xb5,0x82,0xbd,0xc2,0xbf,0x92,0xb6,
    0xfc,0x60,0xaf,0xe6,0x1e,0x82,0x7d,0x0a,0xed,0x85,0xb4,0xe3,0x59,0x4b,0x2d,0xdc,
    0x7f,0x26,0xfb,0xf7,0xf9,0x3c,0xae,0xa7,0xcf,0x17,0x70,0xaf,0x41,0xab,0xa5,0xe4,
    0x4a,0x07,0x7b,0x03,0xf7,0x9d,0xcf,0x37,0xb0,0x27,0x9f,0xb7,0xb0,0x06,0xc4,0xb7,
    0x32,0x57,0x2a,0xd8,0xdb,0xb8,0x1f,0x7d,0xde,0xce,0x7e,0x50,0x7f,0x07,0x63,0x23,
    0x5f,0x67,0x9f,0xf8,0xfd,0xa1,0x1f,0x70,0x7f,0xd7,0xa7,0xbf,0xae,0x3e,0x6b,0x7b,
    0x38,0x63,0x6d,0x9a,0x0a,0xfe,0x63,0xd4,0xb2,0x98,0x7a,0x1f,0xe3,0xf9,0x07,0x36,
    0x5c,0x33,0x9f,0x66,0xbf,0xa9,0xe4,0xf6,0x3f,0x7e,0x6a,0x32,0x35,0x9e,0xe1,0xfb,
    0x69,0x72,0x60,0x7e,0xb6,0x4f,0x0d,0x3d,0xd4,0x0c,0x1a,0x5c,0x64,0x3f,0x69,0xc6,
    0x5f,0xe7,0xbb,0xd7,0x70,0x9d,0xdf,0x9f,0x74,0xa8,0xf9,0x98,0x26,0x6c,0x6e,0x6a,
    0xaa,0x19,0xaf,0x2b,0x01,0xbf,0x6e,0x31,0x2c,0x0e,0xf7,0x3d,0xae,0xef,0xaf,0x7d,
    0xb5,0x6a,0xaa,0xcf,0x4f,0xe8,0x7c,0xf3,0xbb,0x9f,0xd7,0x3e,0xac,0xbb,0x22,0x45,
    0x2d,0x12,0xf2,0xdf,0x52,0x24,0x3b,0xb3,0x27,0xec,0x1c,0x1c,0x67,0xff,0x73,0x34,
    0x0f,0xd6,0xea,0x04,0xb1,0xe3,0xa1,0xef,0x06,0x9e,0xb1,0x1f,0x69,0x7f,0x5c,0x19,
    0xb0,0x0f,0x45,0x6c,0xaf,0x56,0x90,0x0f,0x3e,0x29,0x31,0x7c,0x9d,0xfa,0x60,0x9e,
    0x16,0x8b,0x03,0x8e,0x38,0xec,0xcf,0x2c,0xc6,0x55,0x33,0x0e,0x7a,0x67,0x8b,0xe1,
    0x5f,0xab,0x0f,0xce,0x5f,0x8e,0x18,0x86,0xbd,0xfb,0xbb,0x56,0x9e,0xc7,0x05,0xf8,
    0x13,0x3d,0xea,0x7b,0xae,0x0e,0x60,0xe8,0x07,0xef,0xf3,0x34,0x0e,0x1a,0xf7,0x17,
    0xcb,0x89,0xbf,0xb5,0x5c,0x8b,0x01,0x62,0xf8,0x33,0xaa,0x0e,0x6a,0xea,0x14,0xc3,
    0xdc,0xef,0x0f,0xe5,0x70,0x2e,0x3c,0x6f,0xaa,0x16,0x99,0x7e,0xe9,0x93,0xcd,0x98,
    0xdc,0xd0,0x43,0x3e,0x7b,0x98,0x19,0x7a,0x18,0x24,0x86,0x7b,0x0f,0x83,0xc5,0x30,
    0xef,0xa1,0x28,0xf4,0x00,0x5b,0x81,0x8e,0x22,0xe6,0x2d,0x08,0x3d,0xdc,0x2d,0x96,
    0x5b,0x42,0x0f,0x85,0x62,0xb8,0xf7,0x70,0x40,0x0c,0x73,0x3f,0xf4,0xe0,0x5c,0x45,
    0xa1,0x87,0x93,0xf4,0x41,0x5f,0x07,0x98,0xd3,0x7b,0x28,0x66,0x0f,0xf3,0x42,0x0f,
    0x43,0xc5,0x70,0xef,0x61,0x98,0x18,0xe6,0x3d,0x94,0x84,0x1e,0x60,0x1b,0xae,0xa3,
    0x84,0x79,0xf1,0x3e,0x87,0x79,0x47,0x88,0xe5,0x3e,0x29,0xbd,0x67,0x07,0x35,0xba,
    0x6f,0x49,0xa8,0xf1,0x14,0xfd,0x50,0xf7,0x08,0x72,0xa2,0x1e,0x9c,0xaf,0x9f,0x78,
    0xb6,0x7c,0xcf,0x9d,0xe3,0xf7,0x71,0x7f,0xd8,0x73,0x3f,0x13,0x6f,0xe2,0x9e,0xfb,
    0x95,0xd8,0x29,0xf6,0x8a,0x6f,0xca,0x79,0xc6,0xf5,0x30,0x0e,0x9a,0x5e,0x20,0xee,
    0xba,0x5f,0x62,0x6c,0x12,0xb0,0xcb,0xc4,0xd0,0xc3,0x5c,0xd5,0x1e,0x67,0xf9,0x0a,
    0x7d,0x2f,0x93,0xc3,0x73,0xfc,0xc6,0x1c,0x9d,0x21,0xc7,0x55,0xe2,0x0b,0xb5,0x57,
    0xdc,0x43,0xd7,0xd8,0xd3,0x15,0x7e,0x63,0xae,0x26,0xbd,0xeb,0x31,0x86,0xeb,0xb1,
    0x20,0xac,0xc7,0x83,0x62,0xb8,0xaf,0xc7,0x58,0x31,0xcc,0xd7,0x63,0x46,0x58,0x0f,
    0xd8,0xc6,0xe9,0x98,0x48,0x8d,0x27,0x86,0xb5,0x9e,0x44,0xee,0x86,0xc0,0x3d,0x59,
    0x0c,0x77,0xee,0x0a,0x31,0xcc,0xb9,0xab,0x03,0x37,0x6c,0x95,0x3a,0xaa,0xc9,0x5d,
    0xc9,0xfd,0x0a,0x9e,0x47,0xc4,0xfa,0x4a,0x67,0xbe,0xed,0xc6,0x55,0x25,0x86,0xd7,
    0x72,0xdd,0x3d,0xae,0x9a,0xeb,0x0e,0x9f,0x29,0x62,0x39,0x51,0x67,0x15,0xf9,0x91,
    0x77,0x7a,0xc8,0x0b,0x9f,0x1a,0x1d,0xd3,0x19,0x5f,0x13,0xf2,0xd6,0x86,0xbc,0x73,
    0xf4,0x46,0xc2,0x5d,0x35,0x95,0xd8,0xb5,0xf0,0xfd,0x4a,0x71,0xed,0x60,0xaf,0x13,
    0x8b,0xf3,0xf1,0xbe,0x72,0x01,0x7f,0x5c,0x2c,0xb6,0x2e,0xb3,0x87,0xfb,0x67,0xd6,
    0x6a,0x1a,0xb9,0x60,0xcb,0xe2,0x1d,0x9b,0xc3,0x7c,0xe8,0xc9,0x6b,0x9a,0xce,0x9e,
    0x10,0x73,0x86,0x31,0xe8,0x73,0x1a,0x6b,0x87,0xef,0x0c,0xfa,0x8e,0x0b,0xf5,0x3f,
    0xf4,0x1f,0xf5,0x8f,0xbf,0x43,0xfd,0x13,0xc4,0xe2,0x7c,0xbc,0xc7,0xfa,0xcb,0xc4,
    0x62,0x27,0x84,0xfa,0xcb,0xc9,0x55,0xf6,0x3f,0xf5,0x7b,0x4d,0x33,0x42,0xfd,0xa7,
    0xc5,0x7a,0x40,0x4f,0xe5,0xdc,0x4f,0x2b,0x79,0x57,0xd4,0x8b,0xd9,0xd7,0x2b,0x13,
    0xe6,0x4f,0x8a,0x61,0xdd,0x61,0x9f,0x3d,0xc5,0x7d,0xb6,0x21,0xec,0xb3,0x59,0x62,
    0xb8,0xef,0xb3,0xa7,0xc5,0x30,0xdf,0x67,0xf3,0xc3,0x7a,0xc3,0x36,0x5b,0xc7,0x7c,
    0xd6,0x36,0x9b,0x7a,0xa1,0xee,0xb9,0x62,0x39,0x13,0xc6,0x6d,0xe1,0xfb,0x5f,0xfa,
    0x0e,0xae,0x0f,0x18,0x83,0x67,0x27,0x73,0x6d,0x10,0x8b,0x2b,0x61,0xcc,0x27,0x21,
    0x17,0x6c,0x1b,0x75,0x7c,0xc8,0x38,0x3c,0x9b,0x99,0xeb,0x23,0xc6,0xe1,0xf7,0xdf,
    0x7a,0x62,0x9b,0xc5,0x70,0xdc,0xb7,0x79,0xaa,0x17,0xb0,0x8f,0xf9,0x7d,0xbb,0x87,
    0xf6,0x52,0x6a,0xbb,0x85,0x9c,0x1b,0xa5,0x37,0x7e,0x13,0x39,0x4f,0xc8,0xed,0x3e,
    0xa8,0xe9,0x1f,0x65,0xb9,0x45,0xec,0x26,0xb9,0xcf,0x8a,0xf1,0xa3,0xae,0x4d,0xac,
    0x15,0xdf,0x7f,0x68,0xdf,0x25,0x66,0x77,0x3d,0x5c,0xa3,0xe7,0x88,0x09,0xfb,0x6d,
    0xed,0xa3,0xd1,0x56,0xe6,0xdc,0x1a,0x34,0xfa,0x4c,0x2c,0xce,0x35,0xda,0x19,0x34,
    0x82,0x6d,0x9b,0x8e,0x16,0xc6,0xb5,0x04,0x8d,0xbe,0x60,0x5c,0xd4,0x68,0x87,0x18,
    0x1e,0x35,0xfa,0x32,0x68,0xb4,0x23,0x68,0xd4,0x4a,0xce,0x6d,0x41,0xa3,0xed,0xe4,
    0x74,0x8d,0xdc,0x67,0x67,0xd0,0xa8,0x35,0x68,0x74,0x4e,0x8c,0x1f,0x75,0x6d,0x67,
    0xad,0xae,0xd1,0x41,0x31,0x7b,0x17,0xf3,0xbb,0x46,0xcf,0x53,0xa3,0x14,0xfb,0xed,
    0xe8,0xa3,0x51,0x1b,0x73,0xb6,0x05,0x8d,0x76,0x89,0xc5,0xb9,0x46,0xed,0x41,0x23,
    0xd8,0x76,0xeb,0xd8,0xcb,0xb8,0xbd,0x41,0xa3,0x6f,0x18,0x17,0x35,0xda,0x27,0x86,
    0x47,0x8d,0xbe,0x0d,0x1a,0xed,0x0b,0x1a,0x75,0x90,0x73,0x77,0xd0,0x68,0x0f,0x39,
    0x5d,0x23,0xf7,0x69,0x0f,0x1a,0x75,0x04,0x8d,0x7e,0x11,0xe3,0x47,0x5d,0x7b,0x58,
    0xab,0x6b,0xf4,0x83,0x98,0xfd,0x20,0xf5,0x00,0x9f,0x9f,0xbd,0xf9,0xe4,0x80,0x5f,
    0x0f,0x35,0xc3,0xb7,0x02,0x31,0x1d,0xe1,0xcc,0x2f,0xe0,0x99,0x6f,0x09,0x67,0xfe,
    0x05,0x31,0xdc,0xcf,0xfc,0x8b,0x62,0x98,0x9f,0xf9,0x75,0x41,0x3f,0xd8,0x16,0xea,
    0x58,0xc2,0xbc,0x4b,0x02,0xf7,0x4b,0xe4,0x6e,0x0b,0xdc,0x4b,0xc5,0x70,0xe7,0x7e,
    0x59,0x0c,0x73,0xee,0xe6,0xc0,0x0d,0xdb,0x32,0x1d,0xcb,0xc9,0xbd,0x3c,0xfc,0x26,
    0x58,0x41,0xee,0xf6,0x70,0x5f,0x37,0x88,0xe1,0xdf,0xf3,0xfe,0x5f,0x29,0x86,0xe1,
    0x4e,0xf7,0x7c,0xaf,0x8b,0xe1,0xfb,0x99,0xaf,0x31,0xe4,0x83,0x6d,0x95,0x8e,0x46,
    0xe6,0x5b,0x15,0xb4,0x3e,0x2c,0xf6,0x7f,0x95,0x9e,0xf0,0x9b,0xcd,0xfd,0x1a,0x83,
    0xd6,0xe7,0xc5,0x7c,0x50,0xeb,0x61,0xf2,0x79,0x3d,0x6f,0xb2,0x9e,0xae,0x50,0xcf,
    0x5b,0x62,0xb8,0xd7,0xb3,0x26,0xd4,0x03,0xdb,0x6a,0x1d,0x6b,0x98,0x67,0x75,0xa8,
    0xe7,0x08,0xeb,0x39,0x1f,0xd6,0xde,0xfd,0xd6,0x84,0x7a,0x2e,0x88,0xf9,0xa0,0xc6,
    0x23,0xe4,0xf3,0x7a,0xde,0x66,0x3d,0x0d,0xa1,0x9e,0x77,0xc4,0x70,0xaf,0xa7,0x29,
    0xd4,0x03,0xdb,0x5a,0x1d,0x4d,0xcc,0xb3,0x36,0xd4,0x73,0x54,0xec,0xff,0x6a,0xc8,
    0xe7,0x77,0x94,0xfb,0x35,0x85,0x7a,0x2e,0x8b,0xf9,0xa0,0xc6,0xa3,0xe4,0x83,0x6f,
    0x33,0x7d,0x97,0x85,0x3b,0xe3,0x55,0x6a,0x09,0x3e,0xcf,0x73,0x48,0x7a,0x71,0xff,
    0x5d,0xea,0xb1,0xcd,0x21,0xcf,0x25,0xb1,0x5c,0xc8,0x7d,0x88,0xfb,0x08,0xbe,0xeb,
    0xe8,0xbb,0x90,0x77,0x2d,0x7c,0x17,0x93,0xaf,0x87,0x77,0x6d,0x2e,0xef,0x6d,0xef,
    0xc3,0x63,0xd6,0x05,0xfe,0x8b,0x62,0x39,0x90,0x73,0x31,0xcf,0xc0,0x63,0x1a,0x71,
    0x83,0xb6,0xbf,0x75,0x97,0x54,0xe9,0xf8,0x17,0x00,0x7c,0x9b,0x9e,0xf4,0x12,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out vec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       vec4 transformSrcValue(uvec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
