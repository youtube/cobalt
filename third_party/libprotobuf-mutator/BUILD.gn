# Copyright 2017 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/sanitizers/sanitizers.gni")
import("//testing/libfuzzer/fuzzer_test.gni")
import("//third_party/libprotobuf-mutator/fuzzable_proto_library.gni")

config("public_config") {
  include_dirs = [ "src/" ]
}

config("private_config") {
  cflags = [ "-Wno-shadow" ]
}

source_set("libprotobuf-mutator") {
  testonly = true

  # Remove *San and coverage for a performance boost.
  configs -= not_fuzzed_remove_configs
  configs += [
    "//build/config/sanitizers:not_fuzzed",
    ":private_config",
  ]

  public_configs = [ ":public_config" ]

  sources = [
    "src/src/binary_format.cc",
    "src/src/libfuzzer/libfuzzer_macro.cc",
    "src/src/libfuzzer/libfuzzer_mutator.cc",
    "src/src/mutator.cc",
    "src/src/text_format.cc",
    "src/src/utf8_fix.cc",
  ]

  # Allow users of LPM to use protobuf reflection and other features from
  # protobuf_full.
  public_deps = [ "//third_party/protobuf:protobuf_full" ]

  # Let ClusterFuzz builders know to not build targets that depend on
  # libprotobuf-mutator for AFL or Chrome OS.
  if (use_afl || current_toolchain == "//build/toolchain/cros:target") {
    all_dependent_configs = [ "//testing/libfuzzer:no_clusterfuzz" ]
  }
}

# The CQ will try building this target without "use_libfuzzer" if it is defined.
# That will cause the build to fail, so don't define it when "use_libfuzzer" is
# is false.
if (use_libfuzzer) {
  # Test that fuzzable_proto_library works. This target contains files that are
  # optimized for LITE_RUNTIME and which import other files that are also
  # optimized for LITE_RUNTIME.
  fuzzer_test("lpm_test_fuzzer") {
    sources = [ "test_fuzzer/test_fuzzer.cc" ]
    deps = [
      ":libprotobuf-mutator",
      ":lpm_test_fuzzer_proto",
    ]

    # Don't actually run this on CF. It's only a test to ensure builds work.
    additional_configs = [ "//testing/libfuzzer:no_clusterfuzz" ]
  }
}

# Proto library for lpm_test_fuzzer
fuzzable_proto_library("lpm_test_fuzzer_proto") {
  sources = [
    "test_fuzzer/imported.proto",
    "test_fuzzer/imported_publicly.proto",
    "test_fuzzer/test_fuzzer_input.proto",
  ]
}

# Avoid CQ complaints on platforms we don't care about (ie: iOS).
# Also prevent people from using this to include protobuf_full into a production
# build of Chrome.
if (use_fuzzing_engine_with_lpm) {
  # Component that can provide protobuf_full to non-testonly targets
  static_library("protobuf_full") {
    public_deps = [ "//third_party/protobuf:protobuf_full" ]
    sources = [ "dummy.cc" ]
  }
}
