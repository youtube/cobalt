// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/EtcToBc.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kEtcToBc_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x5c,0x09,0xdc,0x95,0x63,
    0xfa,0x3e,0xe7,0x3b,0xdf,0x79,0xd7,0x73,0x94,0x7d,0x4b,0x49,0xa2,0x12,0x46,0xc5,
    0x18,0x89,0x22,0x4b,0x65,0x09,0xf3,0x47,0x66,0x68,0x14,0xbe,0x94,0x35,0x63,0xf9,
    0x9b,0x22,0x89,0x61,0x8c,0x65,0x08,0x95,0x92,0x2d,0x24,0x59,0xb2,0xd6,0x0c,0x9a,
    0x9a,0xb2,0xfd,0xad,0x21,0x33,0x4a,0xb6,0xd0,0xc2,0xd8,0x42,0x28,0xff,0xf7,0x3a,
    0xd7,0x75,0xf7,0xde,0xdf,0xd1,0xf7,0xfb,0x3d,0xbf,0xf3,0x3e,0xd7,0x75,0xdf,0xf7,
    0x73,0x3f,0xf7,0xf3,0xbc,0xf7,0xf3,0xbc,0xdb,0x57,0x6a,0x68,0x17,0x16,0x4a,0xc5,
    0x42,0x52,0x88,0x0a,0x5f,0x55,0x0b,0xb5,0xbf,0x0d,0x0b,0x0d,0x85,0xa2,0x7e,0x77,
    0xd1,0x6f,0x0f,0xfd,0xf6,0xd2,0xef,0xfe,0xd9,0x6f,0x5a,0x08,0x6a,0x72,0x07,0x1d,
    0x72,0xd4,0x21,0xbb,0x9c,0xf3,0xc7,0x93,0x76,0xe9,0xb6,0xfb,0xaf,0xa0,0xbf,0x41,
    0xa1,0x54,0xb3,0x03,0xae,0x45,0x66,0xb7,0x9c,0xfd,0x36,0x66,0xe5,0xf4,0x13,0x4f,
    0x3d,0x03,0xf8,0x51,0x19,0x3d,0x20,0x2b,0xe7,0x64,0x60,0xcb,0xcc,0x46,0x63,0xcd,
    0x66,0xa1,0xd0,0x53,0x3a,0x28,0x07,0x67,0x5a,0xaf,0xd3,0x9d,0x42,0x3b,0xfd,0x1a,
    0x56,0x14,0xd6,0xe8,0xb0,0x06,0x61,0x91,0xc3,0x4a,0xc2,0x2a,0x0e,0x6b,0x14,0xd6,
    0xd2,0x61,0x65,0x61,0x9b,0x38,0x2c,0x10,0xb6,0x85,0xc3,0x42,0x61,0xad,0xd0,0xe7,
    0xcc,0xba,0xb5,0x7b,0x50,0x66,0x15,0x7d,0x4a,0xb3,0xe3,0xad,0x54,0x1f,0xa0,0xfa,
    0xd6,0x92,0x45,0x5f,0x0b,0xe2,0x70,0x0c,0xae,0xa3,0xea,0xb3,0x32,0x07,0xb6,0x2b,
    0xe4,0x3c,0xea,0x6d,0xd7,0xd5,0x4b,0x85,0x33,0x82,0x9c,0x7b,0x26,0x68,0x2e,0x8b,
    0x7a,0x5b,0xc5,0x04,0xb2,0xa8,0x6f,0x29,0xee,0x5f,0x01,0xdb,0xd9,0x52,0xdc,0x31,
    0x09,0xf5,0x36,0xce,0xbc,0x86,0xdf,0x6d,0x33,0xac,0xa4,0x3e,0x6c,0x9a,0xc9,0xa3,
    0x99,0x6d,0x65,0x7b,0xf3,0xac,0x1e,0x2a,0x0e,0x0d,0x35,0xbc,0xb1,0x16,0xdb,0x50,
    0x05,0xf2,0xb1,0xe4,0x8b,0xe2,0x13,0x71,0xb1,0xf4,0x5b,0xea,0xd8,0xf4,0x37,0x14,
    0xdf,0xb2,0x16,0xeb,0x86,0xc2,0x46,0x92,0xdb,0x44,0x72,0x8d,0x92,0x6b,0x23,0x39,
    0xb4,0xbd,0x59,0xe6,0x61,0x07,0xb5,0x03,0x59,0xc4,0xac,0x83,0xc6,0x16,0xf5,0x2e,
    0x92,0x43,0x7d,0x27,0xf9,0x74,0x62,0x56,0x76,0x76,0xf5,0x41,0x8e,0x87,0x6c,0x93,
    0x7c,0x36,0x7e,0xa8,0xc6,0xd9,0xea,0xc3,0x34,0x8f,0xac,0x7e,0xb6,0xe6,0x86,0xd5,
    0x87,0xcb,0x57,0xab,0x5f,0xa0,0x3e,0x59,0x7d,0xa4,0xe6,0x94,0xd5,0x47,0x67,0xa5,
    0x8d,0xab,0x8f,0x51,0x4c,0xcc,0x9f,0xb1,0xd2,0x6f,0x95,0xd5,0x6f,0x54,0x5b,0x63,
    0x9d,0xfc,0x4d,0xb5,0x73,0xaa,0x50,0xe8,0x9c,0x45,0x05,0xdc,0xcd,0xb2,0x31,0x52,
    0xbe,0xde,0xe4,0x64,0xc7,0x29,0x1e,0x56,0x1f,0xaf,0xd8,0x5a,0x7d,0x82,0xce,0x07,
    0xb3,0x75,0x8b,0x6c,0x8d,0x93,0xec,0x04,0x27,0x3b,0xb1,0x2e,0x4e,0x93,0x34,0x2e,
    0xa6,0x7b,0xab,0x64,0x86,0x8b,0x9b,0xe0,0xb8,0xc9,0xe2,0x06,0xc9,0x4f,0x6f,0xf7,
    0xb6,0x02,0xe7,0xa5,0xc9,0xde,0xee,0xfa,0x33,0x49,0xbc,0xc9,0xde,0x91,0x95,0xc4,
    0xc9,0xde,0xe9,0xfc,0x1d,0x26,0xde,0xb8,0xbb,0xd4,0xde,0x38,0xd9,0xf1,0xdc,0x14,
    0xe9,0x0d,0x5f,0x0f,0x77,0xb7,0x7c,0xb5,0xf6,0xc7,0x3b,0xee,0x9e,0xba,0x3e,0x7a,
    0xee,0x5e,0xd7,0xc7,0x7a,0x6e,0xaa,0xd3,0x1b,0x57,0xc7,0xdd,0x27,0x5f,0x06,0x39,
    0xce,0xfa,0x3b,0x4d,0xe7,0x9f,0xc9,0xde,0x2f,0x6c,0xa2,0x74,0xbc,0x9d,0xe9,0x2e,
    0xbe,0x93,0x14,0x0f,0xe3,0x1e,0x70,0xfd,0x1d,0xb7,0x8e,0xdb,0xb8,0x36,0xbf,0x1e,
    0xd4,0x1c,0xba,0x45,0x63,0x38,0x59,0x63,0x70,0xa7,0x62,0x38,0x45,0x31,0xb9,0x47,
    0x7d,0x9c,0x2a,0x9f,0xef,0x57,0x9b,0x0f,0xe8,0x3c,0x9d,0xa1,0xf9,0x70,0xa3,0xf3,
    0x7f,0x76,0x56,0x7e,0xce,0x4a,0xa7,0xec,0x8c,0xc3,0xf9,0xfd,0x5a,0x56,0x5a,0x67,
    0x23,0x68,0x39,0x35,0xd0,0x7c,0x0c,0xd6,0x53,0x60,0x73,0x81,0x78,0xc8,0x77,0x57,
    0xfd,0x0d,0x61,0xe0,0xdf,0x74,0xfa,0x76,0xfe,0x2c,0xae,0x3b,0x9f,0x96,0x28,0x86,
    0x1d,0xe5,0xc3,0x47,0xca,0x15,0x4b,0xa5,0xeb,0x73,0xc1,0x72,0xe5,0x73,0xab,0xaf,
    0x70,0xe7,0x3a,0xea,0x2b,0xd7,0x9d,0x2f,0x41,0x2d,0xd7,0x7c,0x26,0x9d,0x15,0xe2,
    0x4c,0xee,0xf3,0xba,0x9c,0xb0,0xaa,0xb6,0xf6,0xe5,0xf5,0xd5,0x5a,0xe3,0xac,0x5e,
    0x2c,0x72,0x6d,0xb0,0x7a,0xa5,0x88,0xbc,0x9c,0xdb,0xeb,0x5c,0xcc,0x73,0x06,0xea,
    0x27,0x14,0x99,0x93,0x90,0x23,0x06,0x16,0xd9,0x0f,0x60,0xa6,0xff,0x87,0x22,0xfa,
    0xe8,0x72,0x60,0x91,0x39,0x73,0x5d,0x0e,0x2c,0x72,0xbd,0xb1,0xfa,0xe0,0x22,0xd7,
    0xdb,0xce,0xd9,0x99,0x08,0x7b,0x27,0x15,0xf3,0xf9,0x78,0x9b,0x72,0x1a,0x6c,0xc2,
    0x0e,0x74,0x07,0x17,0x19,0xff,0x53,0x8a,0x1c,0x73,0xe8,0x20,0x26,0x88,0xe9,0xe4,
    0x22,0xe7,0xa8,0x15,0xc3,0x6f,0x2b,0x72,0x3e,0x58,0xb1,0xb6,0x97,0x16,0xb9,0x3b,
    0xb0,0xfa,0xa7,0x5a,0xf4,0xad,0xbe,0x6f,0x03,0xd7,0x2c,0xab,0xf7,0xc9,0xea,0x1b,
    0xb9,0xfa,0xe9,0x59,0xbd,0xaa,0x58,0xb4,0x2a,0x31,0x77,0x9e,0x50,0xf3,0xa7,0x5c,
    0x3b,0xde,0xa6,0xc4,0xb9,0xcf,0x39,0x4f,0xac,0x75,0x89,0xe7,0xc9,0x6a,0x67,0xa7,
    0x4d,0x86,0x6d,0xe3,0x64,0xb6,0x2d,0xf1,0xfc,0x02,0x6e,0x32,0x6d,0x4b,0x98,0xcb,
    0xb9,0xcc,0x76,0x25,0xb6,0xdf,0xd6,0xc9,0xb4,0xcb,0x8e,0xf7,0x76,0x32,0xdb,0x97,
    0xe8,0x73,0x3b,0x27,0xd3,0x3e,0x3b,0xee,0xef,0x64,0x76,0x28,0x71,0xdd,0x69,0xef,
    0x64,0x76,0x2c,0x71,0x2d,0xb7,0x7a,0x07,0xc9,0x98,0x4e,0xc7,0x12,0x65,0x3a,0x38,
    0x9d,0x4e,0xd9,0xf1,0xae,0x4e,0x67,0xa7,0xac,0xfe,0x84,0xd3,0xe9,0x5c,0xa2,0x0c,
    0x70,0x8c,0x35,0xe2,0xb5,0x73,0x89,0x31,0x42,0x4c,0xd0,0x67,0xf4,0x09,0x3e,0xc3,
    0x27,0xb4,0x01,0x1d,0x8c,0xf5,0xaf,0x4a,0x1c,0xeb,0x56,0xaa,0x1f,0x59,0xe2,0x7a,
    0xd0,0x45,0xe7,0x26,0xea,0x47,0x09,0xb3,0xfa,0x80,0x52,0xbe,0x1f,0x38,0x4e,0xc7,
    0xfe,0x5c,0x3d,0xb1,0x94,0x9f,0x17,0xa8,0x0f,0x2f,0xe5,0x6b,0xf9,0xc8,0x12,0x65,
    0x1b,0x1d,0x3f,0xba,0xc4,0xb5,0x19,0x79,0x0d,0xfc,0xa5,0x25,0x9e,0xdf,0x18,0xef,
    0xb1,0xe2,0x4d,0xf6,0xb2,0x12,0x73,0x0f,0xea,0xd8,0x23,0x3c,0xcd,0x6d,0xe8,0xba,
    0xfa,0x33,0xb5,0xfa,0xa8,0x7d,0xad,0x3e,0x87,0x7c,0x4f,0xab,0xcf,0xad,0xd5,0x7b,
    0xf6,0x34,0x7b,0xcf,0x97,0xb8,0x8f,0xd8,0x22,0xab,0x57,0x1b,0x79,0xfe,0x94,0x9c,
    0xbd,0xbe,0xb5,0x3d,0xdd,0xc5,0xbd,0xad,0x7e,0x58,0x56,0xff,0xf3,0x66,0xe3,0xf7,
    0xb1,0xfa,0xe1,0x59,0xfd,0x8e,0x03,0x36,0x5b,0xd7,0x5e,0xff,0xac,0xfe,0xe6,0x05,
    0xcb,0x7a,0xe0,0xfc,0x80,0xad,0x23,0x1a,0xa9,0x03,0x39,0x70,0x26,0x37,0x30,0x3b,
    0x3e,0x73,0xa3,0xd2,0xbe,0xdd,0x15,0x43,0xec,0x17,0x8b,0xae,0xdd,0x1b,0x6a,0xed,
    0xbe,0xb7,0xce,0xcf,0x71,0x59,0xfd,0xec,0xa3,0xbb,0x35,0x58,0xfd,0x1f,0x8d,0xf9,
    0xfe,0x03,0xf2,0xcb,0xb2,0xfa,0xea,0xef,0xbf,0xef,0x61,0xf5,0xe5,0x59,0x7d,0xcd,
    0x4f,0x23,0xf6,0x31,0x3f,0x56,0x34,0x52,0x66,0xb9,0x7e,0x31,0x16,0x6d,0xca,0x3c,
    0xe7,0x6c,0x6c,0x26,0xa8,0xde,0x50,0xdb,0x4f,0xc6,0x85,0x27,0xca,0x1c,0xab,0x72,
    0xa1,0xf9,0x5f,0x51,0xbf,0x5b,0x67,0x9a,0x4f,0x66,0x24,0xe4,0x30,0x17,0x66,0x4a,
    0x10,0x58,0x77,0xd5,0x67,0x09,0x03,0xff,0x6c,0x99,0x39,0xcd,0xef,0x55,0xce,0xce,
    0x1a,0xf8,0x39,0xfb,0x43,0x7b,0x4f,0x05,0x6c,0xaf,0x58,0xd7,0x5e,0x43,0x6d,0x7d,
    0xa1,0x8d,0xa7,0xb5,0x4f,0x86,0x6c,0x77,0xd5,0x9f,0x09,0xf2,0x39,0x80,0xc3,0xb9,
    0x81,0xe5,0x3d,0xe6,0x73,0xec,0x91,0x81,0x35,0x69,0x5f,0x88,0xf3,0x06,0x73,0xfe,
    0xc7,0x0a,0xe7,0x98,0xcf,0x2b,0x3f,0x55,0x98,0x57,0xc6,0xb8,0xf3,0x6b,0x4d,0x85,
    0x79,0x73,0x90,0x9b,0xa3,0x6b,0x2b,0x9c,0x8b,0xbe,0x58,0x4e,0xfc,0xd9,0xc9,0x0f,
    0x72,0xb9,0x12,0x09,0xcd,0x6c,0x8f,0x71,0x78,0xb1,0xca,0x9c,0x65,0xc5,0xf0,0x86,
    0x2a,0xd7,0x18,0x2b,0xd6,0x9f,0x52,0x35,0xf7,0xfb,0x04,0x97,0xa3,0x1b,0xab,0xdc,
    0x0b,0x58,0x31,0xf9,0x72,0x95,0xeb,0xa7,0x95,0x62,0x36,0x6e,0x90,0xdf,0xbe,0xca,
    0x63,0xf4,0x67,0x9c,0x8e,0x21,0xff,0x85,0xc3,0xbf,0xcc,0x8e,0xf7,0xc8,0xe2,0xd0,
    0xa0,0x73,0xb6,0xa0,0xf9,0xf2,0x7d,0x86,0x94,0x95,0x13,0xb0,0x47,0x98,0x99,0x32,
    0x8f,0x74,0xd7,0xfa,0x71,0x61,0xd8,0xbc,0x7e,0x95,0xab,0x23,0xe7,0xdc,0xe1,0xea,
    0x58,0x33,0x57,0x94,0xf3,0x3a,0xd6,0xc0,0x09,0x01,0xeb,0xdf,0x65,0xad,0xcd,0xd3,
    0xf8,0xfe,0x98,0x1d,0x23,0x2f,0xcc,0x0f,0xd8,0x3e,0x7e,0x7b,0xe8,0xfa,0xe0,0xa5,
    0x80,0x79,0xea,0xf0,0x4c,0x0b,0x7a,0x2f,0x07,0xc4,0x5e,0x0a,0xf2,0x39,0x3b,0x46,
    0xe3,0xfe,0x6a,0x40,0x1e,0xe3,0xdf,0x2b,0xc3,0x70,0xfe,0xbd,0x16,0x30,0xaf,0xc1,
    0x7e,0x0f,0xcd,0xa3,0xd7,0x03,0xe2,0x73,0x32,0x19,0xd4,0x17,0x04,0xc4,0xb0,0x0f,
    0x78,0x56,0xd8,0x5b,0xc2,0x90,0xf3,0x0c,0x7b,0x3b,0xa0,0x6c,0x93,0xda,0x04,0xf6,
    0x6f,0xe9,0x81,0x3b,0x42,0xd8,0x3b,0x01,0x7d,0xa9,0x65,0x2c,0x61,0x8b,0x02,0xe2,
    0x90,0x3f,0x32,0x43,0xe0,0xef,0xa1,0x15,0xe2,0x26,0x6b,0xed,0x2c,0x51,0x3b,0x8b,
    0x5d,0x3b,0xef,0xa9,0xbe,0xc4,0xb5,0xf3,0x81,0x74,0x8b,0xae,0x9d,0x0f,0x03,0xe2,
    0xef,0xb9,0x76,0xfa,0x57,0x88,0xa3,0xbd,0xa2,0x6b,0xe7,0xe3,0x80,0xfd,0x44,0x1e,
    0xb7,0x58,0x7c,0x2a,0x0c,0xf3,0xb8,0xbf,0xe2,0xba,0x2c,0xa0,0x2c,0xb8,0x51,0xc2,
    0x56,0x04,0xb4,0x0b,0x6e,0x84,0xae,0x17,0x3f,0x0b,0x88,0x23,0xf6,0xd8,0xeb,0xdd,
    0x50,0xe6,0xfe,0x6f,0x90,0x8b,0xfd,0xd8,0x32,0xf1,0x11,0xca,0x13,0x37,0x96,0x89,
    0x99,0xce,0x4d,0xd2,0x19,0xee,0x74,0x6e,0x2e,0x13,0x37,0x9d,0x71,0x65,0x62,0xfd,
    0x75,0x1e,0x8f,0x2f,0xd3,0x0e,0xf0,0x07,0x33,0x0c,0xf9,0xee,0x96,0x32,0xfd,0x01,
    0x37,0x21,0xd3,0x43,0xfe,0x9b,0x28,0x1c,0x73,0xef,0x56,0xe5,0xaf,0x1f,0x32,0x0e,
    0xf8,0xa4,0xac,0x00,0xc3,0xfc,0xc3,0xf1,0xea,0xec,0x77,0x9e,0xe6,0x23,0xf0,0xb9,
    0x6a,0xeb,0x4e,0xd9,0x45,0x3e,0x79,0x56,0xd8,0x3d,0xc2,0x90,0x4f,0x30,0x36,0xf0,
    0xf1,0xbe,0x32,0xf1,0x82,0xc6,0xb0,0x76,0x7d,0x50,0x66,0xbf,0xc0,0x99,0xdc,0x74,
    0xc9,0xd9,0x18,0x02,0x7b,0xa0,0x4c,0x59,0x70,0xa6,0x3b,0x43,0xba,0xc0,0x4c,0xee,
    0xb1,0x32,0x71,0xd8,0x43,0xac,0x90,0x9f,0xff,0xae,0xdc,0x6c,0xf6,0x9f,0x2a,0xd3,
    0x67,0x3f,0x47,0x66,0x2b,0xe6,0x7e,0xdc,0xff,0x59,0x26,0x8e,0x71,0xb7,0x38,0xcf,
    0x29,0x13,0x37,0x1f,0xe6,0x96,0x69,0x6f,0x8e,0xb3,0x3f,0x4f,0xf6,0x0b,0xce,0xff,
    0xf9,0x65,0xca,0xce,0xd3,0xb8,0x62,0x7d,0x78,0x4e,0xe3,0x3a,0x46,0xe3,0x0a,0xb9,
    0xe7,0x85,0x9b,0xde,0x0b,0x65,0xea,0x02,0x3f,0x29,0x93,0xc1,0xfa,0xf3,0xa2,0xfa,
    0x34,0x30,0x93,0x41,0xde,0xfa,0x3f,0x61,0x2f,0xb8,0x39,0xf3,0x92,0x6c,0x8f,0x74,
    0x73,0xe6,0xe5,0x32,0xf1,0xfb,0x32,0x19,0x8c,0xfd,0x2b,0x65,0x62,0xc8,0xab,0x18,
    0xff,0xd7,0xdc,0xf8,0x83,0x7b,0x35,0x2b,0x0b,0x35,0xfe,0xaf,0x96,0xf3,0x73,0xec,
    0xeb,0x80,0x6d,0x96,0x6a,0xe7,0x03,0xd7,0x88,0x35,0x01,0x71,0x5f,0xe6,0xc8,0xbf,
    0xb5,0x01,0xf9,0x4b,0x95,0x37,0x80,0x15,0x43,0xe2,0x6b,0x2b,0xb9,0xdd,0x52,0x48,
    0x1c,0x7f,0xff,0x12,0xd6,0x18,0x12,0xc7,0xbe,0xc8,0xe4,0x02,0xc9,0x15,0x9d,0x5c,
    0x18,0x12,0xc7,0x1e,0x6a,0x9e,0xb0,0x28,0xa4,0x3e,0x38,0xd3,0x4d,0xa4,0xdb,0xe0,
    0x74,0xd3,0x90,0x38,0xe2,0x60,0xba,0x95,0x90,0xfa,0xa9,0xd3,0xdd,0x40,0xba,0x25,
    0xa7,0xdb,0x22,0x24,0xbe,0xc4,0xb5,0xdb,0x32,0xa4,0x7e,0x0b,0xa7,0xfb,0xad,0x62,
    0xd6,0xe0,0x62,0xb6,0x69,0x48,0xdc,0x17,0x8b,0xd9,0x66,0x21,0x79,0x1f,0xb3,0x2d,
    0x43,0xe2,0x3e,0x66,0x5b,0x87,0xc4,0x7d,0xcc,0x5a,0x85,0xc4,0x7d,0xcc,0x5a,0x4b,
    0xce,0xc7,0xac,0x4d,0x48,0xdc,0xc7,0x6c,0xdb,0x90,0xfa,0x6d,0x9c,0xef,0xdb,0x49,
    0xd7,0xc7,0xac,0x5d,0x48,0xdc,0xc7,0x6c,0xfb,0x90,0xfa,0xed,0x9c,0xee,0x0e,0xd2,
    0xf5,0x31,0xdb,0x31,0x24,0xee,0x63,0xd6,0x21,0xa4,0x3e,0x38,0xcb,0xb1,0xdf,0x07,
    0x8c,0x25,0x38,0xe4,0x9e,0xd7,0x34,0x17,0x17,0xba,0xb9,0xb8,0x4b,0xc8,0xb8,0x16,
    0x5d,0x5c,0xf7,0x0c,0x89,0xfb,0x62,0x71,0xfd,0x4d,0x48,0xde,0xc7,0x75,0xef,0x90,
    0xb8,0x8f,0xeb,0x3e,0x21,0x71,0x1f,0xd7,0x7d,0x43,0xe2,0x3e,0xae,0xbd,0x24,0xe7,
    0xe3,0xba,0x5f,0x48,0xdc,0xc7,0x75,0xff,0x90,0xfa,0xfb,0xb9,0xd8,0x1c,0x20,0x5d,
    0x1f,0xd7,0x03,0x43,0xe2,0x3e,0xae,0x07,0x85,0xd4,0x3f,0xd0,0xe9,0xf6,0x91,0xae,
    0x8f,0x6b,0xdf,0x90,0xb8,0x8f,0x6b,0xbf,0x90,0xfa,0x7d,0x9d,0xee,0x6e,0x8a,0x59,
    0xc1,0xc5,0xac,0x7f,0x48,0xdc,0x17,0x8b,0xd9,0x11,0x21,0x79,0x1f,0xb3,0xdf,0x86,
    0xc4,0x7d,0xcc,0x8e,0x0e,0x89,0xfb,0x98,0x1d,0x13,0x12,0xf7,0x31,0x1b,0x20,0x39,
    0x1f,0xb3,0xe3,0x42,0xe2,0x3e,0x66,0xbf,0x0b,0xa9,0x7f,0x9c,0xf3,0xfd,0x78,0xe9,
    0xfa,0x98,0x9d,0x10,0x12,0xf7,0x31,0x1b,0x18,0x52,0xff,0x04,0xa7,0x7b,0xa2,0x74,
    0x7d,0xcc,0x06,0x85,0xc4,0x7d,0xcc,0x06,0x87,0xd4,0x1f,0xe4,0xe6,0x62,0xd7,0x90,
    0xb1,0x1c,0x5c,0x37,0x17,0xf1,0xbb,0x4a,0xfb,0xb0,0xa0,0xca,0x39,0x8b,0x5c,0x09,
    0xf9,0x85,0x2e,0xd7,0x2e,0x51,0xae,0x6d,0xd2,0x3e,0xef,0x7d,0x97,0x6b,0xc1,0xbd,
    0x97,0x95,0xf7,0x65,0xf3,0x3d,0x37,0xbf,0x3f,0x2c,0xd3,0xae,0xdf,0xa3,0x7c,0x54,
    0x26,0xbe,0xb8,0x90,0xdb,0x5f,0x5a,0x26,0xbe,0xa4,0x40,0xff,0xcc,0xd6,0xfb,0xf2,
    0x0f,0x32,0x1f,0x97,0xe9,0x07,0x7c,0x5e,0xaa,0x36,0xf7,0xc9,0x7c,0x59,0xa1,0xf5,
    0xd6,0xda,0xbc,0x3b,0xfc,0x65,0x9b,0xf7,0x84,0xc4,0xe1,0x3f,0xd6,0x18,0xdc,0xc3,
    0x9c,0x1a,0x72,0x2f,0x0b,0xce,0xd6,0xaf,0xfb,0x42,0xe2,0xcf,0xda,0xfa,0x1e,0x12,
    0xc3,0x1a,0x37,0x57,0xd8,0xfd,0x21,0xf1,0x89,0x5a,0x57,0x61,0x7f,0x7a,0x28,0x5c,
    0xfd,0x79,0x28,0x6c,0x1e,0xaf,0xc7,0xc3,0x3c,0x5e,0xe0,0x1e,0xce,0x0a,0x30,0xf4,
    0xf1,0xe1,0x30,0xf7,0xf3,0x51,0xf9,0xe9,0x63,0xf3,0x58,0x48,0xdc,0x62,0x63,0x7a,
    0xf8,0xb5,0xd8,0x3c,0x11,0xb2,0x4d,0xc4,0xeb,0x31,0xd9,0x47,0xbb,0xe7,0xc7,0x79,
    0xbb,0x90,0x79,0x12,0x6d,0x49,0x1f,0xc7,0x87,0x67,0x3b,0x78,0xec,0xc9,0x67,0x29,
    0x66,0x16,0xb7,0xa2,0xdb,0x87,0xd7,0xae,0x61,0x43,0xee,0x89,0xa7,0xd7,0xe6,0x14,
    0xaf,0x55,0x9e,0x0a,0x89,0x5b,0x19,0x9d,0xc9,0x02,0x7f,0x3a,0xe4,0x7d,0xb9,0xa7,
    0x74,0x0e,0x02,0x7b,0x26,0x64,0x1b,0xe0,0x46,0xe8,0xde,0xdf,0xec,0x90,0x38,0xfa,
    0x8e,0xfa,0xdc,0x90,0x58,0x43,0x95,0xed,0x02,0x9b,0x1f,0x12,0xe7,0x75,0x57,0x43,
    0xad,0x3f,0xf0,0x1d,0x7d,0x78,0x31,0xf3,0x03,0xbe,0xbd,0xa0,0x98,0xe1,0x1e,0xde,
    0x48,0xb7,0xd7,0x79,0x31,0x24,0x67,0xf5,0x97,0x25,0xf7,0x42,0xa6,0x85,0xfa,0x2b,
    0x21,0xb1,0xa1,0xda,0xcf,0x9a,0xbd,0xd7,0x25,0x57,0xa9,0xb3,0xb7,0x20,0x24,0x67,
    0xfa,0x0b,0xa5,0x7f,0x41,0x9d,0xfe,0x7f,0xa4,0x7f,0x5b,0xa1,0xb9,0xfe,0x3b,0x21,
    0x39,0xd3,0x5f,0x22,0xfd,0x61,0xd2,0xb7,0x3d,0xd3,0x07,0x21,0x7d,0x87,0x7f,0x86,
    0x2d,0x0d,0xd9,0xfe,0x42,0x87,0x7d,0x1a,0xd2,0xe6,0x92,0x30,0x9f,0x87,0xcb,0x43,
    0xea,0xdf,0xaf,0xb9,0xb3,0x22,0x24,0xd6,0x59,0x7b,0xa4,0xf3,0xdc,0x7c,0x00,0xb7,
    0x12,0xb9,0x35,0x62,0x4c,0x57,0xba,0x98,0xfe,0x57,0x7d,0x18,0x5a,0x68,0xbe,0x7f,
    0xfc,0x22,0x24,0x67,0x72,0x5f,0xbb,0xd8,0x7b,0xb9,0x6f,0x42,0x72,0xff,0x92,0xaf,
    0xab,0x42,0x62,0x63,0x94,0xa7,0x80,0x7d,0x1b,0xd2,0xde,0x2a,0x67,0x6f,0xb5,0xec,
    0x9d,0xad,0xeb,0x05,0xb3,0xf7,0x43,0x48,0xce,0xe4,0xd6,0x48,0xee,0x82,0x3a,0xb9,
    0xb5,0x21,0x39,0x93,0x2b,0x46,0x94,0x9b,0x50,0x27,0xd7,0x10,0x91,0x33,0xb9,0xb2,
    0xe4,0x86,0xd5,0xc9,0x05,0x11,0x39,0x93,0x8b,0x25,0x37,0xbc,0x4e,0x2e,0x89,0xc8,
    0x99,0x5c,0x55,0x72,0x76,0xff,0xc0,0xf2,0xf5,0x06,0x11,0xb9,0x89,0x2e,0x5f,0x6f,
    0x14,0x11,0x47,0x1e,0x42,0x3e,0xc3,0xf5,0x38,0xee,0xff,0x5a,0x9e,0xda,0x24,0xe2,
    0x35,0x3a,0xe4,0x2c,0x4f,0x6d,0x1a,0x11,0xb7,0x9c,0xb7,0x79,0xc4,0x73,0xd7,0xef,
    0xd9,0xb7,0x8c,0x78,0x2f,0x02,0xd7,0x1e,0x76,0x4d,0xb0,0x55,0x44,0x59,0x70,0x96,
    0x73,0xb6,0x8e,0x88,0x2f,0x76,0xfd,0x69,0x15,0x11,0x37,0xbd,0x6d,0xa5,0x07,0x5b,
    0xa6,0xd7,0x36,0x22,0xde,0xe4,0xf4,0xb6,0x8b,0x88,0xdb,0x18,0xb7,0x8f,0x68,0x0b,
    0x38,0xe6,0x5f,0xa7,0x28,0x9f,0x7f,0xc8,0xe7,0x3b,0x66,0xf5,0x4e,0x9a,0x7f,0x38,
    0xb6,0x9c,0xd7,0x31,0xa2,0xee,0x18,0xe5,0x3c,0x93,0xe9,0x14,0xe5,0x39,0x6f,0xb3,
    0x2a,0xd7,0x04,0xcc,0x5b,0xc8,0x7b,0xfd,0xce,0xd2,0x9f,0xa6,0xfc,0xdb,0xc7,0xb5,
    0x0b,0x6e,0xe7,0xac,0xec,0x2e,0x9b,0x38,0xee,0xaf,0xfb,0x32,0xbb,0x45,0x9c,0x97,
    0x98,0x6f,0x6b,0xc3,0x3c,0x0f,0x75,0x8b,0xc8,0x59,0x1e,0xea,0x23,0x5d,0xd8,0x18,
    0xad,0xbe,0xfe,0x5a,0xfe,0xb6,0x77,0xf6,0xba,0x47,0x9c,0x6b,0x98,0x47,0x49,0x94,
    0xdb,0xeb,0x11,0x91,0x2b,0x56,0xf3,0x6b,0xb1,0x9e,0x11,0x6d,0x6c,0xea,0xf4,0x7b,
    0x45,0xc4,0xad,0x8c,0x92,0xfe,0x7e,0x11,0x6d,0x80,0xaf,0x64,0x39,0x1c,0x58,0xef,
    0x88,0x39,0x7b,0x67,0xf1,0x78,0x0e,0x80,0x7b,0xfe,0xde,0xdf,0x3e,0x8a,0x1f,0xe4,
    0xbb,0x54,0xd9,0x2f,0xf4,0xbf,0xb7,0xe2,0x01,0xd9,0xf3,0x94,0x63,0x91,0x17,0x2c,
    0xaf,0x1c,0x12,0x31,0x07,0x59,0x5e,0x39,0x34,0x22,0x66,0x79,0xe5,0x5c,0x97,0x57,
    0xc0,0x1d,0x86,0xf9,0xa5,0x36,0x0f,0x73,0xe7,0xc5,0x11,0x51,0x9e,0x2f,0xfc,0xf9,
    0x73,0x64,0x44,0xce,0xe4,0xfe,0x27,0xca,0xf3,0xcf,0x20,0x27,0x77,0x74,0x44,0xce,
    0xf2,0xca,0x31,0x11,0x31,0x9c,0x4f,0x36,0x57,0x8f,0x93,0xee,0x0a,0xb7,0xfe,0xff,
    0x2e,0x22,0xee,0xe7,0xea,0xef,0x23,0xe2,0x36,0x57,0x8f,0x8f,0x68,0xef,0xf7,0xce,
    0x8f,0x3f,0xc8,0xd6,0xaa,0x3a,0x3f,0x4e,0x8c,0xc8,0x59,0x9b,0x27,0x49,0x6e,0xac,
    0x6b,0xf3,0xe4,0x88,0x38,0xf6,0x75,0xa6,0x77,0x4a,0x44,0xdc,0xda,0x6c,0x8a,0x68,
    0xeb,0x14,0xd7,0xe6,0xd0,0x28,0x5f,0x3f,0x7c,0x8c,0x86,0x45,0xe4,0x4c,0xee,0x0c,
    0xc9,0x4d,0xaa,0x93,0x3b,0x33,0x22,0x67,0x72,0xc3,0x25,0x37,0xa8,0x4e,0xee,0x9c,
    0x88,0x9c,0xf9,0x7b,0x9e,0xe4,0x3e,0x77,0xeb,0xfe,0x08,0xe5,0x85,0x7b,0xc2,0xfc,
    0x5e,0xc3,0xc8,0x88,0xb2,0x23,0xa2,0x7c,0xee,0x5e,0x1c,0x71,0x0c,0x97,0x16,0x73,
    0xec,0x92,0x88,0x31,0xc5,0xf3,0x24,0xcb,0x49,0xa3,0x23,0xca,0x5e,0x12,0xe5,0xd8,
    0x98,0x88,0x78,0x93,0xb3,0x77,0x79,0xc4,0xfe,0x7a,0x7b,0x57,0x44,0xec,0x9b,0xb7,
    0x77,0x65,0x44,0xd9,0x2b,0x9c,0xbd,0xab,0x22,0xe2,0xe8,0xdf,0x83,0x9a,0xaf,0x7f,
    0x8d,0xd8,0x0e,0xb8,0xa9,0x8a,0xcb,0xd5,0x11,0xf1,0x26,0x3d,0xa3,0xb4,0xfe,0x5d,
    0x1b,0xb1,0x8f,0xe0,0x91,0x8f,0xaf,0xaa,0xcb,0xc7,0x7f,0x8b,0x78,0x8f,0xf4,0x5a,
    0x97,0x8f,0xaf,0x8f,0x88,0x5b,0x3e,0x1e,0xbb,0x9e,0x7c,0x7c,0xd3,0x7a,0xf2,0xf1,
    0xcd,0x11,0x65,0x6f,0x72,0xe3,0x30,0x2e,0x22,0xee,0xf3,0xf1,0xf8,0x88,0xb8,0xe9,
    0x4d,0x92,0x9e,0xcf,0xc7,0xb7,0x46,0xc4,0xfd,0x1c,0x9f,0x1c,0x11,0xc7,0x39,0x7a,
    0x77,0x5d,0xee,0xbd,0x1d,0xe3,0xad,0x73,0xf4,0x76,0x17,0xbf,0xbb,0x22,0xb6,0x37,
    0xd9,0xe5,0xd3,0x29,0x11,0x71,0xcb,0xc7,0xa6,0x77,0xb7,0xcb,0xc7,0x5b,0x2a,0x1f,
    0xe3,0x7c,0x87,0xfc,0xed,0x51,0xbe,0x1f,0xbe,0x57,0x36,0x2d,0x1f,0x3f,0xe2,0x7c,
    0x01,0x37,0x15,0x7d,0x91,0xcd,0xa9,0x2e,0xff,0x4d,0xd7,0x3c,0x38,0x53,0xe3,0x89,
    0xb6,0x1f,0x91,0xdc,0x03,0x4e,0x6e,0x86,0xe6,0xdf,0xf1,0x9a,0x47,0x5e,0xee,0x11,
    0x97,0xf3,0xe2,0x2a,0x6d,0xa2,0x8d,0x19,0x6a,0xd3,0x72,0xf2,0x13,0x11,0x79,0x9f,
    0x93,0x67,0xaa,0xcf,0x93,0x5d,0x9e,0x9f,0xa5,0x7c,0x33,0xd3,0xcd,0xd7,0xa7,0x22,
    0xe2,0xd7,0x3b,0x9f,0x9e,0x89,0x88,0x5b,0xb1,0xdc,0x3d,0x3b,0x62,0x5b,0xcf,0xb8,
    0xdc,0x3d,0xc7,0xe5,0xee,0xd9,0x75,0xb9,0xfb,0x5c,0xdb,0xf3,0xba,0x7c,0xfc,0x7c,
    0xc4,0xfd,0x9f,0xe5,0xe3,0x17,0x22,0x62,0x96,0x8f,0xff,0xe8,0xf2,0x31,0xb8,0x17,
    0xb3,0x32,0x50,0x76,0x5e,0x74,0xb9,0xe1,0x65,0x9d,0xf3,0x78,0xc6,0x3b,0xce,0xcd,
    0x9b,0x57,0x22,0x72,0xeb,0xf6,0xc4,0x92,0x5b,0x5d,0x68,0x2e,0xb7,0x20,0x22,0x67,
    0xf3,0xf2,0x2d,0xc9,0xe1,0x79,0xab,0xc9,0x2c,0x8c,0x88,0xdb,0x35,0xd5,0xdb,0x11,
    0xb1,0xc1,0xc5,0x3c,0x0f,0xfe,0x3b,0xa2,0xad,0xb7,0x5d,0x9b,0x8b,0x5c,0x7e,0xf3,
    0xb9,0x77,0x71,0x44,0xce,0xe4,0xde,0x73,0xf9,0xd2,0xef,0x41,0xdf,0x8f,0xc8,0xd9,
    0x5a,0xf1,0x41,0x44,0x6c,0x90,0xdb,0x83,0x7e,0x18,0xd1,0xde,0x07,0xae,0x0f,0x1f,
    0x3b,0x7b,0x66,0xeb,0x93,0x88,0xb8,0xf5,0xe1,0xd3,0x88,0xd8,0x89,0xae,0x0f,0xcb,
    0x22,0xda,0xfb,0x34,0xca,0xf5,0x3e,0xd3,0xbe,0xce,0x7c,0xfd,0xc2,0xed,0x0b,0xfd,
    0xb5,0xc1,0x97,0x11,0x39,0xf3,0xf5,0xab,0x88,0xd8,0x44,0xe7,0xeb,0xd7,0x11,0xed,
    0x7d,0xe5,0xf2,0xcc,0x2a,0x97,0x67,0xac,0x8d,0x6f,0x23,0xe2,0xa7,0xd7,0x8d,0xe9,
    0x77,0x11,0x39,0x93,0xfb,0x41,0x72,0x18,0xfb,0x49,0x4e,0xee,0xc7,0x88,0x9c,0xc9,
    0xad,0x95,0x9c,0xbd,0xc7,0x63,0x72,0x3f,0x47,0xe4,0x4c,0xae,0x21,0xa6,0x1c,0xae,
    0x9b,0x7c,0xbb,0xa5,0x98,0x9c,0xc9,0x05,0x92,0x9b,0x56,0x37,0x97,0xc2,0x98,0x9c,
    0xc5,0x20,0x8e,0x39,0x0f,0xfd,0xb5,0x77,0x2a,0x6c,0xb8,0x8b,0x4b,0x25,0xa6,0x6c,
    0xea,0x74,0x37,0x88,0x19,0x2f,0xaf,0xdb,0x52,0x98,0xd7,0xdd,0x30,0xa6,0x6c,0x4b,
    0xa7,0xbb,0x71,0xcc,0x58,0x79,0xdd,0x4d,0x85,0x79,0xdd,0xcd,0x62,0xca,0x6e,0xea,
    0x74,0xb7,0x88,0x39,0x97,0x27,0x3a,0xdd,0xad,0x84,0x8d,0x73,0xba,0x5b,0xc7,0x94,
    0xdd,0xca,0xe9,0x6e,0x13,0x33,0xf6,0x5e,0xb7,0x8d,0x30,0xaf,0xbb,0x6d,0x4c,0xd9,
    0x36,0x4e,0x77,0xbb,0x98,0xe3,0xe1,0x75,0xb7,0x17,0xe6,0x75,0xdb,0xc7,0x94,0xdd,
    0xde,0xe9,0xee,0x18,0x73,0xee,0xfa,0xfe,0x76,0x14,0xe6,0xfb,0xdb,0x29,0xa6,0x6c,
    0x47,0xa7,0xdb,0x39,0xe6,0xf8,0x7a,0xdd,0x5d,0x84,0x79,0xdd,0x5d,0x63,0xca,0xee,
    0xe2,0x74,0x77,0x8b,0x39,0xe6,0x5e,0xb7,0xab,0x30,0xaf,0xdb,0x2d,0xa6,0x2c,0x38,
    0xcb,0xad,0x7b,0xc6,0x1c,0x77,0xc4,0xb1,0x93,0xc3,0xf7,0x8e,0x39,0xa6,0x88,0x11,
    0xda,0x1c,0xad,0x9c,0xbb,0x4f,0x4c,0x6e,0x4f,0x27,0xbb,0x5f,0xcc,0x31,0x44,0x4c,
    0xba,0x39,0xd9,0xde,0x31,0x39,0xc8,0xda,0x9a,0x7f,0x40,0xcc,0x7b,0x45,0x4b,0xdc,
    0xb3,0x8e,0x03,0x63,0xe2,0x66,0xef,0xe0,0x98,0x98,0x15,0x5b,0x57,0xfa,0xc4,0x6c,
    0xff,0x60,0x67,0xaf,0xaf,0xec,0x35,0x39,0x7b,0xfd,0x62,0xe2,0x66,0xef,0xd0,0x98,
    0x98,0x15,0xb3,0x77,0x58,0x4c,0x1f,0xc1,0xdb,0x9a,0x72,0x64,0xcc,0x76,0x0e,0x73,
    0xd8,0x6f,0x63,0xe2,0x78,0x96,0x3d,0x57,0xd8,0xd1,0x31,0x71,0x60,0x26,0x77,0x8c,
    0xfa,0x0a,0xce,0xd6,0xa3,0x01,0x71,0xbe,0x1e,0x81,0xf7,0xeb,0xd1,0x1f,0xb5,0x8e,
    0x0c,0x74,0xbe,0x0e,0x8e,0x79,0xcf,0x62,0x81,0xee,0x49,0xd8,0x39,0x7d,0x72,0x9c,
    0xdf,0x33,0x82,0xdc,0xa9,0x31,0xef,0x6b,0x2c,0xd4,0x7d,0x0b,0xc3,0x87,0xc6,0x94,
    0xb5,0x62,0x7d,0x1d,0x16,0x93,0x3b,0xd5,0xf5,0xeb,0xb4,0x98,0xed,0x0d,0xd3,0x5c,
    0x02,0x76,0x66,0x4c,0x1c,0xcf,0xf3,0xad,0xaf,0xc3,0x85,0xa1,0xaf,0xf3,0x84,0x9d,
    0x13,0x53,0x16,0x9c,0xef,0x0b,0x7e,0x6d,0x8f,0xd0,0xad,0xca,0xfe,0x63,0x9d,0xc4,
    0x73,0xf7,0x81,0x8e,0xeb,0x50,0x25,0x06,0x0e,0xb6,0xc0,0x61,0x3f,0x89,0x35,0xf8,
    0x93,0x2a,0xd7,0xe1,0xd7,0x74,0xaf,0xd2,0xf0,0x4f,0x1d,0xfe,0x51,0xa1,0xf9,0x9a,
    0x7e,0xae,0xb3,0xdd,0xb5,0xca,0x7d,0x00,0xf6,0x2b,0xf0,0xc1,0xfb,0xd4,0x5e,0xed,
    0x82,0xeb,0xe0,0xb8,0xda,0x3b,0xbb,0x55,0xee,0xbd,0xc0,0x7d,0x52,0xc7,0xb5,0xa8,
    0xb2,0x5d,0x70,0x9f,0x8a,0xf3,0xd7,0x78,0xe7,0xb9,0x36,0x76,0xab,0xf2,0x9a,0x10,
    0xd7,0x88,0xf0,0xc5,0xfb,0xd6,0x5a,0xed,0x83,0x6b,0xef,0x38,0xb4,0xb1,0x49,0x95,
    0xd7,0xe2,0xe0,0x36,0xaf,0xe3,0x52,0xb5,0x0f,0xae,0x85,0x38,0x7f,0x1f,0xef,0x7c,
    0xd7,0xc6,0xce,0x6a,0x03,0xf7,0x25,0xe1,0x8b,0xf7,0x6d,0x9b,0x2a,0xef,0x05,0x82,
    0x6b,0xed,0x38,0xb4,0xb1,0xb1,0xf6,0x9d,0xe0,0x36,0xa9,0xe3,0x92,0x2a,0x63,0x0e,
    0x2e,0x15,0x87,0xfd,0xd1,0x34,0xb7,0x3f,0x82,0xcc,0xff,0x66,0xf5,0x69,0xf2,0xa9,
    0x76,0xac,0x7d,0xd5,0x48,0xcd,0xdf,0x25,0x05,0x8e,0x27,0xd4,0x2e,0x8a,0x89,0x4f,
    0xd4,0xfb,0x75,0xeb,0xae,0x81,0x62,0xee,0x2d,0x2e,0x8a,0xf3,0xbd,0xe2,0xa8,0x98,
    0xeb,0xfc,0xc5,0x6e,0xfd,0xbb,0x24,0xe6,0x1e,0x60,0x94,0xe4,0x6d,0x2d,0xbf,0x34,
    0xfe,0xe5,0x35,0xc3,0x65,0xf1,0x2f,0xaf,0x19,0x2e,0x8f,0x29,0x0b,0xce,0xf6,0xfe,
    0x7f,0x8e,0x89,0xfb,0x6b,0x86,0x2b,0x62,0xe2,0xa6,0xf7,0x57,0xe9,0xf9,0x6b,0x86,
    0xab,0x63,0xe2,0xfe,0x9a,0xe1,0x9a,0x98,0xb8,0xf5,0xe1,0x3a,0xf5,0xf5,0x0a,0xc5,
    0x6e,0x82,0x8b,0x1d,0x62,0x7f,0x7d,0x56,0x9f,0xa0,0xd8,0x5d,0x1f,0xe7,0xf1,0xb8,
    0x31,0xa6,0xee,0x35,0x71,0xde,0x9f,0x71,0x31,0xed,0x00,0xb3,0x6b,0x8b,0xf1,0x31,
    0x71,0xbb,0xb6,0x30,0x5b,0x13,0xdc,0x38,0x76,0xaa,0x72,0x9c,0x31,0x36,0x90,0xbf,
    0x5e,0x5c,0x6d,0x2d,0xad,0xb2,0x1d,0x70,0x37,0x8a,0xc3,0x75,0x1b,0xde,0x5b,0xc1,
    0xbb,0x75,0xbd,0xb2,0x9e,0x22,0xe7,0x4e,0x8a,0xf9,0x2e,0xcb,0x25,0x6a,0xdf,0xf2,
    0xee,0xad,0x31,0x39,0xf3,0xfb,0xb6,0x98,0x18,0xec,0x5a,0x7e,0xba,0x33,0x26,0x6e,
    0xc5,0x72,0xd1,0x5d,0x31,0xe7,0xe6,0x9d,0x2e,0x77,0x4e,0x71,0xb9,0xf3,0xae,0xba,
    0xdc,0x69,0x73,0x6c,0x9a,0x9b,0xdb,0x9d,0xab,0x9c,0xfb,0x38,0x17,0xa6,0x28,0x96,
    0xd6,0xef,0x8e,0xea,0x37,0x38,0xc4,0x00,0xdc,0x3d,0xf6,0x8c,0x21,0xe6,0xf3,0x90,
    0x8e,0xba,0x27,0x35,0x43,0xb6,0x67,0xc4,0xf9,0x5c,0x5d,0x56,0xa5,0xdc,0x34,0xbd,
    0xf3,0x89,0xfe,0xe0,0x5d,0xb2,0xe5,0xc2,0xad,0x4c,0x55,0x3f,0x57,0x54,0xc9,0xc1,
    0x67,0xf8,0x65,0xef,0x04,0x3c,0x1a,0x93,0x2b,0x14,0x72,0xec,0x71,0x61,0x45,0x87,
    0x3d,0x29,0xac,0xa1,0xf6,0xae,0x32,0xdf,0xd1,0xf8,0xb1,0xcc,0x67,0x13,0x98,0x3b,
    0x6b,0xdc,0x73,0x23,0xe0,0x3f,0x65,0x65,0x8d,0x9e,0xf5,0xe0,0x78,0xba,0xfa,0x86,
    0xc9,0x09,0xdf,0xa7,0x69,0x4e,0x98,0xcc,0x1a,0xf7,0x3c,0xa8,0x18,0xd0,0xee,0x0c,
    0xbd,0x80,0xfc,0x93,0xde,0x03,0x69,0x0c,0xf2,0x36,0x20,0x53,0xca,0x4a,0xa3,0xde,
    0xfb,0x28,0x05,0xf9,0x35,0x54,0x18,0xb0,0x5f,0x56,0x4f,0x02,0xf6,0xc9,0xea,0xd5,
    0x80,0xfd,0xb1,0xe7,0x1d,0x1b,0x04,0xd4,0x81,0x1c,0x38,0xb4,0xf5,0x79,0xdc,0xfc,
    0x39,0xd8,0x2b,0x59,0xfd,0x43,0x8d,0x03,0x8e,0x8f,0x2f,0x72,0x8e,0xbe,0x1a,0xe7,
    0xef,0x56,0x4e,0xd4,0xf7,0x04,0xe0,0x60,0xf7,0x75,0xc7,0xa1,0x8d,0xb1,0xca,0x29,
    0xe0,0xde,0x88,0xc9,0xe3,0xbd,0x30,0xf3,0xeb,0xad,0x98,0xf6,0xcc,0xaf,0x85,0x31,
    0x31,0x2b,0xa3,0xa4,0xfb,0x76,0x4c,0xfd,0x85,0x6e,0x6e,0xff,0x47,0xe7,0xd9,0xab,
    0xae,0x9f,0xef,0xc4,0xc4,0xcd,0xde,0xa2,0x98,0x98,0x95,0xcb,0x65,0x6f,0x71,0x4c,
    0x9b,0x8b,0xe2,0xfc,0x19,0xce,0xbb,0x31,0x71,0xab,0xbf,0x17,0xb3,0x0f,0xb6,0x97,
    0xfa,0x20,0x26,0xf6,0xae,0xf2,0xfe,0xe7,0x8a,0xcd,0x87,0x4e,0x67,0xa9,0x74,0x2c,
    0x1e,0x9f,0xac,0x27,0x1e,0xd6,0xa7,0x65,0x31,0x79,0xbc,0x57,0x67,0xcf,0x96,0x56,
    0xc4,0xc4,0x1b,0xab,0xb9,0xcd,0x95,0x31,0x71,0xf3,0xe3,0xb3,0x98,0xed,0xac,0xac,
    0xf3,0xe3,0x73,0x77,0x1e,0xee,0x5f,0xa5,0xbf,0x18,0xb7,0xcf,0x34,0x8e,0x36,0xaf,
    0xbf,0x88,0xc9,0x17,0x0a,0x79,0x4e,0xf8,0x2a,0x26,0x6e,0xc5,0xf6,0x2c,0x5f,0xc7,
    0xe4,0x20,0x8f,0x3e,0x01,0xfb,0xc6,0xf5,0x09,0x3c,0xfa,0x74,0xa6,0xbe,0x9f,0x59,
    0x15,0x93,0x3f,0x5c,0xf9,0xe3,0x3b,0xe9,0xee,0xef,0x9e,0xc5,0xe1,0x7c,0x32,0x7e,
    0x75,0x1d,0xdf,0xa0,0x62,0xed,0xff,0x10,0xd3,0xc6,0xea,0x38,0x6f,0xff,0x47,0xd7,
    0xfe,0x0f,0x75,0xed,0xff,0x14,0x93,0x3f,0x59,0xf1,0x5f,0xbb,0x9e,0xf8,0x0f,0x12,
    0x87,0x44,0x5a,0xcf,0xd9,0x73,0xbf,0x62,0x42,0x5d,0xc8,0x9c,0x25,0xdb,0x0d,0x09,
    0x71,0xc4,0x11,0xef,0xba,0x96,0x13,0xf6,0xd7,0x72,0x06,0xb0,0x28,0xa1,0x0f,0x05,
    0x87,0xc5,0xc2,0xbc,0x5c,0x45,0xba,0x0d,0x0e,0x6b,0x29,0xb9,0x06,0x8d,0x0b,0xda,
    0x6c,0x95,0xb0,0x1d,0xd8,0x85,0x1d,0xc3,0xb7,0x49,0x68,0x03,0x58,0x4b,0xe1,0x78,
    0x8f,0xb8,0xb5,0xec,0x42,0x0f,0x32,0x98,0x1f,0x6d,0x12,0xce,0x0f,0xfc,0x62,0x7e,
    0x40,0xff,0xc0,0x2a,0xfb,0x83,0x39,0xf3,0x3e,0xee,0x9d,0x8b,0x83,0x1f,0x07,0x54,
    0xf9,0x7e,0x33,0xb8,0x4e,0x49,0xce,0xa1,0x5b,0xbd,0x95,0xc7,0xc0,0xed,0x21,0xee,
    0x61,0xe5,0xb9,0xed,0x12,0xf2,0xb8,0xde,0xf9,0x36,0x8b,0xd9,0xaf,0xc5,0x5b,0x4e,
    0x01,0xdf,0x2e,0x2b,0xbf,0x96,0x3f,0x38,0xfe,0x5b,0xa6,0x0b,0x7f,0x76,0x48,0xe8,
    0x3b,0xfc,0x1a,0xab,0x78,0x74,0x4c,0x88,0xa3,0x54,0xb2,0xfe,0x01,0x83,0x3f,0x45,
    0x7d,0xf3,0x04,0x7e,0x96,0x3d,0x23,0x49,0xc8,0xc1,0x6f,0xe4,0xb2,0xae,0xae,0x5d,
    0x70,0x3b,0x67,0xa5,0xab,0xda,0xc5,0xf1,0x15,0x6a,0x63,0xd7,0x84,0xef,0x6e,0x43,
    0xf7,0x1a,0xf9,0xd2,0x45,0x6d,0xee,0xaa,0xf8,0x99,0x5e,0x57,0x17,0x3f,0xc4,0x6c,
    0x07,0xf5,0xa7,0x8b,0xec,0x43,0xb6,0x9b,0x64,0xf1,0x6b,0xfb,0x84,0x3d,0x14,0x97,
    0x89,0x85,0xe6,0xe3,0x81,0x38,0x3c,0x29,0xff,0x7f,0x93,0x30,0xee,0x78,0xef,0x1b,
    0xfe,0xf7,0x73,0xfe,0x83,0xdb,0x2b,0x2b,0xdd,0xa5,0xb7,0x97,0xda,0xea,0xa7,0x7a,
    0x77,0x37,0x27,0x7b,0x28,0x86,0x85,0x42,0x1e,0xb3,0x7d,0x14,0xb3,0x46,0xf1,0x26,
    0xdb,0x53,0xb2,0x45,0x27,0xdb,0xcb,0xc9,0xf6,0xac,0xc5,0x9d,0x73,0x62,0x3f,0xe1,
    0x66,0xaf,0x97,0xb3,0xd3,0x5b,0x76,0x1a,0x9c,0x9d,0x03,0x9c,0x9d,0xde,0xce,0xce,
    0x81,0xce,0x0e,0x6c,0x1e,0xe0,0xc6,0xe2,0xe0,0x84,0xef,0xa7,0x1f,0xe8,0xc6,0xa2,
    0xaf,0x6c,0x1f,0x5c,0xd7,0xe7,0x7e,0x6e,0x2c,0x0e,0xaa,0xf2,0x7d,0x77,0xc4,0xa5,
    0xaf,0xe2,0x64,0xe7,0xec,0xa1,0x89,0x9d,0xdb,0x6c,0xe3,0xf0,0x84,0x18,0x74,0x06,
    0x17,0xe9,0xd3,0x11,0x2e,0x0f,0x80,0x47,0x1e,0x38,0x45,0xdc,0x51,0xeb,0xe1,0x1e,
    0xd5,0x98,0x1d,0x9d,0x10,0x83,0xbe,0xbd,0xd7,0x87,0xef,0x20,0xf1,0x4e,0xbd,0xdd,
    0x97,0x3f,0x36,0xa1,0x1c,0xf0,0x25,0x4e,0xf7,0x77,0xd2,0x85,0x7d,0x93,0x3d,0x3e,
    0x21,0x6e,0xb2,0xf6,0xbe,0xcb,0x09,0x09,0xed,0x80,0x47,0x5e,0x03,0xf6,0x07,0xe7,
    0xd7,0x09,0xf2,0xcb,0xf6,0xde,0x83,0x13,0xf2,0xf8,0x1b,0x50,0xe4,0x3a,0x78,0x92,
    0xe4,0x11,0x8b,0xc1,0x49,0x2e,0xdb,0x24,0xd9,0xa2,0x93,0x1d,0xe2,0x64,0x9b,0x5c,
    0x2c,0x3f,0x48,0x68,0xe7,0x32,0x8d,0xcd,0x87,0x09,0x31,0xbc,0xe3,0x5f,0x51,0x5e,
    0xfa,0x28,0xc9,0xf3,0x3c,0xf8,0xd3,0xf5,0x9e,0xf4,0xd2,0x84,0x9c,0xd9,0x5a,0x96,
    0xb0,0x1d,0xb3,0xb5,0x3c,0x21,0xe6,0x6d,0xad,0x70,0xb6,0x96,0x3b,0x5b,0x2b,0x13,
    0x72,0xd8,0x73,0x63,0xff,0x77,0x61,0x42,0xfb,0xc0,0x6f,0xd1,0x3e,0xed,0x4f,0x09,
    0x71,0x9c,0x4b,0x8b,0xdc,0xb9,0x04,0x7c,0x44,0x56,0x16,0x69,0x1e,0x8d,0x70,0xb1,
    0xf8,0x42,0x76,0xfc,0x3b,0x53,0x5f,0x26,0xc4,0x07,0xb9,0x67,0x72,0xdf,0x08,0x1b,
    0xe3,0x9e,0x7b,0xaf,0x4a,0x28,0xfb,0x8d,0xb3,0xf7,0x9d,0xec,0xf9,0x77,0xab,0xbe,
    0x4f,0x88,0x8f,0x71,0xf6,0x7e,0x14,0x36,0xdc,0xd9,0xfb,0x29,0xa1,0xec,0x8f,0xce,
    0xde,0x5a,0xd9,0xf3,0xef,0x5b,0xfd,0x9c,0x10,0xf7,0xfe,0x35,0xa4,0xc4,0xbc,0x7f,
    0xa5,0x94,0xb2,0xe0,0x6c,0x6f,0xd4,0x98,0xd2,0x6f,0xb4,0x05,0xde,0xf6,0x1b,0xa3,
    0x34,0x36,0x56,0x1f,0x9d,0x50,0xd6,0xf6,0x1f,0x97,0x26,0x94,0x19,0xad,0xbc,0x0c,
    0x6c,0x8c,0xfa,0x19,0x8a,0x37,0xdd,0xcb,0x35,0x67,0x4c,0xf7,0xca,0x84,0x98,0xd7,
    0xfd,0x8b,0xd3,0xbd,0x32,0xc9,0xd7,0xfe,0xab,0x13,0xda,0x05,0x3f,0x5d,0x63,0x7d,
    0x4d,0x42,0x1c,0x7b,0x7a,0xc3,0xae,0x93,0x0c,0xb0,0x23,0x74,0x7e,0x5d,0x9f,0x50,
    0xd6,0xd6,0x61,0x60,0x63,0x13,0xca,0x16,0x0a,0xf9,0x75,0xc7,0x8d,0x09,0x65,0xc7,
    0x26,0xf9,0x75,0xc6,0x4d,0x09,0x71,0xbb,0x26,0xb6,0xbd,0xe5,0xcd,0x09,0x39,0x1b,
    0x8f,0xf1,0x9a,0x73,0xfe,0x3d,0xfa,0x09,0x09,0x71,0xc8,0x1e,0xa9,0x38,0x3f,0x5a,
    0x21,0xfe,0x45,0xb5,0xb9,0x3f,0x93,0xe4,0x63,0xd1,0x61,0x93,0xe5,0x63,0xd1,0xf9,
    0x78,0x5b,0x42,0xd9,0xc9,0xce,0xc7,0xdb,0x13,0xe2,0xf5,0x3e,0xde,0x91,0x90,0x33,
    0x1f,0xef,0x92,0x8f,0xfe,0xfd,0xea,0x29,0x09,0xf1,0x3b,0x9c,0x8f,0x33,0x2b,0xc4,
    0x1f,0xad,0x34,0xf7,0xe7,0x5e,0xf9,0xd8,0xe0,0xb0,0xfb,0xe4,0x63,0x83,0xf3,0x71,
    0x5a,0x42,0xd9,0xfb,0x9c,0x8f,0xf7,0x27,0xc4,0xeb,0x7d,0x9c,0x9e,0x90,0x33,0x1f,
    0x1f,0x94,0x8f,0x0d,0xce,0xc7,0x87,0x12,0xe2,0xd3,0x9d,0x8f,0x4f,0x57,0x88,0xc3,
    0xd7,0x06,0x3d,0x7b,0x7b,0xd2,0x9d,0xdb,0x18,0xc7,0x47,0xb1,0xa6,0xea,0xdc,0xc6,
    0xb1,0x5d,0xb7,0x3d,0xa1,0x31,0xc6,0x1a,0x62,0xfc,0x93,0x49,0x7e,0xfd,0x35,0x53,
    0xf3,0x00,0xf9,0xe0,0x09,0xd9,0xb1,0x7e,0xcc,0x4a,0xc8,0xd7,0xf7,0xe3,0xef,0x09,
    0xb9,0xd1,0xf2,0xf9,0x69,0xe5,0x85,0xbf,0x3b,0x9f,0xe7,0x56,0x84,0x6b,0xec,0xe1,
    0xf3,0x7c,0xe7,0x33,0xc6,0x75,0x4e,0x56,0xe6,0xcb,0xa7,0x39,0xce,0xe7,0x79,0x1a,
    0x73,0xf8,0x6c,0xfc,0x7c,0xe7,0xf3,0xb3,0x9a,0x17,0xe8,0xc7,0x3c,0xd9,0x31,0x9f,
    0x9f,0x4b,0xc8,0xd7,0xfb,0xfc,0x7c,0x42,0xce,0x7c,0xfe,0x3f,0xe5,0x9e,0xe7,0x9d,
    0xcf,0xcf,0x55,0x88,0xcf,0xd5,0x5c,0x80,0xcf,0x6f,0x38,0x9f,0x31,0xce,0xaf,0x66,
    0xe5,0x0d,0xf9,0xf4,0xaa,0xf3,0x79,0x81,0xe6,0x00,0x7c,0x36,0xfe,0x0d,0xe7,0xf3,
    0x9b,0x9a,0x27,0xe8,0xc7,0x02,0xd9,0x31,0x9f,0xdf,0x4a,0xc8,0xd7,0xfb,0xbc,0x30,
    0x21,0x67,0x3e,0xff,0x47,0x39,0x6f,0xa1,0xf3,0xf9,0xa5,0x0a,0xf1,0xe7,0x34,0x37,
    0xd0,0xbe,0xe5,0xf8,0x45,0x6a,0x1f,0x72,0x87,0x54,0x39,0xd7,0xb0,0x7f,0xc0,0x7c,
    0x7a,0xc3,0x71,0xfd,0xaa,0xcc,0xaf,0xe0,0x5e,0x12,0x67,0x73,0x34,0x4a,0xc9,0xfb,
    0xb5,0x21,0x4e,0x89,0xdf,0xe6,0xd6,0xde,0x54,0x72,0x3e,0xe7,0x57,0x52,0xe2,0x23,
    0x5d,0x3e,0xae,0xa6,0xd4,0x07,0x67,0xba,0x2d,0xa4,0xdb,0xe0,0xdf,0x5f,0x4f,0x29,
    0xdb,0xc2,0xc9,0x6d,0x92,0xb2,0x1f,0xde,0x97,0x4d,0x53,0xe2,0xde,0x97,0xcd,0x25,
    0xe7,0x7d,0xd9,0x22,0x25,0xee,0x7d,0xd9,0x32,0xa5,0xfe,0x16,0xae,0x8d,0xad,0xa5,
    0xeb,0x7d,0x69,0x95,0x52,0x16,0x9c,0xdd,0x53,0xec,0x14,0xd0,0x47,0x70,0x98,0x27,
    0x9d,0xdd,0xfd,0x0a,0x70,0x3b,0x65,0xa5,0xb3,0xee,0x57,0xe0,0xf8,0x4c,0x7d,0x27,
    0xb8,0xab,0xee,0x57,0x58,0xbd,0x8b,0xee,0x57,0x58,0x7d,0x77,0x77,0xbf,0x02,0x7b,
    0x81,0x3d,0x02,0xea,0x40,0x0e,0x9c,0xf5,0xa7,0xad,0xc6,0xc0,0xaf,0x7f,0xdb,0x0b,
    0xf3,0xeb,0x5f,0xfb,0x94,0xb2,0xe0,0x4c,0xb7,0x83,0xc6,0xc5,0xaf,0xc5,0x3b,0x09,
    0xf3,0x6b,0x71,0xe7,0x94,0xb2,0x3b,0x39,0xdd,0x5d,0x35,0x26,0xbe,0xdd,0x2e,0xc2,
    0x7c,0xbb,0x5d,0x53,0xca,0x76,0x71,0xeb,0x6e,0xb7,0x94,0xfe,0xc0,0x2e,0x78,0xdb,
    0x13,0xed,0x15,0x90,0xb3,0x36,0x7e,0xa3,0x31,0xf5,0x6d,0xec,0x2d,0xcc,0xb7,0xd1,
    0x23,0xa5,0xec,0xde,0x4e,0xb7,0xa7,0xc6,0xd9,0xf7,0x6d,0x7f,0x61,0xbe,0x6f,0xbd,
    0x53,0xca,0xee,0xef,0x74,0x0f,0xd2,0x18,0xfb,0x76,0xfb,0x0a,0xf3,0xed,0xf6,0x4b,
    0x29,0xdb,0xd7,0xf5,0xed,0x90,0x94,0xfe,0xc0,0x6e,0x3f,0xd7,0xb7,0x7d,0x02,0x72,
    0x97,0x6a,0xbf,0x77,0x74,0x4a,0x6c,0x2f,0xb7,0x37,0x1f,0x90,0xb2,0x0e,0xce,0xb0,
    0xdf,0x4b,0xce,0x63,0x03,0x53,0xce,0x87,0xa3,0x65,0x0f,0xd8,0xa0,0x94,0xf8,0x00,
    0x87,0x9d,0x9c,0x52,0x1f,0x98,0x5d,0x63,0x9c,0x92,0x52,0x16,0x1c,0xee,0x71,0x02,
    0x6b,0x4a,0xed,0x1b,0x58,0xf2,0xb8,0x86,0xc4,0x35,0xe1,0x54,0x5d,0xcb,0x9c,0x9a,
    0xf2,0x9e,0x3c,0xbe,0xe9,0xc5,0x77,0xbc,0x97,0xc9,0xd6,0xd0,0x94,0xba,0xa7,0xa6,
    0xf9,0x75,0xcf,0xb0,0x34,0xdf,0xb3,0x82,0x3f,0x43,0xf7,0x65,0x4f,0x4b,0xc9,0xd9,
    0x5e,0xff,0x0c,0xd9,0xc4,0xbb,0xf8,0xcf,0x97,0xf2,0x7b,0x5a,0x67,0xa5,0x94,0x1d,
    0xe3,0x9e,0x81,0x9f,0x9d,0x52,0xfe,0xac,0x34,0xbf,0xaf,0x6c,0xe7,0x14,0x7e,0x91,
    0xbf,0x6a,0xef,0xf2,0x57,0x79,0xdd,0x80,0x7c,0x07,0x1d,0x9c,0x6f,0x0f,0xe9,0x3c,
    0x3d,0x38,0xe0,0x39,0xda,0x52,0xe7,0x69,0x3f,0x77,0x9e,0x82,0xeb,0x9b,0x95,0x7e,
    0xb2,0x89,0xe3,0xf9,0x1a,0xe3,0x43,0x03,0xda,0x6d,0x72,0xef,0x70,0xf7,0x0f,0x88,
    0xe3,0x1a,0xc1,0xd6,0xff,0x23,0x02,0xf6,0x07,0x1c,0xfc,0x3b,0x4a,0xb6,0xf0,0x6b,
    0x7d,0x5e,0x59,0xa5,0xdc,0x62,0xd9,0xad,0x5d,0xcf,0x49,0xae,0x9f,0xeb,0xc7,0x65,
    0x55,0xb6,0x89,0xbe,0x41,0x07,0x36,0xa6,0xd8,0x35,0x57,0xc0,0xbe,0x7c,0xac,0x6f,
    0xe0,0x8e,0x95,0xfe,0xb1,0xae,0x9d,0xcf,0xaa,0x94,0xb3,0xfe,0x1a,0xfe,0xb9,0x70,
    0xcb,0x57,0xeb,0xbe,0x3b,0x08,0xa8,0x73,0x81,0xff,0xee,0x20,0xa0,0xfc,0x20,0xf9,
    0x69,0xf7,0x5c,0x1b,0x9d,0x9f,0x97,0x2a,0xde,0xb8,0x8f,0x0b,0x9f,0x8f,0x75,0xdc,
    0x50,0xc7,0xc1,0xd6,0xb1,0xba,0xc7,0x3a,0x24,0x68,0x7e,0x8f,0xb5,0x29,0xab,0x0f,
    0x91,0xed,0x26,0xc9,0x9c,0x5e,0x77,0xcf,0xf7,0xb4,0xac,0x9c,0x25,0x99,0xd3,0x82,
    0xfc,0x5a,0x13,0xff,0xbb,0x07,0xd7,0x9a,0xeb,0xde,0x95,0x0b,0x88,0xc1,0xdf,0xd3,
    0x25,0x7f,0x56,0x5d,0xfd,0xf4,0x20,0xbf,0x97,0x33,0xa4,0x4a,0x1d,0xd8,0x3c,0x5b,
    0x6d,0x9c,0xa4,0x7b,0xbc,0xe7,0x04,0xf9,0xf5,0xe5,0x90,0x2a,0xaf,0x2f,0x2d,0xe7,
    0x9f,0x1b,0x90,0x3f,0x5b,0xfe,0x9e,0xef,0xfc,0x05,0x77,0x5e,0x56,0xce,0x57,0x7b,
    0xe7,0xb9,0x7b,0xd4,0x17,0x4a,0x0f,0xd7,0x99,0xa8,0xff,0x49,0x6d,0x20,0x56,0x17,
    0xca,0x4f,0xd3,0x3b,0xdf,0xc5,0xf2,0x9a,0x2a,0x65,0xe0,0xfb,0x9f,0x64,0x1f,0xed,
    0x5e,0xe4,0xda,0xc5,0x73,0x83,0x91,0x59,0xfd,0x22,0xe9,0xe3,0xd8,0xe6,0xeb,0x25,
    0x75,0xf7,0xdf,0x4d,0xe6,0xa2,0x20,0xdf,0x97,0x8c,0x0e,0xf8,0xec,0x01,0xed,0x42,
    0x7e,0xa4,0xfc,0x19,0x23,0xd9,0x31,0x6e,0x7e,0xfd,0xb7,0x4a,0x79,0xf8,0x7e,0xa9,
    0x9e,0x57,0xd8,0x18,0x0e,0x71,0x7e,0x5f,0x25,0xbf,0x31,0x67,0xd0,0x87,0x31,0x8e,
    0x1b,0x5d,0xa5,0x2e,0xb8,0xff,0x8a,0x5b,0xf7,0x6e,0xa0,0xbe,0x6f,0xc5,0xf7,0x93,
    0x36,0x47,0xaf,0x0c,0xa8,0x03,0x6e,0x48,0x91,0x36,0xfe,0xe2,0xc6,0xe8,0x4a,0xdd,
    0xbf,0x44,0x5c,0xae,0x0d,0x9a,0x7f,0x3b,0x78,0x0d,0x7c,0x97,0x7f,0xd7,0xe8,0xbb,
    0x5b,0x7c,0x37,0xb4,0xb4,0x42,0x1f,0xbf,0xd4,0x3a,0x6f,0xf8,0x27,0x15,0xda,0x06,
    0x5f,0x72,0xfb,0x89,0x11,0xe9,0x2f,0xbf,0xef,0xba,0x3c,0x25,0xee,0x8b,0x7d,0xab,
    0xf4,0xe7,0x94,0xbc,0xff,0x56,0xe9,0x2f,0x29,0x71,0xff,0xad,0xd2,0x5f,0x53,0xe2,
    0x7e,0x3f,0x73,0x75,0x4a,0xdc,0x7f,0xab,0x74,0xad,0xe4,0xfc,0x7e,0xe6,0xba,0x94,
    0xb8,0xff,0x56,0xe9,0x6f,0x29,0xf5,0xaf,0x73,0xfb,0x99,0x1b,0xa4,0xeb,0xaf,0x9d,
    0xc7,0xa6,0xc4,0xfd,0xb7,0x4a,0x37,0xa6,0xd4,0x1f,0xeb,0x74,0x6f,0x96,0xae,0xff,
    0x56,0x69,0x5c,0x4a,0xdc,0x7f,0xab,0x34,0x3e,0xa5,0xfe,0x38,0xa7,0x7b,0x71,0xfa,
    0xcb,0xef,0xbb,0x6e,0x4d,0x89,0xfb,0x62,0x31,0x9b,0x9c,0x92,0xf7,0x31,0xbb,0x23,
    0x25,0xee,0x63,0x76,0x57,0x4a,0xdc,0xc7,0x6c,0x4a,0x4a,0xdc,0xc7,0xec,0x1e,0xc9,
    0xf9,0x98,0xdd,0x9b,0x12,0xf7,0x31,0x9b,0x9a,0x52,0xff,0x5e,0xe7,0xfb,0x34,0xe9,
    0xfa,0x98,0xdd,0x9f,0x12,0xf7,0x31,0x9b,0x9e,0x52,0xff,0x7e,0xa7,0xfb,0xa0,0x74,
    0x7d,0xcc,0x1e,0x4a,0x89,0xfb,0x98,0x3d,0x9c,0x52,0xff,0xa1,0x34,0xbf,0xdf,0x75,
    0x49,0xca,0x58,0x82,0xc3,0xb3,0x4f,0x7c,0x93,0x7f,0x49,0x9a,0x9f,0x1f,0x4f,0x6b,
    0x6f,0x82,0x67,0xbf,0xf6,0x5c,0xf7,0x99,0x94,0xff,0x9b,0x0b,0x1c,0xde,0x4b,0xc1,
    0xfd,0xe1,0xd9,0x29,0xbf,0xe7,0x6f,0x72,0xdf,0xdd,0xfe,0x33,0x25,0x6e,0x6b,0xeb,
    0x9c,0x94,0xd8,0x50,0xfd,0x4f,0x17,0xcb,0xa5,0x73,0x53,0x72,0xa6,0x37,0xaf,0x4e,
    0x6f,0x7e,0x4a,0xac,0xfe,0xdb,0x8e,0x67,0x53,0x72,0xa6,0xf7,0x7c,0x9d,0xde,0x0b,
    0x29,0xb1,0xfa,0x6f,0x3d,0x5e,0x4c,0xc9,0xd9,0xbb,0x43,0x2f,0xa5,0xec,0xd3,0xc8,
    0x42,0xde,0x9f,0x97,0xd5,0x9f,0x97,0x9c,0xfd,0x57,0x52,0xe2,0xf6,0x2e,0xdf,0x6b,
    0xd2,0x1b,0xed,0xbf,0x01,0x4a,0x29,0xf7,0x5a,0xda,0xfc,0x9d,0xc2,0x05,0x29,0x39,
    0x8b,0xe1,0x9b,0x29,0xff,0x9f,0xcb,0xd3,0xce,0x8f,0x85,0x29,0x71,0xef,0xc7,0xdb,
    0xf2,0x63,0xa1,0xf3,0xe3,0xdf,0x29,0x71,0xf3,0xe3,0x1d,0xe9,0x8d,0x76,0x7b,0xc8,
    0x45,0x29,0xe5,0xde,0x49,0xf3,0x67,0xf6,0x8b,0x53,0xe2,0xfe,0x99,0xfd,0xbb,0x29,
    0x71,0x8c,0x3d,0xfe,0xbf,0xc3,0x83,0x85,0xfc,0xb9,0xf7,0xfb,0x29,0xff,0xe7,0x03,
    0xe2,0xb5,0x20,0xcd,0x9f,0x7b,0x7f,0x90,0x92,0xb3,0xbe,0x7c,0x94,0xd2,0x0e,0xae,
    0x25,0xe7,0xdb,0x77,0x47,0x29,0xe5,0x3e,0x72,0x73,0x69,0x59,0x4a,0x1c,0xe3,0x66,
    0xf7,0xeb,0x97,0xa7,0x1c,0xff,0x65,0xda,0x23,0x02,0x5b,0x99,0xe6,0xcf,0xc1,0x97,
    0xa7,0xf9,0x33,0x68,0x5b,0xdb,0x6e,0x0f,0x98,0xaf,0x4f,0xd4,0xfa,0xd9,0xb5,0x92,
    0xe7,0xe6,0x95,0x3a,0xd7,0x6c,0x6d,0xdd,0x7d,0x3d,0x9c,0xad,0xad,0xa5,0x0a,0x75,
    0x21,0x83,0x5c,0x1e,0x57,0xf2,0x5c,0x0e,0xae,0x31,0x2b,0xc0,0x6a,0x7b,0x91,0x4a,
    0xde,0xdf,0xbd,0xa5,0x03,0x5d,0xbb,0x86,0xea,0x51,0x21,0x6e,0x32,0x3d,0x2b,0x6c,
    0xcf,0xcb,0xf4,0xaa,0x10,0xb7,0xfd,0xf1,0xfe,0x15,0x62,0xd0,0xb5,0x7d,0x6e,0xef,
    0x0a,0xf1,0x1b,0x1a,0xf3,0x3d,0xf3,0x01,0x95,0x7c,0xcf,0x0c,0x1e,0x7b,0xe6,0x1b,
    0x1a,0xf3,0x7d,0xf0,0x81,0x95,0x7c,0x1f,0x0c,0x59,0xdb,0x07,0x1f,0x54,0x21,0x67,
    0xf1,0xef,0x53,0x21,0x36,0xdc,0xcd,0xd7,0xbe,0x15,0xfe,0xdf,0x99,0x3e,0xc2,0xb1,
    0xbe,0x5a,0x9f,0xf1,0x6b,0x6b,0xe8,0x23,0xda,0x63,0x61,0x4d,0xeb,0xab,0xd8,0xcc,
    0x50,0x1c,0xd3,0x0a,0xc7,0xe4,0x1f,0x7a,0x9e,0xb2,0xb1,0x8b,0x23,0xb8,0x4a,0x56,
    0x36,0x92,0xcd,0x4a,0x25,0xff,0x46,0xa0,0x85,0xc6,0xe6,0xf6,0x20,0xbf,0x17,0xd5,
    0xb2,0xc2,0x31,0x02,0x67,0xb9,0x6c,0xc3,0x0a,0xdb,0x07,0x07,0xff,0x36,0x96,0xad,
    0x8d,0xea,0xea,0x1b,0x3b,0x7f,0x1f,0xad,0x52,0x0f,0xed,0xc1,0x6f,0xc8,0x3e,0x20,
    0x7f,0x37,0xab,0xf3,0xb7,0x8d,0xf3,0x17,0xdc,0xe6,0x59,0x69,0x2d,0x9b,0x9b,0x3b,
    0x3f,0xb6,0x94,0x1f,0x6d,0x4a,0x79,0x1f,0xb6,0x76,0x7d,0xb0,0x7b,0x26,0xad,0x2a,
    0xbc,0xce,0x00,0x67,0xe7,0xe3,0x36,0x15,0xea,0xb7,0x92,0xcf,0x6d,0x64,0xbf,0x75,
    0x5d,0xbd,0x8d,0xeb,0xc3,0xe3,0x55,0xea,0x6d,0xae,0x3e,0x40,0xd6,0xf2,0x76,0xdb,
    0x0a,0xfb,0x08,0x99,0x21,0x7a,0x4e,0xd1,0xce,0xcd,0xf5,0xb6,0x95,0xfc,0x9b,0x92,
    0xda,0xfb,0x9b,0x9a,0xb3,0xb3,0x1d,0xb6,0xa3,0xe6,0xf0,0xec,0x42,0xfe,0x6e,0x65,
    0x87,0x0a,0xf1,0x61,0xee,0x3d,0xca,0x8e,0x15,0xea,0x83,0xb3,0x73,0xb0,0x53,0x85,
    0xb8,0xad,0x41,0x9d,0x2b,0x6c,0xbf,0xe0,0xd6,0x9b,0x9d,0x2b,0x94,0xeb,0xec,0xe4,
    0x76,0x95,0x5c,0xd1,0x3d,0x73,0xf9,0x55,0x85,0xb2,0xe0,0x0e,0xcf,0x5a,0xc4,0x3a,
    0x7c,0x6f,0xc0,0xbd,0x11,0xb8,0x46,0xfd,0x7f,0xa2,0x06,0xfd,0x5f,0x1a,0xc4,0xeb,
    0x5a,0xed,0xb1,0xa6,0xba,0x3d,0xd6,0xf7,0xda,0x63,0x8d,0xd3,0xfd,0x1a,0xc3,0x7f,
    0xd0,0x1e,0xeb,0x7b,0xb5,0xeb,0xf5,0xaf,0xd5,0x3e,0x11,0x72,0xef,0x56,0xd9,0x2e,
    0xc6,0x00,0x3a,0x53,0xdd,0xbe,0xf6,0x41,0xe5,0x1c,0xfb,0x0e,0xe1,0x61,0xb7,0xef,
    0x03,0xf7,0x50,0x56,0x1e,0x96,0xcd,0x87,0xdc,0xff,0x3d,0x99,0x11,0xf0,0xff,0x51,
    0x4c,0x73,0xeb,0xe2,0x23,0x01,0xf1,0xcb,0xed,0xdb,0xdd,0x80,0xd8,0xe7,0x2e,0x2f,
    0x3f,0x16,0x10,0x37,0x3b,0x8f,0xcb,0xce,0x44,0x67,0xe7,0x89,0x80,0xb8,0xd9,0x79,
    0x32,0x20,0xe6,0xed,0xcc,0x0c,0x88,0xdb,0xff,0x47,0x99,0x15,0xd0,0xf6,0x4c,0x9d,
    0x73,0xc0,0xfe,0x11,0xf0,0xff,0x76,0xcc,0xd2,0xf5,0x0e,0xfe,0xef,0xd2,0x6c,0xfd,
    0xcf,0xa5,0xc1,0x59,0x1d,0xc7,0x90,0x79,0x57,0xfb,0x6f,0xeb,0xe7,0xc3,0x41,0xf3,
    0xff,0x8d,0x82,0xdf,0x35,0x59,0x84,0xf7,0xcc,0xca,0xff,0x03,0xc9,0xa0,0xdc,0x9e,
    0x90,0x56,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_KHR_shader_subgroup_clustered : enable
// #extension GL_KHR_shader_subgroup_shuffle : enable
//
// layout(local_size_x = 64, local_size_y = 1, local_size_z = 1)in;
// layout(binding = 0)uniform highp usamplerBuffer uInputBuffer;
// layout(binding = 1, rgba32ui)writeonly uniform uimage2D uOutput;
//
// layout(push_constant)uniform imagInfo {
//
//     uint offsetX;
//     uint offsetY;
//     int texelOffset;
//     uint width;
//     uint height;
//     uint alphaBits;
//     uint isSigned;
//     uint isEacRg;
// };
//
// #line 1 "shaders/src/third_party/etc_decoder/etc_decoder.h"
//
//  const ivec2 etc1_color_modifier_table[8]= ivec2[](
//     ivec2(2, 8),
//     ivec2(5, 17),
//     ivec2(9, 29),
//     ivec2(13, 42),
//     ivec2(18, 60),
//     ivec2(24, 80),
//     ivec2(33, 106),
//     ivec2(47, 183));
//
// const ivec4 etc2_alpha_modifier_table[16]= ivec4[](
//     ivec4(2, 5, 8, 14),
//     ivec4(2, 6, 9, 12),
//     ivec4(1, 4, 7, 12),
//     ivec4(1, 3, 5, 12),
//     ivec4(2, 5, 7, 11),
//     ivec4(2, 6, 8, 10),
//     ivec4(3, 6, 7, 10),
//     ivec4(2, 4, 7, 10),
//     ivec4(1, 5, 7, 9),
//     ivec4(1, 4, 7, 9),
//     ivec4(1, 3, 7, 9),
//     ivec4(1, 4, 6, 9),
//     ivec4(2, 3, 6, 9),
//     ivec4(0, 1, 2, 9),
//     ivec4(3, 5, 7, 8),
//     ivec4(2, 4, 6, 8)
// );
//
// const int etc2_distance_table[8]= int[](3, 6, 11, 16, 23, 32, 41, 64);
//
// int decode_etc2_alpha(uvec2 payload, int linear_pixel)
// {
//     int bit_offset = 45 - 3 * linear_pixel;
//
//     int base = int(bitfieldExtract(payload . y, 24, 8));
//
//     int multiplier = int(bitfieldExtract(payload . y, 20, 4));
//     int table = int(bitfieldExtract(payload . y, 16, 4));
//
//     int lsb_index = int(bitfieldExtract(payload[bit_offset >> 5], bit_offset & 31, 2));
//     bit_offset += 2;
//     int msb = int((payload[bit_offset >> 5]>>(bit_offset & 31))& 1u);
//     int mod = etc2_alpha_modifier_table[table][lsb_index]^(msb - 1);
//
//     int a = base + mod * multiplier;
//     return clamp(a, 0, 0xff);
//
// }
//
//  ivec4 DecodeRGB(ivec2 pixel_coord, uvec2 color_payload, int linear_pixel, inout bool punchthrough){
//     int alpha_result = 0xff;
//     ivec3 rgb_result;
//     ivec3 base_rgb;
//     uint flip = color_payload . y & 1u;
//     uint subblock = uint((pixel_coord[flip]& 2)>> 1);
//     bool etc1_compat = false;
//
//     if(alphaBits != 1 &&(color_payload . y & 2u)== 0u)
//     {
//
//         etc1_compat = true;
//         base_rgb = ivec3(color_payload . yyy >>(uvec3(28, 20, 12)- 4u * subblock));
//         base_rgb &= 0xf;
//         base_rgb *= 0x11;
//     }
//     else
//     {
//         int r = int(bitfieldExtract(color_payload . y, 27, 5));
//         int rd = bitfieldExtract(int(color_payload . y), 24, 3);
//         int g = int(bitfieldExtract(color_payload . y, 19, 5));
//         int gd = bitfieldExtract(int(color_payload . y), 16, 3);
//         int b = int(bitfieldExtract(color_payload . y, 11, 5));
//         int bd = bitfieldExtract(int(color_payload . y), 8, 3);
//
//         int r1 = r + rd;
//         int g1 = g + gd;
//         int b1 = b + bd;
//
//         if(uint(r1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 56 - 32, 2))|
//                     (int(bitfieldExtract(color_payload . y, 59 - 32, 2))<< 2);
//             int g1 = int(bitfieldExtract(color_payload . y, 52 - 32, 4));
//             int b1 = int(bitfieldExtract(color_payload . y, 48 - 32, 4));
//             int r2 = int(bitfieldExtract(color_payload . y, 44 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 40 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 36 - 32, 4));
//             uint da =(bitfieldExtract(color_payload . y, 34 - 32, 2)<< 1)|
//                     (color_payload . y & 1u);
//             int dist = etc2_distance_table[da];
//
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//             int index = msb | lsb;
//
//             if(punchthrough)
//                 punchthrough = index == 2;
//
//             if(index == 0)
//             {
//                 rgb_result = ivec3(r1, g1, b1);
//                 rgb_result *= 0x11;
//             }
//             else
//             {
//                 int mod = 2 - index;
//                 ivec3 rgb = ivec3(r2, g2, b2)* 0x11 + mod * dist;
//                 rgb_result = ivec3(clamp(rgb, ivec3(0), ivec3(255)));
//             }
//         }
//         else if(uint(g1)> 31u)
//         {
//             int r1 = int(bitfieldExtract(color_payload . y, 59 - 32, 4));
//             int g1 =(int(bitfieldExtract(color_payload . y, 56 - 32, 3))<< 1)|
//                     int((color_payload . y >> 20u)& 1u);
//             int b1 = int(bitfieldExtract(color_payload . y, 47 - 32, 3))|
//                     int((color_payload . y >> 16u)& 8u);
//             int r2 = int(bitfieldExtract(color_payload . y, 43 - 32, 4));
//             int g2 = int(bitfieldExtract(color_payload . y, 39 - 32, 4));
//             int b2 = int(bitfieldExtract(color_payload . y, 35 - 32, 4));
//             uint da = color_payload . y & 4u;
//             uint db = color_payload . y & 1u;
//             uint d = da + 2u * db;
//             d += uint((r1 * 0x10000 + g1 * 0x100 + b1)>=(r2 * 0x10000 + g2 * 0x100 + b2));
//             int dist = etc2_distance_table[d];
//             int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//             int lsb = int((color_payload . x >> linear_pixel)& 1u);
//
//             if(punchthrough)
//                 punchthrough =(msb + lsb)== 2;
//
//             ivec3 base = msb != 0 ? ivec3(r2, g2, b2): ivec3(r1, g1, b1);
//             base *= 0x11;
//             int mod = 1 - 2 * lsb;
//             base += mod * dist;
//             rgb_result = ivec3(clamp(base, ivec3(0), ivec3(0xff)));
//         }
//         else if(uint(b1)> 31u)
//         {
//
//             int r = int(bitfieldExtract(color_payload . y, 57 - 32, 6));
//             int g = int(bitfieldExtract(color_payload . y, 49 - 32, 6))|
//                     (int(color_payload . y >> 18)& 0x40);
//             int b = int(bitfieldExtract(color_payload . y, 39 - 32, 3))|
//                     (int(bitfieldExtract(color_payload . y, 43 - 32, 2))<< 3)|
//                     (int(color_payload . y >> 11)& 0x20);
//             int rh = int(color_payload . y & 1u)|
//                     (int(bitfieldExtract(color_payload . y, 2, 5))<< 1);
//             int rv = int(bitfieldExtract(color_payload . x, 13, 6));
//             int gh = int(bitfieldExtract(color_payload . x, 25, 7));
//             int gv = int(bitfieldExtract(color_payload . x, 6, 7));
//             int bh = int(bitfieldExtract(color_payload . x, 19, 6));
//             int bv = int(bitfieldExtract(color_payload . x, 0, 6));
//
//             r =(r << 2)|(r >> 4);
//             rh =(rh << 2)|(rh >> 4);
//             rv =(rv << 2)|(rv >> 4);
//             g =(g << 1)|(g >> 6);
//             gh =(gh << 1)|(gh >> 6);
//             gv =(gv << 1)|(gv >> 6);
//             b =(b << 2)|(b >> 4);
//             bh =(bh << 2)|(bh >> 4);
//             bv =(bv << 2)|(bv >> 4);
//
//             ivec3 rgb = ivec3(r, g, b);
//             ivec3 dx = ivec3(rh, gh, bh)- rgb;
//             ivec3 dy = ivec3(rv, gv, bv)- rgb;
//             dx *= int(pixel_coord . x);
//             dy *= int(pixel_coord . y);
//             rgb = rgb +((dx + dy + 2)>> 2);
//             rgb = clamp(rgb, ivec3(0), ivec3(255));
//             rgb_result = ivec3(rgb);
//
//             punchthrough = false;
//
//         }
//         else
//         {
//
//             etc1_compat = true;
//             base_rgb = ivec3(r, g, b)+ int(subblock)* ivec3(rd, gd, bd);
//             base_rgb =(base_rgb << 3)|(base_rgb >> 2);
//         }
//     }
//
//     if(etc1_compat)
//     {
//         uint etc1_table_index = bitfieldExtract(color_payload . y, 5 - 3 * int(subblock != 0u), 3);
//         int msb = int((color_payload . x >>(15 + linear_pixel))& 2u);
//         int lsb = int((color_payload . x >> linear_pixel)& 1u);
//         int sgn = 1 - msb;
//
//         if(punchthrough)
//         {
//             sgn *= lsb;
//             punchthrough =(msb + lsb)== 2;
//         }
//
//         int offset = etc1_color_modifier_table[etc1_table_index][lsb]* sgn;
//         base_rgb = clamp(base_rgb + offset, ivec3(0), ivec3(255));
//         rgb_result = ivec3(base_rgb);
//     }
//
//     if(alphaBits == 1 && punchthrough)
//     {
//         rgb_result = ivec3(0);
//         alpha_result = 0;
//     }
//
//     return ivec4(rgb_result . r, rgb_result . g, rgb_result . b, alpha_result);
// }
// #line 77 "shaders/src/EtcToBc.comp"
//
// ivec2 build_coord()
// {
//     uvec2 base =(gl_WorkGroupID . xy)* 8;
//     uint blockid = gl_LocalInvocationID . x >> 4u;
//     uint blockxy = gl_LocalInvocationID . x & 0xfu;
//     base . x += 4 *(blockid & 0x1);
//     base . y += 2 *(blockid & 0x2);
//     base += uvec2(blockxy & 0x3, blockxy >> 0x2);
//     return ivec2(base);
// }
//
// uint flip_endian(uint v)
// {
//     uvec4 words = uvec4(v)>> uvec4(0, 8, 16, 24);
//     words &= 0xffu;
//     return(words . x << 24u)|(words . y << 16u)|(words . z << 8u)|(words . w << 0u);
// }
//
// uvec2 flip_endian(uvec2 v)
// {
//     return uvec2(flip_endian(v . y), flip_endian(v . x));
// }
//
// uint GetIndicesRGB(vec3 color, vec3 minColor, vec3 maxColor, bool transparent)
// {
//     vec3 dir = maxColor - minColor;
//     float distMin = dot(minColor, dir);
//     float distMax = dot(maxColor, dir);
//     float dist = dot(color, dir);
//     int ind = int(round(clamp((dist - distMin)/(distMax - distMin), 0.0, 1.0)*(transparent ? 2.0 : 3.0)));
//
//     return bitfieldExtract(transparent ? 0x18u : 0x2du, ind * 2, 2);
// }
//
// void ComputeMaxMinColor(uvec3 rgbColor, inout uvec3 minColor, inout uvec3 maxColor){
//     ivec3 dx;
//     if(alphaBits == 1){
//         int count = subgroupClusteredAdd(1, 16);
//         ivec3 avg = ivec3((subgroupClusteredAdd(rgbColor, 16)* 2 + count)/(2 * count));
//         dx = ivec3(rgbColor)- avg;
//     }
//     else {
//         dx = ivec3(rgbColor)- ivec3(subgroupClusteredAdd(rgbColor, 16)+ 8 >> 4);
//     }
//     vec3 cov0 = vec3(subgroupClusteredAdd(dx . r * dx, 16));
//     vec3 cov1 = vec3(subgroupClusteredAdd(dx . ggb * dx . gbb, 16));
//     vec3 vg = vec3(subgroupClusteredMax(rgbColor, 16)- subgroupClusteredMin(rgbColor, 16));
//
//     mat3 covMat = mat3(cov0,
//                        vec3(cov0 . y, cov1 . xy),
//                        vec3(cov0 . z, cov1 . yz));
//
//     float eigenvalue = 0.0f;
//     for(int i = 0;i < 4;i ++){
//         vg = covMat * vg;
//         eigenvalue = sqrt(dot(vg, vg));
//         if(eigenvalue > 0.0f){
//             float invNorm = 1.0f / eigenvalue;
//             vg *= invNorm;
//         }
//     }
//     const float kDefaultLuminanceThreshold = 4.0f * 255;
//     const float kQuantizeRange = 0.512f;
//
//     if(eigenvalue < kDefaultLuminanceThreshold){
//         vg = vec3(0.299f, 0.587f, 0.114f);
//     }
//     else {
//         float magn = max(max(abs(vg . r), abs(vg . g)), abs(vg . b));
//         vg *= kQuantizeRange / magn;
//     }
//     float dist = dot(vec3(rgbColor), vg);
//     float min_dist = subgroupClusteredMin(dist, 16);
//     float max_dist = subgroupClusteredMax(dist, 16);
//     uvec2 indices = uvec2(dist == min_dist ? gl_SubgroupInvocationID : 0,
//                           dist == max_dist ? gl_SubgroupInvocationID : 0);
//     uvec2 minMaxIndex = subgroupClusteredMax(indices, 16);
//     minColor = subgroupShuffle(rgbColor, minMaxIndex . x);
//     maxColor = subgroupShuffle(rgbColor, minMaxIndex . y);
// }
//
// uint GetIndicesAlpha(int alpha, int minAlpha, int maxAlpha)
// {
//     float dist = float(maxAlpha - minAlpha);
//     int ind = int(round(clamp((alpha - minAlpha)/ dist * 7.0f, 0.0, 7.0)));
//
//     return bitfieldExtract(0x2345671u, ind * 4, 4);
// }
//
// void ComputeMaxMin(int alpha, inout int minAlpha, inout int maxAlpha){
//     minAlpha = subgroupClusteredMin(alpha, 16);
//     maxAlpha = subgroupClusteredMax(alpha, 16);
// }
// uvec2 EncodeBC4(int value, uint pid){
//     int minValue, maxValue;
//     ComputeMaxMin(value, minValue, maxValue);
//     uint indices = 0;
//     if(minValue != maxValue)
//         indices = GetIndicesAlpha(value, minValue, maxValue);
//
//     uvec2 mask = uvec2(pid <= 5 ? indices <<(16 + 3 * pid): 0x0,
//                         pid >= 5 ?(indices << 29)>>(45 - 3 * pid): 0x0);
//
//     mask = subgroupClusteredOr(mask, 16);
//     return uvec2((maxValue & 0xff)|((minValue & 0xff)<< 8)| mask . x, mask . y);
// }
//
// uvec3 scaleColorToRGB565(uvec3 color){
//     return uvec3(round(vec3(color)* vec3(31.0 / 255.0, 63.0 / 255.0, 31.0 / 255.0)));
// }
//
// uvec3 convertRGB565ToRGB888(uvec3 color){
//     return uvec3(color . x << 3 |(color . x >> 2),
//                  color . y << 2 |(color . y >> 4),
//                  color . z << 3 |(color . z >> 2));
// }
//
// uint packRGB565(uvec3 color565){
//      return color565 . r << 11 |(color565 . g << 5)| color565 . b;
// }
//
// void modifyMinMax(inout uvec3 minColor, inout uvec3 maxColor){
//     uvec3 minColor565 = scaleColorToRGB565(minColor);
//     uvec3 maxColor565 = scaleColorToRGB565(maxColor);
//     if(all(equal(minColor565, maxColor565))){
//         uvec3 simulatedColor = convertRGB565ToRGB888(minColor565);
//         ivec3 signMax = sign(ivec3(maxColor)- ivec3(simulatedColor));
//         ivec3 signMin = sign(ivec3(minColor)- ivec3(simulatedColor));
//         bvec3 needCorrect = greaterThan(signMax * signMin, ivec3(0, 0, 0));
//         bvec3 positive = greaterThan(signMin, ivec3(0, 0, 0));
//         maxColor565 . r += needCorrect . r && positive . r ? 1 : 0;
//         maxColor565 . g += needCorrect . g && positive . g ? 1 : 0;
//         maxColor565 . b += needCorrect . b && positive . b ? 1 : 0;
//         minColor565 . r -= needCorrect . r && ! positive . r ? 1 : 0;
//         minColor565 . g -= needCorrect . g && ! positive . g ? 1 : 0;
//         minColor565 . b -= needCorrect . b && ! positive . b ? 1 : 0;
//     }
//     minColor = minColor565;
//     maxColor = maxColor565;
// }
//
// void swap(inout uint a, inout uint b){
//     uint t = a;
//     a = b;
//     b = t;
// }
//
// void main()
// {
//     ivec2 coord = build_coord();
//     if(any(greaterThanEqual(coord, ivec2(width, height))))
//         return;
//
//     ivec2 tile_coord = coord >> 2;
//     ivec2 pixel_coord = coord & 3;
//     int linear_pixel = 4 * pixel_coord . x + pixel_coord . y;
//     int pid = 4 * pixel_coord . y + pixel_coord . x;
//     uvec4 payload = texelFetch(uInputBuffer, tile_coord . y * int((width + 3)>> 2)+ tile_coord . x + texelOffset);
//
//     ivec4 result;
//
//     uvec2 color_payload;
//     if(alphaBits == 8)
//         color_payload = flip_endian(payload . zw);
//     else
//         color_payload = flip_endian(payload . xy);
//
//     bool nonOpaque = alphaBits == 1 &&(color_payload . y & 2u)== 0u;
//     bool punchthrough = nonOpaque;
//     result = DecodeRGB(pixel_coord, color_payload, linear_pixel, punchthrough);
//
//     uvec4 finalResult;
//
//     uvec3 minColor, maxColor;
//     uint indices = 0;
//     uint color565 = 0;
//
//     bool controlFlag = alphaBits != 1 || result . a > 0;
//     if(controlFlag)
//     {
//         ComputeMaxMinColor(uvec3(result . r, result . g, result . b), minColor, maxColor);
//         modifyMinMax(minColor, maxColor);
//         uint minColor565 = packRGB565(minColor);
//         uint maxColor565 = packRGB565(maxColor);
//
//         if(minColor565 != maxColor565){
//             indices = GetIndicesRGB(vec3(result . r, result . g, result . b),
//                                     vec3(convertRGB565ToRGB888(minColor)),
//                                     vec3(convertRGB565ToRGB888(maxColor)),
//                                     nonOpaque);
//         }
//         bool flip = maxColor565 < minColor565;
//         if(flip){
//             indices ^= 1;
//
//             if(nonOpaque && indices == 3){
//                 indices = 2;
//             }
//         }
//         if(flip != nonOpaque)
//             swap(maxColor565, minColor565);
//         color565 = maxColor565 |(minColor565 << 16);
//     }
//     if(alphaBits == 1){
//         int active_lane_index = subgroupClusteredMax(controlFlag ? int(gl_SubgroupInvocationID): - 1, 16);
//         if(active_lane_index != - 1){
//             color565 = subgroupShuffle(color565, active_lane_index);
//         }
//         if(punchthrough && result . a == 0){
//             indices = 3;
//         }
//     }
//     uint mask = subgroupClusteredOr(indices <<(2 * pid), 16);
//     if(alphaBits == 8){
//         finalResult . b = color565;
//         finalResult . a = mask;
//         uvec2 alpha_payload = flip_endian(payload . xy);
//         result . a = decode_etc2_alpha(alpha_payload, linear_pixel);
//         finalResult . rg = EncodeBC4(result . a, pid);
//     }
//     else {
//         finalResult . r = color565;
//         finalResult . g = mask;
//     }
//
//     if(pid == 0){
//         tile_coord += ivec2(offsetX / 4, offsetY / 4);
//         imageStore(uOutput, tile_coord, finalResult);
//     }
//
// }
