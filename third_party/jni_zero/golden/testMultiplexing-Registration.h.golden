// Copyright 2017 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_registration_generator.py
// Please do not change its content.

#ifndef TEMP_DIR_HEADER_
#define TEMP_DIR_HEADER_

#include <jni.h>

#include <iterator>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_int_wrapper.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations (classes).


// Step 2: Forward declarations (methods).

JNI_BOUNDARY_EXPORT jobject Java_J_N_MxkAf2fl(
    JNIEnv* env,
    jclass jcaller,
    jobject sample);
JNI_BOUNDARY_EXPORT void Java_J_N_Md6LK1o9(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jboolean Java_J_N_M_000244zYzAg(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jclass Java_J_N_M4l0zJba(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_MKH66mnL(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_J_N_Mvc7ImXr(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_MocgXEXX(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jstring Java_J_N_M3yd9YCr(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_M_1qL1Hyw(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_J_N_MxvVNTxJ(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_MJLr_000245QK(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jthrowable Java_J_N_MXcljN68(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_M1FJFJy5(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jstring Java_J_N_MGrgOT84(
    JNIEnv* env,
    jclass jcaller,
    jstring stringToReverse);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_MMtgBdva(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray strs);
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_MPVz5ily(
    JNIEnv* env,
    jclass jcaller,
    jobjectArray strs);
JNI_BOUNDARY_EXPORT jintArray Java_J_N_MHRNkgW8(
    JNIEnv* env,
    jclass jcaller,
    jint zint,
    jintArray ints,
    jlong zlong,
    jlongArray longs,
    jshort zshort,
    jshortArray shorts,
    jchar zchar,
    jcharArray chars,
    jbyte zbyte,
    jbyteArray bytes,
    jdouble zdouble,
    jdoubleArray doubles,
    jfloat zfloat,
    jfloatArray floats,
    jboolean zbool,
    jbooleanArray bools);
JNI_BOUNDARY_EXPORT void Java_J_N_MEbp5PPc(
    JNIEnv* env,
    jclass jcaller,
    jclass clazz,
    jobjectArray classes,
    jthrowable throwable,
    jobjectArray throwables,
    jstring string,
    jobjectArray strings,
    jobject tStruct,
    jobjectArray structs,
    jobject obj,
    jobjectArray objects);


JNI_BOUNDARY_EXPORT void Java_J_N_resolve_1for_1void_1LLATTARRAOOAOOA(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jclass class_param1, jobjectArray class_array_param1, jthrowable throwable_param1, jobjectArray throwable_array_param1, jstring string_param1, jobjectArray string_array_param1, jobject object_param1, jobjectArray object_array_param1, jobject object_param2, jobjectArray object_array_param2) {
        switch (switch_num) {
          
          case 1277466747063181146:
            return Java_J_N_MEbp5PPc(env, jcaller, class_param1, class_array_param1, throwable_param1, throwable_array_param1, string_param1, string_array_param1, object_param1, object_array_param1, object_param2, object_array_param2);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1void_1LLATTARRAOOAOOA was called with an invalid switch number: " << switch_num;
            return;
        }
}
JNI_BOUNDARY_EXPORT jintArray Java_J_N_resolve_1for_1int_1array_1IIAJJASSACCABBADDAFFAZZA(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jint int_param1, jintArray int_array_param1, jlong long_param1, jlongArray long_array_param1, jshort short_param1, jshortArray short_array_param1, jchar char_param1, jcharArray char_array_param1, jbyte byte_param1, jbyteArray byte_array_param1, jdouble double_param1, jdoubleArray double_array_param1, jfloat float_param1, jfloatArray float_array_param1, jboolean boolean_param1, jbooleanArray boolean_array_param1) {
        switch (switch_num) {
          
          case 2095128758736799674:
            return Java_J_N_MHRNkgW8(env, jcaller, int_param1, int_array_param1, long_param1, long_array_param1, short_param1, short_array_param1, char_param1, char_array_param1, byte_param1, byte_array_param1, double_param1, double_array_param1, float_param1, float_array_param1, boolean_param1, boolean_array_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1int_1array_1IIAJJASSACCABBADDAFFAZZA was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jclass Java_J_N_resolve_1for_1class(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -2135494411232619400:
            return Java_J_N_M4l0zJba(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1class was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobject Java_J_N_resolve_1for_1object(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -4769654393820622682:
            return Java_J_N_Mvc7ImXr(env, jcaller);
          
          case -4110294082898514797:
            return Java_J_N_MxvVNTxJ(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1object was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jstring Java_J_N_resolve_1for_1string(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -2366785227171092261:
            return Java_J_N_M3yd9YCr(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1string was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jstring Java_J_N_resolve_1for_1string_1R(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jstring string_param1) {
        switch (switch_num) {
          
          case 1925304576625325361:
            return Java_J_N_MGrgOT84(env, jcaller, string_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1string_1R was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jthrowable Java_J_N_resolve_1for_1throwable(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case 6758041806660001267:
            return Java_J_N_MXcljN68(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1throwable was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1class_1array(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case 2917974781097758672:
            return Java_J_N_MKH66mnL(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1class_1array was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1object_1array(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -6789151074502104874:
            return Java_J_N_MocgXEXX(env, jcaller);
          
          case 2646707990576644715:
            return Java_J_N_MJLr_000245QK(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1object_1array was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1object_1array_1OA(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jobjectArray object_array_param1) {
        switch (switch_num) {
          
          case 3663679907322354778:
            return Java_J_N_MMtgBdva(env, jcaller, object_array_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1object_1array_1OA was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1string_1array(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -98246727617655206:
            return Java_J_N_M_1qL1Hyw(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1string_1array was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1string_1array_1RA(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jobjectArray string_array_param1) {
        switch (switch_num) {
          
          case 4421683306824100923:
            return Java_J_N_MPVz5ily(env, jcaller, string_array_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1string_1array_1RA was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobjectArray Java_J_N_resolve_1for_1throwable_1array(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -3147377154995757672:
            return Java_J_N_M1FJFJy5(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1throwable_1array was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT jboolean Java_J_N_resolve_1for_1boolean(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case -320643102627558484:
            return Java_J_N_M_000244zYzAg(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1boolean was called with an invalid switch number: " << switch_num;
            return {};
        }
}
JNI_BOUNDARY_EXPORT void Java_J_N_resolve_1for_1void(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num) {
        switch (switch_num) {
          
          case 8620675659615840065:
            return Java_J_N_Md6LK1o9(env, jcaller);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1void was called with an invalid switch number: " << switch_num;
            return;
        }
}
JNI_BOUNDARY_EXPORT jobject Java_J_N_resolve_1for_1object_1O(
    JNIEnv* env,
    jclass jcaller,
    jlong switch_num, jobject object_param1) {
        switch (switch_num) {
          
          case -4161291034639552194:
            return Java_J_N_MxkAf2fl(env, jcaller, object_param1);
          
          default:
            CHECK(false) << "JNI multiplexing function Java_J_N_resolve_1for_1object_1O was called with an invalid switch number: " << switch_num;
            return {};
        }
}

#endif  // TEMP_DIR_HEADER_
