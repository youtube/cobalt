// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// A module for a prototype of the Read Anything feature. Read Anything is an
// untrusted WebUI.
module read_anything.mojom;

import "skia/public/mojom/skcolor.mojom";
import "ui/accessibility/mojom/ax_event.mojom";
import "ui/accessibility/mojom/ax_tree_id.mojom";
import "ui/accessibility/mojom/ax_tree_update.mojom";
import "url/mojom/url.mojom";
import "mojo/public/mojom/base/values.mojom";

// Used to represent the current user choices for the Read Anything visual
// presentation/theme. This includes font name, size, spacing, and colors.
struct ReadAnythingTheme {
  // The name of the user's font choice.
  string font_name;

  // The px value of the user's font size.
  float font_size;

  // The various colors of the user's chosen theme.
  skia.mojom.SkColor foreground_color;
  skia.mojom.SkColor background_color;

  // The enum value of the user's line spacing choice
  read_anything.mojom.LineSpacing line_spacing;

  // The enum value of the user's letter spacing choice.
  read_anything.mojom.LetterSpacing letter_spacing;
};

// Used by the untrusted WebUI page to bootstrap bidirectional communication.
interface UntrustedPageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreateUntrustedPageHandler(pending_remote<UntrustedPage> page,
                             pending_receiver<UntrustedPageHandler> handler);
};

// Used as identifiers for the Read Anything theme options.
// Next value: 5
[Extensible, Stable, Uuid="03f38cfc-a34f-460a-a0a7-faf711f11a64"]
enum Colors {
  [Default]kDefault = 0,
  kLight = 1,
  kDark = 2,
  kYellow = 3,
  [MinVersion=1] kBlue = 4,
};

[Extensible, Stable, Uuid="2B5C793A-D81E-4C76-8CDF-695C7E0A30E2",
 RenamedFrom="read_anything.mojom.Spacing"]
enum LetterSpacing {
  kTightDeprecated = 0,
  [Default]kStandard = 1,
  kWide = 2,
  kVeryWide = 3,
};

[Extensible, Stable, Uuid="49212e28-ae8a-4244-94df-0cbb7fcdf5bc",
 RenamedFrom="read_anything.mojom.Spacing"]
enum LineSpacing {
  kTightDeprecated = 0,
  kStandard = 1,
  [Default]kLoose = 2,
  kVeryLoose = 3,
};

[Extensible, Stable, Uuid="b8c27619-fe28-44a6-bb89-f4eda846b0f8"]
// Granularity used for highlighting text as it's spoken.
enum HighlightGranularity {
  [Default]kOn = 0,
  kOff = 1,
};

// Browser-side handler for requests from untrusted WebUI page.
interface UntrustedPageHandler {
  // Informs the browser controller that a user tried to copy text from the
  // WebUI. If the main page allows copy commands, then the current selection
  // on the main page will be copied to the user's clipboard. Note that even
  // though selections on the main page and WebUI are in sync, the resulting
  // content in the user's clipboard may not exactly match what is selected in
  // the WebUI. This is because the main page selection may contain images,
  // captions, etc that are not shown in reading mode's simplified view.
  OnCopy();

  // Informs the browser controller that the user updated the line spacing via
  // the webui toolbar.
  OnLineSpaceChange(read_anything.mojom.LineSpacing line_spacing);

  // Informs the browser controller that the user updated the letter spacing via
  // the webui toolbar.
  OnLetterSpaceChange(read_anything.mojom.LetterSpacing letter_spacing);

  // Informs the browser controller that the user updated the font name via
  // the webui toolbar.
  OnFontChange(string font);

  // Informs the browser controller that the user updated the font size via
  // the webui toolbar.
  OnFontSizeChange(double font_size);

  // Informs the browser controller that the user updated the color theme via
  // the webui toolbar.
  OnColorChange(read_anything.mojom.Colors color);

  // Informs the browser controller that the user updated the speech rate via
  // the webui toolbar. rate is a multiplicative scale where 1 is the baseline,
  // and 2 is twice as fast, 0.5 is half as fast. See
  // https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/rate
  OnSpeechRateChange(double rate);

  // Informs the browser controller that the user updated the voice used for
  // speech via the webui toolbar. lang is the language code that voice is for.
  OnVoiceChange(string voice, string lang);

  // Informs the browser controller that the user updated the granularity of
  // the highlight that follows along with speech via the webui toolbar.
  OnHighlightGranularityChanged(read_anything.mojom.HighlightGranularity granularity);

  // Informs the browser controller that a link was clicked in the WebUI. The
  // browser controller responds by performing a click action on the link in
  // the target tree, which is in the main frame of the currently active web
  // contents. Target_tree_id is the AXTreeID that contains the link to be
  // clicked; target_node_id is the AXNodeID of the link node.
  OnLinkClicked(ax.mojom.AXTreeID target_tree_id, int32 target_node_id);

  // Informs the browser controller that a selection was made in the WebUI. The
  // browser controller responds by making a matching selection in the target
  // tree, which is in the main frame of the currently active web contents.
  // Target_tree_id is the AXTreeID that contains the link to be clicked;
  // anchor_node_id and focus_node_id are AXNodeIDs which identify the anchor
  // and focus AXNodes of the selection; anchor_offset and focus_offset are
  // integer offsets in the selection.
  OnSelectionChange(
    ax.mojom.AXTreeID target_tree_id,
    int32 anchor_node_id,
    int32 anchor_offset,
    int32 focus_node_id,
    int32 focus_offset);

  // Informs the browser to collapse the selection made in the WebUI.
  OnCollapseSelection();

  // Informs the browser controller to enable accessibility on target_tree_id.
  // This is used on PDF web contents so the app controller can receive
  // information from a PDF.
  EnablePDFContentAccessibility(ax.mojom.AXTreeID target_tree_id);
};

// Untrusted WebUI-side handler for requests from the browser.
interface UntrustedPage {
  // Send an accessibility event notification to the WebUI. The WebUI
  // unserializes the updates and stores a copy of the tree with ID tree_id in
  // a map.
  AccessibilityEventReceived(ax.mojom.AXTreeID tree_id,
                             array<ax.mojom.AXTreeUpdate> updates,
                             array<ax.mojom.AXEvent> events);

  // Sends the active AXTreeID to the WebUI. This is not guaranteed to be called
  // after the tree_id was previously passed to AccessibilityEventsReceived.
  // ukm_source_id is a ukm::SourceId which is used to tie the UKM event to the
  // main frame URL for metrics collection.
  // force_update_state, if true, will force the WebUI to update, even if
  // tree_id did not change. This is used for PDFs, in
  // EnablePDFContentAccessibility, since the tree id of the main web contents
  // is sent back to the WebUI (not the tree id of the pdf web contents). In
  // this case, the tree_id will not be different from what is already stored
  // in the model, but an update will still be needed since the WebUI will be
  // getting information from the pdf web contents now.
  OnActiveAXTreeIDChanged(ax.mojom.AXTreeID tree_id,
                          int64 ukm_source_id,
                          url.mojom.Url url,
                          bool force_update_state);

  // Notifies the WebUI that an AXTree with the provided AXTreeID was
  // destroyed. This is not guaranteed to be called after the tree_id was
  // previously passed to AccessibilityEventsReceived.
  OnAXTreeDestroyed(ax.mojom.AXTreeID tree_id);

  // Send an updated theme to the WebUI.
  OnThemeChanged(ReadAnythingTheme new_theme);

  // Send an updated default language code to the WebUI.
  SetDefaultLanguageCode(string code);

  // Send the settings values stored in prefs to the WebUI. voices maps
  // language to voice name
  OnSettingsRestoredFromPrefs(read_anything.mojom.LineSpacing line_spacing,
                           read_anything.mojom.LetterSpacing letter_spacing,
                           string font,
                           double font_size,
                           read_anything.mojom.Colors color,
                           double speech_rate,
                           mojo_base.mojom.DictionaryValue voices,
                           read_anything.mojom.HighlightGranularity granularity);

  // Notifies the WebUI that the ScreenAI service is ready on this device.
  [EnableIf=enable_screen_ai_service]
  ScreenAIServiceReady();
};
