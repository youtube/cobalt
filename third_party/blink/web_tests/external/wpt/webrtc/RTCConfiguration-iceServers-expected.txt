This is a testharness.js-based test.
Found 59 tests; 51 PASS, 8 FAIL, 0 TIMEOUT, 0 NOTRUN.
PASS new RTCPeerConnection() should have default configuration.iceServers of undefined
PASS new RTCPeerConnection(config) - {} should succeed
PASS setConfiguration(config) - {} should succeed
PASS new RTCPeerConnection(config) - { iceServers: null } should throw TypeError
PASS setConfiguration(config) - { iceServers: null } should throw TypeError
PASS new RTCPeerConnection(config) - { iceServers: undefined } should succeed
PASS setConfiguration(config) - { iceServers: undefined } should succeed
PASS new RTCPeerConnection(config) - { iceServers: [] } should succeed
PASS setConfiguration(config) - { iceServers: [] } should succeed
PASS new RTCPeerConnection(config) - { iceServers: [null] } should throw TypeError
PASS setConfiguration(config) - { iceServers: [null] } should throw TypeError
PASS new RTCPeerConnection(config) - { iceServers: [undefined] } should throw TypeError
PASS setConfiguration(config) - { iceServers: [undefined] } should throw TypeError
PASS new RTCPeerConnection(config) - { iceServers: [{}] } should throw TypeError
PASS setConfiguration(config) - { iceServers: [{}] } should throw TypeError
PASS new RTCPeerConnection(config) - with stun server should succeed
PASS setConfiguration(config) - with stun server should succeed
PASS new RTCPeerConnection(config) - with stun server array should succeed
PASS setConfiguration(config) - with stun server array should succeed
PASS new RTCPeerConnection(config) - with 2 stun servers should succeed
PASS setConfiguration(config) - with 2 stun servers should succeed
PASS new RTCPeerConnection(config) - with turn server, username, credential should succeed
PASS setConfiguration(config) - with turn server, username, credential should succeed
FAIL new RTCPeerConnection(config) - with turns server and empty string username, credential should succeed Failed to construct 'RTCPeerConnection': ICE server parsing failed: TURN server with empty username or password
FAIL setConfiguration(config) - with turns server and empty string username, credential should succeed Failed to execute 'setConfiguration' on 'RTCPeerConnection': Could not update the PeerConnection with the given configuration.
FAIL new RTCPeerConnection(config) - with turn server and empty string username, credential should succeed Failed to construct 'RTCPeerConnection': ICE server parsing failed: TURN server with empty username or password
FAIL setConfiguration(config) - with turn server and empty string username, credential should succeed Failed to execute 'setConfiguration' on 'RTCPeerConnection': Could not update the PeerConnection with the given configuration.
PASS new RTCPeerConnection(config) - with one turns server, one turn server, username, credential should succeed
PASS setConfiguration(config) - with one turns server, one turn server, username, credential should succeed
PASS new RTCPeerConnection(config) - with turn server and no credentials should throw InvalidAccessError
PASS setConfiguration(config) - with turn server and no credentials should throw InvalidAccessError
PASS new RTCPeerConnection(config) - with turn server and only username should throw InvalidAccessError
PASS setConfiguration(config) - with turn server and only username should throw InvalidAccessError
PASS new RTCPeerConnection(config) - with turn server and only credential should throw InvalidAccessError
PASS setConfiguration(config) - with turn server and only credential should throw InvalidAccessError
PASS new RTCPeerConnection(config) - with turns server and no credentials should throw InvalidAccessError
PASS setConfiguration(config) - with turns server and no credentials should throw InvalidAccessError
PASS new RTCPeerConnection(config) - with turns server and only username should throw InvalidAccessError
PASS setConfiguration(config) - with turns server and only username should throw InvalidAccessError
PASS new RTCPeerConnection(config) - with turns server and only credential should throw InvalidAccessError
PASS setConfiguration(config) - with turns server and only credential should throw InvalidAccessError
PASS new RTCPeerConnection(config) - with "" url should throw SyntaxError
PASS setConfiguration(config) - with "" url should throw SyntaxError
PASS new RTCPeerConnection(config) - with ["stun:stun1.example.net", ""] url should throw SyntaxError
PASS setConfiguration(config) - with ["stun:stun1.example.net", ""] url should throw SyntaxError
PASS new RTCPeerConnection(config) - with relative url should throw SyntaxError
PASS setConfiguration(config) - with relative url should throw SyntaxError
PASS new RTCPeerConnection(config) - with http url should throw SyntaxError
PASS setConfiguration(config) - with http url should throw SyntaxError
PASS new RTCPeerConnection(config) - with invalid turn url should throw SyntaxError
PASS setConfiguration(config) - with invalid turn url should throw SyntaxError
PASS new RTCPeerConnection(config) - with invalid stun url should throw SyntaxError
PASS setConfiguration(config) - with invalid stun url should throw SyntaxError
PASS new RTCPeerConnection(config) - with empty urls should throw SyntaxError
PASS setConfiguration(config) - with empty urls should throw SyntaxError
FAIL new RTCPeerConnection(config) - with url field should throw TypeError assert_throws_js: function "() =>
      makePc({ iceServers: [{
        url: 'stun:stun1.example.net'
      }] })" did not throw
FAIL setConfiguration(config) - with url field should throw TypeError assert_throws_js: function "() =>
      makePc({ iceServers: [{
        url: 'stun:stun1.example.net'
      }] })" did not throw
FAIL new RTCPeerConnection(config) - with turns server, and object credential should throw InvalidAccessError assert_throws_dom: function "() =>
      makePc({ iceServers: [{
        urls: 'turns:turn.example.org',
        username: 'user',
        credential: {
          macKey: '',
          accessToken: ''
        }
      }] })" did not throw
FAIL setConfiguration(config) - with turns server, and object credential should throw InvalidAccessError assert_throws_dom: function "() =>
      makePc({ iceServers: [{
        urls: 'turns:turn.example.org',
        username: 'user',
        credential: {
          macKey: '',
          accessToken: ''
        }
      }] })" did not throw
Harness: the test ran to completion.

