// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000018.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000018[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x57,0x6d,0x68,0x96,0x65,
    0x14,0x7e,0xce,0xfb,0xee,0xc3,0x8f,0x4d,0x57,0x73,0x53,0x73,0x89,0x65,0xa6,0x34,
    0x1d,0x53,0xb7,0xda,0x5c,0xcb,0x85,0x1f,0x8b,0x32,0x3f,0xaa,0x1f,0x81,0x96,0x88,
    0x66,0x16,0xba,0xcc,0xa4,0x44,0x4a,0xb6,0x95,0x11,0x8a,0x91,0xe5,0x9f,0x24,0x73,
    0x64,0xae,0x1f,0x0d,0x45,0xc9,0xb6,0x1f,0x43,0x21,0x18,0x09,0x81,0x88,0x88,0xd3,
    0x14,0x35,0xab,0xf9,0x99,0x1f,0x3f,0x24,0x2b,0xa2,0xce,0xf5,0x9e,0xeb,0xb0,0xd3,
    0x2a,0x14,0x6e,0x9f,0xe7,0xbe,0xce,0x39,0xd7,0x39,0xe7,0xba,0xef,0xfb,0xb9,0xdf,
    0xa5,0x53,0xa3,0x73,0x93,0x44,0x92,0x01,0x49,0xbf,0xe4,0x8a,0x24,0x99,0x7f,0x77,
    0x24,0xa9,0x04,0xaf,0x03,0x93,0x9c,0xcc,0xb3,0x7e,0xd6,0xd3,0xb3,0xca,0x5e,0x5b,
    0xbd,0xa4,0xac,0xa2,0xb2,0x1c,0xf6,0x41,0x49,0x3a,0xe3,0x07,0xdb,0xe0,0x24,0x37,
    0xc9,0xd2,0x27,0xc6,0x8a,0x45,0x2f,0x35,0x00,0xef,0xd6,0x71,0x43,0x47,0x81,0xfa,
    0x01,0xd7,0x04,0xc9,0x63,0x49,0x76,0x32,0xd1,0xe8,0x93,0xd1,0x7c,0x3a,0x26,0xc4,
    0xfa,0x05,0x2c,0x45,0xac,0x20,0x60,0x69,0x62,0x43,0x02,0x96,0x45,0x6c,0x58,0xc0,
    0xb2,0x89,0x95,0x04,0x2c,0x87,0xd8,0xa8,0x80,0xe5,0x12,0xbb,0x2f,0x60,0xfd,0x88,
    0x8d,0x0b,0x58,0x7f,0x62,0xe3,0x03,0x36,0x80,0x58,0x79,0xc0,0x06,0x12,0xab,0x08,
    0x58,0x1e,0xb1,0xaa,0x80,0xe5,0x13,0x7b,0x38,0x60,0x83,0x88,0xd5,0x41,0x6f,0xed,
    0xd4,0x35,0xa8,0xd7,0x0e,0xbb,0xc9,0x3d,0x98,0xf3,0xb3,0xfa,0xbc,0x97,0x1a,0xfa,
    0xfc,0x9e,0x30,0x87,0xf6,0x23,0x39,0x2f,0x54,0x96,0x54,0xc6,0x9e,0xce,0xe8,0x87,
    0xf7,0x62,0x7d,0xcb,0xa1,0x16,0x45,0xea,0x9f,0xc7,0x77,0xac,0xc3,0x50,0x9d,0xe7,
    0xb3,0xee,0x14,0xed,0x85,0xb4,0x27,0xb4,0x0f,0xc9,0xf0,0x9a,0xf6,0x98,0x17,0x53,
    0x5f,0xcc,0x4b,0xf5,0xff,0x1c,0x6a,0xdf,0xb3,0x6b,0x4c,0xed,0x10,0x65,0xb9,0x3b,
    0xe0,0x63,0x75,0xec,0xaa,0x5f,0x54,0xeb,0xf3,0x52,0x1d,0x5b,0x3f,0x1e,0x5e,0x37,
    0x52,0x77,0x9d,0x6b,0xe3,0xf9,0x7d,0x14,0xde,0x66,0xb8,0xcf,0x28,0xe5,0x9c,0xc4,
    0xf5,0x02,0x57,0x0d,0xe7,0x93,0x89,0x95,0xb2,0xd7,0x0a,0xf6,0x0a,0xff,0x4a,0xda,
    0xf2,0x83,0xbd,0x9a,0x7b,0x08,0xf6,0x29,0xb4,0x17,0xd2,0x8e,0x67,0x2d,0xb5,0x70,
    0xff,0x99,0xec,0xdf,0xe7,0xf3,0xb8,0x9e,0x3e,0x5f,0xc0,0xbd,0x06,0xad,0x96,0x92,
    0x2b,0x1d,0xec,0x0d,0xdc,0x77,0x3e,0xdf,0xc0,0x9e,0x7c,0xde,0xc2,0x1a,0x10,0xdf,
    0xca,0x5c,0xa9,0x60,0x6f,0xe3,0x7e,0xf4,0x79,0x3b,0xfb,0x41,0xfd,0x1d,0x8c,0x8d,
    0x7c,0x9d,0x7d,0xe2,0xf7,0x87,0x7e,0xc0,0xfd,0x4d,0x9f,0xfe,0xba,0xfa,0xac,0xed,
    0xe1,0x8c,0xb5,0x71,0x2a,0xf8,0x8f,0x51,0xcb,0x62,0xea,0x7d,0x8c,0xe7,0x1f,0xd8,
    0x70,0xcd,0x7c,0x9a,0xfd,0xf2,0xd3,0xf2,0xaf,0x27,0x38,0xce,0xf0,0xfd,0x34,0x39,
    0x30,0x3f,0xdb,0xa7,0x86,0x1e,0x6a,0x06,0x0d,0x2e,0xb2,0x9f,0x34,0xe3,0xaf,0xf3,
    0xdd,0x6b,0xb8,0xce,0xef,0x4f,0x3a,0xd4,0x7c,0x4c,0x13,0x36,0x35,0x36,0xd6,0x8c,
    0xd7,0x95,0x80,0x5f,0xb7,0x18,0x16,0x87,0xfb,0x1e,0xd7,0xf7,0x57,0xbe,0x58,0x35,
    0xd5,0xe7,0x27,0x74,0xbe,0xf9,0xed,0x4f,0x6b,0x1f,0xd4,0x5d,0x91,0xa2,0x16,0x09,
    0xf9,0x6f,0x29,0x92,0x9d,0xd9,0x13,0x76,0x0e,0x8e,0xb3,0xff,0x39,0x9a,0x07,0x6b,
    0x75,0x82,0xd8,0xf1,0xd0,0x77,0x03,0xcf,0xd8,0xf7,0xb4,0x3f,0xaa,0x0c,0xd8,0x87,
    0x22,0xb6,0x57,0x2b,0xc8,0x07,0x9f,0x94,0x18,0xde,0xac,0x3e,0x98,0xa7,0xc5,0xe2,
    0x80,0x23,0x0e,0xfb,0x33,0x8b,0x71,0xd5,0x8c,0x83,0xde,0xd9,0x62,0xf8,0x97,0xea,
    0x83,0xf3,0x97,0x23,0x86,0x61,0xef,0xfe,0xaa,0x95,0xe7,0x71,0x01,0x7e,0x47,0x8f,
    0xfa,0x9e,0xab,0x03,0x18,0xfa,0xc1,0xfb,0x3c,0x8d,0x83,0xc6,0xfd,0xc5,0x72,0xe2,
    0xdf,0x3a,0xae,0xc5,0x00,0x31,0xfc,0x29,0x55,0x07,0x35,0x75,0x8a,0x61,0xee,0xf7,
    0x9b,0x72,0x38,0x17,0x9e,0x37,0x55,0x8b,0x4c,0xbf,0xf4,0xc9,0x66,0x4c,0x6e,0xe8,
    0x21,0x9f,0x3d,0xcc,0x0c,0x3d,0x0c,0x12,0xc3,0xbd,0x87,0xc1,0x62,0x98,0xf7,0x50,
    0x14,0x7a,0x80,0xad,0x40,0x47,0x11,0xf3,0x16,0x84,0x1e,0xee,0x14,0xcb,0x2d,0xa1,
    0x87,0x42,0x31,0xdc,0x7b,0x38,0x20,0x86,0xb9,0x1f,0x7a,0x70,0xae,0xa2,0xd0,0xc3,
    0x49,0xfa,0xa0,0xaf,0x03,0xcc,0xe9,0x3d,0x14,0xb3,0x87,0x79,0xa1,0x87,0xa1,0x62,
    0xb8,0xf7,0x30,0x4c,0x0c,0xf3,0x1e,0x4a,0x42,0x0f,0xb0,0x0d,0xd7,0x51,0xc2,0xbc,
    0x78,0x9f,0xc3,0xbc,0x23,0xc4,0x72,0x9f,0x94,0xde,0xb3,0x83,0x1a,0xdd,0xb7,0x24,
    0xd4,0x78,0x8a,0x7e,0xa8,0x7b,0x04,0x39,0x51,0x0f,0xce,0xd7,0x0f,0x3c,0x5b,0xbe,
    0xe7,0xce,0xf1,0xfb,0xb8,0x3f,0xec,0xb9,0x1f,0x89,0x37,0x72,0xcf,0xfd,0x4c,0xec,
    0x14,0x7b,0xc5,0x37,0xe5,0x3c,0xe3,0x7a,0x18,0x07,0x4d,0x2f,0x10,0x77,0xdd,0x2f,
    0x31,0x36,0x09,0xd8,0x65,0x62,0xe8,0x61,0xae,0x6a,0x8f,0xb3,0x7c,0x85,0xbe,0x97,
    0xc9,0xe1,0x39,0x7e,0x61,0x8e,0xce,0x90,0xe3,0x2a,0xf1,0x85,0xda,0x2b,0xee,0xa1,
    0x6b,0xec,0xe9,0x0a,0xbf,0x69,0x57,0x93,0xde,0xf5,0x18,0xc3,0xf5,0x58,0x10,0xd6,
    0xe3,0x7e,0x31,0xdc,0xd7,0x63,0xac,0x18,0xe6,0xeb,0x31,0x23,0xac,0x07,0x6c,0xe3,
    0x74,0x4c,0xa4,0xc6,0x13,0xc3,0x5a,0x4f,0x22,0x77,0x43,0xe0,0x9e,0x2c,0x86,0x3b,
    0x77,0x85,0x18,0xe6,0xdc,0xd5,0x81,0x1b,0xb6,0x4a,0x1d,0xd5,0xe4,0xae,0xe4,0x7e,
    0x05,0xcf,0x43,0x62,0x7d,0xa5,0x33,0xdf,0x76,0xe3,0xaa,0x12,0xc3,0x6b,0xb9,0xee,
    0x1e,0x57,0xcd,0x75,0x87,0xcf,0x14,0xb1,0x9c,0xa8,0xb3,0x8a,0xfc,0xc8,0x3b,0x3d,
    0xe4,0x85,0x4f,0x8d,0x8e,0xe9,0x8c,0xaf,0x09,0x79,0x6b,0x43,0xde,0x39,0x7a,0x23,
    0xe1,0xae,0x9a,0x4a,0xec,0x5a,0xf8,0x7e,0xa5,0xb8,0x76,0xb0,0xd7,0x89,0xc5,0xf9,
    0x78,0x57,0xb9,0x80,0x3f,0x2a,0x16,0x5b,0x97,0xd9,0xc3,0xfd,0x33,0x6b,0x35,0x8d,
    0x5c,0xb0,0x65,0xf1,0x8e,0xcd,0x61,0x3e,0xf4,0xe4,0x35,0x4d,0x67,0x4f,0x88,0x39,
    0xc3,0x18,0xf4,0x39,0x8d,0xb5,0xc3,0x77,0x06,0x7d,0xc7,0x85,0xfa,0x1f,0xf8,0x8f,
    0xfa,0xc7,0xdf,0xa6,0xfe,0x09,0x62,0x71,0x3e,0xde,0x61,0xfd,0x65,0x62,0xb1,0x13,
    0x42,0xfd,0xe5,0xe4,0x2a,0xfb,0x9f,0xfa,0xbd,0xa6,0x19,0xa1,0xfe,0xd3,0x62,0x3d,
    0xa0,0xa7,0x72,0xee,0xa7,0x95,0xbc,0x2b,0xea,0xc5,0xec,0xeb,0x95,0x09,0xf3,0xc7,
    0xc5,0xb0,0xee,0xb0,0xcf,0x9e,0xe0,0x3e,0xdb,0x10,0xf6,0xd9,0x2c,0x31,0xdc,0xf7,
    0xd9,0x93,0x62,0x98,0xef,0xb3,0xf9,0x61,0xbd,0x61,0x9b,0xad,0x63,0x3e,0x6b,0x9b,
    0x4d,0xbd,0x50,0xf7,0x5c,0xb1,0x9c,0x09,0xe3,0xb6,0xf0,0xfd,0x0f,0x7d,0x07,0xd7,
    0x7b,0x8c,0xc1,0xb3,0x93,0xb9,0x36,0x88,0xc5,0x95,0x30,0xe6,0xa3,0x90,0x0b,0xb6,
    0x8d,0x3a,0xde,0x67,0x1c,0x9e,0x4d,0xcc,0xf5,0x01,0xe3,0xf0,0xfb,0x6f,0x3d,0xb1,
    0xcd,0x62,0x38,0xee,0xdb,0x3c,0xd5,0x0b,0xd8,0x87,0xfc,0xbe,0xdd,0x45,0x7b,0x29,
    0xb5,0xdd,0x42,0xce,0x8d,0xd2,0x1b,0xbf,0x89,0x9c,0x27,0xe4,0x9f,0x3e,0xa8,0xe9,
    0x2f,0x65,0xb9,0x45,0xec,0x26,0xb9,0xcf,0x8a,0xf1,0xa3,0xae,0x4d,0xac,0x15,0xdf,
    0x7f,0x68,0xdf,0x25,0x66,0x77,0x3d,0x5c,0xa3,0x67,0x88,0x09,0xfb,0x6d,0xed,0xa3,
    0xd1,0x56,0xe6,0xdc,0x1a,0x34,0xfa,0x44,0x2c,0xce,0x35,0xda,0x19,0x34,0x82,0x6d,
    0x9b,0x8e,0x16,0xc6,0xb5,0x04,0x8d,0x3e,0x63,0x5c,0xd4,0x68,0x87,0x18,0x1e,0x35,
    0xfa,0x3c,0x68,0xb4,0x23,0x68,0xd4,0x4a,0xce,0x6d,0x41,0xa3,0xed,0xe4,0x74,0x8d,
    0xdc,0x67,0x67,0xd0,0xa8,0x35,0x68,0x74,0x4e,0x8c,0x1f,0x75,0x6d,0x67,0xad,0xae,
    0xd1,0x41,0x31,0x7b,0x17,0xf3,0xbb,0x46,0xcf,0x52,0xa3,0x14,0xfb,0xed,0xe8,0xa3,
    0x51,0x1b,0x73,0xb6,0x05,0x8d,0x76,0x89,0xc5,0xb9,0x46,0xed,0x41,0x23,0xd8,0x76,
    0xeb,0xd8,0xcb,0xb8,0xbd,0x41,0xa3,0xaf,0x18,0x17,0x35,0xda,0x27,0x86,0x47,0x8d,
    0xbe,0x0e,0x1a,0xed,0x0b,0x1a,0x75,0x90,0x73,0x77,0xd0,0x68,0x0f,0x39,0x5d,0x23,
    0xf7,0x69,0x0f,0x1a,0x75,0x04,0x8d,0x7e,0x12,0xe3,0x47,0x5d,0x7b,0x58,0xab,0x6b,
    0xf4,0x9d,0x98,0xfd,0x20,0xf5,0x00,0x9f,0x9f,0xbd,0xf9,0xe4,0x80,0x5f,0x0f,0x35,
    0xc3,0xb7,0x02,0x31,0x1d,0xe1,0xcc,0x2f,0xe0,0x99,0x6f,0x09,0x67,0xfe,0x39,0x31,
    0xdc,0xcf,0xfc,0xf3,0x62,0x98,0x9f,0xf9,0xe6,0xa0,0x1f,0x6c,0x0b,0x75,0x2c,0x61,
    0xde,0x25,0x81,0xfb,0x05,0x72,0xb7,0x05,0xee,0xa5,0x62,0xb8,0x73,0xbf,0x28,0x86,
    0x39,0x77,0x53,0xe0,0x86,0x6d,0x99,0x8e,0xe5,0xe4,0x5e,0x1e,0x7e,0x13,0xac,0x20,
    0x77,0x7b,0xb8,0xaf,0x1b,0xc4,0xf0,0x6f,0x79,0xff,0xaf,0x14,0xc3,0x70,0xa7,0x7b,
    0xbe,0x57,0xc5,0xf0,0xfd,0xcc,0xb7,0x3a,0xe4,0x83,0x6d,0x95,0x8e,0xd5,0xcc,0xb7,
    0x2a,0x68,0x7d,0x58,0xec,0x6f,0x95,0x9e,0xf0,0x9b,0xcd,0xfd,0x56,0x07,0xad,0xcf,
    0x8b,0xf9,0xa0,0xd6,0xc3,0xe4,0xf3,0x7a,0x5e,0x67,0x3d,0x5d,0xa1,0x9e,0x37,0xc4,
    0x70,0xaf,0x67,0x6d,0xa8,0x07,0xb6,0x35,0x3a,0xd6,0x32,0xcf,0x9a,0x50,0xcf,0x11,
    0xd6,0x73,0x3e,0xac,0xbd,0xfb,0xad,0x0d,0xf5,0x5c,0x10,0xf3,0x41,0x8d,0x47,0xc8,
    0xe7,0xf5,0xbc,0xc9,0x7a,0x1a,0x42,0x3d,0x6f,0x89,0xe1,0x5e,0x4f,0x63,0xa8,0x07,
    0xb6,0x75,0x3a,0x1a,0x99,0x67,0x5d,0xa8,0xe7,0xa8,0xd8,0xdf,0x6a,0xc8,0xe7,0x77,
    0x94,0xfb,0x35,0x86,0x7a,0x2e,0x8b,0xf9,0xa0,0xc6,0xa3,0xe4,0x83,0x6f,0x13,0x7d,
    0x97,0x85,0x3b,0xe3,0x65,0x6a,0x09,0x3e,0xcf,0x73,0x48,0x7a,0x71,0xff,0x5d,0xea,
    0xb1,0x4d,0x21,0xcf,0x25,0xb1,0x5c,0xc8,0x7d,0x88,0xfb,0x08,0xbe,0xcd,0xf4,0x5d,
    0xc8,0xbb,0x16,0xbe,0x8b,0xc9,0xd7,0xc3,0xbb,0x36,0x97,0xf7,0xb6,0xf7,0xe1,0x31,
    0xcd,0x81,0xff,0xa2,0x58,0x0e,0xe4,0x5c,0xcc,0x33,0xf0,0x88,0x46,0xdc,0xa0,0xed,
    0x4f,0xdd,0x25,0x55,0x3a,0xfe,0x06,0xd3,0x3b,0x11,0xf9,0xf4,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out vec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       vec4 transformSrcValue(uvec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
