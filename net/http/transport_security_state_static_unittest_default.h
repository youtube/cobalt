// Copyright 2017 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is generated by net/tools/transport_security_state_generator/.
// See transport_security_state_static.template for more information on the data
// in this file.

// Note that consumers must include <stdint.h>, "<iterator>", and
// "net/http/transport_security_state_source.h", which this file cannot do
// itself, since it's always included in a nested namespace.

static const char kSPKIHash_GoodPin1[] =
    "\x36\x7f\x23\x93\x90\x72\xe1\x59\x2a\xe8\x17\x8e\x55\x9e\xd1\xec"
    "\x00\xba\x5d\x45\x01\x66\xc5\xa6\x51\xb2\x51\xd5\xfd\x58\xe4\x56";

static const char kSPKIHash_TestSPKI1[] =
    "\xc3\x7c\xbb\x62\x0d\xd1\xce\x40\x32\x84\x27\x81\xa0\xb1\xe6\xef"
    "\x56\x11\x9e\xeb\x94\x5b\xce\xc0\x01\x1f\xc3\x56\x92\xcc\x4f\x0e";

static const char* const kNoRejectedPublicKeys[] = {
    nullptr,
};

static const char* const kWithRejectedPinsAcceptableCerts[] = {
    kSPKIHash_GoodPin1,
    nullptr,
};
static const char* const kWithRejectedPinsRejectedCerts[] = {
    kSPKIHash_TestSPKI1,
    nullptr,
};

static const char* const kWithReportUriAcceptableCerts[] = {
    kSPKIHash_GoodPin1,
    nullptr,
};
static const char kWithReportUriReportURI[] = "http://report-uri.preloaded.test/pkp";

static const char* const kWithoutRejectedPinsAcceptableCerts[] = {
    kSPKIHash_TestSPKI1,
    kSPKIHash_GoodPin1,
    nullptr,
};

static const struct net::TransportSecurityStateSource::Pinset kPinsets[] = {
    {kWithRejectedPinsAcceptableCerts, kWithRejectedPinsRejectedCerts, kNoReportURI},
    {kWithReportUriAcceptableCerts, kNoRejectedPublicKeys, kWithReportUriReportURI},
    {kWithoutRejectedPinsAcceptableCerts, kNoRejectedPublicKeys, kNoReportURI},
};

static const uint8_t kHSTSHuffmanTree[] = {
    0xe8, 0xee, 0x00, 0xe1, 0x01, 0xe5, 0xad, 0xf3, 0xff, 0x03, 0x02, 0x04,
    0xe2, 0xe7, 0xea, 0x06, 0xeb, 0x07, 0x08, 0xe4, 0xf4, 0x09, 0x80, 0xf0,
    0x0a, 0x0b, 0xef, 0xf2, 0xe3, 0xf5, 0x0e, 0xae, 0x0d, 0x0f, 0xf7, 0xf8,
    0xe9, 0x11, 0xec, 0xed, 0x12, 0x13, 0x10, 0x14, 0x0c, 0x15, 0x05, 0x16,
};

static const uint8_t kPreloadedHSTSData[] = {
    0x77, 0xaf, 0xe3, 0xd9, 0xaa, 0xdc, 0x1f, 0xd0, 0x91, 0x67, 0x31, 0x42,
    0x45, 0x7a, 0xea, 0x84, 0x8b, 0xfb, 0x38, 0xd9, 0xf5, 0xfc, 0x7b, 0x3b,
    0xf1, 0xef, 0x41, 0x0f, 0x43, 0xcb, 0xfe, 0xc6, 0x9b, 0x3e, 0xbf, 0x8f,
    0x67, 0x7e, 0xe0, 0xfe, 0x84, 0x89, 0xe9, 0x2c, 0x0c, 0xf0, 0xe0, 0xa3,
    0x22, 0x7f, 0xce, 0x1e, 0x0f, 0xf1, 0x39, 0x6d, 0x5d, 0x8c, 0xf5, 0xf6,
    0x81, 0xe5, 0x56, 0x87, 0x05, 0x13, 0x1f, 0x6a, 0x2d, 0x1a, 0x4f, 0x0a,
    0x74, 0xfe, 0xce, 0xad, 0x19, 0xc5, 0x9c, 0xb0, 0x23, 0x9d, 0x50, 0x89,
    0x7f, 0xc1, 0xe5, 0xb4, 0xcc, 0x68, 0x65, 0x1c, 0xb6, 0x03, 0x42, 0x44,
    0xd7, 0x25, 0xb7, 0x11, 0x70, 0xeb, 0x49, 0xe3, 0x31, 0xc7, 0x8e, 0x6d,
    0x93, 0x16, 0xdc, 0x37, 0xd3, 0xbd, 0x7f, 0x1e, 0xcd, 0x09, 0x13, 0x39,
    0x8d, 0xcc, 0xff, 0xca, 0x7a, 0x0a, 0xbe, 0x89, 0x78, 0x43, 0x7d, 0xa2,
    0x25, 0x63, 0xa0,
};

static const unsigned kPreloadedHSTSBits = 1076;
static const unsigned kHSTSRootPosition = 1000;

static const net::TransportSecurityStateSource kHSTSSource = {
  kHSTSHuffmanTree,
  sizeof(kHSTSHuffmanTree),
  kPreloadedHSTSData,
  kPreloadedHSTSBits,
  kHSTSRootPosition,
  kPinsets,
  std::size(kPinsets)
};
