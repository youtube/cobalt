--- media/mojo/common/mojo_decoder_buffer_converter.cc
+++ media/mojo/common/mojo_decoder_buffer_converter.cc
@@ -128,6 +128,13 @@
   if (!consumer_handle_.is_valid()) {
     DCHECK(pending_read_cbs_.empty());
     CancelReadCB(std::move(read_cb));
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+    // Release its ref-count that was increased manually during
+    // DecoderBuffer and DecoderBufferPtr conversion.
+    scoped_refptr<media::DecoderBuffer> buffer(
+        reinterpret_cast<media::DecoderBuffer*>(mojo_buffer->address));
+    buffer->Release();
+#endif // BUILDFLAG(USE_STARBOARD_MEDIA)
     return;
   }
 
@@ -225,62 +232,6 @@
   pipe_watcher_.ArmOrNotify();
 }
 
-<<<<<<< HEAD
-=======
-// TODO(xhwang): Move this up to match declaration order.
-void MojoDecoderBufferReader::ReadDecoderBuffer(
-    mojom::DecoderBufferPtr mojo_buffer,
-    ReadCB read_cb) {
-  DVLOG(3) << __func__;
-  DCHECK(!flush_cb_);
-
-  if (!consumer_handle_.is_valid()) {
-    DCHECK(pending_read_cbs_.empty());
-    CancelReadCB(std::move(read_cb));
-#if BUILDFLAG(USE_STARBOARD_MEDIA)
-    // Release its ref-count that was increased manually during
-    // DecoderBuffer and DecoderBufferPtr conversion.
-    scoped_refptr<media::DecoderBuffer> buffer(
-        reinterpret_cast<media::DecoderBuffer*>(mojo_buffer->address));
-    buffer->Release();
-#endif // BUILDFLAG(USE_STARBOARD_MEDIA)
-    return;
-  }
-
-  scoped_refptr<DecoderBuffer> media_buffer(
-      mojo_buffer.To<scoped_refptr<DecoderBuffer>>());
-  DCHECK(media_buffer);
-
-  // We don't want reads to complete out of order, so we queue them even if they
-  // are zero-sized.
-  pending_read_cbs_.push_back(std::move(read_cb));
-  pending_buffers_.push_back(std::move(media_buffer));
-
-  // Do nothing if a read is already scheduled.
-  if (armed_)
-    return;
-
-  // To reduce latency, always process pending reads immediately.
-  ProcessPendingReads();
-}
-
-void MojoDecoderBufferReader::Flush(base::OnceClosure flush_cb) {
-  DVLOG(2) << __func__;
-  DCHECK(!flush_cb_);
-
-  if (pending_read_cbs_.empty()) {
-    std::move(flush_cb).Run();
-    return;
-  }
-
-  flush_cb_ = std::move(flush_cb);
-}
-
-bool MojoDecoderBufferReader::HasPendingReads() const {
-  return !pending_read_cbs_.empty();
-}
-
->>>>>>> f5fd71414c6 ([media] Avoid extra allocation and copy for DecoderBuffer on renderer process (#5464))
 void MojoDecoderBufferReader::OnPipeReadable(
     MojoResult result,
     const mojo::HandleSignalsState& state) {
@@ -546,7 +497,6 @@
     DVLOG(1) << __func__ << ": writing to data pipe failed. result=" << result
              << ", buffer size=" << pending_buffers_.front()->data_size()
              << ", num_bytes(written)=" << bytes_written_;
-<<<<<<< HEAD
     if (MediaTraceIsEnabled()) {
       for (const auto& buffer : pending_buffers_) {
         TRACE_EVENT_NESTABLE_ASYNC_END2(
@@ -556,14 +506,12 @@
             bytes_written_);
       }
     }
-=======
 #if BUILDFLAG(USE_STARBOARD_MEDIA)
     for (auto buffer : pending_buffers_) {
       // Release DecoderBuffer as its ref-count was increased manually.
       buffer->Release();
     }
 #endif // BUILDFLAG(USE_STARBOARD_MEDIA)
->>>>>>> f5fd71414c6 ([media] Avoid extra allocation and copy for DecoderBuffer on renderer process (#5464))
     pending_buffers_.clear();
     bytes_written_ = 0;
   }
