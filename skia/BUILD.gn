# Copyright 2013 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/buildflag_header.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/features.gni")
import("//build/config/freetype/freetype.gni")
import("//build/config/rust.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/rust/rust_static_library.gni")
import("//gpu/vulkan/features.gni")
import("//testing/test.gni")
import("//third_party/skia/gn/shared_sources.gni")
import("//third_party/skia/modules/skcms/skcms.gni")
import("features.gni")

if (current_cpu == "arm") {
  import("//build/config/arm.gni")
}
if (current_cpu == "mipsel" || current_cpu == "mips64el") {
  import("//build/config/mips.gni")
}

buildflag_header("buildflags") {
  header = "buildflags.h"
  flags = [
    "SKIA_SUPPORT_SKOTTIE=$skia_support_skottie",
    "SKIA_USE_DAWN=$skia_use_dawn",
    "SKIA_USE_METAL=$skia_use_metal",
  ]
}

if (use_typeface_fontations) {
  source_set("path_bridge") {
    sources = [ "//third_party/skia/src/ports/fontations/src/skpath_bridge.h" ]
  }

  rust_static_library("bridge_rust_side") {
    allow_unsafe = true
    crate_root = "//third_party/skia/src/ports/fontations/src/ffi.rs"
    sources = [ "//third_party/skia/src/ports/fontations/src/ffi.rs" ]
    cxx_bindings = [ "//third_party/skia/src/ports/fontations/src/ffi.rs" ]
    deps = [
      ":path_bridge",
      "//third_party/rust/font_types/v0_4:lib",
      "//third_party/rust/read_fonts/v0_11:lib",
      "//third_party/rust/skrifa/v0_10:lib",
    ]
    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [
      ":skia_config",
      "//build/config/compiler:no_chromium_code",
    ]
  }
}

# External-facing config for dependent code.
config("skia_config") {
  defines = [
    "SK_ENABLE_SKSL",
    "SK_UNTIL_CRBUG_1187654_IS_FIXED",
    "SK_USER_CONFIG_HEADER=\"../../skia/config/SkUserConfig.h\"",
    "SK_WIN_FONTMGR_NO_SIMULATIONS",
    "SK_DISABLE_LEGACY_SKSURFACE_METHODS",
    "SK_DISABLE_LEGACY_GRAPHITE_IMAGE_FACTORIES",
    "SK_DISABLE_LEGACY_GRAPHITE_IMAGE_METHODS",
    "SK_DISABLE_LEGACY_SKSURFACE_FACTORIES",
    "SK_DISABLE_LEGACY_SKSURFACE_FLUSH",
    "SK_DISABLE_LEGACY_SKSURFACE_AS_IMAGE",
    "SK_DISABLE_LEGACY_SKSURFACE_DISPLAYLIST",
    "SK_DISABLE_LEGACY_IMAGE_SUBSET_METHODS",
    "SK_DISABLE_LEGACY_IMAGE_COLORSPACE_METHODS",
    "SK_DISABLE_LEGACY_IMAGE_RELEASE_PROCS",
    "SK_DISABLE_LEGACY_GL_BACKEND_SURFACE",
    "SK_DISABLE_LEGACY_INIT_DECODERS",
    "SK_DISABLE_LEGACY_GRDIRECTCONTEXT_FLUSH",
    "SK_DISABLE_LEGACY_GRDIRECTCONTEXT_BOOLS",
    "SK_DISABLE_LEGACY_GL_GRDIRECTCONTEXT_FACTORIES",
    "SK_DISABLE_LEGACY_PNG_WRITEBUFFER",
    "SK_SLUG_DISABLE_LEGACY_DESERIALIZE",
    "SK_DISABLE_LEGACY_VK_GRDIRECTCONTEXT_FACTORIES",
  ]

  include_dirs = [
    "//third_party/skia",
    "$root_gen_dir/third_party/skia",
  ]

  if (use_blink) {
    # TODO(kjlubick) make these not necessary
    defines += [
      "SK_CODEC_DECODES_JPEG",
      "SK_ENCODE_JPEG",
      "SK_ENCODE_PNG",
      "SK_ENCODE_WEBP",
    ]
    include_dirs += [ "//third_party/wuffs/src/release/c" ]
  } else {
    # Decoder sources are only added when use_blink == true, but SkCodec.cpp is
    # always present.  SK_DISABLE_LEGACY_INIT_DECODERS ensures that SkCodec.cpp
    # is not attempting to reference inexistent codec code.
    defines += [ "SK_DISABLE_LEGACY_INIT_DECODERS" ]
  }

  if (is_component_build) {
    defines += [ "SKIA_DLL" ]
    if (is_win) {
      defines += [ "SKCMS_API=__declspec(dllexport)" ]
    } else {
      defines += [ "SKCMS_API=__attribute__((visibility(\"default\")))" ]
    }
  }

  if (is_android) {
    defines += [
      "SK_BUILD_FOR_ANDROID",
      "USE_CHROMIUM_SKIA",
    ]
  }

  if (is_mac) {
    defines += [ "SK_BUILD_FOR_MAC" ]
  }
  if (is_ios) {
    defines += [ "SK_BUILD_FOR_IOS" ]
  }

  if (is_win) {
    defines += [ "GR_GL_FUNCTION_TYPE=__stdcall" ]
  }

  if (skia_support_gpu) {
    workaround_header = "gpu/config/gpu_driver_bug_workaround_autogen.h"
    configs = []
    defines += [
      "SK_GANESH",
      "SK_GPU_WORKAROUNDS_HEADER=\"$workaround_header\"",
    ]
    if (skia_use_gl) {
      defines += [ "SK_GL" ]
    }
    if (enable_vulkan) {
      defines += [ "SK_VULKAN=1" ]
      include_dirs += [ "//third_party/vulkan/include" ]
      configs += [
        "//third_party/vulkan-deps/vulkan-headers/src:vulkan_headers_config",
      ]
    }

    # Graphite
    defines += [ "SK_GRAPHITE" ]
    if (skia_use_dawn) {
      defines += [ "SK_DAWN" ]
      configs += [ "//third_party/dawn/include/dawn:public" ]
    }
    if (skia_use_metal) {
      defines += [ "SK_METAL" ]
    }
  }
}

# Internal-facing config for Skia library code.
config("skia_library_config") {
  # Turn on SK_API to export Skia's public API
  defines = [
    "IS_SKIA_IMPL=1",
    "SKIA_IMPLEMENTATION=1",
  ]

  if (use_blink && !use_system_freetype) {
    defines += [ "SK_FREETYPE_MINIMUM_RUNTIME_VERSION=(((FREETYPE_MAJOR) * 0x01000000) | ((FREETYPE_MINOR) * 0x00010000) | ((FREETYPE_PATCH) * 0x00000100))" ]
  }
  if (use_blink) {
    defines += [ "SK_TYPEFACE_FACTORY_FREETYPE" ]
  }
  if (is_win) {
    defines += [ "SK_TYPEFACE_FACTORY_DIRECTWRITE" ]
  }
  if (is_apple) {
    defines += [ "SK_TYPEFACE_FACTORY_CORETEXT" ]
  }

  if (current_cpu == "arm") {
    if (arm_use_neon) {
      defines += [ "SK_ARM_HAS_NEON" ]
    } else if (arm_optionally_use_neon) {
      defines += [ "SK_ARM_HAS_OPTIONAL_NEON" ]
    }
  }

  # Settings for text blitting, chosen to approximate the system browser.
  if (is_linux || is_chromeos) {
    defines += [
      "SK_GAMMA_EXPONENT=1.2",
      "SK_GAMMA_CONTRAST=0.2",
    ]
  } else if (is_android) {
    defines += [
      "SK_GAMMA_APPLY_TO_A8",
      "SK_GAMMA_EXPONENT=1.4",
      "SK_GAMMA_CONTRAST=0.0",
    ]
  } else if (is_win) {
    defines += [
      "SK_GAMMA_SRGB",
      "SK_GAMMA_CONTRAST=0.5",
    ]
  } else if (is_mac) {
    defines += [
      "SK_GAMMA_SRGB",
      "SK_GAMMA_CONTRAST=0.0",
    ]
  }

  if (is_android) {
    defines += [
      # Android devices are typically more memory constrained, so default to a
      # smaller glyph cache (it may be overriden at runtime when the renderer
      # starts up, depending on the actual device memory).
      "SK_DEFAULT_FONT_CACHE_LIMIT=1048576",  # 1024 * 1024
    ]
  } else {
    defines += [ "SK_DEFAULT_FONT_CACHE_LIMIT=20971520" ]  # 20 * 1024 * 1024
  }

  if (is_win) {
    defines += [
      # On windows, GDI handles are a scarse system-wide resource so we have to
      # keep the glyph cache, which holds up to 4 GDI handles per entry, to a
      # fairly small size. http://crbug.com/314387
      "SK_DEFAULT_FONT_CACHE_COUNT_LIMIT=256",
    ]
  }
}

# Split out into separate target so that path_bridge can depend on the public
# headers only and we can avoid a cyclic dependency when building the C++ native
# code for the Fontations rust backend.
source_set("skia_core_public_headers") {
  public = skia_core_public
}

source_set("skcms") {
  cflags = []
  if (!is_win || is_clang) {
    cflags += [
      "-w",
      "-std=c11",
    ]
  }

  # LLVM automatically sets the equivalent of GCC's -mfp16-format=ieee on ARM
  # builds by default, while GCC itself does not. We need it to enable support
  # for half-precision floating point data types used by SKCMS on ARM.
  if ((is_linux || is_chromeos) && !is_clang && current_cpu == "arm") {
    cflags += [ "-mfp16-format=ieee" ]
  }

  public = [ "//third_party/skia/modules/skcms/skcms.h" ]
  include_dirs = [ "//third_party/skia/modules/skcms" ]
  sources = rebase_path(skcms_sources, ".", "//third_party/skia/modules/skcms")
}

component("skia") {
  deps = []
  public = [
    "ext/benchmarking_canvas.h",
    "ext/cicp.h",
    "ext/convolver.h",
    "ext/event_tracer_impl.h",
    "ext/image_operations.h",
    "ext/legacy_display_globals.h",
    "ext/opacity_filter_canvas.h",
    "ext/recursive_gaussian_convolution.h",
    "ext/rgba_to_yuva.h",
    "ext/skcolorspace_primaries.h",
    "ext/skcolorspace_trfn.h",
    "ext/skia_memory_dump_provider.h",
    "ext/skia_trace_memory_dump_impl.h",
    "ext/skia_utils_base.h",
  ]
  sources = [
    # Chrome sources.
    "config/SkUserConfig.h",
    "config/sk_ref_cnt_ext_debug.h",
    "config/sk_ref_cnt_ext_release.h",
    "ext/SkDiscardableMemory_chrome.cc",
    "ext/SkDiscardableMemory_chrome.h",
    "ext/SkMemory_new_handler.cpp",
    "ext/benchmarking_canvas.cc",
    "ext/cicp.cc",
    "ext/convolver.cc",
    "ext/event_tracer_impl.cc",
    "ext/google_logging.cc",
    "ext/image_operations.cc",
    "ext/legacy_display_globals.cc",
    "ext/opacity_filter_canvas.cc",
    "ext/recursive_gaussian_convolution.cc",
    "ext/rgba_to_yuva.cc",
    "ext/skcolorspace_primaries.cc",
    "ext/skcolorspace_trfn.cc",
    "ext/skia_histogram.cc",
    "ext/skia_histogram.h",
    "ext/skia_memory_dump_provider.cc",
    "ext/skia_trace_memory_dump_impl.cc",
    "ext/skia_utils_base.cc",
  ]
  if (!is_apple) {
    public += [ "ext/fontmgr_default.h" ]
    sources += [ "ext/fontmgr_default.cc" ]
  }
  if (is_android) {
    sources += [ "ext/fontmgr_default_android.cc" ]
  }
  if (is_linux || is_chromeos) {
    sources += [ "ext/fontmgr_default_linux.cc" ]
  }
  if (is_ios) {
    public += [ "ext/skia_utils_ios.h" ]
    sources += [ "ext/skia_utils_ios.mm" ]
  }
  if (is_mac) {
    public += [ "ext/skia_utils_mac.h" ]
    sources += [ "ext/skia_utils_mac.mm" ]
  }
  if (is_win) {
    public += [ "ext/skia_utils_win.h" ]
    sources += [
      "ext/fontmgr_default_win.cc",
      "ext/skia_utils_win.cc",
    ]
  }

  if (use_blink) {
    public += [ "ext/platform_canvas.h" ]
    sources += [ "ext/platform_canvas.cc" ]
  }
  if (!is_ios && (current_cpu == "x86" || current_cpu == "x64")) {
    sources += [
      "ext/convolver_SSE2.cc",
      "ext/convolver_SSE2.h",
    ]
  } else if (current_cpu == "mipsel" && mips_dsp_rev >= 2) {
    sources += [
      "ext/convolver_mips_dspr2.cc",
      "ext/convolver_mips_dspr2.h",
    ]
  } else if (current_cpu == "arm" || current_cpu == "arm64") {
    if (arm_use_neon) {
      sources += [
        "ext/convolver_neon.cc",
        "ext/convolver_neon.h",
      ]
    }
  }

  if (is_win) {
    sources += [
      # Select the right BitmapPlatformDevice.
      "ext/raster_handle_allocator_win.cc",
    ]
  }

  # skia_core_public is included via public_deps instead as the path_bridge
  # target needs it as well.
  public += skia_utils_public
  public += skia_effects_public
  public += skia_effects_imagefilter_public
  public += skia_utils_chromium
  public += skia_discardable_memory_chromium
  public += skia_encode_public
  public += skia_encode_png_public
  public += skia_encode_webp_public

  # The imported Skia gni source paths are made absolute by gn.
  defines = []
  sources += skia_sksl_sources
  sources += skia_codec_core
  sources += skia_utils_private
  sources += skia_xps_sources
  sources += skia_encode_srcs
  sources += skia_encode_png_srcs
  sources += skia_encode_webp_srcs
  sources += [
    "//third_party/skia/src/fonts/SkFontMgr_indirect.cpp",
    "//third_party/skia/src/fonts/SkRemotableFontMgr.cpp",
    "//third_party/skia/src/ports/SkGlobalInitialization_default.cpp",
    "//third_party/skia/src/ports/SkImageGenerator_none.cpp",
    "//third_party/skia/src/ports/SkOSFile_stdio.cpp",
    "//third_party/skia/src/sfnt/SkOTTable_name.cpp",
    "//third_party/skia/src/sfnt/SkOTUtils.cpp",
  ]
  if (use_blink) {
    sources -= [ "//third_party/skia/src/ports/SkImageGenerator_none.cpp" ]
    sources += skia_codec_decode_bmp
    sources += skia_encode_jpeg_srcs
    public += skia_encode_jpeg_public
    sources += [
      "//third_party/skia/src/codec/SkEncodedInfo.cpp",
      "//third_party/skia/src/codec/SkIcoCodec.cpp",
      "//third_party/skia/src/codec/SkJpegCodec.cpp",
      "//third_party/skia/src/codec/SkJpegDecoderMgr.cpp",
      "//third_party/skia/src/codec/SkJpegMultiPicture.cpp",
      "//third_party/skia/src/codec/SkJpegSegmentScan.cpp",
      "//third_party/skia/src/codec/SkJpegSourceMgr.cpp",
      "//third_party/skia/src/codec/SkJpegUtility.cpp",
      "//third_party/skia/src/codec/SkParseEncodedOrigin.cpp",
      "//third_party/skia/src/codec/SkPngCodec.cpp",
      "//third_party/skia/src/codec/SkWebpCodec.cpp",
      "//third_party/skia/src/codec/SkWuffsCodec.cpp",
      "//third_party/skia/src/ports/SkImageGenerator_skia.cpp",
    ]
    deps += [ "//third_party/wuffs" ]
  } else {
    sources += skia_no_encode_jpeg_srcs
  }

  if (skia_support_xmp) {
    sources += skia_xml_sources
    sources += skia_codec_xmp
    sources += skia_codec_jpeg_xmp
    deps += [ "//third_party/expat" ]
    defines += [ "SK_CODEC_DECODES_JPEG_GAINMAPS" ]
  }

  # Remove unused util sources.
  sources -= [ "//third_party/skia/src/utils/SkParsePath.cpp" ]

  if (is_win) {
    libs = [ "fontsub.lib" ]
  }

  # need separate win section to handle chromes auto gn filter
  # (build/config/BUILDCONFIG.gn)
  if (is_win) {
    sources -= [
      #windows
      "//third_party/skia/src/utils/win/SkWGL_win.cpp",
    ]
  }

  # Select Skia ports.

  # FreeType is needed everywhere where blink is used, on Linux and Android as main
  # font backend, on Windows and Mac as fallback backend for Variations.
  if (use_blink) {
    # See SK_TYPEFACE_FACTORY_FREETYPE
    sources += [
      "//third_party/skia/src/ports/SkFontHost_FreeType.cpp",
      "//third_party/skia/src/ports/SkFontHost_FreeType_common.cpp",
    ]
  }

  if (use_typeface_fontations) {
    sources += [
      "//third_party/skia/src/ports/SkTypeface_fontations.cpp",
      "//third_party/skia/src/ports/SkTypeface_fontations_priv.h",
    ]
    deps += [
      ":bridge_rust_side",
      ":path_bridge",
    ]
  }

  if (is_win) {
    # See SK_TYPEFACE_FACTORY_DIRECTWRITE
    sources += [
      "//third_party/skia/src/ports/SkFontMgr_win_dw.cpp",
      "//third_party/skia/src/ports/SkOSFile_win.cpp",
      "//third_party/skia/src/ports/SkRemotableFontMgr_win_dw.cpp",
      "//third_party/skia/src/ports/SkScalerContext_win_dw.cpp",
      "//third_party/skia/src/ports/SkTypeface_win_dw.cpp",
    ]
  } else {
    sources += [ "//third_party/skia/src/ports/SkOSFile_posix.cpp" ]
  }

  if (is_apple) {
    # See SK_TYPEFACE_FACTORY_CORETEXT
    sources += [
      "//third_party/skia/include/ports/SkFontMgr_mac_ct.h",
      "//third_party/skia/src/ports/SkFontMgr_mac_ct.cpp",
      "//third_party/skia/src/ports/SkFontMgr_mac_ct_factory.cpp",
      "//third_party/skia/src/ports/SkScalerContext_mac_ct.cpp",
      "//third_party/skia/src/ports/SkScalerContext_mac_ct.h",
      "//third_party/skia/src/ports/SkTypeface_mac_ct.cpp",
      "//third_party/skia/src/ports/SkTypeface_mac_ct.h",
    ]
  }

  if (is_linux || is_chromeos) {
    sources += [
      "//third_party/skia/src/ports/SkFontConfigInterface.cpp",
      "//third_party/skia/src/ports/SkFontConfigInterface_direct.cpp",
      "//third_party/skia/src/ports/SkFontConfigInterface_direct_factory.cpp",
      "//third_party/skia/src/ports/SkFontMgr_FontConfigInterface.cpp",
    ]
  }

  if (is_linux || is_chromeos || is_android) {
    sources += [
      # Retain the files for the SkFontMgr_Android on linux to emulate android
      # fonts. See content/zygote/zygote_main_linux.cc
      # Note that this requires expat.
      "//third_party/skia/src/ports/SkFontMgr_android.cpp",
      "//third_party/skia/src/ports/SkFontMgr_android_parser.cpp",
    ]
  }

  if (is_win || (is_apple && use_blink)) {
    sources += [
      # Add the FreeType custom font manager as a fallback backend for variable fonts.
      "//third_party/skia/src/ports/SkFontMgr_custom.cpp",
      "//third_party/skia/src/ports/SkFontMgr_custom_empty.cpp",
    ]
  }

  if (is_fuchsia) {
    sources += [
      "//third_party/skia/src/ports/SkFontMgr_custom.cpp",
      "//third_party/skia/src/ports/SkFontMgr_fuchsia.cpp",
      "ext/fontmgr_default_fuchsia.cc",
    ]
    deps += [
      "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.fonts:fuchsia.fonts_hlcpp",
      "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.io:fuchsia.io_hlcpp",
      "//third_party/fuchsia-sdk/sdk/pkg/sys_cpp",
      "//third_party/fuchsia-sdk/sdk/pkg/zx",
      "//third_party/icu:icuuc",
    ]
  }

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":skia_config",
    ":skia_library_config",
    "//build/config/compiler:no_chromium_code",
  ]
  all_dependent_configs = [ ":skia_config" ]

  deps += [
    ":skcms",
    ":skia_opts",
    "//base",
    "//base/third_party/dynamic_annotations",
    "//third_party/libpng",
    "//third_party/libwebp",
    "//third_party/libwebp:libwebp_webp",
  ]
  public_deps = [
    ":buildflags",
    ":skia_core_and_effects",
    ":skia_core_public_headers",
  ]

  if (use_blink) {
    deps += [
      "//build/config/freetype",
      "//third_party:jpeg",
    ]
  }

  if (is_linux || is_chromeos) {
    deps += [
      "//third_party/expat",
      "//third_party/fontconfig",
      "//third_party/icu:icuuc",
    ]
  }

  if (is_android) {
    deps += [
      "//third_party/cpu_features:ndk_compat",
      "//third_party/expat",
    ]
  }

  if (!is_debug) {
    configs -= [ "//build/config/compiler:default_optimization" ]
    configs += [ "//build/config/compiler:optimize_max" ]
  }

  frameworks = []
  if (is_ios) {
    frameworks += [ "ImageIO.framework" ]
  }
  if (is_apple && skia_support_gpu) {
    frameworks += [
      "CoreFoundation.framework",
      "CoreGraphics.framework",
      "CoreText.framework",
      "Foundation.framework",
    ]
    if (is_mac) {
      frameworks += [ "AppKit.framework" ]
    }
    if (is_ios) {
      frameworks += [ "IOSurface.framework" ]
    }
  }

  if (is_fuchsia) {
    deps += [ "//third_party/expat" ]
  }

  if (skia_support_gpu) {
    public += skia_gpu_public
    public += skia_gpu_chromium_public
    sources += skia_ganesh_private
    sources += skia_null_gpu_sources
    sources += skia_sksl_gpu_sources
    sources += skia_shared_gpu_sources
    if (skia_use_gl) {
      public += skia_gpu_gl_public
      sources += skia_gpu_gl_private
    }
    if (enable_vulkan) {
      public += skia_gpu_vk_public
      public += skia_gpu_vk_chromium_public
      sources += skia_gpu_vk_private
      sources += skia_shared_vk_sources
      sources += skia_gpu_vk_chromium_private
    }

    public_deps += [ ":skia_graphite_public" ]
    deps += [ ":skia_graphite_private" ]

    if (skia_use_metal) {
      deps += [ ":skia_ganesh_metal" ]
    }
    deps += [ "//gpu/config:workaround_list" ]
  } else {
    sources += skia_no_slug_srcs
  }

  if (skia_support_pdf) {
    deps += [
      "//third_party:freetype_harfbuzz",
      "//third_party/zlib",
    ]
    public += skia_pdf_public
    sources += skia_pdf_sources
    if (use_blink) {
      # Blink includes Skia's JPEG decoder
      sources += skia_pdf_jpeginfo_lib
    } else {
      sources += skia_pdf_jpeginfo_none
    }
  } else {
    sources += [ "//third_party/skia/src/pdf/SkDocument_PDF_None.cpp" ]
  }

  if (skia_support_skottie) {
    import("//third_party/skia/modules/skottie/skottie.gni")
    import("//third_party/skia/modules/skresources/skresources.gni")
    import("//third_party/skia/modules/sksg/sksg.gni")
    import("//third_party/skia/modules/skshaper/skshaper.gni")
    public += skia_skottie_public
    sources += skia_skottie_sources
    sources += skia_skresources_sources
    sources += skia_sksg_sources
    sources += skia_shaper_primitive_sources
  }
}

# Template for things that are logically part of :skia, but need to be split out
# so custom compile flags can be applied.
#
# These are all opted out of check_includes, due to (logically) being part of
# skia.
template("skia_source_set") {
  source_set(target_name) {
    forward_variables_from(invoker, "*")

    check_includes = false

    if (!is_debug) {
      configs -= [ "//build/config/compiler:default_optimization" ]
      configs += [ "//build/config/compiler:optimize_max" ]
    }

    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [
      ":skia_config",
      ":skia_library_config",
      "//build/config/compiler:no_chromium_code",
    ]
    public_configs = [ ":skia_config" ]

    if (is_apple) {
      # Do not compile with ARC because Skia code is not compatible with being
      # compiled with ARC.
      configs -= [ "//build/config/compiler:enable_arc" ]
    }

    # Android, the only user of mismatched sample files (for now), gets a small
    # binary size decrease by using AFDO to optimize for size in these
    # source_sets. However, that also comes at a relatively big performance
    # cost.
    if (using_mismatched_sample_profile) {
      configs -= [ "//build/config/compiler:afdo_optimize_size" ]
    }
    if (is_win) {
      cflags_cc = [
        "/wd5041",  # out-of-line definition for constexpr static data member is
                    # not needed and is deprecated in C++17
      ]
    }
  }
}

# Split out for targeted removal of the afdo_optimize_size config on Android.
skia_source_set("skia_core_and_effects") {
  defines = []
  sources = skia_core_sources
  sources += skia_colorfilters_sources
  sources += skia_effects_sources
  sources += skia_effects_imagefilter_sources
  if (skia_support_gpu) {
    deps = [ "//gpu/config:workaround_list" ]
  }
  if (skia_use_dawn) {
    # Note: This is needed as files in this target include GrDawnTypes.h, which
    # includes Dawn headers that are generated by the below target. Normally it
    # would be enough for the target that has GrDawnTypes.h in it to just have
    # cpp_headers in its public deps. However, that file is in
    # sk_gpu_dawn_public, which we add to the "skia" target, which depends on
    # skia_core_and_effects rather than the other way around.
    public_deps = [ "//third_party/dawn/include/dawn:cpp_headers" ]
  }
  visibility = [ ":skia" ]
}

# Bits that involve special vector-y hardware.
if (current_cpu == "x86" || current_cpu == "x64") {
  skia_source_set("skia_opts_hsw") {
    sources = skia_opts.hsw_sources
    if (!is_win) {
      cflags = [
        "-mavx2",
        "-mbmi",
        "-mbmi2",
        "-mf16c",
        "-mfma",
      ]
    }
    if (is_win) {
      cflags = [ "/arch:AVX2" ]
    }
    visibility = [ ":skia_opts" ]
  }
}

skia_source_set("skia_opts") {
  cflags = []
  defines = []

  deps = [ "//base" ]

  if (current_cpu == "x86" || current_cpu == "x64") {
    deps += [ ":skia_opts_hsw" ]
  } else if (current_cpu == "arm") {
    # The assembly uses the frame pointer register (r7 in Thumb/r11 in
    # ARM), the compiler doesn't like that.
    if (!is_ios) {
      cflags += [ "-fomit-frame-pointer" ]
    }

    if (arm_version >= 7) {
      if (arm_use_neon || arm_optionally_use_neon) {
        # Root build config sets -mfpu=$arm_fpu, which we expect to be neon
        # when running this.
        if (!arm_use_neon) {
          configs -= [ "//build/config/compiler:compiler_arm_fpu" ]
          cflags += [ "-mfpu=neon" ]
        }
      }
    }
  } else if (current_cpu == "arm64") {
    # Conditional and empty body needed to avoid assert() below.
  } else if (current_cpu == "mipsel") {
    cflags += [ "-fomit-frame-pointer" ]
  } else if (current_cpu == "mips64el") {
    cflags += [ "-fomit-frame-pointer" ]
  } else if (current_cpu == "ppc64") {
    # Conditional and empty body needed to avoid assert() below.
  } else if (current_cpu == "s390x") {
    # Conditional and empty body needed to avoid assert() below.
  } else if (current_cpu == "riscv64") {
    # Conditional and empty body needed to avoid assert() below.
  } else {
    assert(false, "Unknown cpu target")
  }

  visibility = [ ":skia" ]
}

# Split out Graphite sources because of conflicting file names with Ganesh.
# Split into separate private and public source sets because we want to allow
# shared GPU code in ":skia" to include private Graphite headers, but want to
# limit external code to only depend on public headers. Only define these source
# sets when skia_support_gpu is true so that on iOS non-Blink builds, headers in
# these source sets are considered unknown and skipped by gn check.
if (skia_support_gpu) {
  skia_source_set("skia_graphite_public") {
    public = skia_graphite_public
    if (skia_use_dawn) {
      public += skia_graphite_dawn_public
      public_deps = [
        "//third_party/dawn/include/dawn:cpp_headers",
        "//third_party/dawn/src/dawn:cpp",
        "//third_party/dawn/src/dawn:proc",
      ]
    }
    if (skia_use_metal) {
      public += skia_graphite_mtl_public
      frameworks = [ "Metal.framework" ]
    }
    deps = [ "//gpu/config:workaround_list" ]
  }

  # If a source set contains only sources and no public files, then dependents can
  # include any file from sources.
  skia_source_set("skia_graphite_private") {
    sources = skia_graphite_sources
    if (skia_use_dawn) {
      sources += skia_shared_dawn_sources
      sources += skia_graphite_dawn_sources
    }
    if (skia_use_metal) {
      sources += skia_shared_mtl_sources
      sources += skia_graphite_mtl_sources
    }
    deps = [ "//gpu/config:workaround_list" ]
    if (skia_use_dawn) {
      deps += [ "//third_party/dawn/include/dawn:cpp_headers" ]
    }
    visibility = [ ":skia" ]
  }

  if (skia_use_metal) {
    # Split out Ganesh Metal sources, because they require ARC.
    skia_source_set("skia_ganesh_metal") {
      sources = skia_gpu_metal_public
      sources += skia_gpu_metal_private
      cflags_objcc = [
        "-Wno-unguarded-availability",
        "-fobjc-arc",
      ]
      deps = [ "//gpu/config:workaround_list" ]
      if (skia_use_dawn) {
        # Needed due to include chain containing webgpu_cpp.h via GrDawnTypes.h.
        public_deps = [ "//third_party/dawn/include/dawn:cpp_headers" ]
      }
      visibility = [ ":skia" ]
    }
  }
}

# Font copies.
if (is_fuchsia) {
  copy("copy_fuchsia_fonts_manifest") {
    sources = [ "ext/data/test_fonts/fuchsia_test_fonts_manifest.json" ]
    outputs = [ "$root_out_dir/test_fonts/all.font_manifest.json" ]
  }
}
if (is_apple) {
  bundle_data("test_fonts_bundle_data") {
    public_deps = [ "//third_party/test_fonts" ]

    sources = [
      "$root_out_dir/test_fonts/Ahem.ttf",
      "ext/data/test_fonts/ChromiumAATTest.ttf",
    ]

    outputs = [ "{{bundle_resources_dir}}/{{source_file_part}}" ]
  }
}

group("test_fonts_resources") {
  testonly = true
  deps = []
  data_deps = []

  if (is_apple) {
    deps += [ ":test_fonts_bundle_data" ]
    data_deps += [ ":test_fonts_bundle_data" ]
  } else {
    deps += [ "//third_party/test_fonts" ]
    data_deps += [ "//third_party/test_fonts" ]
  }

  if (is_fuchsia) {
    deps += [ ":copy_fuchsia_fonts_manifest" ]
    data_deps += [ ":copy_fuchsia_fonts_manifest" ]
  }
}

# Fuchsia components that use the test fonts must include
# "//build/config/fuchsia/test/test_fonts.shard.test-cml" in their
# `additional_manifest_fragments`.
source_set("test_fonts") {
  testonly = true

  deps = [ ":test_fonts_resources" ]

  if (is_fuchsia) {
    public = [
      "ext/test_fonts.h",
      "ext/test_fonts_fuchsia.h",
    ]
    sources = [
      "ext/test_fonts_fuchsia.cc",
      "ext/test_fonts_fuchsia_cfv2.cc",
    ]
    public_deps = [
      "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.fonts:fuchsia.fonts_hlcpp",
    ]
    deps += [
      "//base",
      "//skia",
      "//third_party/fuchsia-sdk/sdk/pkg/sys_cpp",
    ]
  }
  if (is_apple) {
    public = [ "ext/test_fonts.h" ]
    sources = [ "ext/test_fonts_mac.mm" ]
    deps += [ "//base" ]
  }
}

test("skia_unittests") {
  sources = [
    "ext/convolver_unittest.cc",
    "ext/image_operations_unittest.cc",
    "ext/platform_canvas_unittest.cc",
    "ext/recursive_gaussian_convolution_unittest.cc",
    "ext/skcolorspace_primaries_unittest.cc",
    "ext/skcolorspace_trfn_unittest.cc",
    "ext/skia_memory_dump_provider_unittest.cc",
    "ext/skia_utils_base_unittest.cc",
  ]
  if (is_ios) {
    sources += [ "ext/skia_utils_ios_unittest.mm" ]
  }
  if (is_mac) {
    sources += [ "ext/skia_utils_mac_unittest.mm" ]
  }

  if (!is_win) {
    sources -= [ "ext/platform_canvas_unittest.cc" ]
  }

  deps = [
    ":skcms",
    ":skia",
    ":test_fonts",
    "//base",
    "//base/test:test_support",
    "//mojo/core/test:run_all_unittests",
    "//testing/gtest",
    "//ui/gfx",
    "//ui/gfx/geometry",
  ]

  data_deps = [ "//testing/buildbot/filters:skia_unittests_filters" ]

  if (!is_ios) {
    sources += [ "public/mojom/test/mojom_traits_unittest.cc" ]
    deps += [
      "//mojo/public/cpp/bindings",
      "//mojo/public/cpp/test_support:test_utils",
      "//skia/public/mojom",
    ]
  }

  if (is_fuchsia) {
    sources += [ "ext/fontmgr_fuchsia_unittest.cc" ]
    deps += [
      "//third_party/fuchsia-sdk/sdk/fidl/fuchsia.fonts:fuchsia.fonts_hlcpp",
    ]
    additional_manifest_fragments =
        [ "//build/config/fuchsia/test/test_fonts.shard.test-cml" ]
  }

  if (skia_support_skottie) {
    sources += [ "ext/skottie_unittest.cc" ]
  }
}

if (!is_ios) {
  executable("image_operations_bench") {
    sources = [ "ext/image_operations_bench.cc" ]

    deps = [
      ":skia",
      "//base",
      "//build/win:default_exe_manifest",
    ]
  }

  executable("filter_fuzz_stub") {
    testonly = true
    sources = [ "tools/filter_fuzz_stub/filter_fuzz_stub.cc" ]

    deps = [
      ":skia",
      "//base",
      "//base/test:test_support",
      "//build/win:default_exe_manifest",
    ]
  }
}

group("fuzzers") {
  deps = [ "//skia/tools/fuzzers" ]
}
