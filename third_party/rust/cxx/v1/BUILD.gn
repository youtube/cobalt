# Copyright 2023 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# @generated from third_party/rust/BUILD.gn.hbs by tools/crates/gnrt.
# Do not edit!

import("//build/rust/cargo_crate.gni")

cargo_crate("lib") {
  crate_name = "cxx"
  epoch = "1"
  crate_type = "rlib"
  crate_root = "crate/src/lib.rs"
  sources = [
    "//third_party/rust/cxx/v1/crate/build.rs",
    "//third_party/rust/cxx/v1/crate/src/c_char.rs",
    "//third_party/rust/cxx/v1/crate/src/cxx_string.rs",
    "//third_party/rust/cxx/v1/crate/src/cxx_vector.rs",
    "//third_party/rust/cxx/v1/crate/src/exception.rs",
    "//third_party/rust/cxx/v1/crate/src/extern_type.rs",
    "//third_party/rust/cxx/v1/crate/src/fmt.rs",
    "//third_party/rust/cxx/v1/crate/src/function.rs",
    "//third_party/rust/cxx/v1/crate/src/hash.rs",
    "//third_party/rust/cxx/v1/crate/src/lib.rs",
    "//third_party/rust/cxx/v1/crate/src/lossy.rs",
    "//third_party/rust/cxx/v1/crate/src/macros/assert.rs",
    "//third_party/rust/cxx/v1/crate/src/macros/mod.rs",
    "//third_party/rust/cxx/v1/crate/src/memory.rs",
    "//third_party/rust/cxx/v1/crate/src/opaque.rs",
    "//third_party/rust/cxx/v1/crate/src/result.rs",
    "//third_party/rust/cxx/v1/crate/src/rust_slice.rs",
    "//third_party/rust/cxx/v1/crate/src/rust_str.rs",
    "//third_party/rust/cxx/v1/crate/src/rust_string.rs",
    "//third_party/rust/cxx/v1/crate/src/rust_type.rs",
    "//third_party/rust/cxx/v1/crate/src/rust_vec.rs",
    "//third_party/rust/cxx/v1/crate/src/shared_ptr.rs",
    "//third_party/rust/cxx/v1/crate/src/sip.rs",
    "//third_party/rust/cxx/v1/crate/src/symbols/exception.rs",
    "//third_party/rust/cxx/v1/crate/src/symbols/mod.rs",
    "//third_party/rust/cxx/v1/crate/src/symbols/rust_slice.rs",
    "//third_party/rust/cxx/v1/crate/src/symbols/rust_str.rs",
    "//third_party/rust/cxx/v1/crate/src/symbols/rust_string.rs",
    "//third_party/rust/cxx/v1/crate/src/symbols/rust_vec.rs",
    "//third_party/rust/cxx/v1/crate/src/type_id.rs",
    "//third_party/rust/cxx/v1/crate/src/unique_ptr.rs",
    "//third_party/rust/cxx/v1/crate/src/unwind.rs",
    "//third_party/rust/cxx/v1/crate/src/vector.rs",
    "//third_party/rust/cxx/v1/crate/src/weak_ptr.rs",
    "//third_party/rust/cxx/v1/crate/tests/compiletest.rs",
    "//third_party/rust/cxx/v1/crate/tests/cxx_gen.rs",
    "//third_party/rust/cxx/v1/crate/tests/cxx_string.rs",
    "//third_party/rust/cxx/v1/crate/tests/cxx_vector.rs",
    "//third_party/rust/cxx/v1/crate/tests/test.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/array_len_expr.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/array_len_suffix.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/async_fn.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/bad_explicit_impl.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/by_value_not_supported.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/const_fn.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/data_enums.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/deny_elided_lifetimes.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/deny_missing_docs.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/derive_duplicate.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/derive_noncopy.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/drop_shared.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/empty_enum.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/empty_struct.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/enum_inconsistent.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/enum_match_without_wildcard.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/enum_out_of_bounds.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/enum_overflows.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/enum_receiver.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/enum_unsatisfiable.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/expected_named.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/extern_fn_abi.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/extern_type_bound.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/extern_type_generic.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/extern_type_lifetime_bound.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/fallible_fnptr.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/function_with_body.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/generic_enum.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/impl_trait_for_type.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/include.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/lifetime_extern_cxx.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/lifetime_extern_rust.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/missing_unsafe.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/multiple_parse_error.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/mut_return.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/non_integer_discriminant_enum.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/nonempty_impl_block.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/nonlocal_rust_type.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/opaque_autotraits.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/opaque_not_sized.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/pin_mut_opaque.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/ptr_in_fnptr.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/ptr_missing_unsafe.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/ptr_no_const_mut.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/ptr_unsupported.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/raw_ident_namespace.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/reference_to_reference.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/reserved_lifetime.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/reserved_name.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/result_no_display.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/root_namespace.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/rust_pinned.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/slice_of_type_alias.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/slice_unsupported.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/struct_cycle.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/type_alias_rust.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/unique_ptr_as_mut.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/unique_ptr_to_opaque.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/unique_ptr_twice.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/unnamed_receiver.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/unpin_impl.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/unrecognized_receiver.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/unsupported_elided.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/vec_opaque.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/vector_autotraits.rs",
    "//third_party/rust/cxx/v1/crate/tests/ui/wrong_type_id.rs",
    "//third_party/rust/cxx/v1/crate/tests/unique_ptr.rs",
    "//third_party/rust/cxx/v1/crate/tools/cargo/build.rs",
  ]
  inputs = [
    "//third_party/rust/cxx/v1/crate/README.md",
    "//third_party/rust/cxx/v1/crate/book/README.md",
    "//third_party/rust/cxx/v1/crate/book/src/404.md",
    "//third_party/rust/cxx/v1/crate/book/src/SUMMARY.md",
    "//third_party/rust/cxx/v1/crate/book/src/async.md",
    "//third_party/rust/cxx/v1/crate/book/src/attributes.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/box.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/cxxstring.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/cxxvector.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/fn.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/rawptr.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/result.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/sharedptr.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/slice.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/str.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/string.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/uniqueptr.md",
    "//third_party/rust/cxx/v1/crate/book/src/binding/vec.md",
    "//third_party/rust/cxx/v1/crate/book/src/bindings.md",
    "//third_party/rust/cxx/v1/crate/book/src/build/bazel.md",
    "//third_party/rust/cxx/v1/crate/book/src/build/cargo.md",
    "//third_party/rust/cxx/v1/crate/book/src/build/cmake.md",
    "//third_party/rust/cxx/v1/crate/book/src/build/other.md",
    "//third_party/rust/cxx/v1/crate/book/src/building.md",
    "//third_party/rust/cxx/v1/crate/book/src/concepts.md",
    "//third_party/rust/cxx/v1/crate/book/src/context.md",
    "//third_party/rust/cxx/v1/crate/book/src/extern-c++.md",
    "//third_party/rust/cxx/v1/crate/book/src/extern-rust.md",
    "//third_party/rust/cxx/v1/crate/book/src/index.md",
    "//third_party/rust/cxx/v1/crate/book/src/reference.md",
    "//third_party/rust/cxx/v1/crate/book/src/shared.md",
    "//third_party/rust/cxx/v1/crate/book/src/tutorial.md",
    "//third_party/rust/cxx/v1/crate/include/cxx.h",
  ]

  # Unit tests skipped. Generate with --with-tests to include them.
  build_native_rust_unit_tests = false
  edition = "2021"
  cargo_pkg_version = "1.0.107"
  cargo_pkg_authors = "David Tolnay <dtolnay@gmail.com>"
  cargo_pkg_name = "cxx"
  cargo_pkg_description = "Safe interop between Rust and C++"
  library_configs -= [ "//build/config/compiler:chromium_code" ]
  library_configs += [ "//build/config/compiler:no_chromium_code" ]
  executable_configs -= [ "//build/config/compiler:chromium_code" ]
  executable_configs += [ "//build/config/compiler:no_chromium_code" ]
  deps = [
    "//third_party/rust/cxxbridge_macro/v1:lib",
    "//third_party/rust/link_cplusplus/v1:lib",
  ]
  features = [
    "alloc",
    "std",
  ]
  build_root = "crate/build.rs"
  build_sources = [ "crate/build.rs" ]
}
