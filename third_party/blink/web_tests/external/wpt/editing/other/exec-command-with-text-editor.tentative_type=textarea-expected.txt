This is a testharness.js-based test.
Found 42 FAIL, 0 TIMEOUT, 0 NOTRUN.
[FAIL] In <textarea>, execCommand("cut", false, null), ab[]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("copy", false, null), abc[]d): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("paste", false, null), a[]c): <textarea>.value should be "a[bc]c"
  assert_equals: expected "a[bc]c" but got "abc[]c"
[FAIL] In <textarea>, execCommand("undo", false, null), [a]bc): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("undo", false, null), [a]bc): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("undo", false, null), [a]bc): input.inputType should be undefined
  assert_equals: expected (undefined) undefined but got (string) "historyUndo"
[FAIL] In <textarea>, execCommand("undo", false, null), [a]bc): input.target should be undefined
  assert_equals: expected (undefined) undefined but got (object) Element node <textarea id="target"></textarea>
[FAIL] In <textarea>, execCommand("redo", false, null), [a]bc): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("redo", false, null), [a]bc): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("redo", false, null), [a]bc): input.inputType should be undefined
  assert_equals: expected (undefined) undefined but got (string) "historyRedo"
[FAIL] In <textarea>, execCommand("redo", false, null), [a]bc): input.target should be undefined
  assert_equals: expected (undefined) undefined but got (object) Element node <textarea id="target"></textarea>
[FAIL] In <textarea>, execCommand("redo", false, null), a[b]c): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <textarea>, execCommand("inserthtml", false, <b>inserted</b>), a[b]c): input.inputType should be insertText
  assert_equals: expected "insertText" but got ""
[FAIL] In <textarea>, execCommand("removeformat", false, null), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("removeformat", false, null), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("styleWithCSS", false, true), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("styleWithCSS", false, true), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("styleWithCSS", false, true), a[b]c): styleWithCSS state should be false when <textarea> has focus
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("styleWithCSS", false, true), a[b]c): styleWithCSS state should be false when <textarea> does not have focus
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("styleWithCSS", false, false), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("styleWithCSS", false, false), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("defaultParagraphSeparator", false, p), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("defaultParagraphSeparator", false, p), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("defaultParagraphSeparator", false, p), a[b]c): defaultParagraphSeparator value should be "p" when <textarea> has focus
  assert_equals: expected "div" but got "p"
[FAIL] In <textarea>, execCommand("defaultParagraphSeparator", false, p), a[b]c): defaultParagraphSeparator value should be "p" when <textarea> does not have focus
  assert_equals: expected "div" but got "p"
[FAIL] In <textarea>, execCommand("defaultParagraphSeparator", false, div), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea>, execCommand("defaultParagraphSeparator", false, div), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea> in contenteditable, execCommand("cut", false, null), ab[]c): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea> in contenteditable, execCommand("copy", false, null), abc[]d): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea> in contenteditable, execCommand("paste", false, null), a[]c): <textarea>.value should be "a[bc]c"
  assert_equals: expected "a[bc]c" but got "abc[]c"
[FAIL] In <textarea> in contenteditable, execCommand("undo", false, null), [a]bc): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea> in contenteditable, execCommand("undo", false, null), [a]bc): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea> in contenteditable, execCommand("undo", false, null), [a]bc): input.inputType should be undefined
  assert_equals: expected (undefined) undefined but got (string) "historyUndo"
[FAIL] In <textarea> in contenteditable, execCommand("undo", false, null), [a]bc): input.target should be undefined
  assert_equals: expected (undefined) undefined but got (object) Element node <textarea id="target"></textarea>
[FAIL] In <textarea> in contenteditable, execCommand("redo", false, null), [a]bc): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea> in contenteditable, execCommand("redo", false, null), [a]bc): execCommand() should return false
  assert_equals: expected false but got true
[FAIL] In <textarea> in contenteditable, execCommand("redo", false, null), [a]bc): input.inputType should be undefined
  assert_equals: expected (undefined) undefined but got (string) "historyRedo"
[FAIL] In <textarea> in contenteditable, execCommand("redo", false, null), [a]bc): input.target should be undefined
  assert_equals: expected (undefined) undefined but got (object) Element node <textarea id="target"></textarea>
[FAIL] In <textarea> in contenteditable, execCommand("redo", false, null), a[b]c): The command should be enabled
  assert_equals: expected true but got false
[FAIL] In <textarea> in contenteditable, execCommand("inserthtml", false, <b>inserted</b>), a[b]c): input.inputType should be insertText
  assert_equals: expected "insertText" but got ""
[FAIL] In <textarea> in contenteditable, execCommand("removeformat", false, null), a[b]c): The command should not be enabled
  assert_equals: expected false but got true
[FAIL] In <textarea> in contenteditable, execCommand("removeformat", false, null), a[b]c): execCommand() should return false
  assert_equals: expected false but got true
Harness: the test ran to completion.

