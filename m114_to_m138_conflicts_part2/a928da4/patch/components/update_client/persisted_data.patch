--- components/update_client/persisted_data.cc
+++ components/update_client/persisted_data.cc
@@ -61,6 +61,18 @@
   // PersistedData overrides:
   int GetDateLastRollCall(const std::string& id) const override;
   int GetDateLastActive(const std::string& id) const override;
+
+#if BUILDFLAG(IS_STARBOARD)
+  std::string GetLastInstalledSbVersion(const std::string& id) const override;
+  std::string GetLastInstalledVersion(const std::string& id) const override;
+  std::string GetUpdaterChannel(const std::string& id) const override;
+  std::string GetLatestChannel() const override;
+  void SetLastInstalledEgAndSbVersion(const std::string& id,
+                                      const std::string& eg_version,
+                                      const std::string& sb_version) override;
+  void SetUpdaterChannel(const std::string& id, const std::string& channel) override;
+  void SetLatestChannel(const std::string& channel) override;
+#endif
   std::string GetPingFreshness(const std::string& id) const override;
   void SetDateLastData(const std::vector<std::string>& ids,
                        int datenum,
@@ -197,49 +209,51 @@
   return !result.empty() ? base::StringPrintf("{%s}", result.c_str()) : result;
 }
 
-<<<<<<< HEAD
-int PersistedDataImpl::GetInstallDate(const std::string& id) const {
-=======
 #if BUILDFLAG(IS_STARBOARD)
-std::string PersistedData::GetLastInstalledSbVersion(const std::string& id) const {
+std::string PersistedDataImpl::GetLastInstalledSbVersion(const std::string& id) const {
   return GetString(id, "sbversion");
 }
 
-std::string PersistedData::GetLastInstalledVersion(const std::string& id) const {
+std::string PersistedDataImpl::GetLastInstalledVersion(const std::string& id) const {
   return GetString(id, "version");
 }
-std::string PersistedData::GetUpdaterChannel(const std::string& id) const {
+std::string PersistedDataImpl::GetUpdaterChannel(const std::string& id) const {
   return GetString(id, "updaterchannel");
 }
-std::string PersistedData::GetLatestChannel() const {
-  const base::Value::Dict* dict =
-      &pref_service_->GetDict(kPersistedDataPreference);
-  if (!dict)
+std::string PersistedDataImpl::GetLatestChannel() const {
+  PrefService* pref_service = pref_service_provider_.Run();
+  if (!pref_service) {
     return std::string();
-  const std::string* result = dict->FindString("latestchannel");
+  }
+  const base::Value& dict = pref_service->GetValue(kPersistedDataPreference);
+  if (!dict.is_dict())
+    return std::string();
+  const std::string* result = dict.GetDict().FindString("latestchannel");
   return result != nullptr ? *result : std::string();
 }
-void PersistedData::SetLastInstalledEgAndSbVersion(const std::string& id,
+void PersistedDataImpl::SetLastInstalledEgAndSbVersion(const std::string& id,
                                                    const std::string& eg_version,
                                                    const std::string& sb_version) {
   SetString(id, "version", eg_version);
   SetString(id, "sbversion", sb_version);
 }
-void PersistedData::SetUpdaterChannel(const std::string& id,
+void PersistedDataImpl::SetUpdaterChannel(const std::string& id,
                                       const std::string& channel) {
   SetString(id, "updaterchannel", channel);
 }
-void PersistedData::SetLatestChannel(const std::string& channel) {
+void PersistedDataImpl::SetLatestChannel(const std::string& channel) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (!pref_service_)
+  PrefService* pref_service = pref_service_provider_.Run();
+  if (!pref_service) {
     return;
-  ScopedDictPrefUpdate update(pref_service_, kPersistedDataPreference);
-  update->Set("latestchannel", channel);
+  }
+  ScopedDictPrefUpdate update(pref_service, kPersistedDataPreference);
+  base::Value::Dict* app_key = GetOrCreateAppKey("latestchannel", update.Get());
+  app_key->Set("latestchannel", channel);
 }
 #endif
 
-int PersistedData::GetInstallDate(const std::string& id) const {
->>>>>>> b1bc10e96c9 (evergreen: Apply the customizations to update_client (#6949))
+int PersistedDataImpl::GetInstallDate(const std::string& id) const {
   return GetInt(id, "installdate", kDateUnknown);
 }
 
