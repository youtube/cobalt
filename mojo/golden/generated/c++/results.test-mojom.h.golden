// results.test-mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef RESULTS_TEST_MOJOM_H_
#define RESULTS_TEST_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <optional>
#include <type_traits>
#include <utility>

#include "base/types/cxx23_to_underlying.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "results.test-mojom-features.h"  // IWYU pragma: export
#include "results.test-mojom-shared.h"  // IWYU pragma: export
#include "results.test-mojom-forward.h"  // IWYU pragma: export
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/message_size_estimator.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "base/types/expected.h"




namespace golden {

class ResultInterfaceProxy;

template <typename ImplRefTraits>
class ResultInterfaceStub;

class ResultInterfaceRequestValidator;
class ResultInterfaceResponseValidator;


class ResultInterface
    : public ResultInterfaceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static inline constexpr uint32_t kSyncMethodOrdinals[] = {
    1
  };
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = ResultInterfaceInterfaceBase;
  using Proxy_ = ResultInterfaceProxy;

  template <typename ImplRefTraits>
  using Stub_ = ResultInterfaceStub<ImplRefTraits>;

  using RequestValidator_ = ResultInterfaceRequestValidator;
  using ResponseValidator_ = ResultInterfaceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kMethodMinVersion = 0,
    kSyncMethodMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Method_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SyncMethod_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~ResultInterface() = default;

  using MethodCallback = base::OnceCallback<void(base::expected<
  bool,
  ResultTestErrorPtr>)>;
  using MethodResult = base::expected<
  bool,
  ResultTestErrorPtr>;
  using MethodMojoCallback = base::OnceCallback<void(ResultInterface_Method_ResponseParam_ResultPtr)>;

  virtual void Method(bool a, MethodCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool SyncMethod(bool a,
base::expected<
  bool,
  ResultTestErrorPtr>* out_result);
  using SyncMethodCallback = base::OnceCallback<void(base::expected<
  bool,
  ResultTestErrorPtr>)>;
  using SyncMethodResult = base::expected<
  bool,
  ResultTestErrorPtr>;
  using SyncMethodMojoCallback = base::OnceCallback<void(ResultInterface_SyncMethod_ResponseParam_ResultPtr)>;

  virtual void SyncMethod(bool a, SyncMethodCallback callback) = 0;
};



class  ResultInterfaceProxy
    : public ResultInterface {
 public:
  using InterfaceType = ResultInterface;

  explicit ResultInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Method(bool a, MethodCallback callback) final;
  
  bool SyncMethod(bool a,
base::expected<
  bool,
  ResultTestErrorPtr>* out_result) final;
  
  void SyncMethod(bool a, SyncMethodCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  ResultInterfaceStubDispatch {
 public:
  static bool Accept(ResultInterface* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ResultInterface* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ResultInterface>>
class ResultInterfaceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ResultInterfaceStub() = default;
  ~ResultInterfaceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ResultInterfaceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ResultInterfaceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  ResultInterfaceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  ResultInterfaceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





class  ResultTestError {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ResultTestError, T>::value>;
  using DataView = ResultTestErrorDataView;
  using Data_ = internal::ResultTestError_Data;

  template <typename... Args>
  static ResultTestErrorPtr New(Args&&... args) {
    return ResultTestErrorPtr(
        std::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ResultTestErrorPtr From(const U& u) {
    return mojo::TypeConverter<ResultTestErrorPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ResultTestError>::Convert(*this);
  }


  ResultTestError();


  ~ResultTestError();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ResultTestErrorPtr>
  ResultTestErrorPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ResultTestError::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ResultTestError::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename T, ResultTestError::EnableIfSame<T>* = nullptr>
  bool operator!=(const T& rhs) const { return !operator==(rhs); }
  size_t Hash(size_t seed) const;

  template <mojo::internal::SendValidation send_validation, typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ResultTestError::DataView, std::vector<uint8_t>, send_validation>(input);
  }

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ResultTestError::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ResultTestError::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ResultTestError_UnserializedMessageContext<
            UserType, ResultTestError::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ResultTestError::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(base::span<const uint8_t> input,
                          UserType* output) {
    return ResultTestError::Deserialize(
        input.empty() ? nullptr : input.data(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ResultTestError_UnserializedMessageContext<
            UserType, ResultTestError::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ResultTestError::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ResultTestError::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ResultTestError::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ResultTestError::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ResultTestError::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  ResultInterface_Method_ResponseParam_Result {
 public:
  using DataView = ResultInterface_Method_ResponseParam_ResultDataView;
  using Data_ = internal::ResultInterface_Method_ResponseParam_Result_Data;
  using Tag = Data_::ResultInterface_Method_ResponseParam_Result_Tag;

  template <typename... Args>
  static ResultInterface_Method_ResponseParam_ResultPtr New(Args&&... args) {
    static_assert(
        sizeof...(args) < 0,
        "Do not use Union::New(); to create a union of a given subtype, use "
        "New<SubType>(), not New() followed by set_<sub_type>(). To represent "
        "an empty union, mark the field or parameter as nullable in the mojom "
        "definition.");
    return nullptr;
  }
  // Construct an instance holding |success|.
  static ResultInterface_Method_ResponseParam_ResultPtr
  NewSuccess(
      bool value) {
    auto result = ResultInterface_Method_ResponseParam_ResultPtr(std::in_place);
    result->set_success(std::move(value));
    return result;
  }
  // Construct an instance holding |failure|.
  static ResultInterface_Method_ResponseParam_ResultPtr
  NewFailure(
      ResultTestErrorPtr value) {
    auto result = ResultInterface_Method_ResponseParam_ResultPtr(std::in_place);
    result->set_failure(std::move(value));
    return result;
  }

  template <typename U>
  static ResultInterface_Method_ResponseParam_ResultPtr From(const U& u) {
    return mojo::TypeConverter<ResultInterface_Method_ResponseParam_ResultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ResultInterface_Method_ResponseParam_Result>::Convert(*this);
  }

  ResultInterface_Method_ResponseParam_Result();
  ~ResultInterface_Method_ResponseParam_Result();
  // Delete the copy constructor and copy assignment operators because `data_`
  // contains raw pointers that must not be copied.
  ResultInterface_Method_ResponseParam_Result(const ResultInterface_Method_ResponseParam_Result& other) = delete;
  ResultInterface_Method_ResponseParam_Result& operator=(const ResultInterface_Method_ResponseParam_Result& other) = delete;

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = ResultInterface_Method_ResponseParam_ResultPtr>
  ResultInterface_Method_ResponseParam_ResultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, ResultInterface_Method_ResponseParam_Result>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, ResultInterface_Method_ResponseParam_Result>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
  bool is_success() const { return tag_ == Tag::kSuccess; }

  
  bool get_success() const {
    CHECK(tag_ == Tag::kSuccess);
    return data_.success;
  }

  
  void set_success(
      bool success);
  
  bool is_failure() const { return tag_ == Tag::kFailure; }

  
  ResultTestErrorPtr& get_failure() const {
    CHECK(tag_ == Tag::kFailure);
    return *(data_.failure);
  }

  
  void set_failure(
      ResultTestErrorPtr failure);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ResultInterface_Method_ResponseParam_Result::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<ResultInterface_Method_ResponseParam_Result::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() = default;
    ~Union_() = default;
    bool success;
    ResultTestErrorPtr* failure;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};



class  ResultInterface_SyncMethod_ResponseParam_Result {
 public:
  using DataView = ResultInterface_SyncMethod_ResponseParam_ResultDataView;
  using Data_ = internal::ResultInterface_SyncMethod_ResponseParam_Result_Data;
  using Tag = Data_::ResultInterface_SyncMethod_ResponseParam_Result_Tag;

  template <typename... Args>
  static ResultInterface_SyncMethod_ResponseParam_ResultPtr New(Args&&... args) {
    static_assert(
        sizeof...(args) < 0,
        "Do not use Union::New(); to create a union of a given subtype, use "
        "New<SubType>(), not New() followed by set_<sub_type>(). To represent "
        "an empty union, mark the field or parameter as nullable in the mojom "
        "definition.");
    return nullptr;
  }
  // Construct an instance holding |success|.
  static ResultInterface_SyncMethod_ResponseParam_ResultPtr
  NewSuccess(
      bool value) {
    auto result = ResultInterface_SyncMethod_ResponseParam_ResultPtr(std::in_place);
    result->set_success(std::move(value));
    return result;
  }
  // Construct an instance holding |failure|.
  static ResultInterface_SyncMethod_ResponseParam_ResultPtr
  NewFailure(
      ResultTestErrorPtr value) {
    auto result = ResultInterface_SyncMethod_ResponseParam_ResultPtr(std::in_place);
    result->set_failure(std::move(value));
    return result;
  }

  template <typename U>
  static ResultInterface_SyncMethod_ResponseParam_ResultPtr From(const U& u) {
    return mojo::TypeConverter<ResultInterface_SyncMethod_ResponseParam_ResultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ResultInterface_SyncMethod_ResponseParam_Result>::Convert(*this);
  }

  ResultInterface_SyncMethod_ResponseParam_Result();
  ~ResultInterface_SyncMethod_ResponseParam_Result();
  // Delete the copy constructor and copy assignment operators because `data_`
  // contains raw pointers that must not be copied.
  ResultInterface_SyncMethod_ResponseParam_Result(const ResultInterface_SyncMethod_ResponseParam_Result& other) = delete;
  ResultInterface_SyncMethod_ResponseParam_Result& operator=(const ResultInterface_SyncMethod_ResponseParam_Result& other) = delete;

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = ResultInterface_SyncMethod_ResponseParam_ResultPtr>
  ResultInterface_SyncMethod_ResponseParam_ResultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, ResultInterface_SyncMethod_ResponseParam_Result>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, ResultInterface_SyncMethod_ResponseParam_Result>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;

  Tag which() const {
    return tag_;
  }


  
  bool is_success() const { return tag_ == Tag::kSuccess; }

  
  bool get_success() const {
    CHECK(tag_ == Tag::kSuccess);
    return data_.success;
  }

  
  void set_success(
      bool success);
  
  bool is_failure() const { return tag_ == Tag::kFailure; }

  
  ResultTestErrorPtr& get_failure() const {
    CHECK(tag_ == Tag::kFailure);
    return *(data_.failure);
  }

  
  void set_failure(
      ResultTestErrorPtr failure);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ResultInterface_SyncMethod_ResponseParam_Result::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<ResultInterface_SyncMethod_ResponseParam_Result::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() = default;
    ~Union_() = default;
    bool success;
    ResultTestErrorPtr* failure;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};


template <typename UnionPtrType>
ResultInterface_Method_ResponseParam_ResultPtr ResultInterface_Method_ResponseParam_Result::Clone() const {
  switch (tag_) {
    case Tag::kSuccess:
      return NewSuccess(
          mojo::Clone(data_.success));
    case Tag::kFailure:
      return NewFailure(
          mojo::Clone(*data_.failure));
  }
  return nullptr;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, ResultInterface_Method_ResponseParam_Result>::value>::type*>
bool ResultInterface_Method_ResponseParam_Result::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::kSuccess:
      return mojo::Equals(data_.success, other.data_.success);
    case Tag::kFailure:
      return mojo::Equals(*(data_.failure), *(other.data_.failure));
  }

  return false;
}
template <typename UnionPtrType>
ResultInterface_SyncMethod_ResponseParam_ResultPtr ResultInterface_SyncMethod_ResponseParam_Result::Clone() const {
  switch (tag_) {
    case Tag::kSuccess:
      return NewSuccess(
          mojo::Clone(data_.success));
    case Tag::kFailure:
      return NewFailure(
          mojo::Clone(*data_.failure));
  }
  return nullptr;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, ResultInterface_SyncMethod_ResponseParam_Result>::value>::type*>
bool ResultInterface_SyncMethod_ResponseParam_Result::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::kSuccess:
      return mojo::Equals(data_.success, other.data_.success);
    case Tag::kFailure:
      return mojo::Equals(*(data_.failure), *(other.data_.failure));
  }

  return false;
}
template <typename StructPtrType>
ResultTestErrorPtr ResultTestError::Clone() const {
  return New(
  );
}

template <typename T, ResultTestError::EnableIfSame<T>*>
bool ResultTestError::Equals(const T& other_struct) const {
  return true;
}

template <typename T, ResultTestError::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}


}  // golden

namespace mojo {


template <>
struct  StructTraits<::golden::ResultTestError::DataView,
                                         ::golden::ResultTestErrorPtr> {
  static bool IsNull(const ::golden::ResultTestErrorPtr& input) { return !input; }
  static void SetToNull(::golden::ResultTestErrorPtr* output) { output->reset(); }

  static bool Read(::golden::ResultTestError::DataView input, ::golden::ResultTestErrorPtr* output);
};


template <>
struct  UnionTraits<::golden::ResultInterface_Method_ResponseParam_Result::DataView,
                                        ::golden::ResultInterface_Method_ResponseParam_ResultPtr> {
  static bool IsNull(const ::golden::ResultInterface_Method_ResponseParam_ResultPtr& input) { return !input; }
  static void SetToNull(::golden::ResultInterface_Method_ResponseParam_ResultPtr* output) { output->reset(); }

  static ::golden::ResultInterface_Method_ResponseParam_Result::Tag GetTag(const ::golden::ResultInterface_Method_ResponseParam_ResultPtr& input) {
    return input->which();
  }

  static  bool success(const ::golden::ResultInterface_Method_ResponseParam_ResultPtr& input) {
    return input->get_success();
  }

  static const ::golden::ResultTestErrorPtr& failure(const ::golden::ResultInterface_Method_ResponseParam_ResultPtr& input) {
    return input->get_failure();
  }

  static bool Read(::golden::ResultInterface_Method_ResponseParam_Result::DataView input, ::golden::ResultInterface_Method_ResponseParam_ResultPtr* output);
};


template <>
struct  UnionTraits<::golden::ResultInterface_SyncMethod_ResponseParam_Result::DataView,
                                        ::golden::ResultInterface_SyncMethod_ResponseParam_ResultPtr> {
  static bool IsNull(const ::golden::ResultInterface_SyncMethod_ResponseParam_ResultPtr& input) { return !input; }
  static void SetToNull(::golden::ResultInterface_SyncMethod_ResponseParam_ResultPtr* output) { output->reset(); }

  static ::golden::ResultInterface_SyncMethod_ResponseParam_Result::Tag GetTag(const ::golden::ResultInterface_SyncMethod_ResponseParam_ResultPtr& input) {
    return input->which();
  }

  static  bool success(const ::golden::ResultInterface_SyncMethod_ResponseParam_ResultPtr& input) {
    return input->get_success();
  }

  static const ::golden::ResultTestErrorPtr& failure(const ::golden::ResultInterface_SyncMethod_ResponseParam_ResultPtr& input) {
    return input->get_failure();
  }

  static bool Read(::golden::ResultInterface_SyncMethod_ResponseParam_Result::DataView input, ::golden::ResultInterface_SyncMethod_ResponseParam_ResultPtr* output);
};

}  // namespace mojo

#endif  // RESULTS_TEST_MOJOM_H_