This is a testharness.js-based test.
Found 59 FAIL, 0 TIMEOUT, 0 NOTRUN.
[FAIL] Parsing: <file:/example.com/> against <http://example.org/foo/bar>
  assert_equals: href expected "file:///example.com/" but got "file://example.com/"
[FAIL] Parsing: <file:c:\\foo\\bar.html> against <file:///tmp/mock/path>
  assert_equals: href expected "file:///c:/foo/bar.html" but got "file:///C:/foo/bar.html"
[FAIL] Parsing: <  File:c|////foo\\bar.html> against <file:///tmp/mock/path>
  assert_equals: href expected "file:///c:////foo/bar.html" but got "file:///C:////foo/bar.html"
[FAIL] Parsing: <file://localhost> against <file:///tmp/mock/path>
  assert_equals: href expected "file:///" but got "file://localhost/"
[FAIL] Parsing: <file://localhost/> against <file:///tmp/mock/path>
  assert_equals: href expected "file:///" but got "file://localhost/"
[FAIL] Parsing: <file://localhost/test> against <file:///tmp/mock/path>
  assert_equals: href expected "file:///test" but got "file://localhost/test"
[FAIL] Parsing: <file:///w|m> without base
  assert_equals: href expected "file:///w|m" but got "file:///W:/m"
[FAIL] Parsing: <file:///w||m> without base
  assert_equals: href expected "file:///w||m" but got "file:///W:/%7Cm"
[FAIL] Parsing: <file:///w|/m> without base
  assert_equals: href expected "file:///w:/m" but got "file:///W:/m"
[FAIL] Parsing: <file:C||/m/> without base
  assert_equals: href expected "file:///C||/m/" but got "file:///C:/%7C/m/"
[FAIL] Parsing: <file:/example.com/> without base
  assert_equals: href expected "file:///example.com/" but got "file://example.com/"
[FAIL] Parsing: <file:...> against <http://www.example.com/test>
  assert_equals: href expected "file:///..." but got "file://.../"
[FAIL] Parsing: <file:..> against <http://www.example.com/test>
  assert_equals: href expected "file:///" but got "file://../"
[FAIL] Parsing: <file:a> against <http://www.example.com/test>
  assert_equals: href expected "file:///a" but got "file://a/"
[FAIL] Parsing: <file:.> without base
  assert_equals: href expected "file:///" but got "file://./"
[FAIL] Parsing: <file:.> against <http://www.example.com/test>
  assert_equals: href expected "file:///" but got "file://./"
[FAIL] Parsing: <//d:> against <file:///C:/a/b>
  assert_equals: href expected "file:///d:" but got "file:///D:"
[FAIL] Parsing: <//d:/..> against <file:///C:/a/b>
  assert_equals: href expected "file:///d:/" but got "file:///D:/"
[FAIL] Parsing: <file:\\\\//> without base
  assert_equals: href expected "file:////" but got "file:///"
[FAIL] Parsing: <file:\\\\\\\\> without base
  assert_equals: href expected "file:////" but got "file:///"
[FAIL] Parsing: <file:\\\\\\\\?fox> without base
  Failed to construct 'URL': Invalid URL
[FAIL] Parsing: <file:\\\\\\\\#guppy> without base
  Failed to construct 'URL': Invalid URL
[FAIL] Parsing: <file:\\\\localhost//> without base
  assert_equals: href expected "file:////" but got "file://localhost//"
[FAIL] Parsing: <file://\\/localhost//cat> without base
  assert_equals: href expected "file:////localhost//cat" but got "file://localhost//cat"
[FAIL] Parsing: <file://localhost//a//../..//> without base
  assert_equals: href expected "file://///" but got "file://localhost///"
[FAIL] Parsing: </////mouse> against <file:///elephant>
  assert_equals: href expected "file://///mouse" but got "file://mouse/"
[FAIL] Parsing: <\\/localhost//pig> against <file://lion/>
  assert_equals: href expected "file:////pig" but got "file://localhost//pig"
[FAIL] Parsing: <//localhost//pig> against <file://lion/>
  assert_equals: href expected "file:////pig" but got "file://localhost//pig"
[FAIL] Parsing: <C|> against <file://host/dir/file>
  assert_equals: href expected "file://host/C:" but got "file:///C:"
[FAIL] Parsing: <C|> against <file://host/D:/dir1/dir2/file>
  assert_equals: href expected "file://host/C:" but got "file:///C:"
[FAIL] Parsing: <C|#> against <file://host/dir/file>
  assert_equals: href expected "file://host/C:#" but got "file:///C:#"
[FAIL] Parsing: <C|?> against <file://host/dir/file>
  assert_equals: href expected "file://host/C:?" but got "file:///C:?"
[FAIL] Parsing: <C|/> against <file://host/dir/file>
  assert_equals: href expected "file://host/C:/" but got "file:///C:/"
[FAIL] Parsing: <C|\n/> against <file://host/dir/file>
  assert_equals: href expected "file://host/C:/" but got "file:///C:/"
[FAIL] Parsing: <C|\\> against <file://host/dir/file>
  assert_equals: href expected "file://host/C:/" but got "file:///C:/"
[FAIL] Parsing: <C|a> against <file://host/dir/file>
  assert_equals: href expected "file://host/dir/C|a" but got "file:///C:/a"
[FAIL] Parsing: </c:/foo/bar> against <file:///c:/baz/qux>
  assert_equals: href expected "file:///c:/foo/bar" but got "file:///C:/foo/bar"
[FAIL] Parsing: </c|/foo/bar> against <file:///c:/baz/qux>
  assert_equals: href expected "file:///c:/foo/bar" but got "file:///C:/foo/bar"
[FAIL] Parsing: <file:\\c:\\foo\\bar> against <file:///c:/baz/qux>
  assert_equals: href expected "file:///c:/foo/bar" but got "file:///C:/foo/bar"
[FAIL] Parsing: </c:/foo/bar> against <file://host/path>
  assert_equals: href expected "file://host/c:/foo/bar" but got "file:///C:/foo/bar"
[FAIL] Parsing: <C|/> against <file://host/>
  assert_equals: href expected "file://host/C:/" but got "file:///C:/"
[FAIL] Parsing: </C:/> against <file://host/>
  assert_equals: href expected "file://host/C:/" but got "file:///C:/"
[FAIL] Parsing: <file:C:/> against <file://host/>
  assert_equals: href expected "file://host/C:/" but got "file:///C:/"
[FAIL] Parsing: <file:/C:/> against <file://host/>
  assert_equals: href expected "file://host/C:/" but got "file:///C:/"
[FAIL] Parsing: <file:?q=v> without base
  Failed to construct 'URL': Invalid URL
[FAIL] Parsing: <file:#frag> without base
  Failed to construct 'URL': Invalid URL
[FAIL] Parsing: <file:///y:> without base
  assert_equals: href expected "file:///y:" but got "file:///Y:"
[FAIL] Parsing: <file:///y:/> without base
  assert_equals: href expected "file:///y:/" but got "file:///Y:/"
[FAIL] Parsing: <file:///./y:> without base
  assert_equals: href expected "file:///y:" but got "file:///Y:"
[FAIL] Parsing: <file://localhost//a//../..//foo> without base
  assert_equals: href expected "file://///foo" but got "file://localhost///foo"
[FAIL] Parsing: <file://localhost////foo> without base
  assert_equals: href expected "file://////foo" but got "file://localhost////foo"
[FAIL] Parsing: <file:////foo> without base
  assert_equals: href expected "file:////foo" but got "file://foo/"
[FAIL] Parsing: <file:////one/two> against <file:///>
  assert_equals: href expected "file:////one/two" but got "file://one/two"
[FAIL] Parsing: <////one/two> against <file:///>
  assert_equals: href expected "file:////one/two" but got "file://one/two"
[FAIL] Parsing: <file:.//p> without base
  assert_equals: href expected "file:////p" but got "file://.//p"
[FAIL] Parsing: <file:/.//p> without base
  assert_equals: href expected "file:////p" but got "file://.//p"
[FAIL] Parsing: <file://loC𝐀𝐋𝐇𝐨𝐬𝐭/usr/bin> without base
  assert_equals: href expected "file:///usr/bin" but got "file://localhost/usr/bin"
[FAIL] Parsing: <file://xn--/p> without base
  assert_throws_js: function "function() {\n          new URL(expected.input, base);\n        }" did not throw
[FAIL] Parsing: </\\//\\/a/../> against <file:///>
  assert_equals: href expected "file://////" but got "file://a/"
Harness: the test ran to completion.

