// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Use the <code>chrome.os.events</code> API to subscribe to real time events.
[implemented_in = "chrome/browser/chromeos/extensions/telemetry/api/events/events_api.h", modernised_enums]
namespace os.events {
    enum EventCategory {
        audio_jack,
        lid
    };

    enum EventSupportStatus {
        supported,
        unsupported
    };

    dictionary EventSupportStatusInfo {
        EventSupportStatus? status;
    };

    callback EventSupportStatusInfoCallback = void(
        EventSupportStatusInfo info);

    enum AudioJackEvent {
        // The audio jack was connected.
        connected,
        // The audio jack was disconnected.
        disconnected
    };

    enum AudioJackDeviceType {
        // The device is a headphone.
        headphone,
        // The device is a microphone.
        microphone
    };

    enum LidEvent {
        // The lid was closed.
        closed,
        // The lid was opened.
        opened
    };

    dictionary AudioJackEventInfo {
        AudioJackEvent? event;
        AudioJackDeviceType? deviceType;
    };

    dictionary LidEventInfo {
        LidEvent? event;
    };

    callback VoidCallback = void();

    interface Functions {
        // Checks whether an event is supported. The information returned by
        // this method is valid across reboots of the device.
        [supportsPromises] static void isEventSupported(
            EventCategory category, EventSupportStatusInfoCallback callback);

        // Starts capturing events for `EventCategory`. After calling this
        // method, an extension can expect to be updated about events through
        // invocations of `on<EventCategory>Event`, until either the PWA is
        // closed or `stopCapturingEvents` is called. Note that an extension
        // is only able to subscribe to events if the PWA is currently open.
        [supportsPromises] static void startCapturingEvents(
            EventCategory category, VoidCallback callback);

        // Stops capturing `EventCategory` events. This means
        // `on<EventCategory>Event` won't be invoked until
        // `startCapturingEvents` is succesfully called.
        [supportsPromises] static void stopCapturingEvents(
            EventCategory category, VoidCallback callback);
    };

    interface Events {
        // Informs the extension  that an `AudioJack` event occured.
        static void onAudioJackEvent(AudioJackEventInfo event_info);

        // Informs the extension that a `Lid` event occured.
        static void onLidEvent(LidEventInfo event_info);
    };
};
