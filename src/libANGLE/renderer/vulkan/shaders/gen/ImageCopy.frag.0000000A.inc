// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000000A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000000A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xcd,0x6f,0x94,0x55,
    0x14,0xc6,0xef,0x9d,0x99,0x76,0x5a,0x4a,0x07,0xb0,0xd0,0x52,0xc1,0x52,0x18,0x15,
    0x9b,0x16,0x3a,0x35,0x20,0x4d,0x54,0x52,0x1b,0xa4,0x56,0x47,0x8b,0xda,0xbd,0x31,
    0x71,0xe3,0x42,0x58,0xe8,0x8e,0xc4,0x18,0x63,0xea,0xa2,0xe9,0x8a,0x7f,0x81,0x0f,
    0x11,0x13,0x44,0x0d,0xf2,0xb1,0x14,0x45,0x22,0xa9,0xda,0x68,0xaa,0x36,0x76,0xa5,
    0x36,0x46,0x88,0x55,0x8b,0x94,0x46,0xd1,0x73,0xde,0xfb,0x3b,0xcc,0x49,0x43,0x42,
    0x93,0x9b,0xf7,0xbd,0xcf,0xf9,0x7a,0x9e,0x73,0xce,0xbc,0x69,0x3e,0x57,0x2e,0x86,
    0x10,0xc3,0x8a,0xd0,0x10,0xf6,0xc5,0x90,0xfd,0xad,0x09,0xb9,0xa0,0xaf,0x4d,0xa1,
    0x3e,0x7b,0x0e,0x55,0x9f,0xaf,0x6e,0x7f,0xf5,0xb5,0x97,0xb6,0xef,0xd8,0x59,0x51,
    0x7b,0x29,0xe4,0x33,0x3f,0xb5,0xad,0x0a,0xc5,0x50,0x90,0xa7,0x9e,0x57,0x5e,0x7c,
    0x79,0xbf,0xe2,0xc7,0xe4,0x9c,0x97,0xb3,0x5a,0xfc,0x14,0x97,0x02,0xe1,0x89,0x50,
    0x17,0x5a,0x53,0xfa,0x50,0xe6,0x69,0x58,0x04,0x6b,0x70,0x58,0x0e,0x6c,0xb5,0xc3,
    0xf2,0x60,0x6b,0x1d,0x56,0x00,0x5b,0xef,0xb0,0x3a,0xb0,0x8d,0x0e,0xab,0x07,0xeb,
    0x74,0x58,0x11,0xec,0x5e,0x87,0x35,0x80,0x3d,0xe0,0xb0,0x46,0xb0,0x1e,0x87,0xad,
    0x00,0xab,0x38,0xac,0x09,0x6c,0x87,0xc3,0x56,0x82,0xf5,0x3b,0xac,0x19,0xec,0x11,
    0x87,0x95,0xc0,0x06,0xb4,0xdf,0xa2,0xd4,0x7a,0x30,0x24,0x0a,0x8f,0x91,0x7b,0x15,
    0xf7,0x53,0xf2,0xdc,0x42,0x0f,0xed,0xbe,0xd9,0xdd,0xb5,0xf7,0x1d,0xdc,0x5b,0x24,
    0x4b,0x2e,0xb3,0xe7,0xb3,0xfe,0xe9,0xfb,0x3a,0xf1,0xa9,0xa7,0x17,0xda,0xfb,0x36,
    0xb9,0x17,0xe9,0x91,0xd9,0x9b,0xb1,0x07,0xec,0x25,0x78,0x17,0xb2,0xdc,0x6b,0x6e,
    0xf5,0xcf,0xe2,0xec,0x34,0xdf,0xe1,0x98,0x4f,0xa7,0x64,0x6a,0xa3,0xb7,0x9a,0xeb,
    0x61,0xee,0xeb,0xc1,0xba,0xe1,0xd8,0x0e,0x47,0xf5,0xbf,0x1b,0x5b,0xd1,0xd9,0x3b,
    0x98,0xb7,0xda,0x37,0x61,0x6f,0xce,0x76,0x24,0x97,0xf5,0xa8,0x1b,0x2d,0xb6,0x73,
    0x16,0xd7,0x03,0x17,0xb3,0x3f,0x48,0x1d,0xb3,0xef,0x62,0x26,0x76,0x1f,0xa4,0xae,
    0xf6,0xa2,0x4a,0x8d,0xbc,0xb3,0x8f,0xb2,0x3b,0x76,0x3f,0xb0,0x4c,0xc7,0x41,0x76,
    0xc6,0xee,0x63,0xae,0x0f,0x6f,0xe3,0x5b,0xef,0xec,0xe3,0xcc,0xc2,0xee,0x13,0xcb,
    0xf8,0x1f,0x62,0x16,0xad,0xc2,0xe2,0x30,0xb3,0x52,0x6e,0x47,0xe4,0x79,0x18,0x9b,
    0xe6,0x3e,0x8a,0xae,0x23,0xf4,0xf8,0x28,0xbf,0x4f,0x9b,0xfb,0x3b,0xf8,0xe7,0xb2,
    0x5e,0x37,0x86,0x93,0xf0,0xe2,0x53,0x70,0xeb,0xcf,0xee,0x9a,0xf3,0x7d,0xde,0x4f,
    0x92,0x53,0xef,0xa7,0x9c,0xfd,0x1c,0xbd,0x29,0x61,0x3f,0xc7,0xf7,0x40,0xb1,0x87,
    0x64,0x5a,0x39,0xf8,0x05,0xb0,0x45,0x41,0x74,0x86,0x8f,0xc2,0xff,0x38,0x1c,0x47,
    0xa4,0xe3,0xca,0xef,0x5d,0xb0,0xe3,0x8e,0xcb,0x7e,0x76,0xf6,0x04,0xf6,0xc7,0x24,
    0x83,0xee,0xc7,0x27,0xec,0x50,0x3b,0xf9,0xd4,0xe7,0x02,0xf8,0x9b,0xe2,0xa3,0xf7,
    0x4f,0x89,0xbb,0x40,0x9c,0xee,0xcd,0x67,0xc4,0x75,0x10,0xa7,0x3d,0xb8,0x08,0x7e,
    0x42,0x7c,0x74,0x97,0x3e,0x07,0xd3,0x5d,0xba,0x2e,0xcc,0x27,0xe1,0xb3,0x24,0xfe,
    0x6a,0xbb,0x24,0x67,0x12,0x3d,0xfa,0xfe,0xac,0xc4,0xe9,0xac,0xbe,0xa0,0xa6,0xfe,
    0xbd,0xce,0xfc,0x2e,0x83,0x3f,0x27,0x37,0xe5,0xb4,0x33,0x26,0xcc,0xfc,0x6e,0x48,
    0x0e,0xcb,0xa5,0xcf,0x6b,0xe2,0xa5,0x7e,0x8f,0xc7,0xe4,0x53,0x47,0xcc,0x25,0xa7,
    0xe1,0x4b,0x34,0xf4,0x38,0x0d,0x5f,0x81,0x9b,0x86,0xaf,0xc1,0x4c,0xc3,0xb4,0xd3,
    0xa0,0xb6,0x29,0x39,0xd3,0xd4,0x9d,0x72,0x1a,0xbe,0xa1,0x76,0x74,0x1a,0xbe,0x05,
    0x37,0x0d,0xfd,0x31,0x61,0xe6,0xa7,0x1a,0x2c,0xd7,0xb4,0xd3,0xb0,0x37,0x26,0x9f,
    0x49,0x62,0xa6,0x9c,0x86,0xef,0xd0,0xb0,0xcb,0x69,0xf8,0x1e,0xdc,0x34,0xfc,0x00,
    0x66,0x1a,0x66,0x9d,0x06,0xb5,0xcd,0xc8,0x99,0xa5,0xee,0x0c,0x7b,0xa4,0x75,0x7f,
    0xa4,0xf6,0xde,0x58,0xdb,0x67,0xe5,0x68,0xbe,0xb3,0x8e,0xe3,0x10,0x7e,0xd3,0xc4,
    0xcd,0xc0,0x47,0x77,0xfe,0x03,0xf6,0xdd,0x76,0xee,0x43,0x38,0x4f,0xb8,0x9d,0xfb,
    0x08,0xfc,0x0d,0x76,0xee,0x34,0x98,0xe6,0xd5,0x38,0xfd,0xcd,0x7f,0x4c,0xdc,0x38,
    0x71,0xda,0xd3,0x33,0xe0,0x2f,0x48,0x94,0xfe,0x7e,0xce,0x52,0xef,0x34,0xbf,0xd1,
    0x33,0xae,0x57,0x3f,0x11,0x3f,0xe8,0x7a,0xf5,0x33,0xb8,0xf5,0xea,0x17,0x30,0xeb,
    0x55,0x21,0xd6,0x7a,0xa5,0xb6,0x39,0x39,0xf3,0xe8,0x9f,0x63,0xde,0x9a,0xe7,0x57,
    0x6a,0xe7,0xb3,0xfe,0x35,0x64,0xdf,0xbc,0xdf,0xc0,0xce,0xba,0xdf,0xa1,0x72,0xda,
    0x27,0xcc,0xd5,0x7e,0x85,0x38,0x3b,0x6f,0x49,0x2e,0xc5,0xaf,0x12,0x7b,0x25,0xcb,
    0xd5,0x98,0xe9,0xfa,0x9d,0x3c,0x57,0xf9,0x16,0xd4,0xf1,0xfd,0xcb,0x33,0x13,0xe5,
    0xa9,0x9c,0xe6,0x9d,0xde,0x3f,0xd0,0x3b,0xea,0xf4,0xfe,0x09,0x6e,0x7a,0xff,0x02,
    0x33,0xbd,0x8b,0x6e,0x37,0xd4,0xb6,0x90,0x69,0x4d,0xb9,0x17,0x9c,0xde,0xbf,0x9d,
    0xde,0xf7,0xc8,0x75,0x1d,0xbc,0x0c,0x27,0x8b,0x5b,0x64,0x4f,0xb6,0x64,0x78,0xaa,
    0x39,0x8f,0xff,0x02,0x75,0xf3,0xae,0xcf,0x37,0xb2,0x67,0xc8,0x30,0x8d,0x5f,0x72,
    0x75,0xff,0xb9,0x4d,0x9f,0x6f,0xde,0xa1,0xcf,0xff,0x11,0x67,0x67,0x8c,0x3e,0xab,
    0xe3,0x4d,0xec,0xd6,0xe7,0x5c,0x24,0x4f,0xbc,0x7d,0x9f,0x8d,0x93,0x3e,0xaf,0xb1,
    0x73,0x4f,0x12,0xb3,0x48,0xfc,0xd2,0xb2,0x99,0x14,0x9c,0xef,0x70,0x4c,0xb3,0x9c,
    0x23,0x2e,0x1f,0x6b,0xf3,0x6a,0x8a,0x69,0x5e,0x07,0xdc,0xbc,0x56,0xc6,0x84,0xdb,
    0xbc,0x9a,0x63,0xc2,0x6c,0x5e,0x7d,0xae,0x6f,0x6a,0x2b,0xc9,0x69,0xa1,0xae,0xbe,
    0x9b,0xae,0xbb,0x62,0xaa,0x3d,0x8c,0xae,0x22,0x3d,0x32,0x5d,0x7d,0xc4,0xb4,0x38,
    0x3e,0x6b,0xe1,0x73,0xd0,0xf1,0x59,0x17,0x13,0x6e,0x7c,0x5a,0x63,0xc2,0x8c,0x4f,
    0xc5,0xf1,0x51,0x5b,0x9b,0x9c,0x0d,0xe4,0xd6,0x77,0x9b,0x63,0x3b,0x5c,0xf2,0x7c,
    0x0f,0x95,0xe3,0xee,0x58,0xc3,0xed,0x5b,0x53,0x21,0x76,0x83,0xfb,0x0e,0x6c,0x84,
    0xd7,0x98,0xfb,0x0e,0xdc,0x13,0x13,0x7e,0x91,0xef,0xef,0xa6,0x98,0xb0,0x71,0xb7,
    0xeb,0x9d,0x31,0xe1,0x13,0x70,0x2d,0x3b,0xae,0x6a,0xdb,0xac,0x3a,0xa8,0xa7,0xef,
    0xc6,0x6b,0x00,0x7d,0xc3,0xee,0x3b,0x6d,0x7e,0x65,0x37,0xdb,0xa7,0xe0,0xae,0x5c,
    0x07,0xc8,0x67,0x7c,0xee,0x83,0xcf,0x21,0xc7,0xe7,0xfe,0x98,0x70,0xe3,0xd3,0xe5,
    0xf8,0xa8,0x6d,0xab,0x9c,0x2e,0xea,0x6c,0x75,0x7c,0x06,0xe1,0xa3,0xf5,0x72,0xf0,
    0x31,0xbf,0x2e,0xc7,0xa7,0x1a,0x93,0x8f,0x72,0x1c,0x24,0x9f,0xf1,0xe9,0x86,0xcf,
    0xa8,0xe3,0xd3,0x13,0x13,0x6e,0x7c,0x7a,0x1d,0x1f,0xb5,0x6d,0x93,0xd3,0x4b,0x9d,
    0x6d,0x8e,0xcf,0x9e,0x98,0xfe,0x1f,0xac,0xc6,0xda,0x3e,0x99,0x5f,0xaf,0xe3,0x33,
    0x12,0x93,0x8f,0x72,0xdc,0x43,0x3e,0x3f,0xe3,0x8a,0xf3,0x7d,0x26,0xa6,0x7d,0xd0,
    0x9d,0x19,0xa1,0xae,0xdf,0xd3,0x3e,0xe7,0xfb,0x74,0x4c,0xfb,0xad,0xfb,0xae,0x71,
    0x9a,0x67,0xb7,0x30,0x39,0x8f,0xed,0x5f,0x99,0x5a,0xbf,0x9c,0xff,0x01,0x6b,0x67,
    0x68,0x9c,0xbc,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2D src;
// layout(location = 0)out uvec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       uvec4 transformSrcValue(uvec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           uvec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
