# Copyright 2025 The Cobalt Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

template("modular_executable") {
  original_target_name = target_name
  if (current_toolchain == default_toolchain) {
    group("${original_target_name}_loader") {
      forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)
      deps = [ ":${original_target_name}_copy" ]
    }

    shared_library(original_target_name) {
      forward_variables_from(invoker, "*")
    }

    copy("${original_target_name}_copy") {
      forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)

      loader_target_output = "${original_target_name}_loader"
      loader_target = ":${loader_target_output}($starboard_toolchain)"
      starboard_toolchain_out_dir =
          get_label_info(loader_target, "root_out_dir")

      sources = [ "${starboard_toolchain_out_dir}/${loader_target_output}" ]
      outputs = [ "${root_out_dir}/${loader_target_output}" ]
      deps = [ loader_target ]
    }
  } else if (current_toolchain == starboard_toolchain) {
    not_needed(invoker, "*", TESTONLY_AND_VISIBILITY)
    executable("${original_target_name}_loader") {
      forward_variables_from(invoker, TESTONLY_AND_VISIBILITY)

      sources = [ "//$starboard_path/starboard_loader.cc" ]
      if (use_asan) {
        sources += [ "//$starboard_path/sanitizer_options.cc" ]
      }

      configs += [ "//starboard/build/config:starboard_implementation" ]
      defines = [ "SB_LOADER_MODULE=\"$original_target_name\"" ]
      ldflags = [
        "-Wl,-rpath=" + rebase_path("$root_out_dir"),
        "-Wl,-rpath=" + rebase_path("$root_build_dir"),
      ]

      deps = [
        ":${original_target_name}($default_toolchain)",
        "//starboard:starboard_group",
      ]

      # TODO: b/417685824 - Not complete, as it doesn't include the copied
      # _loader target. Could create a phony shlib intermediary.
      write_runtime_deps = "$root_build_dir/${target_name}.runtime_deps"
    }
  }
}

set_defaults("modular_executable") {
  configs = default_shared_library_configs
  configs -= [ "//build/config/compiler:no_unresolved_symbols" ]
}
