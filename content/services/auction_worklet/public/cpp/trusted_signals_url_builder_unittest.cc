// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/services/auction_worklet/public/cpp/trusted_signals_url_builder.h"

#include <stdint.h>

#include <string_view>
#include <vector>

#include "content/services/auction_worklet/public/cpp/creative_info.h"
#include "content/services/auction_worklet/worklet_test_util.h"
#include "testing/gtest/include/gtest/gtest.h"
#include "url/gurl.h"

namespace auction_worklet {

namespace {

constexpr char kHostname[] = "publisher";
constexpr char kBaseUrl[] = "https://tkv.com/";
constexpr uint16_t kExperimentId = 123;
constexpr char kSlotSize[] = "slotSize=giant";

CreativeInfo CreateCreativeInfo(std::string_view url) {
  CreativeInfo info;
  info.ad_descriptor.url = GURL(url);
  return info;
}

// Test a single request with the minimum information.
TEST(TrustedSignalsUrlBuilderTest, BuildTrustedBiddingSignalsURLBasic) {
  const std::string kInterestGroup1 = "ig1";
  const std::set<std::string> kBidderKeys1 = {};

  TrustedBiddingSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl),
      /*experiment_group_id=*/std::nullopt,
      /*trusted_bidding_signals_slot_size_param=*/"");

  bool success =
      url_builder.TryToAddRequest(kInterestGroup1, kBidderKeys1,
                                  /*max_trusted_signals_url_length=*/10000);
  EXPECT_TRUE(success);
  EXPECT_EQ(
      "https://tkv.com/"
      "?hostname=publisher&interestGroupNames=ig1",
      url_builder.ComposeURL());
}

TEST(TrustedSignalsUrlBuilderTest, BuildTrustedBiddingSignalsURLSlotSize) {
  const std::string kInterestGroup1 = "ig1";
  const std::set<std::string> kBidderKeys1 = {};

  TrustedBiddingSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl),
      /*experiment_group_id=*/std::nullopt, kSlotSize);

  bool success =
      url_builder.TryToAddRequest(kInterestGroup1, kBidderKeys1,
                                  /*max_trusted_signals_url_length=*/10000);
  EXPECT_TRUE(success);
  EXPECT_EQ(
      "https://tkv.com/"
      "?hostname=publisher&interestGroupNames=ig1&slotSize=giant",
      url_builder.ComposeURL());
}

TEST(TrustedSignalsUrlBuilderTest, BuildTrustedBiddingSignalsURLExperimentId) {
  const std::string kInterestGroup1 = "ig1";
  const std::set<std::string> kBidderKeys1 = {};

  TrustedBiddingSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl),
      /*experiment_group_id=*/kExperimentId,
      /*trusted_bidding_signals_slot_size_param=*/"");

  bool success =
      url_builder.TryToAddRequest(kInterestGroup1, kBidderKeys1,
                                  /*max_trusted_signals_url_length=*/10000);
  EXPECT_TRUE(success);
  EXPECT_EQ(
      "https://tkv.com/"
      "?hostname=publisher&interestGroupNames=ig1&experimentGroupId=123",
      url_builder.ComposeURL());
}

// Test a single bidding request with a tiny length limit that is smaller than
// the URL generated by itself. It should still work.
TEST(TrustedSignalsUrlBuilderTest, BuildTrustedBiddingSignalsTinyLimit) {
  const std::string kInterestGroup = "ig1";
  const std::set<std::string> kBidderKeys = {};

  TrustedBiddingSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl),
      /*experiment_group_id=*/kExperimentId,
      /*trusted_bidding_signals_slot_size_param=*/"");

  bool success =
      url_builder.TryToAddRequest(kInterestGroup, kBidderKeys,
                                  /*max_trusted_signals_url_length=*/1);
  EXPECT_TRUE(success);
  EXPECT_EQ(
      "https://tkv.com/"
      "?hostname=publisher&interestGroupNames=ig1&experimentGroupId=123",
      url_builder.ComposeURL());
}

// Test a single scoring request with a tiny length limit that is smaller than
// the URL generated by itself. It should still work.
TEST(TrustedSignalsUrlBuilderTest, BuildTrustedScoringSignalsTinyLimit) {
  TrustedScoringSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl), kExperimentId,
      /*send_creative_scanning_metadata=*/false);

  const CreativeInfo kAd = CreateCreativeInfo("https://a1.com");
  const std::set<CreativeInfo> kAdComponents =
      CreateCreativeInfoSet({"https://c1.com", "https://c3.com"});
  const std::string kExpectedResult =
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fa1.com%2F&"
      "adComponentRenderUrls=https%3A%2F%2Fc1.com%2F,https%3A%2F%2Fc3.com%2F&"
      "experimentGroupId=123";

  bool success =
      url_builder.TryToAddRequest(kAd, kAdComponents,
                                  /*max_trusted_signals_url_length=*/1);
  EXPECT_TRUE(success);
  EXPECT_EQ(kExpectedResult, url_builder.ComposeURL());
}

// Test a single bidding request with normal length limit that is larger than
// the URL generated by itself.
TEST(TrustedSignalsUrlBuilderTest, BuildTrustedBiddingSignalsNormalLimit) {
  const std::string kInterestGroup = "ig1";
  const std::set<std::string> kBidderKeys = {};

  TrustedBiddingSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl),
      /*experiment_group_id=*/kExperimentId,
      /*trusted_bidding_signals_slot_size_param=*/"");

  bool success =
      url_builder.TryToAddRequest(kInterestGroup, kBidderKeys,
                                  /*max_trusted_signals_url_length=*/1000);
  EXPECT_TRUE(success);
  EXPECT_EQ(
      "https://tkv.com/"
      "?hostname=publisher&interestGroupNames=ig1&experimentGroupId=123",
      url_builder.ComposeURL());
}

// Test a single scoring request with normal length limit that is larger than
// the URL generated by itself.
TEST(TrustedSignalsUrlBuilderTest, BuildTrustedScoringSignalsNormalLimit) {
  TrustedScoringSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl), kExperimentId,
      /*send_creative_scanning_metadata=*/false);

  const CreativeInfo kAd = CreateCreativeInfo("https://a1.com");
  const std::set<CreativeInfo> kAdComponents =
      CreateCreativeInfoSet({"https://c1.com", "https://c3.com"});
  const std::string kExpectedResult =
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fa1.com%2F&"
      "adComponentRenderUrls=https%3A%2F%2Fc1.com%2F,https%3A%2F%2Fc3.com%2F&"
      "experimentGroupId=123";

  bool success =
      url_builder.TryToAddRequest(kAd, kAdComponents,
                                  /*max_trusted_signals_url_length=*/1000);
  EXPECT_TRUE(success);
  EXPECT_EQ(kExpectedResult, url_builder.ComposeURL());
}

// Test two requests are issued in one request when their joint URL length is
// smaller than either of their limits:
// Request A has a limit of 103.
// Request B has a limit of 1000.
// The combined URL length of requests A and B is 102.
TEST(TrustedSignalsUrlBuilderTest, BiddingSignalsJointBatchedRequests) {
  TrustedBiddingSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl),
      /*experiment_group_id=*/std::nullopt, kSlotSize);

  const std::vector<std::string> kInterestGroups = {"name1", "name2"};
  const std::vector<std::set<std::string>> kBidderKeys{{"key1", "key3"},
                                                       {"key3", "key2"}};
  const std::vector<size_t> kLimits = {300, 1000};
  const std::string kExpectedResult =
      "https://tkv.com/"
      "?hostname=publisher&keys=key1,key3,key2&interestGroupNames=name1,name2&"
      "slotSize=giant";
  for (size_t i = 0; i < kInterestGroups.size(); ++i) {
    bool success = url_builder.TryToAddRequest(kInterestGroups[i],
                                               kBidderKeys[i], kLimits[i]);
    EXPECT_TRUE(success);
  }
  EXPECT_EQ(kExpectedResult, url_builder.ComposeURL().spec());
}

// Test two requests that are split because of their length limits.
// Request A has a limit of 100.
// Request B has a limit of 1000.
// The combined URL length of requests A and B is 102.
TEST(TrustedSignalsUrlBuilderTest, BiddingSignalsSplitRequests) {
  TrustedBiddingSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl),
      /*experiment_group_id=*/std::nullopt, kSlotSize);

  const std::vector<std::string> kInterestGroups = {"name1", "name2"};
  const std::vector<std::set<std::string>> kBidderKeys{{"key1", "key3"},
                                                       {"key3", "key2"}};
  const std::vector<size_t> kLimits = {100, 1000};
  const std::vector<std::string> kExpectedResults = {
      "https://tkv.com/"
      "?hostname=publisher&keys=key1,key3&interestGroupNames=name1&"
      "slotSize=giant",
      "https://tkv.com/"
      "?hostname=publisher&keys=key2,key3&interestGroupNames=name2&"
      "slotSize=giant",
  };

  bool success = url_builder.TryToAddRequest(kInterestGroups[0], kBidderKeys[0],
                                             kLimits[0]);
  EXPECT_TRUE(success);
  success = url_builder.TryToAddRequest(kInterestGroups[1], kBidderKeys[1],
                                        kLimits[1]);
  EXPECT_FALSE(success);
  EXPECT_EQ(kExpectedResults[0], url_builder.ComposeURL().spec());
  url_builder.Reset();

  success = url_builder.TryToAddRequest(kInterestGroups[1], kBidderKeys[1],
                                        kLimits[1]);
  EXPECT_TRUE(success);
  EXPECT_EQ(kExpectedResults[1], url_builder.ComposeURL().spec());
}

// Test three requests that are split into 2 requests.
// Request A has a limit of 1000.
// Request B has a limit of 100.
// Request C has a limit of 1000.
// A/B combined are 97 in length, but A/B/C combined would exceed the limit.
TEST(TrustedSignalsUrlBuilderTest, BiddingSignalsSplitRequests2) {
  TrustedBiddingSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl),
      /*experiment_group_id=*/std::nullopt, kSlotSize);

  const std::vector<std::string> kInterestGroups = {"name1", "name2", "name3"};
  const std::vector<std::set<std::string>> kBidderKeys{
      {"key1", "key3"}, {"key1"}, {"key3", "key2"}};
  const std::vector<size_t> kLimits = {1000, 100, 1000};
  const std::vector<std::string> kExpectedResults = {
      "https://tkv.com/"
      "?hostname=publisher&keys=key1,key3&interestGroupNames=name1,name2&"
      "slotSize=giant",
      "https://tkv.com/"
      "?hostname=publisher&keys=key2,key3&interestGroupNames=name3&"
      "slotSize=giant",
  };

  bool success = url_builder.TryToAddRequest(kInterestGroups[0], kBidderKeys[0],
                                             kLimits[0]);
  EXPECT_TRUE(success);
  success = url_builder.TryToAddRequest(kInterestGroups[1], kBidderKeys[1],
                                        kLimits[1]);
  EXPECT_TRUE(success);
  success = url_builder.TryToAddRequest(kInterestGroups[2], kBidderKeys[2],
                                        kLimits[2]);
  EXPECT_FALSE(success);
  EXPECT_EQ(kExpectedResults[0], url_builder.ComposeURL().spec());
  url_builder.Reset();

  success = url_builder.TryToAddRequest(kInterestGroups[2], kBidderKeys[2],
                                        kLimits[2]);
  EXPECT_TRUE(success);
  EXPECT_EQ(kExpectedResults[1], url_builder.ComposeURL().spec());
}

// Test two requests that are split because of their length limits.
// Request A has a limit of 200.
// Request B has a limit of 1000.
// The combined URL length of requests A and B is 208.
TEST(TrustedSignalsUrlBuilderTest, ScoringSignalsSplitRequests) {
  TrustedScoringSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl), /*experiment_group_id=*/std::nullopt,
      /*send_creative_scanning_metadata=*/false);

  const std::vector<CreativeInfo> kAds = {
      CreateCreativeInfo("https://foo.test/"),
      CreateCreativeInfo("https://bar.test/")};
  const std::vector<std::set<CreativeInfo>> kAdComponents = {
      CreateCreativeInfoSet({"https://foosub.test/", "https://bazsub.test/"}),
      CreateCreativeInfoSet({"https://barsub.test/", "https://bazsub.test/"})};

  const std::vector<size_t> kLimits = {200, 1000};

  const std::vector<std::string> kExpectedResults = {
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Ffoo.test%2F&"
      "adComponentRenderUrls=https%3A%2F%2Fbazsub.test%2F,https%3A%2F%2Ffoosub."
      "test%2F",
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%"
      "2Fbar.test%2F&adComponentRenderUrls=https%3A%2F%2Fbarsub.test%2F,https%"
      "3A%2F%2Fbazsub.test%2F"};
  bool success =
      url_builder.TryToAddRequest(kAds[0], kAdComponents[0], kLimits[0]);
  EXPECT_TRUE(success);

  success = url_builder.TryToAddRequest(kAds[1], kAdComponents[1], kLimits[1]);
  EXPECT_FALSE(success);
  EXPECT_EQ(kExpectedResults[0], url_builder.ComposeURL().spec());
  url_builder.Reset();

  success = url_builder.TryToAddRequest(kAds[1], kAdComponents[1], kLimits[1]);
  EXPECT_TRUE(success);
  EXPECT_EQ(kExpectedResults[1], url_builder.ComposeURL().spec());
}

// Test two requests that are split because of their length limits.
// Request A has a limit of 200.
// Request B has a limit of 1000.
// Request C has a limit of 1000.
// The combined URL length of requests A/B/C is 208.
TEST(TrustedSignalsUrlBuilderTest, ScoringSignalsSplitRequests2) {
  TrustedScoringSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl), /*experiment_group_id=*/std::nullopt,
      /*send_creative_scanning_metadata=*/false);

  const std::vector<CreativeInfo> kAds = {
      CreateCreativeInfo("https://foo.test/"),
      CreateCreativeInfo("https://foo.test/"),
      CreateCreativeInfo("https://bar.test/")};
  const std::vector<std::set<CreativeInfo>> kAdComponents = {
      CreateCreativeInfoSet({"https://foosub.test/", "https://bazsub.test/"}),
      CreateCreativeInfoSet({"https://foosub.test/"}),
      CreateCreativeInfoSet({"https://barsub.test/", "https://bazsub.test/"})};

  const std::vector<size_t> kLimits = {200, 1000, 1000};

  const std::vector<std::string> kExpectedResults = {
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Ffoo.test%2F&"
      "adComponentRenderUrls=https%3A%2F%2Fbazsub.test%2F,https%3A%2F%2Ffoosub."
      "test%2F",
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%"
      "2Fbar.test%2F&adComponentRenderUrls=https%3A%2F%2Fbarsub.test%2F,https%"
      "3A%2F%2Fbazsub.test%2F"};
  bool success =
      url_builder.TryToAddRequest(kAds[0], kAdComponents[0], kLimits[0]);
  EXPECT_TRUE(success);
  success = url_builder.TryToAddRequest(kAds[1], kAdComponents[1], kLimits[1]);
  EXPECT_TRUE(success);
  success = url_builder.TryToAddRequest(kAds[2], kAdComponents[2], kLimits[2]);
  EXPECT_FALSE(success);
  EXPECT_EQ(kExpectedResults[0], url_builder.ComposeURL().spec());
  url_builder.Reset();

  success = url_builder.TryToAddRequest(kAds[2], kAdComponents[2], kLimits[2]);
  EXPECT_TRUE(success);
  EXPECT_EQ(kExpectedResults[1], url_builder.ComposeURL().spec());
}

TEST(TrustedSignalsUrlBuilderTest, IncrementalBuildTrustedSignalsURL) {
  TrustedBiddingSignalsUrlBuilder url_builder(kHostname, GURL(kBaseUrl),
                                              kExperimentId, kSlotSize);

  const std::vector<std::string> kInterestGroups = {"ig1", "ig2", "ig3"};
  const std::vector<std::set<std::string>> kBidderKeys{
      {"k1", "k2"}, {"k3", "k4"}, {}};
  const std::vector<std::string> kExpectedResults = {
      "https://tkv.com/"
      "?hostname=publisher&keys=k1,k2&interestGroupNames=ig1&experimentGroupId="
      "123&slotSize=giant",
      "https://tkv.com/"
      "?hostname=publisher&keys=k1,k2,k3,k4&interestGroupNames=ig1,ig2&"
      "experimentGroupId=123&slotSize=giant",
      "https://tkv.com/"
      "?hostname=publisher&keys=k1,k2,k3,k4&interestGroupNames=ig1,ig2,ig3&"
      "experimentGroupId=123&slotSize=giant",
  };
  for (size_t i = 0; i < kInterestGroups.size(); ++i) {
    for (size_t j = 0; j <= i; ++j) {
      bool success =
          url_builder.TryToAddRequest(kInterestGroups[j], kBidderKeys[j],
                                      /*max_trusted_signals_url_length=*/10000);
      EXPECT_TRUE(success);
    }
    EXPECT_EQ(kExpectedResults[i], url_builder.ComposeURL().spec());
    url_builder.Reset();
  }
}

// Variant where keys is empty on first call.
TEST(TrustedSignalsUrlBuilderTest, IncrementalBuildTrustedSignalsURL2) {
  TrustedBiddingSignalsUrlBuilder url_builder(kHostname, GURL(kBaseUrl),
                                              kExperimentId, kSlotSize);

  const std::string kInterestGroup1 = "ig1";
  const std::set<std::string> kBidderKeys1 = {};
  bool success =
      url_builder.TryToAddRequest(kInterestGroup1, kBidderKeys1,
                                  /*max_trusted_signals_url_length=*/10000);
  EXPECT_TRUE(success);
  EXPECT_EQ(
      "https://tkv.com/"
      "?hostname=publisher&interestGroupNames=ig1&experimentGroupId=123&"
      "slotSize=giant",
      url_builder.ComposeURL());

  url_builder.Reset();
  success =
      url_builder.TryToAddRequest(kInterestGroup1, kBidderKeys1,
                                  /*max_trusted_signals_url_length=*/10000);
  EXPECT_TRUE(success);
  const std::string kInterestGroup2 = "ig2";
  const std::set<std::string> kBidderKeys2 = {"k3", "k4"};
  success =
      url_builder.TryToAddRequest(kInterestGroup2, kBidderKeys2,
                                  /*max_trusted_signals_url_length=*/10000);
  EXPECT_TRUE(success);
  EXPECT_EQ(
      "https://tkv.com/"
      "?hostname=publisher&keys=k3,k4&interestGroupNames=ig1,ig2&"
      "experimentGroupId=123&slotSize=giant",
      url_builder.ComposeURL());
}

TEST(TrustedSignalsUrlBuilderTest, IncrementalBuildScoringSignalsURL) {
  TrustedScoringSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl), kExperimentId,
      /*send_creative_scanning_metadata=*/false);

  const std::vector<CreativeInfo> kAds = {CreateCreativeInfo("https://a1.com"),
                                          CreateCreativeInfo("https://a2.com"),
                                          CreateCreativeInfo("https://a3.com")};
  const std::vector<std::set<CreativeInfo>> kAdComponents = {
      CreateCreativeInfoSet({"https://c1.com", "https://c3.com"}),
      {},
      CreateCreativeInfoSet({"https://c2.com", "https://c4.com"})};
  const std::vector<std::string> kExpectedResults = {
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fa1.com%2F&"
      "adComponentRenderUrls=https%3A%2F%2Fc1.com%2F,https%3A%2F%2Fc3.com%2F&"
      "experimentGroupId=123",
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fa1.com%2F,https%3A%2F%2Fa2."
      "com%2F&adComponentRenderUrls=https%3A%2F%2Fc1.com%2F,https%3A%2F%2Fc3."
      "com%2F&experimentGroupId=123",
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fa1.com%2F,https%3A%2F%2Fa2."
      "com%2F,https%3A%2F%2Fa3.com%2F&adComponentRenderUrls=https%3A%2F%2Fc1."
      "com%2F,https%3A%2F%2Fc3.com%2F,https%3A%2F%2Fc2.com%2F,https%3A%2F%2Fc4."
      "com%2F&experimentGroupId=123",
  };

  for (size_t i = 0; i < kAds.size(); ++i) {
    for (size_t j = 0; j <= i; ++j) {
      bool success =
          url_builder.TryToAddRequest(kAds[j], kAdComponents[j],
                                      /*max_trusted_signals_url_length=*/10000);
      EXPECT_TRUE(success);
    }
    EXPECT_EQ(kExpectedResults[i], url_builder.ComposeURL().spec());
    url_builder.Reset();
  }
}

// Variant where component ads set is empty on first call.
TEST(TrustedSignalsUrlBuilderTest, IncrementalBuildScoringSignalsURL2) {
  TrustedScoringSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl), kExperimentId,
      /*send_creative_scanning_metadata=*/false);

  CreativeInfo ad = CreateCreativeInfo("https://a1.com");
  std::set<CreativeInfo> ad_components = {};
  bool success = url_builder.TryToAddRequest(ad, ad_components, 1000);
  EXPECT_TRUE(success);
  EXPECT_EQ(
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fa1.com%2F&"
      "experimentGroupId=123",
      url_builder.ComposeURL());

  url_builder.Reset();
  success = url_builder.TryToAddRequest(ad, ad_components, 1000);
  EXPECT_TRUE(success);
  ad = CreateCreativeInfo("https://a2.com");
  ad_components = CreateCreativeInfoSet({"https://c1.com", "https://c3.com"});
  success = url_builder.TryToAddRequest(ad, ad_components, 1000);
  EXPECT_TRUE(success);
  EXPECT_EQ(
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fa1.com%2F,https%3A%2F%2Fa2."
      "com%2F&adComponentRenderUrls=https%3A%2F%2Fc1.com%2F,https%3A%2F%2Fc3."
      "com%2F&experimentGroupId=123",
      url_builder.ComposeURL());
}

// Variant with creative scanning info.
TEST(TrustedSignalsUrlBuilderTest, IncrementalBuildScoringSignalsURL3) {
  CreativeInfo m1(
      /*ad_descriptor=*/blink::AdDescriptor(
          GURL("https://creative1.test"),
          std::optional(
              blink::AdSize(200, blink::AdSize::LengthUnit::kPixels, 100,
                            blink::AdSize::LengthUnit::kScreenHeight))),
      /*creative_scanning_metadata=*/"scan1",
      /*interest_group_owner=*/
      std::optional(url::Origin::Create(GURL("https://bidder1.test"))),
      /*buyer_and_seller_reporting_id=*/"chair");

  CreativeInfo m2(
      /*ad_descriptor=*/blink::AdDescriptor(
          GURL("https://creative1.test"),
          std::optional(
              blink::AdSize(200, blink::AdSize::LengthUnit::kPixels, 100,
                            blink::AdSize::LengthUnit::kScreenHeight))),
      /*creative_scanning_metadata=*/"scan1b",
      /*interest_group_owner=*/
      std::optional(url::Origin::Create(GURL("https://bidder1.test"))),
      /*buyer_and_seller_reporting_id=*/"sofa");

  CreativeInfo m3(
      /*ad_descriptor=*/blink::AdDescriptor(GURL("https://creative2.test")),
      /*creative_scanning_metadata=*/"scan2",
      /*interest_group_owner=*/
      std::optional(url::Origin::Create(GURL("https://bidder2.test"))),
      /*buyer_and_seller_reporting_id=*/"stool");

  CreativeInfo c1(
      /*ad_descriptor=*/blink::AdDescriptor(
          GURL("https://c1.test"),
          std::optional(
              blink::AdSize(100, blink::AdSize::LengthUnit::kPixels, 50,
                            blink::AdSize::LengthUnit::kScreenHeight))),
      /*creative_scanning_metadata=*/"cs1",
      /*interest_group_owner=*/
      std::optional(url::Origin::Create(GURL("https://c.bidder1.test"))),
      /*buyer_and_seller_reporting_id=*/"c.chair");

  CreativeInfo c2(
      /*ad_descriptor=*/blink::AdDescriptor(
          GURL("https://c2.test"),
          std::optional(
              blink::AdSize(99, blink::AdSize::LengthUnit::kPixels, 49,
                            blink::AdSize::LengthUnit::kScreenHeight))),
      /*creative_scanning_metadata=*/"cs2",
      /*interest_group_owner=*/
      std::optional(url::Origin::Create(GURL("https://c.bidder1.test"))),
      /*buyer_and_seller_reporting_id=*/"c.sofa");

  CreativeInfo c3(
      /*ad_descriptor=*/blink::AdDescriptor(GURL("https://c3.test")),
      /*creative_scanning_metadata=*/"cs3",
      /*interest_group_owner=*/
      std::optional(url::Origin::Create(GURL("https://c.bidder2.test"))),
      /*buyer_and_seller_reporting_id=*/"c.stool");

  TrustedScoringSignalsUrlBuilder url_builder(
      kHostname, GURL(kBaseUrl), kExperimentId,
      /*send_creative_scanning_metadata=*/true);

  const std::vector<CreativeInfo> kAds = {m1, m2, m3};
  const std::vector<std::set<CreativeInfo>> kAdComponents = {
      {}, {c1, c2}, {c3}};
  const std::vector<std::string> kExpectedResults = {
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fcreative1.test%2F&"
      "experimentGroupId=123&adCreativeScanningMetadata=scan1&adSizes=200px,"
      "100sh&adBuyer=https%3A%2F%2Fbidder1.test&adBuyerAndSellerReportingIds="
      "chair",
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fcreative1.test%2F,https%3A%"
      "2F%2Fcreative1.test%2F&adComponentRenderUrls=https%3A%2F%2Fc1.test%2F,"
      "https%3A%2F%2Fc2.test%2F&experimentGroupId=123&"
      "adCreativeScanningMetadata=scan1,scan1b&"
      "adComponentCreativeScanningMetadata=cs1,cs2&adSizes=200px,100sh,200px,"
      "100sh&adComponentSizes=100px,50sh,99px,49sh&adBuyer=https%3A%2F%"
      "2Fbidder1.test,https%3A%2F%2Fbidder1.test&adComponentBuyer=https%3A%2F%"
      "2Fc.bidder1.test,https%3A%2F%2Fc.bidder1.test&"
      "adBuyerAndSellerReportingIds=chair,sofa",
      "https://tkv.com/"
      "?hostname=publisher&renderUrls=https%3A%2F%2Fcreative1.test%2F,https%3A%"
      "2F%2Fcreative1.test%2F,https%3A%2F%2Fcreative2.test%2F&"
      "adComponentRenderUrls=https%3A%2F%2Fc1.test%2F,https%3A%2F%2Fc2.test%2F,"
      "https%3A%2F%2Fc3.test%2F&experimentGroupId=123&"
      "adCreativeScanningMetadata=scan1,scan1b,scan2&"
      "adComponentCreativeScanningMetadata=cs1,cs2,cs3&adSizes=200px,100sh,"
      "200px,100sh,,&adComponentSizes=100px,50sh,99px,49sh,,&adBuyer=https%3A%"
      "2F%2Fbidder1.test,https%3A%2F%2Fbidder1.test,https%3A%2F%2Fbidder2.test&"
      "adComponentBuyer=https%3A%2F%2Fc.bidder1.test,https%3A%2F%2Fc.bidder1."
      "test,https%3A%2F%2Fc.bidder2.test&adBuyerAndSellerReportingIds=chair,"
      "sofa,stool"};

  for (size_t i = 0; i < kAds.size(); ++i) {
    for (size_t j = 0; j <= i; ++j) {
      bool success =
          url_builder.TryToAddRequest(kAds[j], kAdComponents[j],
                                      /*max_trusted_signals_url_length=*/10000);
      EXPECT_TRUE(success);
    }
    EXPECT_EQ(kExpectedResults[i], url_builder.ComposeURL().spec());
    url_builder.Reset();
  }
}

// This test focusing on creative scanning metadata.
TEST(TrustedSignalsUrlBuilderTest,
     BuildTrustedScoringSignalsWithCreativeScanningMetadata) {
  for (const bool send_creative_scanning_metadata : {false, true}) {
    SCOPED_TRACE(send_creative_scanning_metadata);

    auto test_data = std::to_array<CreativeInfo>(
        {{/*ad_descriptor=*/blink::AdDescriptor(
              GURL("https://creative1.test"),
              std::optional(
                  blink::AdSize(200, blink::AdSize::LengthUnit::kPixels, 100,
                                blink::AdSize::LengthUnit::kScreenHeight))),
          /*creative_scanning_metadata=*/"scan1",
          /*interest_group_owner=*/
          std::optional(url::Origin::Create(GURL("https://bidder1.test"))),
          /*buyer_and_seller_reporting_id=*/"chair"},
         {/*ad_descriptor=*/blink::AdDescriptor(
              GURL("https://creative1.test"),
              std::optional(
                  blink::AdSize(200, blink::AdSize::LengthUnit::kPixels, 100,
                                blink::AdSize::LengthUnit::kScreenHeight))),
          /*creative_scanning_metadata=*/"scan1b",
          /*interest_group_owner=*/
          std::optional(url::Origin::Create(GURL("https://bidder1.test"))),
          /*buyer_and_seller_reporting_id=*/"sofa"},
         {/*ad_descriptor=*/blink::AdDescriptor(
              GURL("https://creative1.test"),
              std::optional(
                  blink::AdSize(200, blink::AdSize::LengthUnit::kPixels, 100,
                                blink::AdSize::LengthUnit::kScreenHeight))),
          /*creative_scanning_metadata=*/"scan1/2",
          /*interest_group_owner=*/
          std::optional(url::Origin::Create(GURL("https://bidder2.test"))),
          /*buyer_and_seller_reporting_id=*/"stool"},
         {/*ad_descriptor=*/blink::AdDescriptor(
              GURL("https://creative2.test"),
              std::optional(
                  blink::AdSize(200, blink::AdSize::LengthUnit::kPixels, 100,
                                blink::AdSize::LengthUnit::kScreenHeight))),
          /*creative_scanning_metadata=*/"scan2",
          /*interest_group_owner=*/
          std::optional(url::Origin::Create(GURL("https://bidder2.test"))),
          /*buyer_and_seller_reporting_id=*/"stool"},
         {// Same thing at different size.
          /*ad_descriptor=*/blink::AdDescriptor(
              GURL("https://creative2.test"),
              std::optional(
                  blink::AdSize(100, blink::AdSize::LengthUnit::kPixels, 50,
                                blink::AdSize::LengthUnit::kScreenHeight))),
          /*creative_scanning_metadata=*/"scan2",
          /*interest_group_owner=*/
          std::optional(url::Origin::Create(GURL("https://bidder2.test"))),
          /*buyer_and_seller_reporting_id=*/"stool"}});

    std::set<CreativeInfo> creative_set;
    for (auto& input : test_data) {
      if (!send_creative_scanning_metadata) {
        input.ad_descriptor.size = std::nullopt;
        input.creative_scanning_metadata.clear();
        input.interest_group_owner = std::nullopt;
        input.buyer_and_seller_reporting_id.clear();
      }
      creative_set.insert(std::move(input));
    }

    // Minimal valid input for main ad, to use when mainly testing component-ad
    // specific query params..
    CreativeInfo single_ad;
    single_ad.ad_descriptor.url = GURL("https://product.test");
    if (send_creative_scanning_metadata) {
      single_ad.interest_group_owner =
          url::Origin::Create(GURL("https://bidder0.test"));
      single_ad.buyer_and_seller_reporting_id = "throne";
    }

    GURL ads_result;
    {
      TrustedScoringSignalsUrlBuilder url_builder(
          /*hostname=*/"https://publisher.test/",
          /*trusted_scoring_signals_url=*/GURL("https://kv.test"),
          /*experiment_group_id=*/std::nullopt,
          send_creative_scanning_metadata);
      for (const CreativeInfo& ad : creative_set) {
        std::set<CreativeInfo> ad_components;
        bool success = url_builder.TryToAddRequest(
            ad, ad_components,
            /*max_trusted_signals_url_length=*/1000);
        EXPECT_TRUE(success);
      }
      ads_result = url_builder.ComposeURL();
    }
    GURL component_ads_result;
    {
      TrustedScoringSignalsUrlBuilder url_builder(
          /*hostname=*/"https://publisher.test/",
          /*trusted_scoring_signals_url=*/GURL("https://kv.test"),
          /*experiment_group_id=*/std::nullopt,
          send_creative_scanning_metadata);
      bool success =
          url_builder.TryToAddRequest(single_ad, creative_set,
                                      /*max_trusted_signals_url_length=*/1000);
      EXPECT_TRUE(success);
      component_ads_result = url_builder.ComposeURL();
    }

    if (send_creative_scanning_metadata) {
      EXPECT_EQ(
          "https://kv.test/?hostname=https%3A%2F%2Fpublisher.test%2F"
          "&renderUrls=https%3A%2F%2Fcreative1.test%2F,"
          "https%3A%2F%2Fcreative1.test%2F,"
          "https%3A%2F%2Fcreative1.test%2F,"
          "https%3A%2F%2Fcreative2.test%2F,"
          "https%3A%2F%2Fcreative2.test%2F&"
          "adCreativeScanningMetadata=scan1,scan1%2F2,scan1b,scan2,scan2"
          "&adSizes=200px,100sh,200px,100sh,200px,100sh,100px,50sh,200px,100sh"
          "&adBuyer=https%3A%2F%2Fbidder1.test,"
          "https%3A%2F%2Fbidder2.test,"
          "https%3A%2F%2Fbidder1.test,"
          "https%3A%2F%2Fbidder2.test,"
          "https%3A%2F%2Fbidder2.test"
          "&adBuyerAndSellerReportingIds=chair,stool,sofa,stool,stool",
          ads_result);
      EXPECT_EQ(
          "https://kv.test/?hostname=https%3A%2F%2Fpublisher.test%2F"
          "&renderUrls=https%3A%2F%2Fproduct.test%2F"
          "&adComponentRenderUrls=https%3A%2F%2Fcreative1.test%2F,"
          "https%3A%2F%2Fcreative1.test%2F,"
          "https%3A%2F%2Fcreative1.test%2F,"
          "https%3A%2F%2Fcreative2.test%2F,"
          "https%3A%2F%2Fcreative2.test%2F"
          "&adCreativeScanningMetadata="
          "&adComponentCreativeScanningMetadata="
          "scan1,scan1%2F2,scan1b,scan2,scan2"
          "&adSizes=,"
          "&adComponentSizes="
          "200px,100sh,200px,100sh,200px,100sh,100px,50sh,200px,100sh"
          "&adBuyer=https%3A%2F%2Fbidder0.test"
          "&adComponentBuyer=https%3A%2F%2Fbidder1.test,"
          "https%3A%2F%2Fbidder2.test,"
          "https%3A%2F%2Fbidder1.test,"
          "https%3A%2F%2Fbidder2.test,"
          "https%3A%2F%2Fbidder2.test"
          "&adBuyerAndSellerReportingIds=throne",
          component_ads_result);
    } else {
      EXPECT_EQ(
          "https://kv.test/?hostname=https%3A%2F%2Fpublisher.test%2F"
          "&renderUrls=https%3A%2F%2Fcreative1.test%2F,"
          "https%3A%2F%2Fcreative2.test%2F",
          ads_result);
      EXPECT_EQ(
          "https://kv.test/?hostname=https%3A%2F%2Fpublisher.test%2F"
          "&renderUrls=https%3A%2F%2Fproduct.test%2F"
          "&adComponentRenderUrls=https%3A%2F%2Fcreative1.test%2F,"
          "https%3A%2F%2Fcreative2.test%2F",
          component_ads_result);
    }
  }
}

// An empty size should be a comma, to make things line up properly.
TEST(TrustedSignalsUrlBuilderTest, BuildTrustedScoringSignalsURLNoSize) {
  for (const bool both_without_size : {false, true}) {
    SCOPED_TRACE(both_without_size);
    std::set<CreativeInfo> input;

    input.insert(CreativeInfo(
        /*ad_descriptor=*/blink::AdDescriptor(GURL("https://c1.test"),
                                              /*size=*/std::nullopt),
        /*creative_scanning_metadata=*/"s1",
        /*interest_group_owner=*/url::Origin::Create(GURL("https://b1.test")),
        /*buyer_and_seller_reporting_id=*/"stool"));

    input.insert(CreativeInfo(
        /*ad_descriptor=*/blink::AdDescriptor(
            GURL("https://c2.test"),
            /*size=*/both_without_size
                ? std::nullopt
                : std::optional(
                      blink::AdSize(100, blink::AdSize::LengthUnit::kPixels, 50,
                                    blink::AdSize::LengthUnit::kPixels))),
        /*creative_scanning_metadata=*/"s2",
        /*interest_group_owner=*/url::Origin::Create(GURL("https://b2.test")),
        /*buyer_and_seller_reporting_id=*/"chair"));

    TrustedScoringSignalsUrlBuilder url_builder(
        /*hostname=*/"https://publisher.test/",
        /*trusted_scoring_signals_url=*/GURL("https://kv.test"),
        /*experiment_group_id=*/std::nullopt,
        /*send_creative_scanning_metadata=*/true);
    for (const CreativeInfo& info : input) {
      std::set<CreativeInfo> ad_components;
      bool success =
          url_builder.TryToAddRequest(info, ad_components,
                                      /*max_trusted_signals_url_length=*/1000);
      EXPECT_TRUE(success);
    }

    GURL result = url_builder.ComposeURL();

    if (both_without_size) {
      EXPECT_EQ(
          "https://kv.test/?hostname=https%3A%2F%2Fpublisher.test%2F"
          "&renderUrls=https%3A%2F%2Fc1.test%2F,https%3A%2F%2Fc2.test%2F"
          "&adCreativeScanningMetadata=s1,s2"
          "&adSizes=,,,"
          "&adBuyer=https%3A%2F%2Fb1.test,https%3A%2F%2Fb2.test"
          "&adBuyerAndSellerReportingIds=stool,chair",
          result);
    } else {
      EXPECT_EQ(
          "https://kv.test/?hostname=https%3A%2F%2Fpublisher.test%2F"
          "&renderUrls=https%3A%2F%2Fc1.test%2F,https%3A%2F%2Fc2.test%2F"
          "&adCreativeScanningMetadata=s1,s2"
          "&adSizes=,,100px,50px"
          "&adBuyer=https%3A%2F%2Fb1.test,https%3A%2F%2Fb2.test"
          "&adBuyerAndSellerReportingIds=stool,chair",
          result);
    }
  }
}

TEST(TrustedSignalsUrlBuilderTest,
     BuildTrustedScoringSignalsURLEmptyCreativeScanMetadata) {
  std::set<CreativeInfo> input;

  input.insert(CreativeInfo(
      /*ad_descriptor=*/blink::AdDescriptor(
          GURL("https://c1.test"),
          blink::AdSize(100, blink::AdSize::LengthUnit::kPixels, 50,
                        blink::AdSize::LengthUnit::kPixels)),
      /*creative_scanning_metadata=*/std::string(),
      /*interest_group_owner=*/url::Origin::Create(GURL("https://b1.test")),
      /*buyer_and_seller_reporting_id=*/"stool"));

  input.insert(CreativeInfo(
      /*ad_descriptor=*/blink::AdDescriptor(
          GURL("https://c2.test"),
          blink::AdSize(100, blink::AdSize::LengthUnit::kPixels, 50,
                        blink::AdSize::LengthUnit::kPixels)),
      /*creative_scanning_metadata=*/"s2",
      /*interest_group_owner=*/url::Origin::Create(GURL("https://b2.test")),
      /*buyer_and_seller_reporting_id=*/"recliner"));

  TrustedScoringSignalsUrlBuilder url_builder(
      /*hostname=*/"https://publisher.test/",
      /*trusted_scoring_signals_url=*/GURL("https://kv.test"),
      /*experiment_group_id=*/std::nullopt,
      /*send_creative_scanning_metadata=*/true);
  for (const CreativeInfo& info : input) {
    std::set<CreativeInfo> ad_components;
    bool success =
        url_builder.TryToAddRequest(info, ad_components,
                                    /*max_trusted_signals_url_length=*/1000);
    EXPECT_TRUE(success);
  }

  GURL result = url_builder.ComposeURL();

  EXPECT_EQ(
      "https://kv.test/?hostname=https%3A%2F%2Fpublisher.test%2F"
      "&renderUrls=https%3A%2F%2Fc1.test%2F,https%3A%2F%2Fc2.test%2F"
      "&adCreativeScanningMetadata=,s2"
      "&adSizes=100px,50px,100px,50px"
      "&adBuyer=https%3A%2F%2Fb1.test,https%3A%2F%2Fb2.test"
      "&adBuyerAndSellerReportingIds=stool,recliner",
      result);
}

}  // namespace

}  // namespace auction_worklet
