// Copyright 2020 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module customize_themes.mojom;

import "skia/public/mojom/skcolor.mojom";

struct ThemeColors {
  // The theme's frame color.
  skia.mojom.SkColor frame;
  // The theme's active tab color.
  skia.mojom.SkColor active_tab;
  // The theme's text color that has enough contrast with `active_tab`.
  skia.mojom.SkColor active_tab_text;
};

struct ChromeTheme {
  // Theme identifier.
  int32 id;
  // Localized string of the theme name.
  string label;
  ThemeColors colors;
};

// Additional info for third-party themes.
struct ThirdPartyThemeInfo {
  // ID in the Chrome Web Store.
  string id;
  // Human-readable theme name.
  string name;
};

enum ThemeType {
  kDefault,
  kAutogenerated,
  kChrome,
  kThirdParty
};

union ThemeInfo {
  // Set if the theme type is `kChrome`.
  int32 chrome_theme_id;
  // Set if the theme type is `kAutogenerated`.
  ThemeColors autogenerated_theme_colors;
  // Set if the theme type is `kThirdParty`.
  ThirdPartyThemeInfo third_party_theme_info;
};

struct Theme {
  // The theme's type (e.g. default or third-party).
  ThemeType type;
  // Additional info about the theme depending on the type.
  ThemeInfo info;
  // Whether theme is forced through a policy.
  bool is_forced;
};

// Used by the component to bootstrap bidirectional communication.
interface CustomizeThemesHandlerFactory {
  // The component calls this method when it is first initialized.
  CreateCustomizeThemesHandler(
           pending_remote<CustomizeThemesClient> client,
           pending_receiver<CustomizeThemesHandler> handler);
};

interface CustomizeThemesHandler {
  // Applies the autogenerated theme for the given color.
  ApplyAutogeneratedTheme(skia.mojom.SkColor frame_color);
  // Applies the predefined Chrome theme with the given ID.
  ApplyChromeTheme(int32 id);
  // Applies the default theme.
  ApplyDefaultTheme();
  // Called to initialize the selected theme.
  InitializeTheme();
  // Returns the pre-defined Chrome themes.
  GetChromeThemes() => (array<ChromeTheme> chromeThemes);
  // Confirms changes made to the theme.
  ConfirmThemeChanges();
  // Reverts changes made to the theme.
  RevertThemeChanges();
};

interface CustomizeThemesClient {
  // Sets the current theme.
  SetTheme(Theme theme);
};
