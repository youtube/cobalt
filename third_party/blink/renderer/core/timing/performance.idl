/*
 * Copyright (C) 2010 Google Inc. All rights reserved.
 * Copyright (C) 2012 Intel Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://w3c.github.io/hr-time/#the-performance-interface

// TODO(foolip): None of the optional DOMString arguments in this interface
// should have a default value.
[Exposed=(Window,Worker)]
interface Performance : EventTarget {
    [Affects=Nothing] DOMHighResTimeStamp now();
    readonly attribute DOMHighResTimeStamp timeOrigin;

    // Performance Timeline
    // https://w3c.github.io/performance-timeline/#the-performance-interface
    [MeasureAs=PerformanceTimeline] PerformanceEntryList getEntries();
    [MeasureAs=PerformanceTimeline, CallWith=ScriptState, RuntimeEnabled=CrossFramePerformanceTimeline] PerformanceEntryList getEntries(PerformanceEntryFilterOptions options);
    [MeasureAs=PerformanceTimeline] PerformanceEntryList getEntriesByType(DOMString entryType);
    [MeasureAs=PerformanceTimeline] PerformanceEntryList getEntriesByName(DOMString name, optional DOMString entryType);

    // Resource Timing
    // https://w3c.github.io/resource-timing/#extensions-performance-interface
    void clearResourceTimings();
    void setResourceTimingBufferSize(unsigned long maxSize);
    attribute EventHandler onresourcetimingbufferfull;

    // Navigation Timing
    // https://w3c.github.io/navigation-timing/#extensions-to-the-performance-interface
    [Exposed=Window, SameObject, Measure] readonly attribute PerformanceTiming timing;
    [Exposed=Window, SameObject, Measure] readonly attribute PerformanceNavigation navigation;

    // User Timing
    // https://w3c.github.io/user-timing/#extensions-performance-interface
    [MeasureAs=UserTiming, CallWith=ScriptState, RaisesException] PerformanceMark mark(DOMString markName, optional PerformanceMarkOptions markOptions = {});
    [MeasureAs=UserTiming] void clearMarks(optional DOMString markName);
    [MeasureAs=UserTiming, CallWith=ScriptState, RaisesException] PerformanceMeasure measure(DOMString measureName, optional (DOMString or PerformanceMeasureOptions) startOrMeasureOptions = {}, optional DOMString endMark);
    [MeasureAs=UserTiming] void clearMeasures(optional DOMString measureName);

    // TODO(foolip): There is no spec for the Memory Info API, see blink-dev:
    // https://groups.google.com/a/chromium.org/d/msg/blink-dev/g5YRCGpC9vs/b4OJz71NmPwJ
    [Exposed=Window, Measure, CallWith=ScriptState] readonly attribute MemoryInfo memory;

    // The API is not exposed to DedicatedWorker because the memory usage of
    // a dedicated worker is included in the result of the API call in Window.
    [MeasureAs=MeasureMemory, Exposed=(Window,ServiceWorker,SharedWorker), CallWith=ScriptState, RuntimeEnabled=MeasureMemory, RaisesException, CrossOriginIsolated] Promise<MemoryMeasurement> measureUserAgentSpecificMemory();

    // Event Timing
    [Exposed=Window, SameObject, SaveSameObject] readonly attribute EventCounts eventCounts;
    [Exposed=Window, RuntimeEnabled=EventTimingInteractionCount] readonly attribute unsigned long long interactionCount;

    [CallWith=ScriptState, ImplementedAs=toJSONForBinding] object toJSON();
};
