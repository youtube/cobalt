// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module chrome.mojom;

import "components/content_settings/common/content_settings_manager.mojom";
import "components/content_settings/core/common/content_settings.mojom";
import "mojo/public/mojom/base/time.mojom";

// Renderer configuration for a bound session.
// Network requests with `domain` and that are on `path` require a short lived
// cookie that would expire at `cookie_expiry_date`. Renderer throtller relies
// on `BoundSessionParams` to defer a request when required.
// `BoundSessionParams` can change when a bound session is created, terminated
// or on cookie expiration change.
[EnableIf=enable_bound_session_credentials]
struct BoundSessionParams {
  string domain;
  string path;
  mojo_base.mojom.Time cookie_expiry_date;
};

// The renderer configuration parameters which can change post renderer launch.
struct DynamicParams {
  // `BoundSessionParams` can be null if there is no ongoing bound session.
  [EnableIf=enable_bound_session_credentials]
  BoundSessionParams? bound_session_params;
  bool force_safe_search = true;
  int32 youtube_restrict = 0;
  string allowed_domains_for_apps;
};

// Allows the renderer to notify the browser process that requests in renderer
// are throttled and require a fresh short lived cookie.
interface BoundSessionRequestThrottledListener {
  // Called to notify the browser process when a network request requires a
  // fresh cookie. This triggers a cookie refresh request and will
  // run the callback to release the request upon success, failure or timeout.
  // Note: The callback might be called synchronously in process if the
  // previous conditions apply.
  [EnableIf=enable_bound_session_credentials]
  OnRequestBlockedOnCookie() => ();
};

interface ChromeOSListener {
  // Call when the merge session process (cookie reconstruction from
  // OAuth2 refresh token in ChromeOS login) is complete. All XHR's
  // will be throttled until unlocked by this call.
  [EnableIf=is_chromeos_ash]
  MergeSessionComplete();
};

// Configures the renderer.
interface RendererConfiguration {
  // Configures the renderer with settings that won't change.
  // The |chromeos_listener| is only passed on Chrome OS when
  // the merge session is still running - otherwise not set.
  // |content_settings_manager| may be sent as an optimization to avoid
  // requesting it from the browser process, and may be null.
  // |bound_session_request_throttled_listener| is passed only if the buildflag
  // `enable_bound_session_credentials` is enabled. It can be null if bound
  // sessions are not supported yet for the current profile type.
  SetInitialConfiguration(
      bool is_incognito_process,
      pending_receiver<ChromeOSListener>? chromeos_listener,
      pending_remote<content_settings.mojom.ContentSettingsManager>?
          content_settings_manager,
      pending_remote<BoundSessionRequestThrottledListener>?
          bound_session_request_throttled_listener);

  // Update renderer configuration with settings that can change.
  SetConfiguration(DynamicParams params);
};
