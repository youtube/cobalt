GtkSettings* gtk_settings_get_default(void);
void gtk_widget_path_iter_set_object_name(GtkWidgetPath* path, gint pos, const gchar* name);
void gtk_widget_path_iter_add_class(GtkWidgetPath* path, gint pos, const gchar* name);
GtkWidgetPath* gtk_widget_path_copy(const GtkWidgetPath* path);
GtkWidgetPath* gtk_widget_path_new(void);
const GtkWidgetPath* gtk_style_context_get_path(GtkStyleContext* context);
gint gtk_widget_path_append_type(GtkWidgetPath* path, GType type);
void gtk_widget_path_iter_set_name(GtkWidgetPath* path, gint pos, const gchar* name);
void gtk_widget_path_iter_set_state(GtkWidgetPath* path, gint pos, GtkStateFlags state);
GtkStyleContext* gtk_style_context_new(void);
void gtk_style_context_set_path(GtkStyleContext* context, GtkWidgetPath* path);
void gtk_style_context_set_parent(GtkStyleContext* context, GtkStyleContext* parent);
void gtk_widget_path_unref(GtkWidgetPath* path);
GtkStyleContext* gtk_style_context_get_parent(GtkStyleContext* context);
void gtk_widget_set_css_classes(GtkWidget* widget, const char** classes);
void gtk_widget_measure(GtkWidget* widget, GtkOrientation orientation, int for_size, int* minimum, int* natural, int* minimum_baseline, int* natural_baseline);
GtkWidget* gtk_offscreen_window_new(void);
void gtk_container_add(GtkContainer* container, GtkWidget* widget);
void gtk_widget_destroy(GtkWidget* widget);
gboolean gtk_bindings_activate_event(GObject* object, GdkEventKey* event);
void gtk_widget_set_events(GtkWidget* widget, gint events);
GType gtk_container_get_type(void);
cairo_surface_t* gtk_icon_info_load_surface(GtkIconInfo* icon_info, GdkWindow* for_window, GError** error);
void gtk_style_context_get_valist(GtkStyleContext* context, GtkStateFlags state, va_list args);
void gtk_style_context_get_style_valist(GtkStyleContext* context, va_list args);
GtkSnapshot* gtk_snapshot_new(void);
GskRenderNode* gtk_snapshot_free_to_node(GtkSnapshot* snapshot);
void gtk_im_context_set_client_widget(GtkIMContext* context, GtkWidget* widget);
GtkNative* gtk_widget_get_native(GtkWidget* widget);
GdkSurface* gtk_native_get_surface(GtkNative* native);
gboolean gtk_im_context_filter_key(GtkIMContext* context, gboolean press, GdkSurface* surface, GdkDevice* device, guint32 time, guint keycode, GdkModifierType state, int group);
void gtk_im_context_set_client_window(GtkIMContext* context, GdkWindow* window);
gboolean gtk_file_chooser_set_filename(GtkFileChooser* chooser, const char* filename);
GSList* gtk_file_chooser_list_filters(GtkFileChooser* chooser);
gchar* gtk_file_chooser_get_filename(GtkFileChooser* chooser);
GSList* gtk_file_chooser_get_filenames(GtkFileChooser* chooser);
char* gtk_file_chooser_get_preview_filename(GtkFileChooser* chooser);
void gtk_file_chooser_set_preview_widget_active(GtkFileChooser* chooser, gboolean active);
void gtk_file_chooser_set_preview_widget(GtkFileChooser* chooser, GtkWidget* preview_widget);
gboolean gtk_widget_hide_on_delete(GtkWidget* widget);
void gtk_widget_show_all(GtkWidget* widget);
void gtk_file_chooser_set_do_overwrite_confirmation(GtkFileChooser* chooser, gboolean do_overwrite_confirmation);
GListModel* gtk_file_chooser_get_filters(GtkFileChooser* chooser);
void gtk_window_set_hide_on_close(GtkWindow* window, gboolean setting);
GtkIconInfo* gtk_icon_theme_lookup_icon_for_scale(GtkIconTheme* icon_theme, const gchar* icon_name, gint size, gint scale, GtkIconLookupFlags flags);
GdkPixbuf* gtk_icon_info_load_symbolic_for_context(GtkIconInfo* icon_info, GtkStyleContext* context, gboolean* was_symbolic, GError** error);
void gtk_snapshot_render_background(GtkSnapshot* snapshot, GtkStyleContext* context, double x, double y, double width, double height);
GType gtk_menu_get_type(void);
GType gtk_menu_bar_get_type(void);
GType gtk_menu_item_get_type(void);
void gtk_style_context_add_provider_for_screen(GdkScreen* screen, GtkStyleProvider* provider, guint priority);
void gtk_style_context_add_provider_for_display(GdkDisplay* display, GtkStyleProvider* provider, guint priority);
void gtk_style_context_remove_provider_for_screen(GdkScreen* screen, GtkStyleProvider* provider);
void gtk_style_context_remove_provider_for_display(GdkDisplay* display, GtkStyleProvider* provider);
void gtk_window_destroy(GtkWindow* window);
GtkIconTheme* gtk_icon_theme_get_for_display(GdkDisplay* display);
GtkIconTheme* gtk_icon_theme_get_default(void);
gboolean gtk_widget_path_iter_has_class(const GtkWidgetPath* path, gint pos, const gchar* name);
GdkWindow* gtk_widget_get_window(GtkWidget* widget);
void gtk_main_do_event(GdkEvent *event);
guint gtk_get_major_version(void);
guint gtk_get_minor_version(void);
guint gtk_get_micro_version(void);
void gtk_window_present(GtkWindow* window);
void gtk_window_present_with_time(GtkWindow* window, guint32 timestamp);
GType gtk_box_get_type(void);
GType gtk_button_get_type(void);
GType gtk_cell_view_get_type(void);
GType gtk_combo_box_text_get_type(void);
GType gtk_entry_get_type(void);
GType gtk_file_chooser_get_type(void);
GType gtk_frame_get_type(void);
GType gtk_header_bar_get_type(void);
GType gtk_image_get_type(void);
GType gtk_info_bar_get_type(void);
GType gtk_label_get_type(void);
GType gtk_print_unix_dialog_get_type(void);
GType gtk_range_get_type(void);
GType gtk_scale_get_type(void);
GType gtk_scrollbar_get_type(void);
GType gtk_scrolled_window_get_type(void);
GType gtk_separator_get_type(void);
GType gtk_spinner_get_type(void);
GType gtk_style_provider_get_type(void);
GType gtk_text_view_get_type(void);
GType gtk_toggle_button_get_type(void);
GType gtk_tree_model_get_type(void);
GType gtk_tree_view_get_type(void);
GType gtk_widget_get_type(void);
GType gtk_window_get_type(void);
GtkWidget* gtk_combo_box_new_with_model(GtkTreeModel* model);
GtkCssProvider* gtk_css_provider_new(void);
void gtk_disable_setlocale(void);
void gtk_enumerate_printers(GtkPrinterFunc func, gpointer data, GDestroyNotify destroy, gboolean wait);
void gtk_file_chooser_add_filter(GtkFileChooser* chooser, GtkFileFilter* filter);
GFile* gtk_file_chooser_get_file(GtkFileChooser* chooser);
GtkFileFilter* gtk_file_chooser_get_filter(GtkFileChooser* chooser);
void gtk_file_chooser_set_create_folders(GtkFileChooser* chooser, gboolean create_folders);
void gtk_file_chooser_set_current_name(GtkFileChooser* chooser, const gchar* name);
gboolean gtk_file_chooser_set_file(GtkFileChooser* chooser, GFile* file, GError** error);
void gtk_file_chooser_set_filter(GtkFileChooser* chooser, GtkFileFilter* filter);
void gtk_file_chooser_set_select_multiple(GtkFileChooser* chooser, gboolean select_multiple);
void gtk_file_filter_add_mime_type(GtkFileFilter* filter, const gchar* mime_type);
void gtk_file_filter_add_pattern(GtkFileFilter* filter, const gchar* pattern);
GtkFileFilter* gtk_file_filter_new(void);
void gtk_file_filter_set_name(GtkFileFilter* filter, const gchar* name);
GtkWidget* gtk_image_new(void);
void gtk_image_set_from_pixbuf(GtkImage* image, GdkPixbuf* pixbuf);
void gtk_im_context_focus_in(GtkIMContext* context);
void gtk_im_context_focus_out(GtkIMContext* context);
void gtk_im_context_get_preedit_string(GtkIMContext* context, gchar** str, PangoAttrList** attrs, gint* cursor_pos);
void gtk_im_context_reset(GtkIMContext* context);
void gtk_im_context_set_cursor_location(GtkIMContext* context, const GdkRectangle* area);
GtkIMContext* gtk_im_context_simple_new(void);
GtkIMContext* gtk_im_multicontext_new(void);
GtkWidget* gtk_label_new(const gchar* str);
gdouble gtk_page_setup_get_left_margin(GtkPageSetup* setup, GtkUnit unit);
gdouble gtk_page_setup_get_page_height(GtkPageSetup* setup, GtkUnit unit);
gdouble gtk_page_setup_get_page_width(GtkPageSetup* setup, GtkUnit unit);
gdouble gtk_page_setup_get_paper_height(GtkPageSetup* setup, GtkUnit unit);
GtkPaperSize* gtk_page_setup_get_paper_size(GtkPageSetup* setup);
gdouble gtk_page_setup_get_paper_width(GtkPageSetup* setup, GtkUnit unit);
gdouble gtk_page_setup_get_top_margin(GtkPageSetup* setup, GtkUnit unit);
GtkPageSetup* gtk_page_setup_new(void);
void gtk_page_setup_set_paper_size(GtkPageSetup* setup, GtkPaperSize* size);
void gtk_paper_size_free(GtkPaperSize* size);
gdouble gtk_paper_size_get_height(GtkPaperSize* size, GtkUnit unit);
GList* gtk_paper_size_get_paper_sizes(gboolean include_custom);
const gchar* gtk_paper_size_get_ppd_name(GtkPaperSize* size);
gdouble gtk_paper_size_get_width(GtkPaperSize* size, GtkUnit unit);
GtkPaperSize* gtk_paper_size_new_custom(const gchar* name, const gchar* display_name, gdouble width, gdouble height, GtkUnit unit);
GtkPageSetup* gtk_printer_get_default_page_size(GtkPrinter* printer);
const gchar* gtk_printer_get_name(GtkPrinter* printer);
gboolean gtk_printer_is_default(GtkPrinter* printer);
GtkPrintJob* gtk_print_job_new(const gchar* title, GtkPrinter* printer, GtkPrintSettings* settings, GtkPageSetup* page_setup);
void gtk_print_job_send(GtkPrintJob* job, GtkPrintJobCompleteFunc callback, gpointer user_data, GDestroyNotify dnotify);
gboolean gtk_print_job_set_source_file(GtkPrintJob* job, const gchar* filename, GError** error);
GtkPrintSettings* gtk_print_settings_copy(GtkPrintSettings* other);
GtkPageOrientation gtk_print_settings_get_orientation(GtkPrintSettings* settings);
GtkPageRange* gtk_print_settings_get_page_ranges(GtkPrintSettings* settings, gint *num_ranges);
const gchar* gtk_print_settings_get_printer(GtkPrintSettings* settings);
GtkPrintPages gtk_print_settings_get_print_pages(GtkPrintSettings* settings);
gint gtk_print_settings_get_resolution(GtkPrintSettings* settings);
GtkPrintSettings* gtk_print_settings_new(void);
void gtk_print_settings_set(GtkPrintSettings* settings, const gchar* key, const gchar* value);
void gtk_print_settings_set_collate(GtkPrintSettings* settings, gboolean collate);
void gtk_print_settings_set_n_copies(GtkPrintSettings* settings, gint num_copies);
void gtk_print_settings_set_orientation(GtkPrintSettings* settings, GtkPageOrientation orientation);
void gtk_print_settings_set_printer_lpi(GtkPrintSettings* settings, gdouble lpi);
void gtk_print_settings_set_print_pages(GtkPrintSettings* settings, GtkPrintPages pages);
void gtk_print_settings_set_resolution_xy(GtkPrintSettings* settings, gint resolution_x, gint resolution_y);
GtkPageSetup* gtk_print_unix_dialog_get_page_setup(GtkPrintUnixDialog* dialog);
GtkPrinter* gtk_print_unix_dialog_get_selected_printer(GtkPrintUnixDialog* dialog);
GtkPrintSettings* gtk_print_unix_dialog_get_settings(GtkPrintUnixDialog* dialog);
GtkWidget* gtk_print_unix_dialog_new(const char* title, GtkWindow* parent);
void gtk_print_unix_dialog_set_embed_page_setup(GtkPrintUnixDialog* dialog, gboolean embed);
void gtk_print_unix_dialog_set_has_selection(GtkPrintUnixDialog* dialog, gboolean has_selection);
void gtk_print_unix_dialog_set_manual_capabilities(GtkPrintUnixDialog* dialog, GtkPrintCapabilities capabilities);
void gtk_print_unix_dialog_set_settings(GtkPrintUnixDialog* dialog, GtkPrintSettings* settings);
void gtk_print_unix_dialog_set_support_selection(GtkPrintUnixDialog* dialog, gboolean support_selection);
void gtk_render_background(GtkStyleContext* context, cairo_t* cr, gdouble x, gdouble y, gdouble width, gdouble height);
void gtk_render_focus(GtkStyleContext* context, cairo_t* cr, gdouble x, gdouble y, gdouble width, gdouble height);
void gtk_render_frame(GtkStyleContext* context, cairo_t* cr, gdouble x, gdouble y, gdouble width, gdouble height);
GtkWidget* gtk_separator_new(GtkOrientation orientation);
void gtk_style_context_add_class(GtkStyleContext* context, const gchar* class_name);
void gtk_style_context_add_provider(GtkStyleContext* context, GtkStyleProvider* provider, guint priority);
GtkStateFlags gtk_style_context_get_state(GtkStyleContext* context);
gboolean gtk_style_context_has_class(GtkStyleContext* context, const gchar* class_name);
void gtk_style_context_set_scale(GtkStyleContext* context, gint scale);
void gtk_style_context_set_state(GtkStyleContext* context, GtkStateFlags flags);
PangoContext* gtk_widget_get_pango_context(GtkWidget* widget);
GtkWidget* gtk_widget_get_parent(GtkWidget* widget);
void gtk_widget_get_preferred_size(GtkWidget* widget, GtkRequisition* minimum_size, GtkRequisition* natural_size);
gint gtk_widget_get_scale_factor(GtkWidget* widget);
GtkStyleContext* gtk_widget_get_style_context(GtkWidget* widget);
void gtk_widget_hide(GtkWidget* widget);
void gtk_widget_realize(GtkWidget* widget);
void gtk_widget_set_can_focus(GtkWidget* widget, gboolean can_focus);
void gtk_widget_set_name(GtkWidget* widget, const gchar* name);
void gtk_widget_set_parent(GtkWidget* widget, GtkWidget* parent);
void gtk_widget_set_sensitive(GtkWidget* widget, gboolean sensitive);
void gtk_widget_set_size_request(GtkWidget* widget, gint width, gint height);
void gtk_widget_set_state_flags(GtkWidget* widget, GtkStateFlags flags, gboolean clear);
void gtk_widget_show(GtkWidget* widget);
void gtk_window_set_modal(GtkWindow* window, gboolean modal);
void gtk_print_settings_set_printer(GtkPrintSettings* settings, const gchar* printer);
