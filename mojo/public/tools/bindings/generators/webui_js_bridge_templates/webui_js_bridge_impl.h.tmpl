{%- import "webui_js_bridge_macros.tmpl" as macros -%}
// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{%- set header_guard = "%s_WEBUI_JS_BRIDGE_IMPL_H_"|format(
        module.path|upper|replace("/","_")|replace(".","_")|
            replace("-", "_")) %}

#ifndef {{header_guard}}
#define {{header_guard}}

#include "{{module.path}}.h"
#include "base/memory/raw_ref.h"
#include "mojo/public/cpp/bindings/pending_receiver.h"
#include "mojo/public/cpp/bindings/receiver.h"
#include "mojo/public/cpp/bindings/pending_remote.h"
#include "mojo/public/cpp/bindings/remote.h"
#include "content/public/browser/web_ui_js_bridge_traits.h"
#include "content/browser/webui/web_ui_managed_interface.h"

namespace content {
class WebUIController;
}  // namespace content

{% if webui_controller_namespace != None -%}
namespace {{webui_controller_namespace}} {
class {{webui_controller_name}};
}
{%- else -%}
class {{webui_controller_name}};
{%- endif %}

namespace {{module.namespace}} {

{%- set class_name = "%sImpl" % webui_js_bridge.name %}

class {{class_name}} : public {{webui_js_bridge.name}},
                       public content::WebUIManagedInterfaceBase {
 public:
{% if webui_controller_namespace != None %}
  using WebUIControllerSubclass =
      {{webui_controller_namespace}}::{{webui_controller_name}};
{%- else %}
  using WebUIControllerSubclass = {{webui_controller_name}};
{%- endif %}

{%- for method in webui_js_bridge.methods %}
  using BinderFor{{method.name}} = void (*)(
      WebUIControllerSubclass*,
{%-  for param in method.parameters %}
      {{param.kind|cpp_type}}{{"," if not loop.last else ""}}
{%-  endfor -%}
  );
{%  endfor -%}

  static void Create(
      {{- macros.constructor_params(webui_js_bridge) | indent(6) }},
      content::WebUIController* controller,
      ::mojo::PendingReceiver<{{webui_js_bridge.name}}> receiver);

  ~{{class_name}}() override;

  // {{webui_js_bridge.name}}
{%- for method in webui_js_bridge.methods %}
  void {{method.name}}(
{%-  for param in method.parameters %}
      {{param.kind|cpp_type}} {{param.name}}{{"," if not loop.last else ""}}
{%-  endfor -%}
  ) override;
{%- endfor %}

 private:
  {{class_name}}(
      WebUIControllerSubclass* controller,
      ::mojo::PendingReceiver<{{webui_js_bridge.name}}> receiver,
      {{- macros.constructor_params(webui_js_bridge) | indent(6) }});


  // WebUIController is expected to outlive this class.
  const raw_ref<WebUIControllerSubclass> controller_;
  ::mojo::Receiver<{{webui_js_bridge.name}}> receiver_;
{% for method in webui_js_bridge.methods %}
  BinderFor{{method.name}} {{method|binder_variable_name}}_;
{%- endfor %}
};

{%- set binder_initializer_name = "%sBinderInitializer" % webui_js_bridge.name %}

// `{{binder_initializer_name}}` is a helper class that holds all
// WebUI interface binders used by {{class_name}}. It has a
// `GetWebUIJsBridgeBinder()` method that returns a binder which constructs
// a {{class_name}} instance with the registered WebUI interface binders.
// {{binder_initializer_name}} class is used by
// WebUIBrowserInterfaceBrokerRegistry.
class {{binder_initializer_name}} {
 public:
{% if webui_controller_namespace != None %}
  using WebUIControllerSubclass =
      {{webui_controller_namespace}}::{{webui_controller_name}};
{%- else %}
  using WebUIControllerSubclass = {{webui_controller_name}};
{%- endif %}

  template <typename ReceiverInterface>
  using ReceiverBinder = void (*)(
      WebUIControllerSubclass*,
      ::mojo::PendingReceiver<ReceiverInterface>);

  template <typename ReceiverInterface, typename RemoteInterface>
  using ReceiverAndRemoteBinder = void (*)(
      WebUIControllerSubclass*,
      ::mojo::PendingReceiver<ReceiverInterface>,
      ::mojo::PendingRemote<RemoteInterface>);

  template <typename RemoteInterface>
  using RemoteBinder = void (*)(
      WebUIControllerSubclass*,
      ::mojo::PendingRemote<RemoteInterface>);

  using WebUIJsBridgeBinder =
      base::RepeatingCallback<void(content::WebUIController*,
                                   ::mojo::PendingReceiver<
                                   {{-webui_js_bridge.name}}>)>;

  explicit {{binder_initializer_name}}();
  ~{{binder_initializer_name}}();

  WebUIJsBridgeBinder GetWebUIJsBridgeBinder();

  // AddBinder() methods don't need to use templates, but making them
  // templated allows AddBinder callers to specify which interfaces are being
  // bound e.g.:
  //
  // initializer.AddBinder<mojom::Foo>(...);
  // initializer.AddBinder<mojom::Bar, mojom::BarClient>(...);
  //
  // We also use std::common_type_t<> to disable automatic type deduction and
  // force callers to specify the template argument.
  template <typename ReceiverInterface>
  {{binder_initializer_name}}& AddBinder(
      std::common_type_t<ReceiverBinder<ReceiverInterface>>);
  template <typename ReceiverInterface, typename RemoteInterface>
  {{binder_initializer_name}}& AddBinder(
      std::common_type_t<ReceiverAndRemoteBinder<ReceiverInterface, RemoteInterface>>);
  template <typename RemoteInterface>
  {{binder_initializer_name}}& AddBinder(
      std::common_type_t<RemoteBinder<RemoteInterface>>);

 private:
{%- for method in webui_js_bridge.methods -%}
{%  if method|is_receiver_and_remote_binder %}
  ReceiverAndRemoteBinder<{{method.parameters[0].kind|interface_name}},
                          {{method.parameters[1].kind|interface_name}}>
      {{method|binder_variable_name}}_ = nullptr;
{%  elif method|is_receiver_only_binder %}
  ReceiverBinder<{{method.parameters[0].kind|interface_name}}>
    {{-" " + method|binder_variable_name}}_ = nullptr;
{%  else %}
  RemoteBinder<{{method.parameters[0].kind|interface_name}}>
    {{-" " + method|binder_variable_name}}_ = nullptr;
{%-  endif %}
{%- endfor %}
};

}  // {{module.namespace}}

namespace content {
template <>
struct JsBridgeTraits<{{webui_controller_with_namespace}}> {
  using Interface = {{module.namespace}}::{{webui_js_bridge.name}};
  using Implementation = {{module.namespace}}::{{class_name}};
  using BinderInitializer = {{module.namespace}}::{{binder_initializer_name}};
};
}  // namespace content
#endif // {{header_guard}}
