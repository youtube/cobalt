// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolveStencilNoExport.comp.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolveStencilNoExport_comp_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x6d,0x96,0xfb,0x6b,0x96,0x65,
    0x18,0xc7,0x9f,0xf7,0xe0,0xfb,0xce,0xd7,0xb6,0xb9,0xda,0x3c,0x1f,0x5a,0x93,0x59,
    0x4d,0xd4,0xa0,0x9a,0x59,0x33,0x73,0x90,0x59,0xdb,0xd2,0x56,0x6d,0xf4,0x4b,0x1b,
    0xa4,0x2d,0xa8,0x70,0x5b,0x18,0xb5,0x91,0xa7,0x49,0x6d,0x60,0x56,0x0e,0xb3,0x13,
    0x46,0xe2,0x0f,0x5b,0x54,0x46,0x81,0xae,0x81,0x65,0x14,0x9e,0xfa,0x2d,0xe8,0x37,
    0xc1,0xcc,0xd1,0x5f,0xb0,0x8e,0x46,0x5d,0xdf,0xfb,0xfd,0xdc,0x72,0xf1,0xd2,0x03,
    0x37,0xf7,0x73,0x7f,0xaf,0xe3,0xf7,0xba,0xaf,0xfb,0x7e,0x9e,0x4c,0xba,0x2e,0x9f,
    0x24,0xa9,0xa4,0x90,0x94,0x25,0x99,0x54,0x12,0x9e,0xaa,0x24,0x9d,0xe8,0x75,0x56,
    0x92,0x0b,0xf3,0xc6,0x96,0xf6,0x96,0x95,0xfd,0x2f,0x3c,0xb5,0xf2,0xf6,0x3b,0x56,
    0x4b,0x5e,0x91,0x64,0x82,0x9e,0x64,0x95,0xa6,0x33,0xc3,0xe6,0xac,0x8d,0xe7,0xba,
    0x9f,0x79,0x5e,0x78,0xb9,0x8d,0xd9,0x86,0x67,0x83,0xaf,0xc4,0x3c,0x17,0x47,0xf0,
    0x65,0x68,0x79,0xf0,0x9d,0x24,0x8b,0x6c,0x3c,0x60,0xd6,0x8b,0x8b,0x61,0x93,0x3a,
    0xe6,0x88,0xa5,0xc0,0xca,0x1c,0x96,0x06,0x9b,0xed,0xb0,0x0c,0xd8,0x3c,0x87,0x65,
    0xc1,0x7c,0x8c,0x19,0x60,0x37,0x3a,0x2c,0x07,0xb6,0xcc,0x61,0x79,0xb0,0x9b,0x1d,
    0x56,0x06,0xb6,0xc2,0x61,0x33,0xc1,0x56,0x3b,0xac,0x00,0xb6,0x3e,0x70,0xcd,0x5c,
    0xcb,0x59,0xbc,0x0f,0xdb,0x7c,0x13,0x1c,0xe3,0xba,0xd6,0xd5,0xe5,0x24,0xf9,0x64,
    0xf1,0x37,0x51,0x52,0x17,0xf9,0x9b,0x80,0xaf,0xf4,0x27,0x4b,0xfc,0x4d,0xe2,0x2f,
    0xae,0xcf,0x53,0xe7,0xf9,0x36,0x6e,0xb0,0x2c,0xd2,0x41,0x9e,0x09,0xf6,0x7a,0xaf,
    0x31,0x9d,0x1c,0xf5,0x50,0x0e,0x73,0x6d,0x9d,0x27,0x87,0x28,0x2f,0x20,0x4f,0x90,
    0xcf,0x82,0x63,0x26,0xe0,0xd9,0xe4,0x3a,0x6c,0x85,0xdf,0xcd,0xba,0x1c,0xac,0x01,
    0xfb,0x0a,0xec,0xa5,0x5f,0x89,0xac,0xe0,0xe4,0xd7,0xc3,0x39,0xae,0x6b,0xd0,0x99,
    0x63,0x51,0x16,0x10,0x5f,0xb1,0x17,0xda,0xbc,0x80,0xdc,0xb4,0x5e,0xe4,0xea,0xb5,
    0xc4,0xa2,0xc6,0xbd,0x5b,0xc8,0xc8,0xb9,0x51,0x70,0x23,0xda,0x29,0x9f,0x25,0xec,
    0xe3,0x62,0xf2,0xd7,0x7a,0x29,0x58,0x83,0xab,0xcf,0x4c,0xf4,0x6b,0x79,0x97,0x8f,
    0x6a,0xcb,0xa4,0x9e,0x5c,0x96,0xdb,0x5c,0x4f,0x6e,0xd1,0xae,0xd1,0xf1,0x5e,0x83,
    0x5d,0xde,0xc9,0x9b,0x5c,0x1e,0xeb,0x90,0x17,0x9c,0x7c,0x53,0x89,0x7e,0x3b,0x7d,
    0x18,0xd7,0x5b,0x6d,0xfc,0x6b,0x4f,0x5c,0x6f,0x73,0x75,0xd7,0x7a,0x07,0xb5,0x91,
    0xff,0x9d,0xf8,0xcf,0x39,0xf9,0x7e,0xce,0xc4,0x7c,0x93,0x1c,0x22,0x36,0x57,0xc0,
    0xb5,0xf3,0x9d,0x72,0x1c,0xde,0xe6,0xfd,0x10,0xb5,0xd2,0xfa,0xb0,0xeb,0x8d,0xf7,
    0xf0,0xe1,0xf7,0xf2,0x88,0x72,0x0c,0xf5,0xcd,0x84,0xfe,0x2e,0x84,0xbd,0x2a,0xf6,
    0xf1,0x49,0xfc,0x7e,0x45,0xdd,0x26,0xf0,0xab,0xf5,0x64,0x49,0x2d,0x4f,0x61,0x2b,
    0xfd,0x33,0xc8,0x7c,0x0f,0x9d,0xa3,0x36,0x2b,0x4c,0x5b,0xbd,0x78,0x1e,0xec,0x1c,
    0xfd,0x74,0xa7,0x31,0x4d,0x93,0x5b,0x42,0xff,0xfe,0x61,0x88,0xf8,0xff,0x6e,0xab,
    0x0b,0xe0,0x7f,0xdb,0xbb,0xfa,0xf5,0x07,0xe4,0x9a,0xef,0x33,0xad,0x4a,0xee,0x9c,
    0x72,0xfa,0xb9,0x89,0xb8,0x55,0xe0,0x43,0xa6,0x53,0x08,0xe7,0xac,0x88,0xa9,0xa7,
    0x07,0xc9,0xbd,0x1a,0x3c,0xfa,0x99,0x83,0x9f,0x1a,0xe7,0x67,0x2e,0x78,0xb4,0x99,
    0x07,0xb6,0xd9,0x6c,0xf2,0x9c,0xe1,0x6a,0x70,0xf9,0xa9,0xe5,0xec,0x2f,0xa5,0x3f,
    0x9b,0x38,0x0f,0x75,0xe0,0x0f,0x9b,0x55,0x9e,0x7b,0xad,0x8e,0x91,0x86,0xf7,0x17,
    0x66,0xbf,0x9c,0xfb,0x6d,0x19,0xbe,0xdf,0x35,0x7b,0xf5,0xef,0x2d,0xe0,0xaa,0x49,
    0x03,0x35,0xf9,0xcb,0x64,0xc2,0x6f,0x0d,0xf5,0x2e,0xd6,0x45,0xef,0x7f,0xda,0x7c,
    0x81,0x75,0x83,0x8b,0xb9,0xca,0xc5,0x8c,0x7d,0xb4,0x0b,0x1e,0xb7,0x11,0x6f,0x15,
    0x3c,0x74,0x2e,0xee,0x82,0x47,0x23,0x3c,0xa4,0xb7,0x16,0x7c,0x0f,0x76,0xf7,0x60,
    0xbb,0x16,0x3b,0x9d,0x97,0x7b,0xb1,0x6b,0x72,0x75,0x5c,0x0f,0xfe,0xb1,0xe9,0xd4,
    0x07,0xdd,0x22,0x56,0x01,0xa7,0x66,0xc7,0x49,0xb2,0x0d,0x36,0x9a,0xe1,0xa0,0xf7,
    0x2d,0x66,0xa7,0xfa,0xdf,0x4f,0x4c,0x3d,0xaf,0xb0,0x27,0x1b,0xc1,0x1f,0xb1,0x95,
    0x72,0xfa,0x11,0x2c,0xea,0xa9,0x1e,0xd1,0x97,0xe6,0x69,0xea,0xf1,0x33,0x3a,0x0d,
    0xd8,0x6c,0x70,0x1c,0x1e,0x84,0xc3,0x26,0xc7,0xe1,0x21,0xf0,0xc8,0xa1,0x05,0x2c,
    0x72,0x68,0x73,0x1c,0x24,0x6b,0xb5,0xd1,0x46,0xdc,0x56,0xc7,0x61,0x33,0xb1,0x53,
    0x8e,0xc3,0x16,0xf0,0xc8,0xe1,0x27,0xb0,0xa8,0x27,0x0e,0xd1,0x57,0x9b,0xe3,0x70,
    0x19,0x9d,0x66,0x6c,0x5a,0x1d,0x87,0x47,0xe1,0xd0,0xee,0x38,0x3c,0x06,0x1e,0x39,
    0x3c,0x0e,0x16,0x39,0x74,0x3a,0x0e,0x92,0x75,0xd8,0xe8,0x24,0x6e,0x87,0xeb,0xa5,
    0x27,0x88,0x7d,0xd9,0xdd,0x45,0xca,0x31,0xea,0x76,0xba,0x1c,0x7f,0x45,0xaf,0x0d,
    0xbb,0x0e,0x62,0x75,0x97,0xc4,0xea,0xb2,0xd1,0x83,0xbd,0xde,0xc7,0xac,0x16,0xaa,
    0xcd,0xd3,0xd4,0x7a,0x2b,0x77,0xa9,0xe2,0x74,0xa3,0xd7,0xe3,0xf4,0x9e,0xa5,0xaf,
    0xfe,0x4f,0xaf,0x9b,0x7c,0xa4,0x77,0x15,0x9f,0x5d,0xf4,0x76,0x8f,0x93,0x4d,0x83,
    0x75,0xe1,0xaf,0x07,0x3f,0xdb,0xf1,0xb3,0xdd,0xf1,0x9a,0x82,0x9b,0x7c,0xa7,0xad,
    0x08,0xfd,0xc8,0x54,0xe7,0x2b,0xd4,0x54,0xb2,0x94,0x93,0x29,0xc6,0x2f,0xc4,0x90,
    0xec,0x44,0x52,0x94,0x7d,0xce,0x7e,0xbc,0x88,0x5c,0xdf,0x88,0xdf,0xac,0x2e,0x7d,
    0xc8,0x63,0x9d,0x24,0xef,0xb5,0xd1,0x47,0x3e,0xbd,0xae,0xaf,0x5e,0x22,0x27,0x3d,
    0x9f,0xe1,0xef,0x65,0xf0,0x46,0x6a,0x3e,0xe8,0x7c,0x49,0x36,0x10,0xee,0xb6,0xa2,
    0xaf,0x01,0x7a,0x67,0x67,0xb8,0x17,0x8a,0xbd,0xb3,0x83,0xde,0x91,0xff,0xdd,0xe0,
    0x31,0xd7,0x3d,0xf8,0xde,0x4d,0x8d,0xa2,0x9f,0x41,0xb8,0x4a,0x67,0x2f,0x39,0xf4,
    0xa2,0x3f,0x40,0x1e,0xfb,0x5c,0x1e,0x7b,0xc3,0x3d,0x9d,0x04,0x4c,0xf6,0x43,0x8e,
    0xd3,0xab,0x70,0x4a,0x39,0x4e,0xaf,0x81,0x47,0x4e,0x23,0xce,0x97,0x64,0xc3,0x36,
    0x46,0xf0,0x35,0xec,0x38,0xbd,0x0e,0xa7,0xfd,0x8e,0xd3,0x01,0xf0,0xc8,0xe9,0x0d,
    0x7c,0x1f,0x80,0x53,0xf4,0x33,0xe2,0x38,0xbd,0x49,0x0e,0x43,0xe8,0x0f,0xa3,0x1b,
    0xf3,0xdf,0xe7,0x74,0xdf,0xa2,0x06,0x83,0xd8,0x8d,0x90,0xf3,0xa8,0xcb,0x59,0x3a,
    0x07,0x6d,0x8c,0x62,0x7f,0x90,0xfc,0xf4,0x3d,0x7f,0x87,0x6f,0xf9,0x93,0xe6,0x4f,
    0xdf,0xf1,0xf7,0xc1,0xa6,0xb8,0x3f,0x1b,0xa9,0x95,0x7a,0xee,0x03,0xe4,0x7a,0xce,
    0x80,0x7d,0x08,0x7e,0x84,0x6f,0xa1,0x38,0x7f,0x44,0x8f,0xe9,0x5e,0xf8,0x0e,0xbd,
    0xa3,0xe8,0x4a,0xf6,0x3d,0xd8,0x31,0xfa,0xf8,0x28,0xfc,0x62,0x7e,0xa3,0xae,0xcf,
    0xd5,0xdb,0x57,0xd8,0xbb,0x63,0xf0,0x10,0xbf,0xf1,0x92,0xb3,0x3d,0x66,0xe3,0x38,
    0xf6,0x63,0x6e,0x7f,0x3f,0x71,0xfb,0xbb,0x0b,0xec,0x53,0xf0,0xab,0xee,0x3e,0xbc,
    0x08,0x3e,0xe5,0xee,0xc3,0x71,0xfc,0x1d,0x77,0xb6,0x5f,0xd2,0x93,0xd3,0xce,0xf6,
    0x12,0xf8,0x94,0xbb,0xa7,0xa2,0xed,0xb8,0x3b,0xcf,0x3a,0xc3,0x17,0xc9,0xf5,0x12,
    0xf9,0x4a,0xb7,0x1f,0xdd,0x7e,0x17,0xe7,0x04,0x35,0xdc,0x56,0x72,0x3f,0xf4,0xb9,
    0x7e,0xfb,0x9a,0x7e,0x3b,0xe5,0xfa,0xed,0x1b,0xf0,0x41,0xee,0xe3,0xd3,0x60,0xf1,
    0x3f,0xe5,0x5b,0xfe,0x2f,0x4e,0x13,0xab,0x10,0xf6,0xa3,0x88,0x57,0x05,0xdf,0xb9,
    0xf0,0x9f,0x75,0x96,0x7f,0xb1,0x46,0xe4,0xeb,0xac,0xe6,0x67,0xd9,0x2f,0xff,0xfd,
    0xd7,0xfc,0x8f,0x55,0x6c,0x8d,0x8d,0xff,0x00,0xf2,0xa0,0xf8,0x24,0x54,0x0e,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcLayer;
//     int srcWidth;
//     int srcHeight;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
//
//     ivec4 blitArea;
//     int destPitch;
// } params;
//
// layout(set = 0, binding = 0)buffer dst
// {
//
//     uint destData[];
// };
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// void main()
// {
//     ivec2 destSubImageCoords = ivec2(gl_GlobalInvocationID . x * 4, gl_GlobalInvocationID . y);
//     if(any(lessThanEqual(params . blitArea . zw, destSubImageCoords)))
//     {
//         return;
//     }
//
//     destSubImageCoords += params . blitArea . xy;
//             ivec2 srcImageCoords = ivec2(destSubImageCoords);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     int xDir = 0, yDir = 0;
//     if(params . rotateXY)
//     {
//         yDir = params . flipY ? - 1 : 1;
//     }
//     else
//     {
//         xDir = params . flipX ? - 1 : 1;
//     }
//
//     uint outStencils = 0;
//
//     for(int i = 0;i < 4;++ i)
//     {
//
//         if((srcImageCoords . x >= 0 && srcImageCoords . x < params . srcWidth)&&
//             (srcImageCoords . y >= 0 && srcImageCoords . y < params . srcHeight))
//         {
//
//             uint stencilValue = texelFetch(stencil, srcImageCoords, 0). x;
//
//             outStencils |=(stencilValue & 0xFF)<<(i * 8);
//
//         }
//
//         if(params . rotateXY)
//         {
//             srcImageCoords . y += yDir;
//         }
//         else
//         {
//             srcImageCoords . x += xDir;
//         }
//     }
//
//     destData[gl_GlobalInvocationID . y * params . destPitch + gl_GlobalInvocationID . x]= outStencils;
// }
