From abea986e218e8c512da9c76b2990c110ac8cff20 Mon Sep 17 00:00:00 2001
From: Clark DuVall <cduvall@chromium.org>
Date: Mon, 15 Apr 2024 10:52:49 -0700
Subject: [PATCH] remove resource_util_windows.cc functionality

---
 .../mediapipe/util/resource_util_windows.cc   | 63 +------------------
 1 file changed, 3 insertions(+), 60 deletions(-)

diff --git a/third_party/mediapipe/src/mediapipe/util/resource_util_windows.cc b/third_party/mediapipe/src/mediapipe/util/resource_util_windows.cc
index 6d620e58c498f..536314315d447 100644
--- a/third_party/mediapipe/src/mediapipe/util/resource_util_windows.cc
+++ b/third_party/mediapipe/src/mediapipe/util/resource_util_windows.cc
@@ -12,79 +12,22 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-#include <fstream>
-
-#include "absl/flags/flag.h"
-#include "mediapipe/framework/deps/file_path.h"
-#include "mediapipe/framework/port/file_helpers.h"
-#include "mediapipe/framework/port/singleton.h"
-#include "mediapipe/framework/port/statusor.h"
-#include "tools/cpp/runfiles/runfiles.h"
-
-ABSL_FLAG(
-    std::string, resource_root_dir, "",
-    "The absolute path to the resource directory."
-    "If specified, resource_root_dir will be prepended to the original path.");
+#include "mediapipe/util/resource_util.h"
 
 namespace mediapipe {
 
-using mediapipe::file::GetContents;
-using mediapipe::file::JoinPath;
-
 namespace internal {
-namespace {
-
-class RunfilesHolder {
- public:
-  // TODO: We should ideally use `CreateForTests` when this is
-  // accessed from unit tests.
-  RunfilesHolder()
-      : runfiles_(
-            ::bazel::tools::cpp::runfiles::Runfiles::Create("", nullptr)) {}
-
-  std::string Rlocation(const std::string& path) {
-    if (!runfiles_) {
-      // Return the original path when Runfiles is not available (e.g. for
-      // Python)
-      return JoinPath(absl::GetFlag(FLAGS_resource_root_dir), path);
-    }
-    return runfiles_->Rlocation(path);
-  }
-
- private:
-  std::unique_ptr<::bazel::tools::cpp::runfiles::Runfiles> runfiles_;
-};
-
-std::string PathToResourceAsFileInternal(const std::string& path) {
-  return Singleton<RunfilesHolder>::get()->Rlocation(path);
-}
-
-}  // namespace
 
 absl::Status DefaultGetResourceContents(const std::string& path,
                                         std::string* output,
                                         bool read_as_binary) {
-  std::string resource_path = PathToResourceAsFileInternal(path);
-  return GetContents(path, output, read_as_binary);
+  return absl::UnimplementedError("not suported in chromium");
 }
 
 }  // namespace internal
 
 absl::StatusOr<std::string> PathToResourceAsFile(const std::string& path) {
-  std::string qualified_path = path;
-  if (absl::StartsWith(qualified_path, "./")) {
-    qualified_path = "mediapipe" + qualified_path.substr(1);
-  } else if (path[0] != '/') {
-    qualified_path = "mediapipe/" + qualified_path;
-  }
-
-  // Try to load the file from bazel-bin. If it does not exist, fall back to the
-  // resource folder.
-  auto bazel_path = internal::PathToResourceAsFileInternal(qualified_path);
-  if (file::Exists(bazel_path).ok()) {
-    return bazel_path;
-  }
-  return JoinPath(absl::GetFlag(FLAGS_resource_root_dir), path);
+  return absl::UnimplementedError("not suported in chromium");
 }
 
 }  // namespace mediapipe
-- 
2.44.0.683.g7961c838ac-goog

