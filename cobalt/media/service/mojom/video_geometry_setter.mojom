// Copyright 2019 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module cobalt.media.mojom;

import "mojo/public/mojom/base/unguessable_token.mojom";
import "ui/gfx/geometry/mojom/geometry.mojom";
import "ui/gfx/mojom/overlay_transform.mojom";

// This file defines two mojo interfaces:
// - VideoGeometryChangeClient to be informed of changes in the presented video
//   geometry (for a given |overlay_plane_id|).
// - VideoGeometrySetter that can be used by a source of geometry changes (for
//   a given |overlay_plane_id|) to inform a remote observer.
// A broker (e.g., VideoGeometrySetterService) is implemented to connect the
// geometry update events (i.e., from VideoGeometrySetter::SetVideoGeometry()
// all the way to a VideoGeometryChangeClient::OnVideoGeometryChange()).
// A third mojo interface, VideoGeometryChangeSubscriber, is also defined to
// allow VideoGeometryChangeClients to connect to the broker.
// Note that there can be multiple VideoGeometryChangeClients (usually
// StarboardRenderers in a single Renderer process) and VideoGeometrySetters
// (usually OverlayStrategyUnderlayStarboard in the GPU/Viz process, compositor
// thread). The broker is expected to live in the only Cobalt Renderer process.

// Interface to inform clients (e.g., StarboardRenderer) of changes of the
// presented geometry of its video feed.
interface VideoGeometryChangeClient {
// Implementation of VideoGeometryChangeClient sets the video geometry on
// itself.
  OnVideoGeometryChange(gfx.mojom.RectF rect_f, gfx.mojom.OverlayTransform
    transform);
};

// A single instance of VideoGeometrySetterService provides both the interface
// and VideoGeometryChangeSubscriber and VideoGeometrySetter.

// Interface to register a VideoGeometryChangeClient (e.g., a StarboardRenderer)
// to listen to geometry changes for a give |overlay_plane_id|.
interface VideoGeometryChangeSubscriber {
// A VideoGeometryChangeClient informs VideoGeometrySetterService its existence.
// |overlay_plane_id| identifies the VideoGeometryChangeClient,
// |client_pending_remote| is the pending remote bound to the
// VideoGeometryChangeClient itself.
  SubscribeToVideoGeometryChange(
    mojo_base.mojom.UnguessableToken overlay_plane_id,
    pending_remote<VideoGeometryChangeClient> client_pending_remote) => ();
};

// VideoGeometrySetter is the interface used by some entity inside the Viz/GPU
// process compositor (e.g., OverlayStrategyUnderlayStarboard) to report changes
// in the geometry of the overlay.
interface VideoGeometrySetter {
// Informs VideoGeometrySetterService the video geometry information and the
// target StarboardRenderer, identified by |overlay_plane_id|, that the geometry is
// set to.
  SetVideoGeometry(gfx.mojom.RectF rect_f,
    gfx.mojom.OverlayTransform transform,
    mojo_base.mojom.UnguessableToken overlay_plane_id);
};
