/*
 * Copyright (C) 2013 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// https://w3c.github.io/encrypted-media/#mediakeysession-interface

enum MediaKeySessionClosedReason {
    "internal-error",
    "closed-by-application",
    "release-acknowledged",
    "hardware-context-reset",
    "resource-evicted"
};

[
    Exposed=Window,
    ActiveScriptWrappable,
    SecureContext
] interface MediaKeySession : EventTarget {
    // session properties
    readonly attribute DOMString sessionId;
    readonly attribute unrestricted double expiration;
    [CallWith=ScriptState] readonly attribute Promise<MediaKeySessionClosedReason> closed;
    readonly attribute MediaKeyStatusMap keyStatuses;
    attribute EventHandler onkeystatuseschange;
    attribute EventHandler onmessage;

    // session initialization
    [CallWith=ScriptState, RaisesException] Promise<void> generateRequest(DOMString initDataType, BufferSource initData);
    [CallWith=ScriptState, RaisesException] Promise<boolean> load(DOMString sessionId);

    // session operations
    [CallWith=ScriptState, RaisesException] Promise<void> update(BufferSource response);
    [CallWith=ScriptState, RaisesException] Promise<void> close();
    [CallWith=ScriptState, RaisesException] Promise<void> remove();
};
