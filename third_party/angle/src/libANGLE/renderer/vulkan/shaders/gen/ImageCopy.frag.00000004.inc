// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x57,0xd9,0x6f,0x95,0x75,
    0x10,0xfd,0xe6,0x76,0x65,0x29,0x4b,0x5a,0x54,0x04,0xb1,0xb2,0x85,0xdd,0x5b,0x28,
    0x5a,0x6c,0xaf,0xe0,0x56,0x78,0x20,0x01,0xac,0xca,0x03,0x55,0xc0,0x80,0x11,0x42,
    0x81,0x54,0x4a,0x80,0x07,0x53,0xc0,0xba,0x00,0x2f,0x12,0x09,0x08,0xd2,0xf0,0x40,
    0x20,0x20,0x4b,0x1f,0x4c,0xea,0x43,0x49,0x30,0x12,0x24,0x84,0x88,0xc8,0xaa,0x91,
    0x16,0x10,0x59,0xfe,0x00,0xa3,0x80,0x88,0x73,0xee,0x9c,0x81,0xb1,0xd1,0xd0,0xe4,
    0xc7,0xf7,0xfd,0xce,0xcc,0x9c,0x99,0x39,0xbf,0xe5,0xbb,0xe4,0xa4,0x06,0x15,0x24,
    0x89,0x24,0x5d,0x93,0xc2,0xe4,0xaa,0x24,0xd9,0xbf,0xde,0x49,0x2a,0xc1,0x6b,0xb7,
    0x24,0x3f,0xfb,0x9c,0x3c,0xb5,0x66,0xea,0x98,0xf7,0x96,0xcd,0x1b,0x53,0x3e,0x3e,
    0x0d,0x7b,0x8f,0x24,0x27,0xeb,0x07,0x5b,0xcf,0xa4,0x20,0xc9,0xd5,0x27,0x46,0xdd,
    0xdc,0x05,0x8b,0x81,0x9f,0xd3,0x71,0x53,0x47,0x2f,0xf5,0x03,0xae,0x09,0x92,0x29,
    0x49,0x5e,0x52,0x66,0xf4,0xc9,0x20,0x3e,0x1d,0x13,0x62,0x85,0x01,0x4b,0x11,0xeb,
    0x15,0xb0,0x1c,0x62,0x25,0x01,0xcb,0x25,0xf6,0x58,0xc0,0xf2,0x88,0xf5,0x0f,0x58,
    0x3e,0xb1,0xd2,0x80,0x15,0x10,0x1b,0x1c,0xb0,0x42,0x62,0xc3,0x02,0xd6,0x85,0xd8,
    0xa8,0x80,0x75,0x25,0x96,0x0e,0x58,0x37,0x62,0xe5,0x01,0xeb,0x4e,0xac,0x22,0x60,
    0x45,0xc4,0xaa,0x02,0xd6,0x83,0xd8,0x24,0xe8,0xad,0x9d,0xba,0x06,0x93,0xb5,0xc3,
    0x73,0xe4,0xee,0xc9,0x79,0x87,0x3e,0x07,0x52,0x43,0x9f,0x3f,0x15,0xe6,0xd0,0x7e,
    0x00,0xe7,0xc5,0xca,0x92,0xca,0xda,0x73,0xb2,0xfa,0xe1,0xfd,0x11,0x7d,0xcb,0xa7,
    0x16,0x7d,0xd4,0xbf,0x3b,0xdf,0xb1,0x0e,0x8f,0xea,0xbc,0x88,0x75,0xa7,0x38,0x2f,
    0xe6,0x3c,0x97,0xf3,0x3e,0xd4,0x13,0xf3,0x91,0xfa,0x2f,0xde,0xfb,0xe9,0xb8,0x76,
    0x60,0x48,0xa6,0x44,0xa3,0xfa,0x07,0x7c,0xa8,0x8e,0x03,0x93,0xe7,0x66,0x7c,0x3e,
    0x42,0xc7,0xd6,0xcf,0xfb,0x4e,0x42,0xde,0x34,0xf3,0x26,0xd9,0x7a,0x7b,0xdf,0xd7,
    0xc6,0xf3,0xfb,0x48,0x3f,0x64,0xb8,0x4f,0xa9,0x72,0x8e,0xe5,0x7a,0x81,0xab,0x92,
    0xf3,0x71,0xc4,0x46,0xb2,0xd7,0x72,0xf6,0x0a,0xff,0xf1,0xb4,0x15,0x05,0xfb,0x04,
    0xee,0x21,0xd8,0x9f,0xa3,0x3d,0x4d,0x3b,0x9e,0x19,0xd6,0xec,0xfe,0xd5,0xd4,0xc3,
    0xe7,0x33,0xb8,0x9e,0x3e,0xaf,0xe5,0x5e,0x83,0x76,0xf3,0x59,0x6f,0x4e,0xb0,0xd7,
    0x71,0xdf,0xf9,0xbc,0xa1,0x13,0xff,0x3a,0xc6,0xf8,0x7c,0x07,0x6b,0x02,0xdf,0x2e,
    0xe6,0x4e,0x05,0xfb,0x3e,0xee,0x4f,0x9f,0xb7,0xb2,0x3f,0xf4,0xf3,0x35,0x63,0x23,
    0x5f,0x5b,0x88,0x07,0xd7,0x37,0x9d,0xf2,0x1f,0xe9,0xb4,0xd6,0x27,0xb3,0xd6,0xc6,
    0x89,0xe0,0x3b,0x4b,0x2d,0xfb,0x50,0xef,0xb3,0x3c,0xff,0xc0,0xfa,0x6a,0xa6,0x8b,
    0xcc,0xc5,0xab,0xe5,0xfe,0x9f,0xcf,0xc1,0xd1,0xce,0xf7,0x8b,0xe4,0xc0,0xbc,0x23,
    0xd8,0x6f,0x50,0x2f,0xcf,0x71,0x83,0xf7,0x4b,0x4e,0xa8,0xe9,0x7b,0x25,0x5c,0xdd,
    0xd8,0x58,0x39,0x4a,0x95,0x86,0xdf,0x49,0x31,0x2c,0x0e,0xf7,0xfd,0x41,0xdf,0x97,
    0xec,0xae,0x9f,0xe8,0xf3,0x53,0x3a,0xff,0x74,0x6d,0x73,0xe6,0x19,0x5d,0xf5,0x14,
    0x7b,0x4d,0xc8,0xff,0xa7,0x22,0x79,0xd9,0x35,0xb7,0x7d,0x7f,0x9e,0xfd,0x4d,0xd3,
    0x3c,0xd0,0xfe,0x02,0xb1,0xf3,0xa1,0xaf,0xc5,0x3c,0x43,0x3f,0xd1,0xfe,0x82,0x32,
    0x60,0x9f,0xdd,0xe2,0x5e,0x2c,0x27,0x1f,0x7c,0x6e,0x13,0x5f,0xa3,0x3e,0x98,0xdf,
    0x61,0xdc,0x6d,0xc6,0x61,0xff,0xfd,0xc5,0xb8,0x09,0x8c,0xc3,0x1e,0xbc,0x4b,0xfc,
    0x4b,0xf5,0xc1,0x79,0xfb,0x9b,0x18,0xf6,0xe6,0x1f,0xb8,0x77,0x29,0xf0,0x6d,0xf5,
    0x87,0xed,0x1e,0xfa,0x12,0xeb,0xe7,0x5e,0x76,0x8f,0xe6,0xd9,0xba,0x88,0xe5,0xc4,
    0xdf,0xfb,0x5c,0xef,0x94,0x18,0xfe,0xaa,0xaa,0x83,0x9a,0xbe,0x12,0xc3,0xdc,0xef,
    0x96,0x72,0x38,0x17,0x9e,0xbf,0xab,0x16,0xf0,0xfb,0x91,0x3e,0x79,0x8c,0xb9,0x17,
    0x7a,0xc8,0x13,0xeb,0xa1,0x3a,0xf4,0x90,0x2f,0x86,0x7b,0x0f,0x05,0x62,0x98,0xf7,
    0x50,0x14,0x7a,0x80,0xad,0x50,0x47,0x11,0xf3,0xe2,0xdd,0x7b,0xe8,0x2a,0x96,0x5b,
    0x42,0x0f,0xdd,0xc4,0x70,0xef,0xa1,0x55,0x0c,0x73,0x3f,0xf4,0xe0,0x5c,0x45,0xa1,
    0x87,0xd3,0xf4,0x41,0x5f,0xad,0xcc,0xe9,0x3d,0xf4,0x60,0x0f,0x33,0x42,0x0f,0x3d,
    0xc5,0x70,0xef,0xa1,0x97,0x18,0xe6,0x3d,0x94,0x84,0x1e,0x60,0xeb,0xad,0xa3,0x84,
    0x79,0xf1,0x3e,0x8d,0x79,0x8b,0xc5,0x72,0x9f,0x96,0x07,0x67,0x03,0x35,0xba,0x6f,
    0x49,0xa8,0xf1,0x0c,0xfd,0x50,0x77,0x31,0x39,0x51,0x0f,0xce,0xcf,0x25,0x9e,0x1d,
    0xdf,0x73,0x97,0xb9,0x77,0x1a,0xc2,0x9e,0xbb,0x42,0xbc,0x91,0x7b,0xee,0x2a,0xb1,
    0x33,0xec,0x15,0x77,0xc4,0x6f,0x8c,0x6b,0x63,0x1c,0x34,0xbd,0x46,0x7c,0xb6,0xd6,
    0x81,0x6f,0xc2,0x75,0xe6,0xbb,0xca,0xfb,0xe3,0x5a,0x58,0xef,0x27,0xa8,0x55,0x6d,
    0xd0,0x6a,0x80,0x18,0xee,0x5a,0x3d,0x29,0x86,0xb9,0x56,0x99,0xa0,0x15,0x6c,0xa5,
    0x3a,0x86,0xb3,0xff,0xe1,0x61,0x1d,0x46,0x90,0xbb,0x2e,0x70,0x8f,0x14,0xc3,0x9d,
    0x7b,0x94,0x18,0xe6,0xdc,0x65,0x81,0x1b,0xb6,0xd1,0x3a,0xca,0xc8,0x3d,0x3a,0xec,
    0xa5,0xa7,0xc5,0xfa,0xc2,0xd9,0xdf,0x4f,0xae,0xb4,0x18,0xde,0xc0,0x35,0xf1,0xb8,
    0x32,0xae,0x09,0x7c,0xc6,0x8a,0xe5,0x44,0x9d,0x69,0xf2,0x23,0x6f,0x55,0xc8,0x0b,
    0x9f,0x71,0x3a,0xaa,0x18,0x3f,0x2e,0xe4,0x1d,0x1f,0xf2,0x4e,0xd3,0xaf,0x01,0xbe,
    0x13,0xcf,0x12,0xbb,0x1e,0xee,0x16,0xe8,0x3c,0x5d,0xf7,0x34,0xec,0x15,0x62,0x71,
    0x3e,0x3e,0x52,0x2e,0xe0,0x13,0xc4,0x62,0x2b,0xb2,0xfb,0xab,0x4b,0x76,0xad,0x2a,
    0xc9,0x05,0x5b,0x2e,0xcf,0x68,0x3e,0xf3,0xa1,0x27,0xaf,0xa9,0x8a,0x3d,0x21,0xe6,
    0x3c,0x63,0xd0,0x67,0x25,0x6b,0x87,0x6f,0x86,0xbe,0xa5,0xa1,0xfe,0x81,0xff,0x51,
    0xff,0xe0,0x87,0xd4,0x3f,0x44,0x2c,0xce,0xc7,0x07,0xac,0x7f,0xa8,0x58,0xec,0x90,
    0x50,0xff,0x30,0x72,0x0d,0xfd,0x9f,0xfa,0xbd,0xa6,0x4c,0xa8,0xff,0x9c,0x58,0x0f,
    0xe8,0x69,0x18,0xf7,0xd3,0x12,0xde,0xe3,0x13,0xc5,0xec,0x4d,0xca,0x84,0xf9,0x8b,
    0x62,0xd8,0xc9,0xb0,0xcf,0x5e,0xe2,0x3e,0x5b,0x17,0xf6,0xd9,0xcb,0x62,0xb8,0xef,
    0xb3,0x57,0xc4,0x30,0xdf,0x67,0x35,0x61,0xbd,0x61,0xab,0xd6,0x51,0xc3,0xda,0xaa,
    0xa9,0x17,0xea,0x9e,0x22,0x96,0x33,0x61,0xdc,0x06,0xbe,0xdf,0xc1,0x39,0xc0,0xd9,
    0x64,0x0c,0x9e,0x6d,0xcc,0xb5,0x46,0x2c,0xae,0x1f,0x63,0xd6,0x87,0x5c,0xb0,0xad,
    0xd5,0xf1,0x21,0xe3,0xf0,0x5c,0xcd,0x5c,0x1f,0x33,0x0e,0xbf,0xc5,0x9a,0x88,0x7d,
    0x22,0x86,0xe3,0x5b,0xd8,0x5d,0xf5,0x02,0xb6,0x8e,0x77,0xcf,0xe3,0xb4,0x8f,0xa0,
    0xb6,0x1b,0xc8,0xb9,0x56,0x1e,0xc4,0x37,0x91,0xf3,0x94,0xfc,0xdb,0x67,0x7d,0xf6,
    0xde,0x97,0xec,0xfb,0x06,0xae,0x05,0xfc,0x2f,0x88,0xf1,0xa3,0xae,0x26,0xd6,0x8a,
    0xbb,0x19,0xda,0x1f,0x12,0xb3,0xbb,0x1e,0xae,0xd1,0x54,0x62,0xc2,0x7e,0x9b,0x3b,
    0x69,0xb4,0x91,0x39,0x37,0x06,0x8d,0x3e,0x13,0x8b,0x73,0x8d,0xb6,0x07,0x8d,0x60,
    0xdb,0xa4,0x63,0x0b,0xe3,0xb6,0x04,0x8d,0xb6,0x32,0x2e,0x6a,0xb4,0x4d,0x0c,0x8f,
    0x1a,0x7d,0x11,0x34,0xda,0x16,0x34,0x6a,0x26,0xe7,0xa6,0xa0,0xd1,0x66,0x72,0xba,
    0x46,0xee,0xb3,0x3d,0x68,0xd4,0x1c,0x34,0xfa,0x59,0x8c,0x1f,0x75,0x6d,0x66,0xad,
    0xae,0xd1,0x61,0x31,0xfb,0x21,0xe6,0x77,0x8d,0xa6,0x53,0xa3,0x14,0xfb,0x6d,0xe9,
    0xa4,0xd1,0x4e,0xe6,0xdc,0x19,0x34,0xda,0x25,0x16,0xe7,0x1a,0x1d,0x0c,0x1a,0xc1,
    0xb6,0x5b,0xc7,0x5e,0xc6,0xed,0x0d,0x1a,0xed,0x63,0x5c,0xd4,0x68,0xbf,0x18,0x1e,
    0x35,0x3a,0x10,0x34,0xda,0x1f,0x34,0x6a,0x21,0xe7,0xee,0xa0,0xd1,0x1e,0x72,0xba,
    0x46,0xee,0x73,0x30,0x68,0xd4,0x12,0x34,0xfa,0x45,0x8c,0x1f,0x75,0xed,0x61,0xad,
    0xae,0xd1,0xb7,0x62,0xf6,0xc3,0xd4,0x03,0x7c,0x7e,0xf6,0x6a,0xc8,0x01,0xbf,0x76,
    0x6a,0x86,0xbb,0x02,0x31,0x2d,0xe1,0xcc,0xbf,0xc6,0x33,0xbf,0x23,0x9c,0xf9,0xd7,
    0xc5,0x70,0x3f,0xf3,0x6f,0x88,0x61,0x7e,0xe6,0x57,0x05,0xfd,0x60,0x9b,0xa9,0xa3,
    0x96,0x79,0x6b,0x03,0xf7,0x9b,0xe4,0xde,0x17,0xb8,0xdf,0x12,0xc3,0x9d,0x7b,0xb6,
    0x18,0xe6,0xdc,0x2b,0x03,0x37,0x6c,0x73,0x74,0xcc,0x23,0xf7,0xbc,0xf0,0xbd,0x9e,
    0x4f,0xee,0xd6,0xf0,0xbd,0x7e,0x47,0x0c,0xff,0x8e,0x77,0xf4,0xbb,0x62,0x58,0x5b,
    0xf8,0xdd,0xb8,0x40,0x0c,0x6f,0x60,0xbe,0x45,0x21,0x1f,0x6c,0x0b,0x75,0x2c,0x62,
    0xbe,0x85,0x41,0xeb,0x63,0x62,0xff,0x4f,0x68,0x0f,0xbf,0xa7,0xdc,0x6f,0x51,0xd0,
    0xba,0x43,0xcc,0x07,0xb5,0x1e,0x23,0x9f,0xd7,0xb3,0x98,0xf5,0x1c,0x09,0xf5,0x2c,
    0x11,0xc3,0xbd,0x9e,0xfa,0x50,0x0f,0x6c,0x4b,0x75,0xd4,0x33,0xcf,0xd2,0x50,0xcf,
    0x71,0xd6,0xd3,0x11,0xd6,0xde,0xfd,0xea,0x43,0x3d,0x97,0xc4,0x7c,0x50,0xe3,0x71,
    0xf2,0x79,0x3d,0xcb,0x58,0x4f,0x5d,0xa8,0xa7,0x41,0x0c,0xf7,0x7a,0x56,0x84,0x7a,
    0x60,0x5b,0xae,0x63,0x05,0xf3,0x2c,0x0f,0xf5,0x9c,0x10,0xfb,0x7f,0x12,0xf2,0xf9,
    0x37,0xca,0xfd,0x56,0x84,0x7a,0x7e,0x15,0xf3,0x41,0x8d,0x27,0xc8,0x07,0xdf,0x95,
    0xf4,0x9d,0x13,0xbe,0x19,0x6f,0x53,0x4b,0xf0,0x79,0x9e,0xa3,0xf2,0x00,0xf7,0xdf,
    0x8c,0x1e,0xbb,0x32,0xe4,0xb9,0x22,0x96,0x0b,0xb9,0x8f,0x72,0x1f,0xc1,0x77,0x15,
    0x7d,0x67,0xf2,0x5b,0x0b,0xdf,0x59,0xe4,0x6b,0xe7,0xb7,0xb6,0x80,0xdf,0x6d,0xef,
    0xc3,0x63,0x56,0x05,0xfe,0xcb,0x62,0x39,0x90,0x73,0x16,0xcf,0xc0,0xf3,0x1a,0x71,
    0x93,0xb6,0xbb,0xba,0x4b,0x2a,0x74,0xfc,0x03,0x1b,0xc6,0x92,0x99,0x70,0x12,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out vec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       vec4 transformSrcValue(ivec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
