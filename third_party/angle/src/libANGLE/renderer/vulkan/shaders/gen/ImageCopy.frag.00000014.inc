// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000014.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000014[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x57,0x7b,0x68,0x97,0x65,
    0x14,0xfe,0xce,0x6f,0x57,0x75,0xf3,0xc2,0x9c,0xb6,0x29,0x61,0x79,0x41,0xdc,0x98,
    0x53,0xe7,0x65,0xd9,0xbc,0x92,0x5a,0x8d,0x4c,0x83,0xc0,0x52,0x62,0xa6,0x52,0xd6,
    0x54,0x96,0x13,0x29,0x99,0xb3,0xb2,0x52,0xa3,0xd2,0xbf,0x4c,0x51,0x34,0xa5,0xc0,
    0xbc,0x91,0x39,0x23,0xf4,0x8f,0x50,0x8c,0x40,0x4c,0xa4,0x39,0x95,0xbc,0x24,0x9b,
    0xb7,0xbc,0xfc,0x15,0xdd,0x88,0x3a,0xcf,0xef,0x3c,0xa7,0x9d,0x56,0xa1,0xf0,0xfa,
    0x7d,0xef,0x73,0xce,0x79,0xce,0x39,0xcf,0xfb,0xbe,0xdf,0xfb,0x5b,0x46,0xaa,0x7f,
    0x4e,0x92,0x48,0xd2,0x39,0xc9,0x4d,0x6e,0x4a,0x92,0xfe,0xd7,0x23,0x49,0x25,0x78,
    0xed,0x92,0x64,0xa7,0x9f,0x53,0xab,0x9f,0xaa,0x2e,0x7b,0x65,0xe9,0xbc,0xb2,0x8a,
    0x91,0xe5,0xb0,0x77,0x4d,0x32,0xd2,0x7e,0xb0,0x75,0x4b,0x72,0x92,0x4c,0x7d,0x62,
    0xd4,0xd6,0xbc,0xb8,0x08,0xf8,0x19,0x1d,0x77,0x75,0x74,0x57,0x3f,0xe0,0x9a,0x20,
    0x99,0x96,0x64,0x25,0xc3,0x8c,0x3e,0xe9,0xcf,0xa7,0x63,0x42,0x2c,0x37,0x60,0x29,
    0x62,0xdd,0x03,0x96,0x41,0xac,0x67,0xc0,0x32,0x89,0xdd,0x17,0xb0,0x2c,0x62,0x7d,
    0x03,0x96,0x4d,0xac,0x5f,0xc0,0x72,0x88,0x0d,0x08,0x58,0x2e,0xb1,0xc1,0x01,0xeb,
    0x44,0xac,0x34,0x60,0x9d,0x89,0x95,0x07,0xac,0x0b,0xb1,0x8a,0x80,0xe5,0x11,0x1b,
    0x13,0xb0,0x7c,0x62,0x0f,0x07,0xac,0x2b,0xb1,0x09,0xd0,0x5b,0x3b,0x75,0x0d,0xa6,
    0x6a,0x87,0x67,0xc8,0xdd,0x8d,0xf3,0x4b,0xfa,0x7c,0x90,0x1a,0xfa,0xfc,0x81,0x30,
    0x87,0xf6,0xf7,0x73,0x5e,0xa0,0x2c,0xa9,0xb4,0x3d,0x23,0xad,0x1f,0xde,0x7b,0xe9,
    0x5b,0x36,0xb5,0x28,0x54,0xff,0x3c,0xbe,0x63,0x1d,0x7a,0xeb,0x3c,0x9f,0x75,0xa7,
    0x38,0x2f,0xe0,0x3c,0x93,0xf3,0x42,0xea,0x89,0x79,0x89,0xfe,0x8f,0xf7,0x3e,0x3a,
    0xae,0xee,0x1d,0x58,0xd5,0x53,0xa3,0xfa,0x06,0x7c,0x90,0x8e,0xbd,0x53,0x6b,0xaa,
    0x7c,0x3e,0x44,0xc7,0xa6,0x0f,0x8b,0x26,0x20,0x6f,0x39,0xf3,0x26,0xe9,0x7a,0x7b,
    0xfc,0xad,0x8d,0xe7,0xf7,0x51,0x7e,0x8f,0xe1,0x3e,0xfd,0x94,0x73,0x38,0xd7,0x0b,
    0x5c,0x63,0x39,0x1f,0x41,0xac,0x84,0xbd,0x56,0xb0,0x57,0xf8,0x8f,0xa4,0x2d,0x3f,
    0xd8,0x2b,0xb9,0x87,0x60,0x7f,0x88,0xf6,0x72,0xda,0xf1,0xac,0x62,0xcd,0xee,0x3f,
    0x85,0x7a,0xf8,0x7c,0x06,0xd7,0xd3,0xe7,0xb3,0xb9,0xd7,0xa0,0xdd,0x7c,0xd6,0x9b,
    0x11,0xec,0xb5,0xdc,0x77,0x3e,0xaf,0xef,0xc0,0xbf,0x96,0x31,0x3e,0xdf,0xc6,0x9a,
    0xc0,0xf7,0x31,0x73,0xa7,0x82,0x7d,0x37,0xf7,0xa7,0xcf,0x0f,0xb1,0x3f,0xf4,0xf3,
    0x05,0x63,0x23,0xdf,0xe1,0x10,0x0f,0xae,0xaf,0x3a,0xe4,0x3f,0xd6,0x61,0xad,0xbf,
    0x4d,0x5b,0x1b,0xc7,0x83,0xaf,0x99,0x5a,0x16,0x52,0xef,0x66,0x9e,0x7f,0x60,0x45,
    0x9a,0xe9,0x02,0x73,0xf1,0xd3,0xf2,0xaf,0x27,0x38,0x2e,0xf2,0xfd,0x02,0x39,0x30,
    0xbf,0xd4,0xa1,0x86,0x36,0x6a,0x06,0xff,0x3b,0x7c,0xf7,0x9c,0x77,0xf8,0xbd,0xc9,
    0x08,0x35,0x7e,0xa7,0x09,0x56,0x35,0x36,0x8e,0x2d,0x55,0xe5,0xe1,0xd7,0x2c,0x86,
    0xc5,0xe1,0xbe,0x67,0xf4,0x7d,0xf1,0x27,0x75,0xe3,0x7d,0xde,0xa2,0xf3,0xf5,0x6f,
    0x6c,0xad,0x1a,0xa5,0xbb,0x20,0xc5,0xde,0x13,0xf2,0xff,0xa2,0x48,0x56,0x7a,0x0f,
    0xd8,0x39,0x68,0x61,0xbf,0xd3,0x35,0x0f,0xd6,0xe2,0x2c,0xb1,0x96,0xd0,0xe7,0x22,
    0x9e,0xa9,0x73,0xb4,0x4f,0x54,0x06,0xec,0xbb,0x3f,0xb9,0x37,0x2b,0xc8,0x97,0xcf,
    0x00,0xe0,0xaf,0xab,0x0f,0xe6,0x22,0x16,0x07,0x1c,0x71,0xd8,0x8f,0x29,0xb1,0xb8,
    0x4a,0xc6,0x61,0x4f,0x66,0x88,0xe1,0x9f,0xaa,0x0f,0xce,0x5f,0xa6,0x18,0x86,0xbd,
    0xfa,0xb3,0x56,0xde,0x99,0x82,0xff,0xa6,0xfe,0xb0,0x65,0xe9,0x00,0x96,0xee,0x47,
    0xb0,0x67,0xb3,0xd2,0x3a,0xe7,0x88,0xe5,0xc4,0xbf,0x06,0x6a,0x9f,0x2b,0x86,0xcf,
    0x54,0x75,0x50,0xd3,0x97,0x62,0x98,0xfb,0xfd,0xaa,0x1c,0xce,0x85,0xe7,0x4f,0xaa,
    0x05,0xfc,0xce,0xd2,0x27,0x8b,0x31,0x59,0xa1,0x87,0x2e,0xec,0x61,0x4a,0xe8,0x21,
    0x4f,0x0c,0xf7,0x1e,0xf2,0xc5,0x30,0xef,0xa1,0x20,0xf4,0x00,0x5b,0x57,0x1d,0x05,
    0xcc,0xdb,0x35,0xf4,0xd0,0x5d,0x98,0x3b,0xf4,0xd0,0x43,0x0c,0xf7,0x1e,0x8e,0x88,
    0x61,0xee,0x87,0x1e,0x9c,0xab,0x20,0xf4,0x70,0x8e,0x3e,0xe8,0xeb,0x08,0x73,0x7a,
    0x0f,0x3d,0xd9,0xc3,0x8c,0xd0,0x43,0xa1,0x18,0xee,0x3d,0xf4,0x12,0xc3,0xbc,0x87,
    0xe2,0xd0,0x03,0x6c,0xbd,0x75,0x14,0x33,0x2f,0xde,0xa7,0x33,0x6f,0x91,0x58,0xee,
    0x73,0xd2,0x7e,0x56,0x50,0xa3,0xfb,0x16,0x87,0x1a,0xcf,0xd3,0x0f,0x75,0x17,0x91,
    0x13,0xf5,0xe0,0x3c,0x5d,0xe6,0x59,0xf2,0x3d,0xf7,0x03,0xf7,0x5c,0x7d,0xd8,0x73,
    0x57,0x88,0x37,0x72,0xcf,0xb5,0x12,0x3b,0xcf,0x5e,0xf1,0xcd,0xb8,0xca,0xb8,0x36,
    0xc6,0x41,0xd3,0x6b,0xc4,0x5d,0xf7,0xeb,0x8c,0x4d,0x02,0x76,0x83,0x18,0x7a,0x78,
    0x52,0xb5,0xc7,0xf7,0xef,0x26,0x7d,0x6f,0x90,0xc3,0x73,0xfc,0xc8,0x1c,0x87,0x43,
    0x8e,0x5b,0xc4,0x9f,0xd3,0x5e,0x71,0x0f,0xdd,0x66,0x4f,0x37,0xf9,0xcd,0xba,0x95,
    0xb4,0xaf,0x47,0x7f,0xae,0xc7,0xec,0xb0,0x1e,0x03,0xc4,0x70,0x5f,0x8f,0x81,0x62,
    0x98,0xaf,0xc7,0xe4,0xb0,0x1e,0xb0,0x0d,0xd2,0x31,0x94,0x1a,0x0f,0x0d,0x6b,0x5d,
    0x4e,0xee,0xda,0xc0,0x3d,0x4c,0x0c,0x77,0xee,0xe1,0x62,0x98,0x73,0x8f,0x0e,0xdc,
    0xb0,0x8d,0xd0,0x31,0x9a,0xdc,0x23,0xc2,0x7e,0x1d,0x29,0xd6,0x17,0xbe,0x2f,0x7b,
    0xc8,0x35,0x4a,0x0c,0xaf,0xe7,0xba,0x7b,0xdc,0x68,0xae,0x3b,0x7c,0xc6,0x88,0xe5,
    0x44,0x9d,0xa3,0xc8,0x8f,0xbc,0x93,0x42,0x5e,0xf8,0x54,0xea,0x98,0xc4,0xf8,0xca,
    0x90,0x77,0x6c,0xc8,0x3b,0x5d,0x6f,0x20,0xac,0x4d,0x15,0xb1,0xdb,0xe1,0xfb,0x95,
    0x0a,0x6b,0x37,0x4e,0x2c,0xce,0xc7,0xdb,0xca,0x05,0x7c,0xbc,0x58,0xec,0xb8,0xf4,
    0x1e,0xee,0x94,0x5e,0xab,0x89,0xe4,0x82,0x2d,0x93,0x77,0x6a,0x36,0xf3,0xa1,0x27,
    0xaf,0x69,0x12,0x7b,0x42,0xcc,0x05,0xc6,0xa0,0xcf,0x89,0xac,0x1d,0xbe,0x93,0xe9,
    0x3b,0x28,0xd4,0x3f,0xf8,0x3f,0xea,0x1f,0x72,0x8f,0xfa,0x4b,0xc4,0xe2,0x7c,0xbc,
    0xc9,0xfa,0x4b,0xc5,0x62,0x4b,0x42,0xfd,0x65,0xe4,0x2a,0xfd,0x9f,0xfa,0xbd,0xa6,
    0xc9,0xa1,0xfe,0xef,0xc5,0x7a,0x40,0x4f,0x65,0xdc,0x4f,0x8b,0x79,0x57,0x3c,0x22,
    0x66,0x5f,0xad,0x4c,0x98,0x4f,0x13,0xc3,0x9a,0xc3,0x3e,0x7b,0x94,0xfb,0x6c,0x6d,
    0xd8,0x67,0x8f,0x89,0xe1,0xbe,0xcf,0x1e,0x17,0xc3,0x7c,0x9f,0xcd,0x0a,0xeb,0x0d,
    0x5b,0xb5,0x8e,0x59,0xac,0xad,0x9a,0x7a,0xa1,0xee,0x27,0xc4,0x72,0x26,0x8c,0xdb,
    0xc0,0xf7,0xdf,0xf5,0x1d,0x5c,0x6f,0x31,0x06,0xcf,0xc3,0xcc,0xf5,0x8e,0x58,0x5c,
    0x1f,0xc6,0xac,0x0f,0xb9,0x60,0x5b,0xa3,0xe3,0x5d,0xc6,0xe1,0xb9,0x8a,0xb9,0xde,
    0x63,0x1c,0x7e,0xff,0xad,0x26,0xf6,0xbe,0x18,0x8e,0xfb,0x36,0x4f,0xf5,0x02,0xf6,
    0x01,0xbf,0x6f,0xc5,0xb4,0x0f,0xa1,0xb6,0x1b,0xc8,0xb9,0x46,0xda,0xe3,0xd7,0x91,
    0xb3,0x45,0xfe,0xe9,0xb3,0x3e,0x7d,0x67,0x4a,0xfa,0x7d,0x03,0xd7,0x02,0xfe,0x17,
    0xc5,0xf8,0x51,0xd7,0x3a,0xd6,0x8a,0xef,0x3f,0xb4,0x3f,0x2a,0x66,0x77,0x3d,0x5c,
    0xa3,0x99,0xc4,0x84,0xfd,0xee,0xec,0xa0,0xd1,0x46,0xe6,0xdc,0x18,0x34,0xda,0x24,
    0x16,0xe7,0x1a,0xed,0x08,0x1a,0xc1,0xb6,0x59,0xc7,0x56,0xc6,0x6d,0x0d,0x1a,0x6d,
    0x63,0x5c,0xd4,0x68,0xbb,0x18,0x1e,0x35,0xfa,0x28,0x68,0xb4,0x3d,0x68,0xb4,0x93,
    0x9c,0x9b,0x83,0x46,0x5b,0xc8,0xe9,0x1a,0xb9,0xcf,0x8e,0xa0,0xd1,0xce,0xa0,0xd1,
    0x65,0x31,0x7e,0xd4,0xb5,0x85,0xb5,0xba,0x46,0xc7,0xc5,0xec,0x47,0x99,0xdf,0x35,
    0x7a,0x9a,0x1a,0xa5,0xd8,0x6f,0x53,0x07,0x8d,0x76,0x31,0xe7,0xae,0xa0,0xd1,0x6e,
    0xb1,0x38,0xd7,0xe8,0x60,0xd0,0x08,0xb6,0x3d,0x3a,0xf6,0x33,0x6e,0x7f,0xd0,0xe8,
    0x33,0xc6,0x45,0x8d,0x0e,0x88,0xe1,0x51,0xa3,0xcf,0x83,0x46,0x07,0x82,0x46,0x4d,
    0xe4,0xdc,0x13,0x34,0xda,0x47,0x4e,0xd7,0xc8,0x7d,0x0e,0x06,0x8d,0x9a,0x82,0x46,
    0x57,0xc4,0xf8,0x51,0xd7,0x3e,0xd6,0xea,0x1a,0x7d,0x23,0x66,0x3f,0x4e,0x3d,0xc0,
    0xe7,0x67,0x6f,0x16,0x39,0xe0,0xd7,0x4a,0xcd,0xf0,0xad,0x40,0x4c,0x53,0x38,0xf3,
    0xcf,0xf0,0xcc,0x6f,0x0b,0x67,0xfe,0x59,0x31,0xdc,0xcf,0xfc,0x6c,0x31,0xcc,0xcf,
    0x7c,0x63,0xd0,0x0f,0xb6,0x39,0x3a,0xe6,0x32,0xef,0xdc,0xc0,0xfd,0x3c,0xb9,0x77,
    0x07,0xee,0x79,0x62,0xb8,0x73,0xcf,0x17,0xc3,0x9c,0x7b,0x65,0xe0,0x86,0x6d,0x81,
    0x8e,0x85,0xe4,0x5e,0x18,0x7e,0x13,0xbc,0x44,0xee,0x43,0xe1,0xbe,0x7e,0x59,0x0c,
    0xff,0x9a,0xdf,0xe8,0x45,0x62,0x18,0xee,0x74,0xcf,0xb7,0x58,0x0c,0xaf,0x67,0xbe,
    0xba,0x90,0x0f,0xb6,0x25,0x3a,0xea,0x98,0x6f,0x49,0xd0,0xfa,0xa4,0xd8,0xdf,0x26,
    0xad,0xe1,0x37,0x9b,0xfb,0xd5,0x05,0xad,0xdb,0xc4,0x7c,0x50,0xeb,0x49,0xf2,0x79,
    0x3d,0x4b,0x59,0xcf,0xb1,0x50,0x4f,0xbd,0x18,0xee,0xf5,0x2c,0x0f,0xf5,0xc0,0xb6,
    0x4c,0xc7,0x72,0xe6,0x59,0x16,0xea,0x39,0xc5,0x7a,0xda,0xc2,0xda,0xbb,0xdf,0xf2,
    0x50,0xcf,0x55,0x31,0x1f,0xd4,0x78,0x8a,0x7c,0x5e,0xcf,0xab,0xac,0xa7,0x36,0xd4,
    0xf3,0x9a,0x18,0xee,0xf5,0x34,0x84,0x7a,0x60,0x5b,0xa1,0xa3,0x81,0x79,0x56,0x84,
    0x7a,0x4e,0x8b,0xfd,0x6d,0x86,0x7c,0x7e,0x47,0xb9,0x5f,0x43,0xa8,0xe7,0x86,0x98,
    0x0f,0x6a,0x3c,0x4d,0x3e,0xf8,0xae,0xa4,0xef,0x82,0x70,0x67,0xbc,0x40,0x2d,0xc1,
    0xe7,0x79,0x4e,0x48,0x3b,0xee,0xbf,0x4b,0x3d,0x76,0x65,0xc8,0x73,0x5d,0x2c,0x17,
    0x72,0x9f,0xe0,0x3e,0x82,0x6f,0x23,0x7d,0xe7,0xf0,0xae,0x85,0x6f,0x0d,0xf9,0x5a,
    0x79,0xd7,0xe6,0xf0,0xde,0xf6,0x3e,0x3c,0xa6,0x31,0xf0,0x5f,0x13,0xcb,0x81,0x9c,
    0x35,0x3c,0x03,0xe3,0x34,0xe2,0x2e,0x6d,0x7f,0xe8,0x2e,0x19,0xa3,0xe3,0x2f,0xd1,
    0x6b,0x67,0x27,0xe4,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out vec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       vec4 transformSrcValue(ivec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
