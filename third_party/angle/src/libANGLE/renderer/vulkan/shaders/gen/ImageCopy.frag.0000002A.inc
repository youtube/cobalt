// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000002A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000002A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xdb,0x6f,0x54,0x55,
    0x14,0xc6,0xf7,0x9e,0x69,0x67,0xda,0xa9,0x2d,0x20,0x14,0x68,0xc5,0xb1,0xb6,0x44,
    0x49,0xa9,0xcd,0x04,0x6b,0x67,0x12,0xf1,0x46,0x62,0x2a,0xa1,0x68,0xa1,0x15,0x1f,
    0x8d,0x89,0x2f,0x3e,0x08,0x0f,0xfa,0x46,0x62,0x8c,0x31,0xf5,0xa1,0xe9,0x13,0xff,
    0x02,0x17,0x11,0x13,0x44,0x8d,0x78,0x01,0xb9,0xbc,0x98,0x88,0x17,0xa2,0xa9,0xda,
    0x68,0xaa,0x36,0xf6,0x49,0x6d,0x8c,0x80,0x40,0x09,0xd4,0xb5,0xce,0xfe,0x2d,0x67,
    0x59,0x8d,0x36,0xd9,0x39,0x67,0x7f,0xeb,0xf6,0x7d,0x6b,0xad,0x39,0x90,0xcf,0xf5,
    0x14,0x43,0x88,0xa1,0x14,0x9a,0xc2,0x13,0x31,0x64,0x7f,0x2b,0x42,0x2e,0xe8,0x6b,
    0x4b,0x28,0x64,0xcf,0xa1,0xe1,0xd1,0xe1,0xfe,0xe7,0x9e,0x7f,0xba,0x7f,0xe0,0x9e,
    0x8a,0xda,0xdb,0x42,0x3e,0xf3,0x53,0xdb,0xb2,0x50,0x0c,0x0d,0xf2,0xd4,0xf3,0xec,
    0x53,0xcf,0xec,0x56,0xfc,0x90,0x9c,0xb3,0x72,0x96,0x8b,0x9f,0xe2,0x52,0x20,0x3c,
    0x12,0x1a,0xc3,0xea,0x94,0x3e,0xf4,0xf0,0x34,0x2c,0x82,0x35,0x39,0x2c,0x07,0xb6,
    0xdc,0x61,0x79,0xb0,0x55,0x0e,0x6b,0x00,0x5b,0xeb,0xb0,0x46,0xb0,0x75,0x0e,0x2b,
    0x80,0x75,0x39,0xac,0x08,0xb6,0xde,0x61,0x4d,0x60,0x1b,0x1c,0xd6,0x0c,0xd6,0xe7,
    0xb0,0x12,0x58,0xc5,0x61,0x2d,0x60,0x03,0x0e,0xbb,0x09,0xac,0xe6,0xb0,0x56,0xb0,
    0xcd,0x0e,0x6b,0x03,0x7b,0x50,0xfb,0x2d,0x4a,0xad,0x07,0x43,0xa2,0xf0,0x10,0xb9,
    0x97,0x71,0x3f,0x26,0xcf,0x6e,0x7a,0x68,0xf7,0xdb,0xdd,0x5d,0x7b,0x5f,0xe6,0xbe,
    0x52,0xb2,0xe4,0x32,0x7b,0x3e,0xeb,0x9f,0xbe,0xb7,0x8b,0x4f,0x81,0x5e,0x68,0xef,
    0xd7,0xc8,0xbd,0x48,0x8f,0xcc,0xde,0x8a,0x3d,0x60,0x6f,0x83,0x77,0x43,0x96,0x7b,
    0xc5,0x5f,0xfd,0xb3,0x38,0x3b,0xad,0xff,0x73,0xcc,0xa7,0x4b,0x32,0xad,0xa1,0xb7,
    0x9a,0xeb,0x5e,0xee,0x6b,0xc1,0x36,0xc2,0xb1,0x03,0x8e,0xea,0xdf,0x89,0xad,0xe8,
    0xec,0x65,0xe6,0xad,0xf6,0xdb,0xb0,0xb7,0x66,0x3b,0x92,0xcb,0x7a,0xb4,0x11,0x2d,
    0xb6,0x73,0x16,0xd7,0x07,0x17,0xb3,0x6f,0xa2,0x8e,0xd9,0xab,0xcc,0xc4,0xee,0x5b,
    0xa8,0xab,0xbd,0x18,0xa6,0x46,0xde,0xd9,0xc7,0xd8,0x1d,0xbb,0xef,0x59,0xa2,0x63,
    0x2f,0x3b,0x63,0xf7,0x71,0xd7,0x87,0x57,0xf0,0x2d,0x38,0xfb,0x04,0xb3,0xb0,0xfb,
    0xe4,0x12,0xfe,0xfb,0x98,0xc5,0x6a,0x61,0xb1,0x9f,0x59,0x29,0xb7,0x03,0xf2,0xdc,
    0x8f,0x4d,0x73,0x1f,0x44,0xd7,0x01,0x7a,0x7c,0x90,0xdf,0xa7,0xcd,0xfd,0x55,0xfc,
    0x73,0x59,0xaf,0x9b,0xc3,0x51,0x78,0xe5,0xc2,0xdf,0xff,0xf8,0x34,0x64,0x39,0xdf,
    0xe0,0xfd,0x28,0x39,0xf5,0x7e,0x6c,0x09,0xbf,0xe3,0xf4,0x47,0x6b,0xbc,0x8f,0xb6,
    0x3c,0xf1,0x67,0x78,0x6f,0x23,0xfe,0x0c,0xdf,0x0b,0xc5,0x06,0x65,0x9a,0x39,0xf8,
    0x07,0xb0,0x2b,0x82,0xe8,0x8c,0xef,0x43,0xdf,0x61,0x34,0x3c,0x26,0x13,0x51,0xfe,
    0xaf,0x81,0x1d,0x76,0x5c,0x77,0xb3,0xd3,0x47,0xb0,0x3f,0x24,0x19,0x74,0x7f,0x3e,
    0x66,0xc7,0x3a,0xc8,0xa7,0x3e,0xe7,0xc0,0x5f,0x12,0x1f,0xbd,0x7f,0x42,0xdc,0x39,
    0xe2,0x74,0xaf,0x3e,0x25,0xae,0x4c,0x9c,0xf6,0xe8,0x33,0xf0,0x23,0xe2,0xa3,0xbb,
    0xf6,0x39,0x98,0xee,0xda,0x65,0x61,0x3e,0x05,0x9f,0x05,0xf1,0x57,0xdb,0x79,0x39,
    0x53,0xe8,0xd1,0xf7,0x1d,0x12,0xa7,0x7d,0xf9,0x82,0x9a,0xfa,0xf7,0x02,0xfd,0xfb,
    0x12,0x7c,0xa7,0xdc,0x94,0xd3,0xe6,0x98,0x30,0xf3,0xbb,0x2a,0x39,0x2c,0x97,0x3e,
    0x2f,0x89,0x97,0xfa,0x0d,0xc7,0xe4,0xd3,0x48,0xcc,0x79,0xa7,0xe1,0x2b,0x34,0xf4,
    0x39,0x0d,0x5f,0x83,0x9b,0x86,0x6f,0xc0,0x4c,0xc3,0x8c,0xd3,0xa0,0xb6,0x69,0x39,
    0x33,0xd4,0x9d,0x76,0x1a,0xbe,0xa5,0x76,0x74,0x1a,0xbe,0x03,0x37,0x0d,0x0f,0xc4,
    0x84,0x99,0x9f,0x6a,0xb0,0x5c,0x33,0x4e,0xc3,0xf6,0x98,0x7c,0xa6,0x88,0x99,0x76,
    0x1a,0xbe,0x47,0x43,0xd5,0x69,0xf8,0x01,0xdc,0x34,0xfc,0x08,0x66,0x1a,0xe6,0x9c,
    0x06,0xb5,0xcd,0xca,0x99,0xa3,0xee,0x2c,0x7b,0xa4,0x75,0x7f,0xa2,0xf6,0xf6,0x58,
    0xdf,0x77,0xe5,0x68,0xbe,0x73,0x8e,0xe3,0xa3,0xf8,0xcd,0x10,0x37,0x0b,0x1f,0xfd,
    0x4d,0xbc,0xc9,0xef,0xc1,0x76,0xee,0x2d,0x38,0x4f,0xba,0x9d,0x7b,0x1b,0xfc,0x45,
    0x76,0xee,0x1d,0x30,0xcd,0xab,0x71,0xfa,0x4d,0x78,0x97,0xb8,0xe3,0xc4,0x69,0x4f,
    0xdf,0x03,0xb7,0xbe,0x7f,0x40,0x6c,0x70,0xd8,0x09,0x30,0xd5,0x30,0x22,0x88,0xfe,
    0xfe,0x4e,0xe2,0x7b,0x82,0x1c,0x56,0xe3,0x43,0x6a,0x4c,0xb8,0x1a,0xa7,0xc0,0x9f,
    0x14,0x66,0xfa,0x1b,0x3d,0x8d,0xa6,0x93,0x7c,0x17,0x4e,0xb9,0x79,0xfc,0x4c,0xfc,
    0x16,0x37,0x8f,0x5f,0xc0,0x6d,0x1e,0xbf,0x82,0xd9,0x3c,0x5a,0x62,0x7d,0x1e,0x6a,
    0x9b,0xcf,0xf0,0xd4,0xe3,0x79,0x74,0x68,0x9e,0xdf,0xa8,0x9d,0xcf,0x66,0xd4,0x94,
    0x7d,0x77,0x7f,0x07,0x3b,0xed,0x7e,0xeb,0x39,0x74,0xaa,0xfd,0x02,0x71,0x76,0x5e,
    0x96,0x5c,0x8a,0x5f,0x24,0xf6,0x42,0x96,0xab,0x39,0xd3,0xf5,0x07,0x79,0x2e,0xf2,
    0xbd,0x69,0x74,0xdf,0x29,0x9d,0xbb,0xf2,0x54,0x4e,0x97,0x9d,0xde,0x2b,0xe8,0x1d,
    0x73,0x7a,0xaf,0x82,0x9b,0xde,0x05,0x30,0xd3,0xbb,0xe8,0xf6,0x4f,0x6d,0xd7,0xe4,
    0x2c,0xa2,0xf7,0x9a,0xd3,0x7b,0xdd,0xe9,0x7d,0x9d,0x5c,0x37,0xc0,0x7b,0xe0,0x64,
    0x71,0x8b,0xec,0x62,0x37,0x4d,0x58,0xa0,0x87,0x37,0xc8,0xaf,0x75,0x4b,0xae,0xcf,
    0xea,0x13,0xe5,0x94,0xd0,0xa4,0xef,0x56,0x37,0x1f,0xff,0xd9,0xe7,0xc6,0xf8,0xdf,
    0x7d,0x2e,0xc4,0x14,0x67,0x67,0x9c,0x3e,0x17,0x63,0x8a,0x55,0xbb,0xf5,0xb9,0x99,
    0x5c,0x6a,0xfb,0xb7,0x3e,0x1b,0x27,0x7d,0x5e,0x62,0xe7,0x76,0x10,0xb3,0x48,0xbc,
    0xf2,0xf5,0x33,0x69,0x71,0xbe,0x23,0x31,0xcd,0x72,0x9e,0xb8,0x52,0xac,0xcf,0xeb,
    0xe6,0x98,0xe6,0xb5,0xc7,0xcd,0x6b,0x65,0x4c,0xb8,0xcd,0x6b,0x55,0x4c,0x98,0xcd,
    0xab,0xe6,0xfa,0xa6,0xb6,0x76,0x39,0x9d,0xd4,0x6d,0x77,0xba,0x3a,0x62,0xaa,0x3d,
    0x82,0xae,0x22,0x3d,0x32,0x5d,0x35,0x62,0x3a,0x1d,0x9f,0x5b,0xe0,0xb3,0xd7,0xf1,
    0x59,0x17,0x13,0x6e,0x7c,0x6e,0x8d,0x09,0x33,0x3e,0x55,0xc7,0x47,0x6d,0x65,0x39,
    0xdd,0xe4,0x2e,0xbb,0x39,0x76,0xc1,0x25,0xcf,0x37,0x57,0x39,0x3e,0x1c,0xeb,0xb8,
    0x7d,0xcf,0xaa,0xc4,0x76,0xbb,0x6f,0x4d,0x0f,0xbc,0xc6,0xdd,0x77,0x60,0x7d,0x4c,
    0xf8,0x47,0x7c,0x57,0xee,0x88,0x09,0x9b,0x70,0xbb,0x7e,0x67,0x4c,0xf8,0x24,0x5c,
    0x7b,0x1d,0x57,0xb5,0x6d,0x90,0xd3,0x4b,0x3d,0x7d,0x37,0x5e,0x43,0xe8,0x1b,0x71,
    0xff,0x16,0x98,0x5f,0xaf,0x9b,0xed,0x4e,0xb8,0x2b,0xd7,0x21,0xf2,0x19,0x9f,0x3e,
    0xf8,0xec,0x73,0x7c,0xee,0x8a,0x09,0x37,0x3e,0x15,0xc7,0x47,0x6d,0xfd,0x72,0x2a,
    0xd4,0xe9,0x77,0x7c,0xb6,0xc2,0x47,0xeb,0xe5,0xe0,0x63,0x7e,0x15,0xc7,0x67,0x34,
    0x26,0x1f,0xe5,0xb8,0x95,0x7c,0xc6,0x67,0x13,0x7c,0xc6,0x1c,0x9f,0xbb,0x63,0xc2,
    0x8d,0xcf,0xa0,0xe3,0xa3,0xb6,0x01,0x39,0x83,0xd4,0x19,0x70,0x7c,0xb6,0xc5,0xf4,
    0x7f,0xd2,0xd1,0x58,0xdf,0x27,0xf3,0x1b,0x74,0x7c,0x76,0xc5,0xe4,0xa3,0x1c,0xb7,
    0x91,0xcf,0xcf,0xb8,0xea,0x7c,0x1f,0x8f,0x69,0x1f,0x74,0x67,0x76,0x51,0xd7,0xef,
    0x69,0xcd,0xf9,0x8e,0xc5,0xb4,0xdf,0xba,0xef,0x1a,0xa7,0x79,0xee,0x17,0x26,0x67,
    0xb1,0x5d,0x97,0xa9,0xd5,0xe4,0xfc,0x09,0x1d,0x81,0x0d,0x8d,0x40,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out uvec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       uvec4 transformSrcValue(uvec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
