// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module commerce.price_tracking.mojom;

import "mojo/public/mojom/base/string16.mojom";
import "components/commerce/core/mojom/shared.mojom";

// Browser-side handler for price tracking related requests from WebUI page.
interface PriceTrackingHandler {
  // Track price for bookmark with 'bookmark_id'.
  TrackPriceForBookmark(int64 bookmark_id);

  // Untrack price for bookmark with 'bookmark_id'.
  UntrackPriceForBookmark(int64 bookmark_id);

  // Sets the price tracking status of the current URL.
  SetPriceTrackingStatusForCurrentUrl(bool track);

  // Returns all the product info for shopping/product bookmarks.
  GetAllShoppingBookmarkProductInfo()
      => (array<commerce.shared.mojom.BookmarkProductInfo> productInfos);

  // Returns all the tracked product info from bookmarks.
  GetAllPriceTrackedBookmarkProductInfo()
      => (array<commerce.shared.mojom.BookmarkProductInfo> productInfos);

  // Returns the ID of the shopping collection bookmark folder (not the UUID).
  GetShoppingCollectionBookmarkFolderId() => (int64 collectionId);

  // Returns the name of the parent bookmark folder of the current URL. This
  // will only be called when the current page is bookmarked.
  GetParentBookmarkFolderNameForCurrentUrl()
      => (mojo_base.mojom.String16 name);

  // Show the bookmark editor dialog for the current URL. This will only be
  // called when the current page is bookmarked.
  ShowBookmarkEditorForCurrentUrl();
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Callback when a bookmark is observed to start being price tracked and
  // pass along the `BookmarkProductInfo` constructed from it.
  PriceTrackedForBookmark(
      commerce.shared.mojom.BookmarkProductInfo bookmark_product);

  // Callback when a bookmark is observed to stop being price tracked and
  // pass along the `BookmarkProductInfo` constructed from it.
  PriceUntrackedForBookmark(
      commerce.shared.mojom.BookmarkProductInfo bookmark_product);

  // Callback to notify the WebUI to show error UI when a track/untrack
  // attempt is failed and pass along the `BookmarkProductInfo`
  // constructed from it. `attempted_track` is true when the failed
  // operation is to track price, false when the failed operation is to
  // untrack price.
  OperationFailedForBookmark(
      commerce.shared.mojom.BookmarkProductInfo bookmark_product,
      bool attempted_track);

  // Callback when a product bookmark is observed to be moved and
  // pass along the BookmarkProductInfo of the product.
  OnProductBookmarkMoved(
      commerce.shared.mojom.BookmarkProductInfo bookmark_product);
};

// Used by WebUI page (i.e., bookmarks side panel) to bootstrap bi-directional
// communication between the page and the C++-side handler.
interface PriceTrackingHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreatePriceTrackingHandler(
      pending_remote<Page> page,
      pending_receiver<PriceTrackingHandler> handler);
};
