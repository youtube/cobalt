/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __META_DBUS_X11_H__
#define __META_DBUS_X11_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Mutter.X11 */

#define META_DBUS_TYPE_X11 (meta_dbus_x11_get_type())
#define META_DBUS_X11(o) \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_X11, MetaDBusX11))
#define META_DBUS_IS_X11(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_X11))
#define META_DBUS_X11_GET_IFACE(o) \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), META_DBUS_TYPE_X11, MetaDBusX11Iface))

struct _MetaDBusX11;
typedef struct _MetaDBusX11 MetaDBusX11;
typedef struct _MetaDBusX11Iface MetaDBusX11Iface;

struct _MetaDBusX11Iface {
  GTypeInterface parent_iface;

  gint (*get_ui_scaling_factor)(MetaDBusX11* object);
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusX11, g_object_unref)
#endif

GType meta_dbus_x11_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo* meta_dbus_x11_interface_info(void);
guint meta_dbus_x11_override_properties(GObjectClass* klass,
                                        guint property_id_begin);

/* D-Bus property accessors: */
gint meta_dbus_x11_get_ui_scaling_factor(MetaDBusX11* object);
void meta_dbus_x11_set_ui_scaling_factor(MetaDBusX11* object, gint value);

/* ---- */

#define META_DBUS_TYPE_X11_PROXY (meta_dbus_x11_proxy_get_type())
#define META_DBUS_X11_PROXY(o) \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_X11_PROXY, MetaDBusX11Proxy))
#define META_DBUS_X11_PROXY_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_X11_PROXY, \
                           MetaDBusX11ProxyClass))
#define META_DBUS_X11_PROXY_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_X11_PROXY, \
                             MetaDBusX11ProxyClass))
#define META_DBUS_IS_X11_PROXY(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_X11_PROXY))
#define META_DBUS_IS_X11_PROXY_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_X11_PROXY))

typedef struct _MetaDBusX11Proxy MetaDBusX11Proxy;
typedef struct _MetaDBusX11ProxyClass MetaDBusX11ProxyClass;
typedef struct _MetaDBusX11ProxyPrivate MetaDBusX11ProxyPrivate;

struct _MetaDBusX11Proxy {
  /*< private >*/
  GDBusProxy parent_instance;
  MetaDBusX11ProxyPrivate* priv;
};

struct _MetaDBusX11ProxyClass {
  GDBusProxyClass parent_class;
};

GType meta_dbus_x11_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusX11Proxy, g_object_unref)
#endif

void meta_dbus_x11_proxy_new(GDBusConnection* connection,
                             GDBusProxyFlags flags,
                             const gchar* name,
                             const gchar* object_path,
                             GCancellable* cancellable,
                             GAsyncReadyCallback callback,
                             gpointer user_data);
MetaDBusX11* meta_dbus_x11_proxy_new_finish(GAsyncResult* res, GError** error);
MetaDBusX11* meta_dbus_x11_proxy_new_sync(GDBusConnection* connection,
                                          GDBusProxyFlags flags,
                                          const gchar* name,
                                          const gchar* object_path,
                                          GCancellable* cancellable,
                                          GError** error);

void meta_dbus_x11_proxy_new_for_bus(GBusType bus_type,
                                     GDBusProxyFlags flags,
                                     const gchar* name,
                                     const gchar* object_path,
                                     GCancellable* cancellable,
                                     GAsyncReadyCallback callback,
                                     gpointer user_data);
MetaDBusX11* meta_dbus_x11_proxy_new_for_bus_finish(GAsyncResult* res,
                                                    GError** error);
MetaDBusX11* meta_dbus_x11_proxy_new_for_bus_sync(GBusType bus_type,
                                                  GDBusProxyFlags flags,
                                                  const gchar* name,
                                                  const gchar* object_path,
                                                  GCancellable* cancellable,
                                                  GError** error);

/* ---- */

#define META_DBUS_TYPE_X11_SKELETON (meta_dbus_x11_skeleton_get_type())
#define META_DBUS_X11_SKELETON(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_X11_SKELETON, \
                              MetaDBusX11Skeleton))
#define META_DBUS_X11_SKELETON_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_X11_SKELETON, \
                           MetaDBusX11SkeletonClass))
#define META_DBUS_X11_SKELETON_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_X11_SKELETON, \
                             MetaDBusX11SkeletonClass))
#define META_DBUS_IS_X11_SKELETON(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_X11_SKELETON))
#define META_DBUS_IS_X11_SKELETON_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_X11_SKELETON))

typedef struct _MetaDBusX11Skeleton MetaDBusX11Skeleton;
typedef struct _MetaDBusX11SkeletonClass MetaDBusX11SkeletonClass;
typedef struct _MetaDBusX11SkeletonPrivate MetaDBusX11SkeletonPrivate;

struct _MetaDBusX11Skeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MetaDBusX11SkeletonPrivate* priv;
};

struct _MetaDBusX11SkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType meta_dbus_x11_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusX11Skeleton, g_object_unref)
#endif

MetaDBusX11* meta_dbus_x11_skeleton_new(void);

G_END_DECLS

#endif /* __META_DBUS_X11_H__ */
