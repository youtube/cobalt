/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __META_DBUS_SERVICE_CHANNEL_H__
#define __META_DBUS_SERVICE_CHANNEL_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Mutter.ServiceChannel */

#define META_DBUS_TYPE_SERVICE_CHANNEL (meta_dbus_service_channel_get_type())
#define META_DBUS_SERVICE_CHANNEL(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_SERVICE_CHANNEL, \
                              MetaDBusServiceChannel))
#define META_DBUS_IS_SERVICE_CHANNEL(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_SERVICE_CHANNEL))
#define META_DBUS_SERVICE_CHANNEL_GET_IFACE(o)                        \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), META_DBUS_TYPE_SERVICE_CHANNEL, \
                                 MetaDBusServiceChannelIface))

struct _MetaDBusServiceChannel;
typedef struct _MetaDBusServiceChannel MetaDBusServiceChannel;
typedef struct _MetaDBusServiceChannelIface MetaDBusServiceChannelIface;

struct _MetaDBusServiceChannelIface {
  GTypeInterface parent_iface;

  gboolean (*handle_open_wayland_service_connection)(
      MetaDBusServiceChannel* object,
      GDBusMethodInvocation* invocation,
      GUnixFDList* fd_list,
      guint arg_service_client_type);
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusServiceChannel, g_object_unref)
#endif

GType meta_dbus_service_channel_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo* meta_dbus_service_channel_interface_info(void);
guint meta_dbus_service_channel_override_properties(GObjectClass* klass,
                                                    guint property_id_begin);

/* D-Bus method call completion functions: */
void meta_dbus_service_channel_complete_open_wayland_service_connection(
    MetaDBusServiceChannel* object,
    GDBusMethodInvocation* invocation,
    GUnixFDList* fd_list,
    GVariant* fd);

/* D-Bus method calls: */
void meta_dbus_service_channel_call_open_wayland_service_connection(
    MetaDBusServiceChannel* proxy,
    guint arg_service_client_type,
    GUnixFDList* fd_list,
    GCancellable* cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_service_channel_call_open_wayland_service_connection_finish(
    MetaDBusServiceChannel* proxy,
    GVariant** out_fd,
    GUnixFDList** out_fd_list,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_service_channel_call_open_wayland_service_connection_sync(
    MetaDBusServiceChannel* proxy,
    guint arg_service_client_type,
    GUnixFDList* fd_list,
    GVariant** out_fd,
    GUnixFDList** out_fd_list,
    GCancellable* cancellable,
    GError** error);

/* ---- */

#define META_DBUS_TYPE_SERVICE_CHANNEL_PROXY \
  (meta_dbus_service_channel_proxy_get_type())
#define META_DBUS_SERVICE_CHANNEL_PROXY(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_SERVICE_CHANNEL_PROXY, \
                              MetaDBusServiceChannelProxy))
#define META_DBUS_SERVICE_CHANNEL_PROXY_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_SERVICE_CHANNEL_PROXY, \
                           MetaDBusServiceChannelProxyClass))
#define META_DBUS_SERVICE_CHANNEL_PROXY_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_SERVICE_CHANNEL_PROXY, \
                             MetaDBusServiceChannelProxyClass))
#define META_DBUS_IS_SERVICE_CHANNEL_PROXY(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_SERVICE_CHANNEL_PROXY))
#define META_DBUS_IS_SERVICE_CHANNEL_PROXY_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_SERVICE_CHANNEL_PROXY))

typedef struct _MetaDBusServiceChannelProxy MetaDBusServiceChannelProxy;
typedef struct _MetaDBusServiceChannelProxyClass
    MetaDBusServiceChannelProxyClass;
typedef struct _MetaDBusServiceChannelProxyPrivate
    MetaDBusServiceChannelProxyPrivate;

struct _MetaDBusServiceChannelProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  MetaDBusServiceChannelProxyPrivate* priv;
};

struct _MetaDBusServiceChannelProxyClass {
  GDBusProxyClass parent_class;
};

GType meta_dbus_service_channel_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusServiceChannelProxy, g_object_unref)
#endif

void meta_dbus_service_channel_proxy_new(GDBusConnection* connection,
                                         GDBusProxyFlags flags,
                                         const gchar* name,
                                         const gchar* object_path,
                                         GCancellable* cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
MetaDBusServiceChannel* meta_dbus_service_channel_proxy_new_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusServiceChannel* meta_dbus_service_channel_proxy_new_sync(
    GDBusConnection* connection,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_service_channel_proxy_new_for_bus(GBusType bus_type,
                                                 GDBusProxyFlags flags,
                                                 const gchar* name,
                                                 const gchar* object_path,
                                                 GCancellable* cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
MetaDBusServiceChannel* meta_dbus_service_channel_proxy_new_for_bus_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusServiceChannel* meta_dbus_service_channel_proxy_new_for_bus_sync(
    GBusType bus_type,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

/* ---- */

#define META_DBUS_TYPE_SERVICE_CHANNEL_SKELETON \
  (meta_dbus_service_channel_skeleton_get_type())
#define META_DBUS_SERVICE_CHANNEL_SKELETON(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_SERVICE_CHANNEL_SKELETON, \
                              MetaDBusServiceChannelSkeleton))
#define META_DBUS_SERVICE_CHANNEL_SKELETON_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_SERVICE_CHANNEL_SKELETON, \
                           MetaDBusServiceChannelSkeletonClass))
#define META_DBUS_SERVICE_CHANNEL_SKELETON_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_SERVICE_CHANNEL_SKELETON, \
                             MetaDBusServiceChannelSkeletonClass))
#define META_DBUS_IS_SERVICE_CHANNEL_SKELETON(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_SERVICE_CHANNEL_SKELETON))
#define META_DBUS_IS_SERVICE_CHANNEL_SKELETON_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_SERVICE_CHANNEL_SKELETON))

typedef struct _MetaDBusServiceChannelSkeleton MetaDBusServiceChannelSkeleton;
typedef struct _MetaDBusServiceChannelSkeletonClass
    MetaDBusServiceChannelSkeletonClass;
typedef struct _MetaDBusServiceChannelSkeletonPrivate
    MetaDBusServiceChannelSkeletonPrivate;

struct _MetaDBusServiceChannelSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MetaDBusServiceChannelSkeletonPrivate* priv;
};

struct _MetaDBusServiceChannelSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType meta_dbus_service_channel_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusServiceChannelSkeleton, g_object_unref)
#endif

MetaDBusServiceChannel* meta_dbus_service_channel_skeleton_new(void);

G_END_DECLS

#endif /* __META_DBUS_SERVICE_CHANNEL_H__ */
