# Reusable Cobalt CI workflow.

name: main

on:
  workflow_call:
    inputs:
      platform:
        description: 'Cobalt platform.'
        required: true
        type: string
      nightly:
        description: 'Nightly workflow.'
        required: true
        type: string
        default: 'false'
    secrets:
      datadog_api_key:
        required: false

concurrency:
  # Cancel existing jobs on the same workflow, platform, and branch (or sha if merged).
  group: ${{ github.workflow }}-${{ inputs.platform }} @ ${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  # Retrieves configuration from json file.
  initialize:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PR_REPO_URL: ${{ github.event.pull_request.base.repo.url }}
      GITHUB_EVENT_NUMBER: ${{ github.event.number }}
    if: |
      github.event.action != 'labeled' || github.event.pull_request.merged == false &&
      (github.event.label.name == 'runtest' || github.event.label.name == 'on_device')
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Remove runtest if exists
        if: github.event_name == 'pull_request'
        continue-on-error: true  # Ignore this step if we cannot remove the label.
        run: |
          set +e
          curl \
            -X DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            ${GITHUB_PR_REPO_URL}/issues/${GITHUB_EVENT_NUMBER}/labels/runtest
        shell: bash
      - id: set-platforms
        shell: bash
        run: |
          platforms=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.platforms')
          echo "platforms=${platforms}" >> $GITHUB_OUTPUT
      - id: set-targets
        shell: bash
        run: |
          targets=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -cr '.targets  | join(" ")')
          echo "targets=${targets}" >> $GITHUB_OUTPUT
      - id: set-includes
        shell: bash
        run: |
          includes=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.includes')
          echo "includes=${includes}" >> $GITHUB_OUTPUT
      - id: set-test-on-host
        shell: bash
        run: |
          test_on_host=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.test_on_host')
          echo "test_on_host=${test_on_host}" >> $GITHUB_OUTPUT
      - id: set-test-on-device
        shell: bash
        run: |
          test_on_device=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.test_on_device')
          echo "test_on_device=${test_on_device}" >> $GITHUB_OUTPUT
      - id: set-test-dimensions
        shell: bash
        run: |
          test_dimensions=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.test_dimensions')
          echo "test_dimensions=${test_dimensions}" >> $GITHUB_OUTPUT
      - id: set-docker-service
        shell: bash
        run: |
          docker_service=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -r '.docker_service')
          echo "docker_service=${docker_service}" >> $GITHUB_OUTPUT
      - id: set-gtest-shards
        shell: bash
        run: |
          # Retrieve number of shards from config. If not specified, default to 1 shard with `echo 1`.
          num_gtest_shards=$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.num_gtest_shards' || echo 1)
          echo "num_gtest_shards=${num_gtest_shards}" >> $GITHUB_OUTPUT

          # Create a zero-indexed list of shards for use by matrix, e.g. [0,1,2,3,4,5].
          gtest_shards="[$(seq -s, 0 1 $((${num_gtest_shards} - 1)))]"
          echo "gtest_shards=${gtest_shards}" >> $GITHUB_OUTPUT
    outputs:
      platforms: ${{ steps.set-platforms.outputs.platforms }}
      targets: ${{ steps.set-targets.outputs.targets }}
      includes: ${{ steps.set-includes.outputs.includes }}
      docker_service: ${{ steps.set-docker-service.outputs.docker_service }}
      num_gtest_shards: ${{ steps.set-gtest-shards.outputs.num_gtest_shards }}
      gtest_shards: ${{ steps.set-gtest-shards.outputs.gtest_shards }}
      test_on_host: ${{ steps.set-test-on-host.outputs.test_on_host }}
      test_on_device: ${{ steps.set-test-on-device.outputs.test_on_device }}
      test_dimensions: ${{ steps.set-test-dimensions.outputs.test_dimensions }}

  # Builds, tags, and pushes Cobalt docker build images to ghr.
  docker-build-image:
    needs: [initialize]
    runs-on: [self-hosted, chrobalt-linux-runner]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    # Handle GitHub registry used for everything other than pull requests off forked repos.
    - name: Login to GitHub Docker Registry
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build docker image
      id: build-docker-image
      uses: ./.github/actions/docker
      with:
        docker_service: ${{ needs.initialize.outputs.docker_service }}
    - name: Set Docker Tag Output
      id: set-docker-tag-output
      shell: bash
      run: |
        set -u
        echo $DOCKER_TAG
        echo "docker_tag=$DOCKER_TAG" | head -n 1  >> $GITHUB_OUTPUT
    outputs:
      docker_tag: ${{ steps.set-docker-tag-output.outputs.docker_tag }}

  # Builds, tags, and pushes Cobalt unit test image to ghr.
  docker-unittest-image:
    if: needs.initialize.outputs.test_on_host == 'true'
    needs: [initialize]
    runs-on: [self-hosted, chrobalt-linux-runner]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GitHub Docker Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build docker image
        id: build-docker-image
        uses: ./.github/actions/docker
        with:
          docker_service: unittest
      - name: Set Docker Tag Output
        id: set-docker-unittest-tag-output
        shell: bash
        run: |
          set -u
          echo $DOCKER_TAG
          echo "docker_unittest_tag=$DOCKER_TAG" | head -n 1 >> $GITHUB_OUTPUT
    outputs:
      docker_unittest_tag: ${{ steps.set-docker-unittest-tag-output.outputs.docker_unittest_tag }}

  build:
    needs: [initialize, docker-build-image]
    permissions: {}
    runs-on: [self-hosted, chrobalt-linux-runner]
    name: ${{ matrix.name }}_${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
        config: [devel, qa, gold]
    container: ${{ needs.docker-build-image.outputs.docker_tag }}
    env:
      TEST_ARTIFACTS_KEY: ${{ matrix.platform }}_${{ matrix.name }}_test_artifacts
      DEPOT_TOOLS_UPDATE: 0
      DEPOT_TOOLS_REPORT_BUILD: 0
      DEPOT_TOOLS_COLLECT_METRICS: 0
      DEPOT_TOOLS_METRICS: 0
      IS_CI: 1
      # We want temp folder to be on tmpfs which makes workloads faster.
      # However, dind container ends up having / folder mounted on overlay
      # filesystem, whereas /__w which contains Cobalt source code is on tmpfs.
      TMPDIR: /__w/_temp
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # TODO(bug?): android debug builds are broken.
        if: ${{ ! (contains(matrix.platform, 'android') && matrix.config == 'debug') }}
        with:
          path: src
          # Use fetch depth of 0 to get full history for a valid build id.
          fetch-depth: 0
      - name: Build Cobalt
        id: build
        uses: ./src/.github/actions/build
        # TODO(bug?): android debug builds are broken.
        if: ${{ ! (contains(matrix.platform, 'android') && matrix.config == 'debug') }}
        with:
          targets: ${{ needs.initialize.outputs.targets }}
          test_artifacts_key: ${{ env.TEST_ARTIFACTS_KEY }}
          upload_on_host_test_artifacts: ${{ matrix.config == 'devel' && needs.initialize.outputs.test_on_host }}
          upload_on_device_test_artifacts: ${{ matrix.config == 'devel' && needs.initialize.outputs.test_on_device }}
    outputs:
      test_targets: ${{ steps.build.outputs.test_targets }}

  on-device-test:
    needs: [initialize, build]
    # Run ODT when on_device label is applied on PR.
    # Also, run ODT on push and schedule if not explicitly disabled via repo vars.
    if: needs.initialize.outputs.test_on_device == 'true' &&
        (
          (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'on_device')) ||
          ((inputs.nightly == 'true' || github.event_name == 'schedule') && vars.RUN_ODT_TESTS_ON_NIGHTLY != 'False') ||
          (github.event_name == 'push' && vars.RUN_ODT_TESTS_ON_POSTSUBMIT != 'False')
        )
    runs-on: [self-hosted, odt-runner]
    name: ${{ matrix.name }}_on_device_tests
    permissions: {}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
        config: [devel]
    env:
      TEST_RESULTS_KEY: ${{ matrix.platform }}_${{ matrix.name }}_test_results
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        timeout-minutes: 30
        with:
          fetch-depth: 1
          persist-credentials: false
      - name: Run On-Device Tests
        id: on-device-tests
        uses: ./.github/actions/on_device_tests
        with:
          test_targets: ${{ needs.build.outputs.test_targets }}
          test_results_key: ${{ env.TEST_RESULTS_KEY }}
          gcs_results_path: gs://cobalt-unittest-storage/results/${{ matrix.name }}/${{ github.run_id }}
          test_dimensions: '${{ needs.initialize.outputs.test_dimensions }}'

  on-host-test:
    needs: [initialize, docker-unittest-image, build]
    if: always() && needs.initialize.outputs.test_on_host == 'true'
    permissions: {}
    # TODO(b/372303096): Should have dedicated runner?
    runs-on: [self-hosted, chrobalt-linux-runner]
    name: ${{ matrix.name }}_on_host_tests_${{ matrix.shard }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
        config: [devel]
        shard: ${{ fromJson(needs.initialize.outputs.gtest_shards) }}
    container: ${{ needs.docker-unittest-image.outputs.docker_unittest_tag }}
    env:
      TMPDIR: /__w/_temp
      TEST_ARTIFACTS_KEY: ${{ matrix.platform }}_${{ matrix.name }}_test_artifacts
      TEST_RESULTS_KEY: ${{ matrix.platform }}_${{ matrix.name }}_test_results-${{ matrix.shard }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src
      - name: Run On-Host Tests
        id: on-host-tests
        uses: ./src/.github/actions/on_host_tests
        with:
          test_artifacts_key: ${{ env.TEST_ARTIFACTS_KEY }}
          test_results_key: ${{ env.TEST_RESULTS_KEY }}
          num_gtest_shards: ${{ needs.initialize.outputs.num_gtest_shards }}

  test-results:
    needs: [initialize, build, on-device-test, on-host-test]
    if: always() &&
        (
          needs.on-device-test.result != 'skipped' ||
          needs.on-host-test.result != 'skipped'
        )
    permissions: {}
    runs-on: ubuntu-latest
    name: ${{ matrix.test_target }}
    env:
      TEST_RESULTS_KEY: ${{ matrix.platform }}_${{ matrix.name }}_test_results
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
        config: [devel]
        test_target: ${{ fromJson(needs.build.outputs.test_targets) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: src
      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.TEST_RESULTS_KEY }}*
          path: results/
      - name: Extract Test Target Name
        id: extract-target-name
        env:
          test_target_with_path: ${{ matrix.test_target }}
        run: echo "test_target=${test_target_with_path#*:}" >> $GITHUB_OUTPUT
      - name: Process Test Results
        id: process-results
        uses: ./src/.github/actions/process_test_results
        with:
          target_name: ${{ matrix.test_target }}
          results_path: results/**/${{ steps.extract-target-name.outputs.test_target }}*.xml
          datadog_api_key: ${{ secrets.datadog_api_key }}
      - name: Print ${{ matrix.test_target }} Logs
        if: always()
        run: |
          set -x
          # Enable globstar shell option for globstar paths e.g. /**/*.xml and
          # nullopt to returns empty string if the glob matches no files.
          shopt -s globstar nullglob

          log_files=(results/**/${{ steps.extract-target-name.outputs.test_target }}*log.txt)
          if [ ${#log_files[@]} -eq 0 ]; then
            echo "::error::No test logs found. Check device lab logs to see what went wrong."
            exit 1
          fi

          for log_file in ${log_files[@]}; do
            cat ${log_file}
          done

          if [ "${{ steps.process-results.outcome }}" != "success" ]; then
            echo "Tests failed"
            exit 1
          fi
        shell: bash

  validate-test-result:
    needs: [initialize, test-results]
    if: always() && needs.test-results.result != 'skipped'
    permissions: {}
    runs-on: ubuntu-latest
    name: ${{ matrix.name }}_tests_passing
    strategy:
      matrix:
        platform: ${{ fromJson(needs.initialize.outputs.platforms) }}
        include: ${{ fromJson(needs.initialize.outputs.includes) }}
        config: [devel]
    steps:
      - name: Fail
        if: needs.test-results.result == 'failure'
        run: |
            # TODO: Print a summary of failed tests here.
            echo "Test jobs failed. See separate job log for details."
            exit 1
        shell: bash
