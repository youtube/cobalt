name: mac

on:
  pull_request:
    branches:
      - main
      - feature/*
  push:
    branches:
      - main
      - feature/*

jobs:
  test_mac:
    permissions:
      actions: write
    runs-on: macos-latest
    steps:
      - name: Dump worker info
        run: |
          uname -a
          g++ --version
          echo "PATH=${PATH}"
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}"
        shell: bash
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "${JOB_CONTEXT}"
        shell: bash
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "${STEPS_CONTEXT}"
        shell: bash
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "${RUNNER_CONTEXT}"
        shell: bash
      - name: Default environment variables
        run: |
          echo "The job_id is: ${GITHUB_JOB}"
          echo "The id of this action is: ${GITHUB_ACTION}"
          echo "The run id is: ${GITHUB_RUN_ID}"
          echo "The GitHub Actor's username is: ${GITHUB_ACTOR}"
          echo "GitHub SHA: ${GITHUB_SHA}"
        shell: bash
      - name: Rate limit info
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /rate_limit
        shell: bash
      - name: Debug SCCACHE_GCS_KEY - Check if secret exists
        run: |
          echo "Testing secret availability..."
          echo "Repository: ${{ github.repository }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo ""
          echo "=== SECRET LENGTHS ==="
          echo "ANDROID_KEYSTORE_B64 length: $(echo '${{ secrets.ANDROID_KEYSTORE_B64 }}' | wc -c)"
          echo "CHERRY_PICK_TOKEN length: $(echo '${{ secrets.CHERRY_PICK_TOKEN }}' | wc -c)"
          echo "CODECOV_TOKEN length: $(echo '${{ secrets.CODECOV_TOKEN }}' | wc -c)"
          echo "DD_API_KEY length: $(echo '${{ secrets.DD_API_KEY }}' | wc -c)"
          echo "GEMINI_ACTIONS_API_KEY length: $(echo '${{ secrets.GEMINI_ACTIONS_API_KEY }}' | wc -c)"
          echo "SCCACHE_GCS_KEY length: $(echo '${{ secrets.SCCACHE_GCS_KEY }}' | wc -c)"
          echo "SCORECARD_TOKEN length: $(echo '${{ secrets.SCORECARD_TOKEN }}' | wc -c)"
          echo "GITHUB_TOKEN length: $(echo '${{ secrets.GITHUB_TOKEN }}' | wc -c)"
          echo ""
          echo "Available secrets context keys:"
          echo '${{ toJson(secrets) }}'

          if [ -z "${{ secrets.SCCACHE_GCS_KEY }}" ]; then
            echo "ERROR: SCCACHE_GCS_KEY secret is empty or not set"
            exit 1
          else
            echo "SUCCESS: SCCACHE_GCS_KEY secret exists"
          fi
        shell: bash
      - name: Debug SCCACHE_GCS_KEY - Check if multiline
        run: |
          echo "Number of lines in secret: $(echo '${{ secrets.SCCACHE_GCS_KEY }}' | wc -l)"
          echo "First 100 chars of secret:"
          echo '${{ secrets.SCCACHE_GCS_KEY }}' | head -c 100
          echo ""
          echo "Last 100 chars of secret:"
          echo '${{ secrets.SCCACHE_GCS_KEY }}' | tail -c 100
        shell: bash
      - name: Debug SCCACHE_GCS_KEY - Test base64 decode
        run: |
          echo "Attempting base64 decode..."
          echo '${{ secrets.SCCACHE_GCS_KEY }}' | tr -d '\n\r ' | base64 --decode > test_gcloud.json
          if [ $? -eq 0 ]; then
            echo "SUCCESS: Base64 decode successful"
            echo "Decoded file size: $(wc -c < test_gcloud.json) bytes"
          else
            echo "ERROR: Base64 decode failed"
            exit 1
          fi
        shell: bash
      - name: Debug SCCACHE_GCS_KEY - Verify JSON content
        run: |
          echo "Verifying JSON content..."
          client_email=$(jq -r '.client_email' test_gcloud.json)
          project_id=$(jq -r '.project_id' test_gcloud.json)
          key_type=$(jq -r '.type' test_gcloud.json)

          echo "Key type: ${key_type}"
          echo "Project ID: ${project_id}"
          echo "Client email: ${client_email}"

          if [[ "${key_type}" == "service_account" && "${project_id}" == "yt-cobalt" ]]; then
            echo "SUCCESS: JSON content is valid service account key"
          else
            echo "ERROR: JSON content validation failed"
            exit 1
          fi

          # Clean up
          rm -f test_gcloud.json
        shell: bash
  chromium_mac-arm64:
    uses: ./.github/workflows/mac_build.yaml
    permissions:
      packages: write
      pull-requests: write
    with:
      platform: chromium_mac-arm64
      nightly: ${{ github.event.inputs.nightly }}
    secrets:
      datadog_api_key: ${{ secrets.DD_API_KEY }}
      SCCACHE_GCS_KEY: ${{ secrets.SCCACHE_GCS_KEY }}