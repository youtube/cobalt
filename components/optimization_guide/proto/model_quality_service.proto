// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package optimization_guide.proto;

import "components/optimization_guide/proto/features/bling_prototyping.proto";
import "components/optimization_guide/proto/features/compose.proto";
import "components/optimization_guide/proto/features/default.proto";
import "components/optimization_guide/proto/features/enhanced_calendar.proto";
import "components/optimization_guide/proto/features/forms_classifications.proto";
import "components/optimization_guide/proto/features/history_answer.proto";
import "components/optimization_guide/proto/features/history_query.proto";
import "components/optimization_guide/proto/features/history_query_intent.proto";
import "components/optimization_guide/proto/features/model_prototyping.proto";
import "components/optimization_guide/proto/features/notification_content_detection.proto";
import "components/optimization_guide/proto/features/password_change_submission.proto";
import "components/optimization_guide/proto/features/permissions_ai.proto";
import "components/optimization_guide/proto/features/product_specifications.proto";
import "components/optimization_guide/proto/features/proofreader_api.proto";
import "components/optimization_guide/proto/features/scam_detection.proto";
import "components/optimization_guide/proto/features/tab_organization.proto";
import "components/optimization_guide/proto/features/wallpaper_search.proto";
import "components/optimization_guide/proto/features/writing_assistance_api.proto";
import "components/optimization_guide/proto/features/zero_state_suggestions.proto";
import "components/optimization_guide/proto/model_quality_metadata.proto";

option optimize_for = LITE_RUNTIME;
option java_package = "org.chromium.components.optimization_guide.proto";
option java_outer_classname = "ModelQualityServiceProto";

// A request to send AI data logs to the model quality server. Data logging for
// an AI feature with metadata specific to the logging.
message LogAiDataRequest {
  reserved 10, 11;

  // Information about a feature's AiLoggingData, such as training opt-outs.
  LoggingMetadata logging_metadata = 1;

  // Model execution data corresponding to the AiLoggingData of a feature.
  ModelExecutionInfo model_execution_info = 2;

  oneof feature {
    // Add feature specific LoggingData here.
    ComposeLoggingData compose = 3;

    TabOrganizationLoggingData tab_organization = 4;

    WallpaperSearchLoggingData wallpaper_search = 5;

    HistoryQueryLoggingData history_query = 7;

    HistoryAnswerLoggingData history_answer = 8;

    HistoryQueryIntentLoggingData history_query_intent = 13;

    ProductSpecificationsLoggingData product_specifications = 9;

    ModelPrototypingLoggingData model_prototyping = 12;

    BlingPrototypingLoggingData bling_prototyping = 14;

    PasswordChangeSubmissionLoggingData password_change_submission = 16;

    ScamDetectionLoggingData scam_detection = 17;

    PermissionsAILoggingData permissions_ai = 18;

    FormsClassificationsLoggingData forms_classifications = 19;

    NotificationContentDetectionLoggingData notification_content_detection = 20;

    EnhancedCalendarLoggingData enhanced_calendar = 21;

    ZeroStateSuggestionsLoggingData zero_state_suggestions = 22;

    WritingAssistanceApiLoggingData writing_assistance_api = 23;

    ProofreaderApiLoggingData proofreader_api = 24;

    DefaultLoggingData default = 1000;
  }
}

// This is the response from the server.
// TODO(b/301302386): Send an error message or a status code from the server.
message LogAiDataResponse {}
