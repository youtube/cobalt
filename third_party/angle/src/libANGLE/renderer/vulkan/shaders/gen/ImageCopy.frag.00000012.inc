// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000012.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000012[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x57,0x6d,0x68,0x95,0x65,
    0x18,0x7e,0xef,0x73,0x76,0xb6,0x39,0xb7,0xa9,0xcc,0xcd,0x1c,0x26,0x36,0xcd,0x8c,
    0x8d,0xb1,0x72,0x53,0x97,0x3a,0x5d,0xd2,0xa6,0xa4,0xae,0x6d,0x88,0x95,0xc2,0xb4,
    0x24,0x34,0x72,0xc8,0x14,0x29,0xd3,0x15,0xf6,0x61,0x4a,0xa9,0xbf,0x2c,0x51,0x34,
    0xfd,0x25,0x0e,0xa5,0x72,0x98,0xb4,0x26,0x84,0x41,0x20,0x22,0xe6,0xd4,0x44,0xe6,
    0xa6,0x69,0x1f,0x9a,0x1f,0xbf,0xa2,0x2f,0xc2,0x9e,0xeb,0xbd,0xaf,0x9b,0xdd,0x9c,
    0x92,0x84,0xc7,0xf7,0x3c,0xd7,0xfd,0x75,0xdd,0xd7,0x73,0x3f,0xef,0x39,0x4b,0x26,
    0xc6,0x66,0x45,0x91,0x44,0x39,0x51,0x76,0x74,0x4d,0xa2,0xf8,0xdf,0xb0,0x28,0x11,
    0xe1,0xe3,0xe0,0x28,0x33,0x7e,0xd6,0xcf,0x6d,0x9e,0x5b,0xbe,0x7a,0xcd,0xb2,0xf2,
    0xca,0xaa,0x0a,0xd8,0xf3,0xa3,0x64,0xec,0x07,0xdb,0x90,0x28,0x2b,0xca,0x08,0x4f,
    0xac,0x95,0x4b,0x57,0xb4,0x02,0x3f,0x17,0xd6,0xdd,0xb0,0x86,0x06,0x3f,0xe0,0xa1,
    0x40,0x34,0x3b,0x4a,0x45,0x8f,0x69,0xfa,0x68,0x2c,0x9f,0x86,0x09,0xb1,0x6c,0x87,
    0x25,0x88,0x0d,0x75,0x58,0x92,0xd8,0x70,0x87,0x65,0x10,0x7b,0xc0,0x61,0x29,0x62,
    0xa3,0x1c,0x96,0x49,0x6c,0x8c,0xc3,0xb2,0x88,0x8d,0x73,0x58,0x36,0xb1,0x09,0x0e,
    0x1b,0x44,0xac,0xcc,0x61,0x39,0xc4,0x2a,0x1c,0x36,0x98,0x58,0xa5,0xc3,0x72,0x89,
    0x4d,0x71,0x58,0x1e,0xb1,0x69,0x0e,0xcb,0x27,0x36,0x13,0x7a,0x87,0x4e,0x4d,0x83,
    0xfa,0xd0,0xe1,0x39,0xe6,0x1e,0xc2,0x7d,0x5f,0x78,0x96,0x50,0x43,0xdb,0x3f,0xe4,
    0xf6,0xd0,0x7e,0x34,0xf7,0x05,0x21,0x4b,0x22,0xb6,0x27,0x63,0xfd,0xf0,0xb9,0x28,
    0x7c,0xca,0xa4,0x16,0x85,0xc1,0x3f,0x97,0x9f,0x71,0x0e,0x23,0xc2,0x3e,0x8f,0xbc,
    0x13,0xdc,0x17,0x50,0xbf,0x0c,0xfa,0x17,0xd2,0x3f,0xa2,0xbd,0x28,0xc6,0xd5,0x5e,
    0x1a,0xfe,0xcf,0xa4,0xf6,0xa3,0xca,0xe7,0x4d,0x1d,0x1e,0xb2,0x3c,0xe8,0x70,0xf0,
    0x6e,0x3a,0x36,0xbf,0xd6,0xf6,0x8f,0x84,0xb5,0x60,0xc1,0xf9,0x1a,0xdb,0x3f,0x1a,
    0xd6,0xf4,0x9c,0x4d,0x33,0x6c,0x5f,0x1a,0xd6,0xe1,0xfa,0xa5,0xd3,0x47,0x87,0xa9,
    0x34,0xed,0x8c,0x9f,0xad,0xc2,0xff,0x59,0xe6,0x33,0x26,0xe4,0x7c,0x9c,0xe7,0x89,
    0x5c,0x53,0xb9,0x9f,0x48,0xac,0x94,0x5a,0x54,0x52,0x0b,0xf8,0x57,0xd1,0x96,0xe7,
    0xec,0xd5,0x9c,0x31,0xd8,0x9f,0xa0,0xbd,0x90,0x76,0x3c,0xa7,0x53,0x1b,0xf3,0xaf,
    0xa3,0x7e,0x66,0x9f,0xcb,0xfc,0x66,0x6f,0xe4,0xf9,0xdb,0x7e,0x31,0xcf,0xdb,0xf6,
    0x6d,0x9c,0x55,0x68,0xfd,0x3a,0x73,0x25,0x9d,0x7d,0x23,0xe7,0xd6,0x34,0xdb,0xe2,
    0xea,0x63,0xff,0x61,0xbc,0x7b,0x63,0x96,0xf9,0xef,0x49,0xeb,0xf7,0x20,0xe7,0xd9,
    0xf6,0x47,0xd9,0x2f,0xfa,0xfb,0x9c,0xbe,0xb9,0xce,0xde,0xc5,0xd9,0xb0,0x7d,0x77,
    0x5a,0xbf,0x27,0x38,0x0b,0x88,0xef,0x61,0xaf,0x05,0xd4,0xbb,0x87,0xef,0x07,0x9b,
    0xb5,0xf3,0xec,0x07,0xf9,0x46,0x86,0x4a,0xbd,0xdc,0xf3,0x55,0xf4,0xaf,0x27,0x72,
    0x5e,0xe6,0xe7,0x5e,0xe6,0xc4,0xbe,0x2f,0x8d,0xc3,0x75,0x6a,0x84,0x1a,0x3f,0x91,
    0x7f,0x92,0xf1,0x77,0xf8,0xb9,0x88,0xf1,0x77,0xf8,0xbe,0x02,0x36,0x29,0x9c,0x6c,
    0x82,0xfc,0x23,0x62,0xbf,0x07,0x24,0x15,0x9f,0xab,0xde,0x85,0x0b,0xec,0xa1,0x21,
    0x9c,0x0a,0xf8,0x7f,0x47,0xec,0x82,0xe3,0xda,0xca,0x7b,0x74,0x91,0xf6,0xda,0x90,
    0x01,0xb3,0x74,0x8f,0xf3,0x56,0xc9,0x7c,0x79,0x0c,0xb8,0x17,0x9f,0x63,0x2a,0xde,
    0x8b,0x68,0x1c,0x70,0xc4,0x61,0xc6,0x12,0xa2,0x71,0xd5,0x8c,0xc3,0x1c,0x25,0x45,
    0xf1,0x8e,0xe0,0x83,0x3b,0x96,0x21,0x8a,0x61,0xfe,0x7e,0x0b,0xcc,0x73,0x28,0xda,
    0x9f,0xc1,0x1f,0xb6,0x54,0x58,0xc0,0xe2,0x7e,0x04,0x73,0x97,0x8a,0x75,0xc9,0x12,
    0xad,0x89,0x7f,0xed,0xd4,0x2f,0x5b,0x14,0x6f,0x0a,0xa7,0x01,0x4e,0xc7,0x44,0x31,
    0xf3,0xfb,0x23,0xe4,0xb0,0x5c,0x78,0xfe,0x1a,0xb4,0x80,0xdf,0xb7,0xf4,0x49,0x31,
    0x26,0xe5,0x7a,0x18,0xcc,0x1e,0xea,0x5c,0x0f,0xb9,0xa2,0xb8,0xf5,0x90,0x27,0x8a,
    0x59,0x0f,0x05,0xae,0x07,0xd8,0xf2,0xc3,0x2a,0x60,0xdd,0x7c,0xd7,0xc3,0x50,0x61,
    0x6d,0xd7,0xc3,0x30,0x51,0xdc,0x7a,0xe8,0x12,0xc5,0xcc,0x0f,0x3d,0x58,0xae,0x02,
    0xd7,0xc3,0x59,0xfa,0xa0,0xaf,0x2e,0xd6,0xb4,0x1e,0x86,0xb3,0x87,0x46,0xd7,0x43,
    0xa1,0x28,0x6e,0x3d,0x14,0x89,0x62,0xd6,0x43,0xb1,0xeb,0x01,0xb6,0x11,0x61,0x15,
    0xb3,0x2e,0x3e,0x37,0xb0,0xee,0x48,0xd1,0xda,0x67,0x65,0x60,0xde,0xc1,0xd1,0x7c,
    0x8b,0x1d,0xc7,0x1e,0xfa,0x81,0xf7,0x48,0xe6,0x04,0x1f,0xdc,0x89,0x7e,0xde,0x07,
    0x9b,0xb9,0x2b,0x9c,0xb9,0x6e,0x37,0x73,0x57,0x89,0xbf,0xc9,0x99,0xbb,0x46,0xac,
    0x87,0xbd,0xe2,0xde,0xff,0xc0,0xb8,0xeb,0x8c,0x83,0xa6,0x3f,0x12,0x37,0xdd,0x7f,
    0x66,0x6c,0xe4,0xb0,0x1b,0xc4,0xd0,0xc3,0x33,0x41,0x7b,0xdc,0xbf,0x9b,0xf4,0xbd,
    0xc1,0x1c,0x56,0xe3,0x17,0xd6,0xe8,0x72,0x35,0x6e,0x11,0x6f,0x09,0xbd,0xe2,0xbe,
    0xdd,0x66,0x4f,0x37,0xf9,0x9e,0xb8,0x15,0x0d,0x9c,0xc7,0x58,0x9e,0xc7,0x62,0x77,
    0x1e,0xe3,0x44,0x71,0x3b,0x8f,0x87,0x45,0x31,0x3b,0x8f,0x89,0xee,0x3c,0x60,0x1b,
    0x8f,0x1c,0xd4,0x78,0x3c,0x67,0x0a,0xef,0xa0,0x09,0xa2,0xb5,0x23,0xc6,0x6d,0x67,
    0xdc,0x5f,0xe1,0x33,0x72,0xbd,0xcd,0x18,0x3c,0xbf,0x64,0xad,0x77,0x45,0xe3,0x46,
    0x31,0x66,0x9b,0xab,0x05,0xdb,0xa6,0xb0,0xb6,0x30,0x0e,0xcf,0xdc,0xd0,0x23,0x6a,
    0xbd,0xcf,0x33,0x2f,0x66,0x5d,0x7c,0x2f,0xbe,0x43,0x1e,0x1f,0x88,0xda,0xf1,0xdd,
    0xf8,0x16,0xb1,0xad,0xa2,0x78,0x29,0x67,0x64,0x3b,0x73,0x22,0xbf,0xc5,0x6d,0x26,
    0x97,0x92,0x34,0x9f,0x6d,0xf1,0xfb,0x46,0xe2,0xcf,0xdb,0x39,0x53,0xf0,0x3f,0x27,
    0x9a,0x17,0xbc,0x36,0x93,0x2b,0xee,0x0e,0xce,0xe0,0xb8,0xa8,0xfd,0xb6,0x3b,0x6b,
    0xc4,0x94,0x11,0x13,0xf6,0xbb,0x3f,0x4d,0xa3,0x1d,0xac,0xb9,0xc3,0x69,0xf4,0x91,
    0x68,0x9c,0x69,0xb4,0xcf,0x69,0x04,0xdb,0xce,0xb0,0x76,0x33,0x6e,0xb7,0xd3,0x68,
    0x8f,0xd3,0xa8,0x2c,0x4d,0xa3,0xbd,0xa2,0x76,0xaf,0xd1,0xc7,0xa2,0xb8,0x69,0xb4,
    0x9f,0x39,0x77,0x3a,0x8d,0x76,0x91,0x4b,0x49,0x9a,0xcf,0x3e,0xa7,0xd1,0x7e,0xa7,
    0xd1,0x05,0xd1,0xbc,0xe0,0xb5,0x8b,0x5c,0x4d,0xa3,0xaf,0x44,0xed,0xc7,0xc9,0xd3,
    0x34,0xaa,0xa0,0x46,0x09,0xf6,0xdb,0x99,0xa6,0xd1,0x01,0xd6,0x3c,0xe0,0x34,0x3a,
    0x28,0x1a,0x67,0x1a,0x1d,0x71,0x1a,0xc1,0xd6,0x11,0xd6,0x61,0xc6,0x1d,0x76,0x1a,
    0x7d,0xe2,0x34,0xaa,0x48,0xd3,0xe8,0x53,0x51,0xbb,0xd7,0xe8,0x33,0x51,0xdc,0x34,
    0xea,0x64,0xce,0x0e,0xa7,0xd1,0x21,0x72,0x29,0x49,0xf3,0x39,0xe2,0x34,0xea,0x74,
    0x1a,0x5d,0x14,0xcd,0x0b,0x5e,0x87,0xc8,0xd5,0x34,0xfa,0x5a,0xd4,0x0e,0xad,0x12,
    0xcc,0x67,0x77,0x6f,0x22,0x73,0xc0,0xef,0x12,0x35,0xc3,0x3b,0x0f,0x31,0x9d,0xee,
    0x1d,0x5c,0xc9,0x3b,0xdf,0xe6,0xee,0x7c,0x95,0x28,0x6e,0x77,0x7e,0x92,0x28,0x66,
    0x77,0xbe,0xd9,0xe9,0x07,0xdb,0xe4,0xb0,0x66,0xb0,0xee,0x0c,0x97,0x7b,0x26,0x73,
    0x6f,0x74,0xb9,0x6b,0x45,0x71,0xcb,0xfd,0xa4,0x28,0x66,0xb9,0xeb,0x5d,0x6e,0xd8,
    0x66,0x85,0x55,0xcf,0xdc,0xb3,0xdc,0xfb,0xe4,0x29,0xd1,0xbe,0xf0,0x9b,0xe2,0x0b,
    0xe6,0xaa,0x13,0xc5,0xb7,0x50,0x0b,0x8b,0xab,0xa7,0x16,0xf0,0x99,0x2d,0x5a,0x13,
    0x3c,0xeb,0x98,0x1f,0x75,0x9b,0x5c,0x5d,0xf8,0xcc,0x81,0xce,0x8c,0x9f,0xe3,0xea,
    0x3e,0xed,0xea,0x36,0x84,0x5f,0x8a,0xf8,0x0d,0x39,0x8f,0xd8,0x25,0x19,0xf8,0xcd,
    0x92,0xe0,0xfb,0x1a,0xf6,0xf9,0xa2,0x71,0xb6,0xde,0x0b,0xb9,0x80,0x37,0x88,0xc6,
    0xce,0x8f,0xbf,0xb7,0x06,0xc5,0x67,0xd5,0xc8,0x3c,0xb0,0x65,0xf0,0xb7,0xb1,0xfd,
    0x46,0x45,0x4f,0xc6,0xa9,0xc9,0x9d,0xef,0x65,0xc6,0xa0,0xcf,0x46,0x72,0x87,0x6f,
    0x33,0x7d,0x27,0x3b,0xfe,0xd5,0xff,0xc1,0x7f,0xea,0x7d,0xf8,0x6f,0x25,0xcf,0x69,
    0xa2,0x3e,0xd5,0x8e,0x67,0x0d,0xfd,0xa7,0xdd,0x87,0xa7,0xd5,0x6e,0x76,0x3c,0x7b,
    0x45,0xb9,0x82,0x7b,0x0d,0xe7,0x06,0x35,0x60,0x5b,0x20,0x6a,0xc7,0xef,0xeb,0x95,
    0xfc,0x3b,0x68,0xa1,0x28,0x6e,0xf3,0xf4,0x2c,0xe7,0x69,0x8f,0x9b,0xa7,0xe7,0x44,
    0x71,0x9b,0xa7,0xe7,0x45,0x31,0x9b,0xa7,0x76,0x77,0xae,0xb0,0x2d,0x0a,0x6b,0x09,
    0xb9,0x2d,0x71,0xb9,0x97,0x32,0xf7,0x41,0x97,0xfb,0x05,0x51,0xdc,0x72,0xbf,0x28,
    0x8a,0x59,0xee,0x0d,0x2e,0x37,0x6c,0xcb,0xc2,0x5a,0xce,0xdc,0xcb,0xdd,0x77,0xff,
    0x0a,0xe6,0x3e,0xea,0xbe,0x97,0x5f,0x16,0xc5,0xbf,0xe1,0xf7,0xfc,0x2b,0xa2,0x18,
    0xbe,0xbb,0xad,0xde,0x4a,0x51,0xbc,0x9b,0xf5,0x56,0xb9,0x7a,0xb0,0xb5,0x86,0xb5,
    0x8a,0xf5,0x5a,0xf9,0x5e,0x80,0x6e,0xa7,0xc8,0x71,0xa1,0xfb,0x6d,0x66,0x7e,0xab,
    0x78,0x1e,0xf0,0xeb,0x13,0xf5,0x01,0xd7,0x53,0xcc,0x67,0x7c,0xda,0xc8,0xe7,0x84,
    0xe3,0xb3,0x5a,0x14,0x37,0x3e,0x6b,0x1d,0x1f,0xd8,0xd6,0x84,0xb5,0x96,0x75,0xd6,
    0x38,0x3e,0xa7,0xc9,0xa7,0xcf,0xbd,0xa7,0xcc,0x6f,0xad,0xe3,0xd3,0x2f,0xea,0x03,
    0x8e,0xa7,0x99,0xcf,0xf8,0xbc,0x4a,0x3e,0x1b,0x1d,0x9f,0xd7,0x44,0x71,0xe3,0xb3,
    0xde,0xf1,0x81,0x6d,0x5d,0x58,0xeb,0x59,0x67,0x9d,0xe3,0x73,0x46,0xf4,0xef,0xc6,
    0x7e,0x19,0x98,0x57,0xf3,0x5b,0xef,0xf8,0x7c,0x2f,0xea,0x03,0x8e,0x67,0x98,0x0f,
    0xbe,0x1b,0xe8,0xbb,0x8c,0xf7,0x0a,0xb3,0xf2,0x12,0xb5,0x44,0x3e,0xab,0x73,0x52,
    0x06,0x70,0xfb,0xfd,0x69,0xb1,0x1b,0x5c,0x9d,0xab,0xa2,0xb5,0x50,0xfb,0x24,0xe7,
    0x08,0xbe,0xed,0xf4,0x5d,0xc4,0x7b,0x07,0xdf,0x16,0xe6,0x5b,0xc8,0x7b,0x97,0xc5,
    0xbb,0x6a,0x7d,0x58,0x4c,0xbb,0xcb,0x7f,0x45,0xb4,0x06,0x6a,0xb6,0xf0,0x0e,0xd4,
    0x84,0x88,0xbb,0xb4,0xfd,0x1d,0xa6,0x64,0x4a,0x58,0xff,0x00,0xbd,0xa8,0x3e,0xa9,
    0xc0,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       uvec4 transformSrcValue(vec4 srcValue)
// {
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//           uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           vec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
