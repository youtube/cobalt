# Copyright 2018 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//testing/libfuzzer/fuzzer_test.gni")
import("//third_party/protobuf/proto_library.gni")

# Empty group for package discovery.
group("fuzzer") {
}

static_library("fuzzer_support") {
  sources = [
    "form_predictions_producer.cc",
    "form_predictions_producer.h",
  ]

  deps = [
    "//components/autofill/core/browser",
    "//components/autofill/core/common",
    "//components/password_manager/core/browser/form_parsing",
    "//url",
  ]
}

# The part of fuzzer support which depends on protobufs is separate from the
# rest, which is also linked in unittests. This is because protobuf support for
# the fuzzer gets compiled with 'lite' runtime for unittests but without it for
# fuzzers. As a result, if the proto_library target is shared both by the fuzzer
# and the unittest target, linker errors are the result.
static_library("fuzzer_support_proto") {
  sources = [
    "form_data_proto_producer.cc",
    "form_data_proto_producer.h",
  ]

  deps = [
    ":form_data_essentials_proto",
    "//base",
    "//components/autofill/core/common",
    "//components/password_manager/core/browser/form_parsing",
    "//url",
  ]
}

fuzzer_test("password_manager_form_data_parser_fuzzer") {
  sources = [ "form_data_parser_fuzzer.cc" ]

  deps = [
    ":fuzzer_support",
    "//base",
    "//base:i18n",
    "//components/autofill/core/common",
    "//components/autofill/core/common:fuzzer_support",
    "//components/password_manager/core/browser/form_parsing",
  ]

  dict = "form_data_parser_fuzzer.dict"
}

fuzzer_test("password_manager_form_data_parser_proto_fuzzer") {
  sources = [ "form_data_parser_proto_fuzzer.cc" ]

  deps = [
    ":form_data_essentials_proto",
    ":fuzzer_support",
    ":fuzzer_support_proto",
    "//base",
    "//base:i18n",
    "//components/autofill/core/common",
    "//components/password_manager/core/browser/form_parsing",
    "//third_party/libprotobuf-mutator",
  ]

  dict = "form_data_parser_fuzzer.dict"
}

proto_library("form_data_essentials_proto") {
  sources = [ "form_data_essentials.proto" ]
}
