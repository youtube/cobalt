<!--
Copyright 2020 The Chromium Authors
Use of this source code is governed by a BSD-style license that can be
found in the LICENSE file.
-->

<!--
This file is used to generate a comprehensive list of Storage histograms
along with a detailed description for each histogram.

For best practices on writing histogram descriptions, see
https://chromium.googlesource.com/chromium/src.git/+/HEAD/tools/metrics/histograms/README.md

Please follow the instructions in the OWNERS file in this directory to find a
reviewer. If no OWNERS file exists, please consider signing up at
go/reviewing-metrics (Googlers only), as all subdirectories are expected to
have an OWNERS file. As a last resort you can send the CL to
chromium-metrics-reviews@google.com.
-->

<histogram-configuration>

<histograms>

<variants name="InterestGroupStorageProtoType">
  <variant name="AdProtos" summary="AdProtos"/>
  <variant name="BiddingAndAuctionServerKeyProtos"
      summary="BiddingAndAuctionServerKeyProtos"/>
  <variant name="KAnonKeyProtos" summary="KAnonKeyProtos"/>
  <variant name="ListOfOrigins" summary="ListOfOrigins"/>
  <variant name="ListOfTimestamps" summary="ListOfTimestamps"/>
</variants>

<variants name="LevelDBEnvTypes">
  <variant name="IDB." summary="Restricted to IndexedDB LevelDB environments"/>
  <variant name="ServiceWorker."
      summary="Restricted to ServiceWorker LevelDB environments"/>
</variants>

<variants name="LocalStorageSizes">
  <variant name="" summary=""/>
  <variant name="1MBTo5MB" summary="DB size between 1MB and 5MB."/>
  <variant name="100KBTo1MB" summary="DB size between 100KB and 1MB."/>
  <variant name="Under100KB" summary="DB size under 100KB."/>
</variants>

<histogram name="API.EffectiveStorageAccess.AllowedByStorageAccessType"
    enum="AllowedByStorageAccessType" expires_after="2025-11-10">
  <owner>selya@chromium.org</owner>
  <owner>cfredric@chromium.org</owner>
  <summary>
    Records whether storage-access or top-level-storage-access allow access to
    cookies in a given context. This will be recorded every time cookies are
    read or set.
  </summary>
</histogram>

<histogram name="API.StorageAccess.AllowedRequests4" enum="StorageAccessResult"
    expires_after="2026-06-28">
  <owner>mkwst@chromium.org</owner>
  <owner>brandm@microsoft.com</owner>
  <owner>cfredric@chromium.org</owner>
  <summary>
    Records if various requests to access storage are allowed or not and if the
    Storage Access API unblocked the request or not. Recorded whenever a
    decision to access storage like getting/setting cookies or opening an
    indexeddb connection is made in CookieSettings.
  </summary>
</histogram>

<histogram name="API.StorageAccess.AutograntViaFedCm"
    enum="AutograntViaFedCmOutcome" expires_after="2025-10-26">
  <owner>cfredric@chromium.org</owner>
  <owner>yigu@chromium.org</owner>
  <summary>
    Records the outcomes when deciding whether to allow a Storage Access API
    autogrant via FedCM permission.

    Recorded in the browser process exactly once for each storage-access
    permissions request that has autogrants via FedCM permission enabled.
  </summary>
</histogram>

<histogram name="API.StorageAccess.DocumentInheritedStorageAccess"
    enum="BooleanInherited" expires_after="2026-01-26">
  <owner>cfredric@chromium.org</owner>
  <owner>johannhof@chromium.org</owner>
  <summary>
    Records whether or not a document inherited the `has_storage_access` bit
    from the previous document.

    Recorded once at document commit, for every document.
  </summary>
</histogram>

<histogram name="API.StorageAccess.DocumentLoadedWithStorageAccess"
    enum="Boolean" expires_after="2025-09-15">
  <owner>cfredric@chromium.org</owner>
  <owner>johannhof@chromium.org</owner>
  <summary>
    Records whether or not a document was loaded with the `has_storage_access`
    bit set to true.

    Recorded once at document commit, for every document.
  </summary>
</histogram>

<histogram name="API.StorageAccess.GrantIsImplicit" enum="BooleanAvailable"
    expires_after="2023-03-12">
  <owner>mkwst@chromium.org</owner>
  <owner>brandm@microsoft.com</owner>
  <summary>
    Records if a generated grant was implicit or explicit at the time it was
    created.

    Warning: this histogram was expired from 2020-11-27 to 08-12-2022; data may
    be missing.
  </summary>
</histogram>

<histogram name="API.StorageAccess.PermissionRenewedDeltaToExpiration"
    units="hours" expires_after="2025-11-02">
  <owner>cfredric@chromium.org</owner>
  <owner>johannhof@chromium.org</owner>
  <summary>
    Records the delta between the time at which a storage-access permission
    grant was renewed, and permission grant's old expiration time.

    Recorded once each time any storage-access permission grant is renewed.
  </summary>
</histogram>

<histogram name="API.StorageAccess.RequestOutcome"
    enum="StorageAccessAPIRequestOutcome" expires_after="2025-11-16">
  <owner>cfredric@chromium.org</owner>
  <owner>brandm@microsoft.com</owner>
  <summary>
    Records the outcome of a particular Storage Access API permission request.

    Recorded at the time of the request, for every request.
  </summary>
</histogram>

<histogram name="API.StorageAccess.RequestStorageAccess2"
    enum="RequestStorageResult" expires_after="2025-11-16">
  <owner>mkwst@chromium.org</owner>
  <owner>cfredric@chromium.org</owner>
  <owner>brandm@microsoft.com</owner>
  <summary>
    Records requests to use document.requestStorageAccess and reasons the
    request may be approved or rejected.

    Recorded by the renderer exactly once for each invocation of
    document.requestStorageAccess.
  </summary>
</histogram>

<histogram name="API.StorageAccessHeader.ActivateStorageAccessLoadOutcome"
    enum="ActivateStorageAccessLoadOutcome" expires_after="2025-09-15">
  <owner>sledoux@chromium.org</owner>
  <owner>cfredric@chromium.org</owner>
  <summary>
    Records instances of HTTP responses that include the
    `Activate-Storage-Access` header with a well-formed value indicating the
    server would like the response to be loaded with an active storage access
    permission. Logs whether the header was honored, or the reason for its
    rejection if it was not.

    Recorded for each HTTP response received that contains a
    `Activate-Storage-Access` header with the value of `load`.
  </summary>
</histogram>

<histogram name="API.StorageAccessHeader.ActivateStorageAccessRetryOutcome"
    enum="ActivateStorageAccessRetryOutcome" expires_after="2025-09-15">
  <owner>sledoux@chromium.org</owner>
  <owner>cfredric@chromium.org</owner>
  <summary>
    Records instances of HTTP responses that include the
    `Activate-Storage-Access` header with a well-formed value indicating the
    server would like the request to be retried with an active storage access
    persmission. Logs whether the header was honored, or the reason for its
    rejection if it was not.

    Recorded for each HTTP response received that contains a
    `Activate-Storage-Access` header with a well-formed retry value.
  </summary>
</histogram>

<histogram name="API.StorageAccessHeader.SecFetchStorageAccessOutcome"
    enum="SecFetchStorageAccessOutcome" expires_after="2025-11-16">
  <owner>sledoux@chromium.org</owner>
  <owner>cfredric@chromium.org</owner>
  <summary>
    Records the outcome of appending the Sec-Fetch-Storage-Access header to an
    outgoing network request. If no header was appended, this records the reason
    why not; if a header was appended, this records the value that was appended.

    Recorded whenever an HTTP request is sent to a potentially trustworthy URL.
  </summary>
</histogram>

<histogram name="API.StorageAccessHeader.StorageAccessStatusOutcome"
    enum="StorageAccessStatusOutcome" expires_after="2025-11-16">
  <owner>sledoux@chromium.org</owner>
  <owner>cfredric@chromium.org</owner>
  <summary>
    Records whether an HTTP request contains the `Sec-Fetch-Storage-Access`
    header. If the request did contain the header, it also logs what value of
    the header was; if the request did not contain the header, it logs why the
    header was omitted.

    Recorded whenever an HTTP request is sent.
  </summary>
</histogram>

<histogram name="API.TopLevelStorageAccess.RequestOutcome"
    enum="TopLevelStorageAccessRequestOutcome" expires_after="2025-07-13">
  <owner>cfredric@chromium.org</owner>
  <owner>mreichhoff@chromium.org</owner>
  <summary>
    Records the outcome of a particular Top-Level Storage Access API permission
    request.

    Recorded at the time of the request, for every request.
  </summary>
</histogram>

<histogram name="API.TopLevelStorageAccess.RequestStorageAccessFor2"
    enum="RequestStorageResult" expires_after="2025-10-26">
  <owner>cfredric@chromium.org</owner>
  <owner>mreichhoff@chromium.org</owner>
  <summary>
    Records invocations of document.requestStorageAccessFor and reasons the
    request was approved or rejected. Recorded for every call to the function,
    regardless of outcome. Note that API.StorageAccess.RequestStorageAccess is
    similar, but for the other variant of this API.
  </summary>
</histogram>

<histogram name="Clipboard.Read" enum="ClipboardFormatRead"
    expires_after="2025-11-16">
  <owner>huangdarwin@chromium.org</owner>
  <owner>src/ui/base/clipboard/OWNERS</owner>
  <summary>
    Counts how often each Clipboard format is read by the platform clipboard.
    These reads generally imply that an application requested this format after
    checking that the format is available, but there are some cases where Chrome
    reads a format to check for existence (outside the
    ui::Clipboard::ReadAvailableTypes() function). Please prefer interpreting
    these numbers as relative use changes, as opposed to absolute user usage.
  </summary>
</histogram>

<histogram name="Clipboard.TimeIntervalBetweenCommitAndRead" units="ms"
    expires_after="2024-06-01">
  <owner>dcheng@chromium.org</owner>
  <owner>src/ui/base/clipboard/OWNERS</owner>
  <summary>
    Records the time interval between when clipboard data was committed to the
    clipboard and the same clipboard data was read from the clipboard. The same
    clipboard data may be read multiple times. Emitted at the moment the
    clipboard data was read. Currently only implemented for Chrome OS' in-memory
    clipboard (`ui::ClipboardNonBacked`).
  </summary>
</histogram>

<histogram name="Clipboard.Write" enum="ClipboardFormatWrite"
    expires_after="2025-11-16">
  <owner>huangdarwin@chromium.org</owner>
  <owner>src/ui/base/clipboard/OWNERS</owner>
  <summary>
    Counts how often each Clipboard format is written by the platform clipboard.
    These writes all imply that an application had this format available, and
    therefore wrote this format.
  </summary>
</histogram>

<histogram name="DOMStorage.CommitMeasuredDelay" units="ms"
    expires_after="2025-10-12">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    The amount of time that a single `Put()` was deferred. This is different
    from LevelDBWrapper.CommitDelay because that histogram only measures the
    delay for the first commit of a batch. Recorded when the batch is pushed to
    LevelDB.
  </summary>
</histogram>

<histogram name="DOMStorage.CommitSizeBytes" units="bytes"
    expires_after="2025-08-10">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    The total in-memory size of a single batched commit to a DOMStorage
    database. Recorded when the batch is pushed to LevelDB. In this case, a
    &quot;batched commit&quot; is all the recent writes to a single storage area
    (i.e. a single site's DOM storage).
  </summary>
</histogram>

<histogram name="DOMStorage.CommitSizeBytesAggregated" units="bytes"
    expires_after="2025-08-24">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    The total in-memory size of a LevelDB writebatch for the DOMStorage
    database. Recorded when the batch is pushed to LevelDB. Unlike
    CommitSizeBytes, this may contain data from multiple storage areas (sites)
    if commit coalescing is enabled.
  </summary>
</histogram>

<histogram name="IndexedDB.BackingStoreCloseDuration" units="ms"
    expires_after="2025-10-12">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the time it takes to close the IDB backing store. This is different
    WebCore.IndexedDB.LevelDB.CloseTime because it includes the time taken for
    in-flight tasks such as scope commit/rollback, and not just the time taken
    for the leveldb::DB destructor.
  </summary>
</histogram>

<histogram name="IndexedDB.CalculateBlockingStatusLongTimes" units="ms"
    expires_after="2025-11-09">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the duration of Transaction::IsTransactionBlockingOtherClients, but
    only if it takes over 2ms to execute. This is intended to facilitate
    tracking down performance issues. See crbug.com/384476946
  </summary>
</histogram>

<histogram name="IndexedDB.CalculateBlockingStatusRequestQueueSize"
    units="count" expires_after="2025-11-09">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the number of queued lock requests that exist in the
    PartitionedLockManager when IsTransactionBlockingPtherClients() takes over
    2ms to complete. This is intended to facilitate tracking down performance
    issues. See crbug.com/384476946
  </summary>
</histogram>

<histogram name="IndexedDB.ClientKeepActiveRemotesCount{Reason}" units="count"
    expires_after="2025-10-31">
  <owner>pmonette@chromium.org</owner>
  <owner>catan-team@chromium.org</owner>
  <summary>
    Logs the size of the `client_keep_active_remotes_` RemoteSets. Emitted every
    time a new remote is added.
  </summary>
  <token key="Reason">
    <variant name="" summary="aggregated across all reasons"/>
    <variant name=".TransactionIsAcquiringLocks"/>
    <variant name=".TransactionIsOngoingAndBlockingOthers"/>
    <variant name=".TransactionIsStartingWhileBlockingOthers"/>
    <variant name=".VersionChangeEvent"/>
  </token>
</histogram>

<histogram name="IndexedDB.ContextShutdownDuration" units="ms"
    expires_after="2025-10-12">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the time it takes to completely shut down `IndexedDBContextImpl`,
    starting from when it's requested on the UI thread to when destruction is
    completed on the IDB task runner.
  </summary>
</histogram>

<histogram name="IndexedDB.GetUnacquirableLocksLongTimes" units="ms"
    expires_after="2025-04-20">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the duration of PartitionedLockManager::GetUnacquirableLocks, but only
    if it takes over 2ms to execute. This is intended to facilitate tracking
    down performance issues. See crbug.com/384476946
  </summary>
</histogram>

<histogram name="IndexedDB.GetUnacquirableLocksRequestQueueSize" units="count"
    expires_after="2025-11-09">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the number of queued lock requests that exist in the
    PartitionedLockManager when GetUnacquirableLocks() takes over 2ms to
    complete. This is intended to facilitate tracking down performance issues.
    See crbug.com/384476946
  </summary>
</histogram>

<histogram name="IndexedDB.LargeValueReadResult" enum="FileErrorCode"
    expires_after="2025-11-16">
  <owner>leimy@chromium.org</owner>
  <owner>evanstade@microsoft.com</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the status (including success) when IndexedDB finishes reading a
    blob-wrapped (large) value. If the read fails, the first value that failed
    to be unwrapped in a transaction will be logged. This error causes the
    transaction to abort, preventing further read attempts on other values. This
    metric is recorded in the renderer process.
  </summary>
</histogram>

<histogram name="IndexedDB.LevelDBCleanupScheduler.CleanerPostponedCount"
    units="count" expires_after="2025-11-02">
  <owner>leimy@chromium.org</owner>
  <owner>tamartol@microsoft.com</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the number of times the LevelDBCleanupScheduler cleanup task was
    postponed while it was scheduled to run. Recorded when the clean up
    successfuly completes or if the scheduler is destructed mid run.
  </summary>
</histogram>

<histogram name="IndexedDB.LevelDBCleanupScheduler.DBCompactionDuration"
    units="ms" expires_after="2025-11-02">
  <owner>leimy@chromium.org</owner>
  <owner>tamartol@microsoft.com</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the total time taken for level db compaction run in the LevelDB
    cleanup task. Recorded when the db compaction phase completes.
  </summary>
</histogram>

<histogram name="IndexedDB.LevelDBCleanupScheduler.PrematureTerminationPhase"
    enum="LevelDBCleanupSchedulerPhase" expires_after="2025-11-02">
  <owner>leimy@chromium.org</owner>
  <owner>tamartol@microsoft.com</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the next phase which the scheduler would have executed if it had run
    instead of being destructed. If the phase logged is `Run scheduled` (as it's
    the initial phase) or `Tombstone sweeper` (as it's a multi phase operation)
    then it's current phase of the scheduler.
  </summary>
</histogram>

<histogram name="IndexedDB.LevelDBCleanupScheduler.TombstoneSweeperDuration"
    units="ms" expires_after="2025-11-02">
  <owner>leimy@chromium.org</owner>
  <owner>tamartol@microsoft.com</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the total time taken to sweep tombstones in the LevelDB cleanup
    task. The sweeper runs in multiple rounds, this is the sum of all of them.
    Recorded when the tombstone sweeper phase completes.
  </summary>
</histogram>

<histogram name="IndexedDB.LevelDbTombstoneSweeper.TombstonesFound"
    units="count" expires_after="2025-11-02">
  <owner>leimy@chromium.org</owner>
  <owner>tamartol@microsoft.com</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the number of tombstones entries which were found during the LevelDB
    cleanup task. Recorded when the LevelDbTombstoneSweeper is destroyed.
  </summary>
</histogram>

<histogram name="IndexedDB.LockRequestCancelledLongTimes" units="ms"
    expires_after="2025-11-09">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the duration of PartitionedLockManager::LockRequestCancelled, but only
    if it takes over 2ms to execute. This is intended to facilitate tracking
    down performance issues. See crbug.com/384476946
  </summary>
</histogram>

<histogram name="IndexedDB.LockRequestCancelledRequestQueueSize" units="count"
    expires_after="2025-11-09">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the number of queued lock requests that exist in the
    PartitionedLockManager when LockRequestCancelled() takes over 2ms to
    complete. This is intended to facilitate tracking down performance issues.
    See crbug.com/384476946
  </summary>
</histogram>

<histogram name="IndexedDB.QuotaCheckTime2.{QuotaCheckResult}" units="ms"
    expires_after="2025-04-20">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the result of quota checks made by the IndexedDB component on commit of
    readwrite txns.
  </summary>
  <token key="QuotaCheckResult">
    <variant name="DroppedRequest"/>
    <variant name="QuotaError"/>
    <variant name="Success"/>
  </token>
</histogram>

<histogram name="IndexedDB.RemoveTransactionConnectionTxnCount" units="count"
    expires_after="2025-11-09">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the number of transactions remaining on a Connection when
    Connection::RemoveTransaction() takes over 2ms to complete. This is intended
    to facilitate tracking down performance issues. See crbug.com/384476946
  </summary>
</histogram>

<histogram name="IndexedDB.RemoveTransactionLongTimes" units="ms"
    expires_after="2025-11-09">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the duration of Connection::RemoveTransaction(), but only if it takes
    over 2ms to execute. This is intended to facilitate tracking down
    performance issues. See crbug.com/384476946
  </summary>
</histogram>

<histogram name="IndexedDB.RemoveTransactionRequestQueueSize" units="count"
    expires_after="2025-11-09">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the number of queued lock requests that exist in the
    PartitionedLockManager when Connection::RemoveTransaction() takes over 2ms
    to complete. This is intended to facilitate tracking down performance
    issues. See crbug.com/384476946
  </summary>
</histogram>

<histogram name="IndexedDB.ValueDecompressionCount" units="count"
    expires_after="2025-09-24">
  <owner>leimy@chromium.org</owner>
  <owner>evanstade@microsoft.com</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the number of times a single compressed `IDBValue` is decompressed when
    converting into a script value. Zeroes are not logged. This is logged once
    in each IDBValue instance's lifetime (on destruction).
  </summary>
</histogram>

<histogram name="IndexedDB.WrappedBlobLoadTime" units="ms"
    expires_after="2025-10-19">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the amount of time taken to load a blob from the IDB backing store.
    This is measured from the renderer, starting when the bytes are requested
    from the renderer process and finishing when loading is complete i.e. all
    bytes are available in the renderer process. For simplicity's sake, this is
    only logged for large values automatically wrapped in blobs, but the results
    should be applicable to explicit Blobs as well.

    If the blob bytes need to be unwrapped (decompressed), the time it takes to
    do so is NOT taken into account. If interested in total time to receive the
    uncompressed blob bytes, another histogram would need to be added.
  </summary>
</histogram>

<histogram name="LevelDBEnv.DeleteTableBackupFile" enum="BooleanSuccess"
    expires_after="2025-04-27">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Tracks the success rate of deleting an unused leveldb table backup file.
  </summary>
</histogram>

<histogram name="LevelDBEnv.LockFileInUseByThisProcess" enum="Boolean"
    expires_after="2025-10-12">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    When there is a failure to acquire a lock on a LevelDB LOCK file due to
    FILE_IN_USE, this histogram logs true if the lock was already held by the
    same Chromium process, false otherwise. This is only logged for IndexedDB
    LevelDB instances.
  </summary>
</histogram>

<histogram name="LevelDBEnv.LockFileSuccessAttempts" units="count"
    expires_after="2025-03-30">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    When a LevelDB LOCK file is successfully locked, this is the count of
    attempts that were required. This is intended to inform how long LevelDB
    should keep retrying. This is only logged for IndexedDB LevelDB instances.
  </summary>
</histogram>

<histogram name="LevelDBEnv.SyncResult" enum="PlatformFileError"
    expires_after="2024-08-06">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Logs the success/failure of LevelDB's calls to Sync() (which translates to
    system calls of fsync(), FlushFileBuffers(), etc). Sync() is only called if
    the client requests it (e.g. for a strict durability IndexedDB transaction)
    and after an otherwise successful write.
  </summary>
</histogram>

<histogram name="LevelDBEnv.{LevelDBEnvTypes}IOError"
    enum="LevelDBIOErrorMethods" expires_after="2025-08-01">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Methods where leveldb's Chromium environment has IO errors.
    {LevelDBEnvTypes}
  </summary>
  <token key="LevelDBEnvTypes" variants="LevelDBEnvTypes">
    <variant name=""/>
  </token>
</histogram>

<histogram name="LevelDBEnv.{LevelDBEnvTypes}MissingFiles" units="files"
    expires_after="2025-08-01">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Number of backup files found without corresponding ldb files. As measured by
    GetChildren when used in LevelDB clients other than IndexedDB.
    {LevelDBEnvTypes}
  </summary>
  <token key="LevelDBEnvTypes" variants="LevelDBEnvTypes">
    <variant name=""/>
  </token>
</histogram>

<histogram name="LevelDBWrapper.CommitDelay" units="ms"
    expires_after="2025-03-09">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Delay between the browser process receiving changes and those changes being
    written to the DB.
  </summary>
</histogram>

<histogram name="LocalStorage.AccessMetaDataUpdateAtShutdown" enum="Boolean"
    expires_after="2025-10-31">
  <owner>arichiv@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Emitted when a local StorageArea is shutdown and the access metadata for the
    associated StorageKey is updated. It's possible to update the access
    metadata when new data is written to the storage area instead, so this
    metric does not capture all access metadata updates.

    Value is true if update succeeded and false if update failed.
  </summary>
</histogram>

<histogram name="LocalStorage.DatabaseOpen" enum="LevelDBStatus"
    expires_after="2025-10-31">
  <owner>arichiv@chromium.org</owner>
  <owner>tamartol@microsoft.com</owner>
  <summary>
    Emitted when the local storage database fails to open. Using to investigate
    distribution of various types of local storage corruption.
  </summary>
</histogram>

<histogram name="LocalStorage.DaysSinceLastModified400DaysGT" units="days"
    expires_after="2025-10-31">
  <owner>arichiv@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Emitted when the browsing context that loaded the related local storage
    controller shuts down. One entry is recorded per local storage area.

    Number of days since a local storage area was modified (for values over 400
    days).
  </summary>
</histogram>

<histogram name="LocalStorage.DaysSinceLastModified400DaysLTE" units="days"
    expires_after="2025-10-31">
  <owner>arichiv@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Emitted when the browsing context that loaded the related local storage
    controller shuts down. One entry is recorded per local storage area.

    Number of days since a local storage area was modified (for values under 400
    days).
  </summary>
</histogram>

<histogram name="LocalStorage.MojoSizeInKB" units="KB"
    expires_after="2025-09-20">
  <owner>fergal@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Size of the HTML5 LocalStorage DB in KB in the renderer-side cache using
    Mojo implementation.
  </summary>
</histogram>

<histogram name="LocalStorage.MojoTimeToPrime" units="ms"
    expires_after="2025-09-20">
  <owner>fergal@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Time (in ms) to load HTML5 LocalStorage into the renderer-side cache using
    Mojo implementation.
  </summary>
</histogram>

<histogram name="LocalStorage.MojoTimeToPrimeAblationDelay" units="ms"
    expires_after="2025-09-20">
  <owner>fergal@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Time (in ms) added to loading of LocalStorage into the renderer-side cache
    used for ablation study purposes.
  </summary>
</histogram>

<histogram name="LocalStorage.MojoTimeToPrimeFor{LocalStorageSizes}" units="ms"
    expires_after="2025-09-20">
  <owner>fergal@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Time (in ms) to load HTML5 LocalStorage into the renderer-side cache using
    Mojo implementation, split by size. {LocalStorageSizes}
  </summary>
  <token key="LocalStorageSizes" variants="LocalStorageSizes"/>
</histogram>

<histogram name="LocalStorage.OrphanStorageAreasOnStartupCount" units="areas"
    expires_after="2025-10-31">
  <owner>arichiv@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the amount of orphan (nonce-bound buckets which will never be
    loaded) storage areas detected on LocalStorageImpl initialization (profile
    load). Recorded one minute after LocalStorageImpl initialization to ensure
    any restored tabs have loaded.

    See crbug.com/353555346 for more info.
  </summary>
</histogram>

<histogram name="LocalStorage.RendererAreaCacheHit"
    enum="LocalStorageRendererAreaCacheHitEnum" expires_after="2025-11-02">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    The renderer side cache hit rate metrics for new HTML5 LocalStorage DB
    opened.

    Warning: this histogram was expired from M78 to M92; data may be missing.
  </summary>
</histogram>

<histogram name="LocalStorage.StaleStorageAreasDeletedOnStartupCount"
    units="areas" expires_after="2025-10-31">
  <owner>arichiv@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the amount of stale (400 days since last access or write) storage
    areas deleted on LocalStorageImpl initialization (profile load).

    Emitted after successful attempt to delete stale storage areas.

    See crbug.com/40281870 for more info.
  </summary>
</histogram>

<histogram name="LocalStorage.StaleStorageAreasDeletedOnStartupSuccess"
    enum="BooleanSuccess" expires_after="2025-10-31">
  <owner>arichiv@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the success of clearing stale (400 days since last access or write)
    storage areas on LocalStorageImpl initialization (profile load).

    Emitted after attempt to delete stale storage areas occurs.

    See crbug.com/40281870 for more info.
  </summary>
</histogram>

<histogram name="MojoLevelDBEnv.IOError" enum="LevelDBIOErrorMethods"
    expires_after="2025-08-01">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Methods where leveldb's Mojo environment has IO errors. This histogram has
    expired between M87-106.
  </summary>
</histogram>

<histogram name="Storage.Blob.FileReaderLoader.DataPipeNotReadableMojoError"
    enum="FileReaderLoaderMojoResult" expires_after="2025-02-16">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Recorded when FileReaderLoader.FailureType2 records a data pipe not readable
    error. This is the specific type of Mojo error.
  </summary>
</histogram>

<histogram name="Storage.Blob.FileReaderLoader.FailureType2"
    enum="FileReaderLoaderFailureType" expires_after="2025-10-26">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Recorded when an error occurs in the FileReaderLoader, which is used to load
    blobs in the Renderer. FileReaderUser is mostly used for Javascript's
    'FileReader', but can also be used to read blobs for the IndexedDB
    renderer-side implementation. For the read error category, see
    Storage.Blob.FileReaderLoader.ReadError for a breakdown of the specific read
    error reasons.
  </summary>
</histogram>

<histogram name="Storage.Blob.FileReaderLoader.ReadError2" enum="NetErrorCodes"
    expires_after="2025-10-26">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    The error code reported by the blob system while trying to read a blob in
    the FileReaderLoader.
  </summary>
</histogram>

<histogram name="Storage.Buckets.BucketCount" units="buckets"
    expires_after="2025-04-01">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Counts the number of storage buckets in existence for a StorageKey when a
    new one is created (including the new one). This is intended to give an idea
    of the number of buckets individual apps use. Note: the count in histogram
    bucket 1 correlates to the total number of sites that use the buckets API
    (per Chrome client). The count in histogram bucket N, divided by the size of
    the bucket, correlates to the number of sites for that Chrome client which
    use at least that many buckets.
  </summary>
</histogram>

<histogram name="Storage.Buckets.Parameters.Durability"
    enum="StorageBucketDurabilityParameter" expires_after="2025-04-01">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>The requested durability for a bucket when it is open()ed.</summary>
</histogram>

<histogram name="Storage.Buckets.Parameters.Expiration" units="minutes"
    expires_after="2025-04-01">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    The expiration time for a bucket, in minutes, if provided when it is
    open()ed. If not provided, the underflow bucket is used.
  </summary>
</histogram>

<histogram name="Storage.Buckets.Parameters.Persisted"
    enum="StorageBucketPersistedParameter" expires_after="2025-04-01">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>The requested persistence for a bucket when it is open()ed.</summary>
</histogram>

<histogram name="Storage.Buckets.Parameters.QuotaKb" units="KB"
    expires_after="2025-04-01">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    The requested quota for a bucket, in kB, if provided. If not provided, the
    underflow bucket is used. Logged when the bucket is open()ed.
  </summary>
</histogram>

<histogram name="Storage.ClearSiteDataHeader.Parameters"
    enum="ClearSiteDataParameters" expires_after="2025-11-02">
  <owner>estade@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    A Clear-Site-Data response header was seen with the given values.
  </summary>
</histogram>

<histogram name="Storage.DomStorage.BatchTaskGrowthSizeBytes" units="bytes"
    expires_after="2025-10-23">
  <owner>annasato@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the approximate growth in bytes of the leveldb::WriteBatch after
    processing a single task within
    AsyncDomStorageDatabase::RunBatchDatabaseTasks. Helps understand if
    individual tasks contribute significantly to batch size. Recorded for each
    task in the batch. See crbug.com/40245293.
  </summary>
</histogram>

<histogram name="Storage.DomStorage.IterationsToReach{Size}MB" units="count"
    expires_after="2025-10-23">
  <owner>annasato@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records the number of iterations (tasks processed) required for the
    leveldb::WriteBatch in AsyncDomStorageDatabase::RunBatchDatabaseTasks to
    first reach an approximate size of {Size} MiB. Recorded at most once per
    batch. See crbug.com/40245293.
  </summary>
  <token key="Size">
    <variant name="20"/>
    <variant name="100"/>
    <variant name="500"/>
  </token>
</histogram>

<histogram name="Storage.FileSystemAccess.AttemptToObserveSymlinkOrJunction"
    enum="Boolean" expires_after="2025-11-02">
  <owner>memmott@chromium.org</owner>
  <owner>dslee@chromium.org</owner>
  <owner>christinesm@chromium.org</owner>
  <owner>src/content/browser/file_system_access/OWNERS</owner>
  <summary>
    Records whether a site attempted to observe a symlink or a junction using
    the File System Observer API. Recorded on every observe() call after
    validating the handle and ensuring that read permissions on the handle are
    granted. Only recorded when observing a handle in the LocalFileSystem.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.ConfirmSensitiveEntryAccessDuration"
    units="ms" expires_after="2025-10-12">
  <owner>leimy@chromium.org</owner>
  <owner>src/content/browser/file_system_access/OWNERS</owner>
  <summary>
    Logs the time it takes to execute
    ChromeFileSystemAccessPermissionContext::ConfirmSensitiveEntryAccess(). This
    metric will be used to estimate the impact of the performance improvements
    made to the blocklists check within the method.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.FilePathWatcherCallbackError"
    enum="FileSystemAccessWatchWithChangeInfoResult" expires_after="2025-06-27">
  <owner>memmott@chromium.org</owner>
  <owner>dslee@chromium.org</owner>
  <owner>christinesm@chromium.org</owner>
  <summary>
    Records if content::FilePathWatcher sends an error to its callback and how
    it failed. Recorded on every error sent to the callback.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.InotifyWatchCount" units="count"
    expires_after="2025-10-12">
  <owner>memmott@chromium.org</owner>
  <owner>dslee@chromium.org</owner>
  <owner>christinesm@chromium.org</owner>
  <summary>
    Records the high water mark of inotify watches used in a FilePathWatcher on
    Linux. Recorded when the FilePathWatcher is destroyed.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.ObservationCallbackRate"
    units="count" expires_after="2025-11-02">
  <owner>memmott@chromium.org</owner>
  <owner>dslee@chromium.org</owner>
  <owner>christinesm@chromium.org</owner>
  <summary>
    Records the number of times an observer's callback is triggered per
    observation in a one second window. Recorded one second after a callback has
    been triggered when there is no ongoing window.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.ObserverUsage" units="count"
    expires_after="2025-07-02">
  <owner>memmott@chromium.org</owner>
  <owner>dslee@chromium.org</owner>
  <owner>christinesm@chromium.org</owner>
  <summary>
    Records the high water mark of OS-specific observer resource usage for a
    given StorageKey. Recorded when FileSystemAccessObserverQuotaManager is
    destroyed.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.ObserverUsageQuotaExceeded"
    enum="Boolean" expires_after="2025-11-16">
  <owner>memmott@chromium.org</owner>
  <owner>dslee@chromium.org</owner>
  <owner>christinesm@chromium.org</owner>
  <summary>
    Records whether FileSystemObserver usage change caused quota to be exceeded.
    Recorded when FileSystemAccessObserverQuotaManager is destroyed.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.ObserverUsageRate" units="%"
    expires_after="2025-07-02">
  <owner>memmott@chromium.org</owner>
  <owner>dslee@chromium.org</owner>
  <owner>christinesm@chromium.org</owner>
  <summary>
    Records the percentage ratio of high water mark of OS-specific observer
    resource usage over the total available quota for a given StorageKey.
    Recorded when FileSystemAccessObserverQuotaManager is destroyed.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.RestorePermissionPromptOutcome"
    enum="FileSystemAccessRestorePermissionPromptOutcome"
    expires_after="2025-09-01">
  <owner>christinesm@chromium.org</owner>
  <owner>src/content/browser/file_system_access/OWNERS</owner>
  <summary>
    The result of a user interaction with the File System Access Persistent
    Permissions restore prompt UI.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.ToggleExtendedPermissionOutcome"
    enum="Boolean" expires_after="2025-09-01">
  <owner>christinesm@chromium.org</owner>
  <owner>src/content/browser/file_system_access/OWNERS</owner>
  <summary>
    The result of a user interaction with the File System Access Persistent
    Permissions Page Info UI checkbox toggle option to enable or disable
    Extended Permissions for a given origin.
  </summary>
</histogram>

<histogram name="Storage.FileSystemAccess.WatchWithChangeInfoResult"
    enum="FileSystemAccessWatchWithChangeInfoResult" expires_after="2025-11-02">
  <owner>memmott@chromium.org</owner>
  <owner>dslee@chromium.org</owner>
  <owner>christinesm@chromium.org</owner>
  <summary>
    Records if content::FilePathWatcher::WatchWitchChangeInfo succeeds and if it
    doesn't, how it fails. Recorded for every call.
  </summary>
</histogram>

<histogram
    name="Storage.FileSystemAccess.{OpType}PermissionRequestOutcome.{EntryType}"
    enum="FileSystemAccessPermissionRequestOutcome" expires_after="2025-09-01">
  <owner>asully@chromium.org</owner>
  <owner>src/content/browser/file_system_access/OWNERS</owner>
  <summary>
    The result of an attempt to request permission to a file or directory via
    the File System Access API.
  </summary>
  <token key="OpType">
    <variant name="Read" summary="Read permission requested"/>
    <variant name="Write" summary="Write permission requested"/>
  </token>
  <token key="EntryType">
    <variant name="Directory" summary="Requested permission to a directory"/>
    <variant name="File" summary="Requested permission to a file"/>
  </token>
</histogram>

<histogram name="Storage.ImportantSites.CBDChosenReason"
    enum="ImportantSitesReason" expires_after="2024-10-06">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    When a user chooses to blocklist one or more sites when they clear browsing
    data, this is recorded for every reason each chosen site was marked as
    important. It indicates which signals were used to show the given site to
    the user that the user then chose to exclude from clearing. This histogram
    has expired between M95-M106.
  </summary>
</histogram>

<histogram name="Storage.ImportantSites.CBDChosenReasonCount" units="count"
    expires_after="2024-08-01">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    This records the number of reasons each important site had that the user
    chose to blocklist when clearing browsing data. This histogram has expired
    between M95-M106.
  </summary>
</histogram>

<histogram name="Storage.ImportantSites.CBDIgnoredReason"
    enum="ImportantSitesReason" expires_after="2024-08-01">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    When a user chooses to blocklist one or more sites when they clear browsing
    data, this is recorded for every reason each unchosen site was marked as
    important. It indicates which signals were used to show the given site to
    the user, which the user then ignored and did not select to blocklist from
    clearing data. This histogram has expired between M95-M106.
  </summary>
</histogram>

<histogram name="Storage.ImportantSites.CBDIgnoredReasonCount" units="count"
    expires_after="2024-08-01">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    This records the number of reasons each important site had that the user
    chose to NOT blocklist when clearing browsing data. This histogram has
    expired between M95-M106.
  </summary>
</histogram>

<histogram name="Storage.ImportantSites.GeneratedReason"
    enum="ImportantSitesReason" expires_after="2024-08-01">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Recorded when we generate a list of important sites. This can happen when
    the user opens the Clear Browsing Data dialog on Android, views the Storage
    tab in Site Settings on Android, or launches 'Manage Storage' from Android
    System Settings for Chrome. We record every reason each site was chosen in
    this metric. This means that we can report this metric multiple times for a
    single site. This histogram has expired between M95-M106.
  </summary>
</histogram>

<histogram name="Storage.ImportantSites.GeneratedReasonCount" units="count"
    expires_after="2024-08-01">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    This records the number of reasons qualifying a site for being 'important'.
    We record this for every site when we generate a list of important sites,
    described in &quot;Storage.ImportantSites.GeneratedReason&quot;. This
    histogram has expired between M95-M106.
  </summary>
</histogram>

<histogram name="Storage.ImportantSites.GenerationTime" units="ms"
    expires_after="2024-12-08">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    The time it takes to generate the list of 'important' sites. This list is
    generated when the user enters the 'Clear Browsing Dialog' or the 'Manage
    Space' screens for Chrome, both of which are on Android. This histogram has
    expired between M95-M106.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdComponentRenderURLSize" units="bytes"
    expires_after="2025-07-13">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the size of each ad component renderURL in bytes. Recorded for each
    ad component, each time an interest group is successfully joined.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdProtoCompressionRatio" units="%"
    expires_after="2025-11-16">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the percentage ratio of compressed size divided by uncompressed size
    of the AdsProto, times 100. Recorded each time the AdProto is compressed,
    including both during interest group insertion, and database migration from
    older uncompressed versions, unless uncompressed size is 0. Includes both
    ads and ad components.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdProtoCompressionTime" units="ms"
    expires_after="2025-09-28">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the time taken to compress the ad proto. Recorded each time the
    AdProto is compressed, including both during interest group insertion, and
    database migration from older uncompressed versions. Includes both ads and
    ad components.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdProtoDecompressionOutcome"
    enum="AdProtoDecompressionOutcome" expires_after="2025-07-13">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the outcome of interest group AdProto decompression, recorded on
    each decompression attempt. Includes both ads and ad components.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdProtoDecompressionTime" units="ms"
    expires_after="2025-09-28">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the outcome of interest group AdProto decompression, recorded on
    each successful decompression attempt. Includes both ads and ad components.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdProtoDeserializationTime" units="ms"
    expires_after="2025-10-12">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the time taken to deserialize the ad proto. Recorded each time the
    AdProto is deserialized. Includes both ads and ad components.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdProtoSerializationTime" units="ms"
    expires_after="2025-08-24">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the time taken to serialize the ad proto. Recorded each time the
    AdProto is serialized, including both during interest group insertion, and
    database migration. Includes both ads and ad components.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdProtoSizeCompressed" units="bytes"
    expires_after="2025-11-16">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the size of the compressed AdProto, recorded each time the AdProto
    is compressed, including both during interest group insertion, and database
    migration from older uncompressed versions, even if the uncompressed size is
    0. Includes both ads and ad components.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdProtoSizeUncompressed" units="bytes"
    expires_after="2025-09-14">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the size of the uncompressed AdProto, recorded each time the AdProto
    is compressed, including both during interest group insertion, and database
    migration from older uncompressed versions, even if the uncompressed size is
    0. Includes both ads and ad components.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.AdRenderURLSize" units="bytes"
    expires_after="2025-11-16">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the size of each ad renderURL in bytes. Recorded for each ad, each
    time an interest group is successfully joined.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.DBErrors" units="count"
    expires_after="2025-06-08">
  <owner>behamilton@google.com</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the number of database errors that occur when accessing interest
    group storage.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.DBMaintenanceTime" units="microseconds"
    expires_after="2025-09-14">
  <owner>behamilton@google.com</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the time spent performing database maintenance on the interest group
    storage. Recorded when maintenance is run (approximately once an hour).

    Note that clients without high-resolution clocks will report 0 for very
    short times.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.DBSize" units="KB"
    expires_after="2025-11-16">
  <owner>behamilton@google.com</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the size of the InterestGroup database. Collected prior to database
    maintenance.
  </summary>
</histogram>

<histogram
    name="Storage.InterestGroup.HeaderObserver.CreatedOpaqueOriginForPrefsCheck"
    enum="Boolean" expires_after="2025-08-10">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <owner>privacy-sandbox-dev@chromium.org</owner>
  <summary>
    Tracks whether or not it was necessary to create a new opaque origin to use
    as the top-frame origin for the call to
    `ContentBrowserClient::IsInterestGroupAPIAllowed()` when storing headers
    received from the network service. Recorded every time this check was made.
    NOTE: This histogram doesn't apply to normal joins, updates, auctions, etc.
    -- it just applies to checks applied after receiving headers from the
    network service.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.InitializationResult"
    enum="InterestGroupStorageInitializationResult" expires_after="2025-07-13">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the result of database initialization, every time initialization is
    attempted.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.JSONDeserializationResult"
    enum="InterestGroupStorageJSONDeserializationResult"
    expires_after="2025-11-16">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the result of JSON deserialization, every time it is attempted.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.JSONSerializationResult"
    enum="InterestGroupStorageJSONSerializationResult"
    expires_after="2025-07-13">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the result of JSON serialization, every time it is attempted.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.KAnonymityKeysCacheHitRate" units="%"
    expires_after="2025-11-02">
  <owner>orrb@chromium.org</owner>
  <owner>privacy-sandbox-dev@chromium.org</owner>
  <summary>
    The fraction of keys that need to be fetched for a particular interest group
    that are available from the on-device cache of keys retained from prior
    requests to the k-anonymity server. As with other percent metrics, this is
    recorded as an integer of 0-100. Recorded immediately after the cache is
    checked for k-anonymity keys prior to attempting a fetch from the
    k-anonymity server, and only when the cache is checked, i.e. not when the
    `kFledgeCacheKAnonHashedKeys` feature is disabled.

    See https://github.com/WICG/turtledove/blob/main/FLEDGE.md for the latest
    version of the FLEDGE explainer.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.PerInterestGroup.NumAdComponents"
    units="ad components" expires_after="2025-11-16">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the number of ads components per interest group. Recorded each time
    an interest group is successfully joined when a (potentially-empty) ad
    components array was passed to joinAdInterestGroup().
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.PerInterestGroup.NumAds" units="ads"
    expires_after="2025-11-16">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the number of ads per interest group. Recorded each time an interest
    group is successfully joined when a (potentially-empty) ads array was passed
    to joinAdInterestGroup().
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.PerSiteCount" units="groups"
    expires_after="2025-11-16">
  <owner>behamilton@google.com</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the number of interest groups loaded for a single group owner when
    running an ad auction. Recorded for each owner involved in a running ad
    auction.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.PrevWinsNumEntries" units="entries"
    expires_after="2025-10-05">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <owner>privacy-sandbox-dev@chromium.org</owner>
  <summary>
    Records an estimate of the number of prevWins entries per interest group,
    reported each time it is loaded from the database, both for on-device and
    B&amp;A auctions.
  </summary>
</histogram>

<histogram name="Storage.InterestGroup.ProtoDeserializationResult.{Type}"
    enum="InterestGroupStorageProtoDeserializationResult"
    expires_after="2025-11-16">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the result of {Type} Proto deserialization, every time it is
    attempted.
  </summary>
  <token key="Type" variants="InterestGroupStorageProtoType"/>
</histogram>

<histogram name="Storage.InterestGroup.ProtoSerializationResult.{Type}"
    enum="InterestGroupStorageProtoSerializationResult"
    expires_after="2025-11-16">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the result of {Type} Proto serialization, every time it is
    attempted.
  </summary>
  <token key="Type" variants="InterestGroupStorageProtoType"/>
</histogram>

<histogram name="Storage.InterestGroup.Upgrade{Outcome}{Version}Version"
    units="version" expires_after="2025-07-13">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the {Version} version number of database upgrades that {Outcome},
    recorded each time the database upgrade has a &quot;{Outcome}&quot; outcome.
  </summary>
  <token key="Outcome">
    <variant name="Failed" summary="fail"/>
    <variant name="Succeeded" summary="succeed"/>
  </token>
  <token key="Version">
    <variant name="End" summary="ending"/>
    <variant name="Start" summary="starting"/>
  </token>
</histogram>

<histogram name="Storage.InterestGroup.VacuumResult"
    enum="InterestGroupStorageVacuumResult" expires_after="2025-07-13">
  <owner>caraitto@chromium.org</owner>
  <owner>pauljensen@chromium.org</owner>
  <summary>
    Records the result of the vacuum operation, every time it is attempted.
  </summary>
</histogram>

<histogram name="Storage.SessionStorage.RendererAreaCacheHit"
    enum="LocalStorageRendererAreaCacheHitEnum" expires_after="2025-10-05">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    The renderer side cache hit rate metrics for new HTML5 SessionStorage DB
    opened. This histogram has expired between M97-106.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.AsyncIterator.EntriesQueuedCount"
    units="Entries" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Count of database entries queued to be sent to the async iterator. Recorded
    in `SharedStorage::IterationSource::DidReadEntries()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.AsyncIterator.IteratedEntriesBenchmarks"
    units="BenchmarksMet" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    For each of a set of benchmark percentages, we record that benchmark when
    the async iterator first iterates through at least that percentage of queued
    entries. Recorded in `SharedStorage::IterationSource::TryResolvePromise()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.AsyncIterator.ReceivedEntriesBenchmarks"
    units="BenchmarksMet" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    For each of a set of benchmark percentages, we record that benchmark when
    the async iterator first receives from the database at least that percentage
    of queued entries. Recorded in
    `SharedStorage::IterationSource::DidReadEntries()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.BatchUpdateMethod.HasLockOption"
    enum="BooleanPresent" expires_after="2025-10-19">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Records whether or not a shared storage 'batch update' method specifies to
    acquire a lock. Recorded upon execution after early permission checks.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Database.Destruction"
    enum="BooleanDestroyed" expires_after="2025-10-19">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Whether destruction was successful after a catastrophic error that occurred
    in Shared Storage. Recorded by
    SharedStorageDatabase::DatabaseErrorCallback() just after the SQLite
    database called RazeAndClose() and then, if it was file-backed,
    SharedStorageDatabase attempted to delete the file.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Database.Error" enum="SqliteErrorCode"
    expires_after="2025-06-08">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Errors that occur in Shared Storage. Recorded by
    SharedStorageDatabase::DatabaseErrorCallback() just before the SQLite
    database determines whether the error is catastrophic and handles it
    accordingly.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.BytesUsed.PerOrigin.Max"
    units="B" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Maximum number of bytes stored as key-value pairs in `values_mapping` for
    any single origin, according to the `per_origin_mapping` of
    `SharedStorageDatabase`. Measured only for file-backed databases whose
    `per_origin_mapping` table contains at least one origin row. Recorded in
    `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.BytesUsed.PerOrigin.Median"
    units="B" expires_after="2025-06-08">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Median number of bytes stored as key-value pairs in `values_mapping` for any
    single origin, according to the `per_origin_mapping` of
    `SharedStorageDatabase`. Measured only for file-backed databases whose
    `per_origin_mapping` table contains at least one origin row. Recorded in
    `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.BytesUsed.PerOrigin.Min"
    units="B" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Minimum number of bytes stored as key-value pairs in `values_mapping` for
    any single origin, according to the `per_origin_mapping` of
    `SharedStorageDatabase`. Measured only for file-backed databases whose
    `per_origin_mapping` table contains at least one origin row. Recorded in
    `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.BytesUsed.PerOrigin.Q1"
    units="B" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Lower quartile of the per-origin bytes used values, as listed in the
    `per_origin_mapping` of `SharedStorageDatabase` (calculated through Method 1
    from https://en.wikipedia.org/wiki/Quartile). Measured only for file-backed
    databases whose `per_origin_mapping` table contains at least one origin row.
    Recorded in `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()`
    when initialization is successful.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.BytesUsed.PerOrigin.Q3"
    units="B" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Upper quartile of the per-origin bytes used values, as listed in the
    `per_origin_mapping` of `SharedStorageDatabase` (calculated through Method 1
    from https://en.wikipedia.org/wiki/Quartile). Measured only for file-backed
    databases whose `per_origin_mapping` table contains at least one origin row.
    Recorded in `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()`
    when initialization is successful.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Database.FileBacked.BytesUsed.Total.KB"
    units="KB" expires_after="2025-06-08">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Sum across all origins of the per-origin bytes used values, as listed in the
    `per_origin_mapping` of `SharedStorageDatabase`. Measured only for
    file-backed databases whose `per_origin_mapping` table contains at least one
    origin row. Recorded in `SharedStorageDatabase::InitImpl()` via
    `LogInitHistograms()` when initialization is successful. Contrast with
    &quot;Storage.SharedStorage.Database.FileBacked.FileSize.*&quot;;
    &quot;Storage.SharedStorage.Database.FileBacked.FileSize.*&quot; records the
    total storage space used for the entire file, as formatted correctly for
    Chrome's embedding of SQLite, whereas
    &quot;Storage.SharedStorage.Database.FileBacked.BytesUsed.Total&quot; only
    records the total bytes in the raw `key` and `value` columns of
    `values_mapping` (under the assumption that `per_origin_mapping` has
    remained in sync).
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Database.FileBacked.FileSize.GB"
    units="GB" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    The size in gigabytes of the SQL database file backing
    `SharedStorageDatabase`. Measured only for file-backed databases of size at
    least one gigabyte. Recorded in `SharedStorageDatabase::InitImpl()` via
    `LogInitHistograms()` when initialization is successful.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Database.FileBacked.FileSize.KB"
    units="KB" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    The size in kilobytes of the SQL database file backing
    `SharedStorageDatabase`. Measured for file-backed databases only. Recorded
    in `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.NumEntries.PerOrigin.Max"
    units="Entries" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Maximum origin length, according to the `per_origin_mapping` of
    `SharedStorageDatabase`. Measured only for file-backed databases whose
    `per_origin_mapping` table contains at least one origin row. Recorded in
    `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.NumEntries.PerOrigin.Median"
    units="Entries" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Median origin length, according to the `per_origin_mapping` of
    `SharedStorageDatabase`. Measured only for file-backed databases whose
    `per_origin_mapping` table contains at least one origin row. Recorded in
    `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.NumEntries.PerOrigin.Min"
    units="Entries" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Minimum origin length, according to the `per_origin_mapping` of
    `SharedStorageDatabase`. Measured only for file-backed databases whose
    `per_origin_mapping` table contains at least one origin row. Recorded in
    `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.NumEntries.PerOrigin.Q1"
    units="Entries" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Lower quartile of the origin lengths, as listed in the `per_origin_mapping`
    of `SharedStorageDatabase` (calculated through Method 1 from
    https://en.wikipedia.org/wiki/Quartile). Measured only for file-backed
    databases whose `per_origin_mapping` table contains at least one origin row.
    Recorded in `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()`
    when initialization is successful.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Database.FileBacked.NumEntries.PerOrigin.Q3"
    units="Entries" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Upper quartile of the origin lengths, as listed in the `per_origin_mapping`
    of `SharedStorageDatabase` (calculated through Method 1 from
    https://en.wikipedia.org/wiki/Quartile). Measured only for file-backed
    databases whose `per_origin_mapping` table contains at least one origin row.
    Recorded in `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()`
    when initialization is successful.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Database.FileBacked.NumEntries.Total"
    units="Entries" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    The total count of entries in the `values_mapping` of
    `SharedStorageDatabase`. Measured for file-backed databases only. Recorded
    in `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Database.FileBacked.NumOrigins"
    units="Origins" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Number of origins in the `per_origin_mapping` of `SharedStorageDatabase`.
    Measured only for file-backed databases whose `per_origin_mapping` table
    contains at least one origin row. Recorded in
    `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Database.IsFileBacked"
    enum="BooleanIsFileBacked" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Whether or not the database is file-backed. Recorded in
    `SharedStorageDatabase::InitImpl()` via `LogInitHistograms()` when
    initialization is successful.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Database.Timing.OpenImpl" units="ms"
    expires_after="2025-04-06">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from start to end of the call to
    `components::SharedStorageDatabase::OpenImpl()`. Recorded in
    `components::SharedStorageDatabase::OpenImpl()``.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.AddModule" units="ms"
    expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from start of the call to
    `blink::SharedStorageWorklet::AddModule()` to when the callback has
    successfully completed. Does not measure the timing of calls that end in an
    error. Recorded in the lambda function callback for
    `blink::SharedStorageWorklet::AddModule()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.Append" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time taken for `sharedStorage.append()` to resolve when called
    from a Window. Does not measure the timing of calls that end in an error.
    Recorded at the moment the promise resolves.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.BatchUpdate" units="ms"
    expires_after="2025-06-03">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time taken for `sharedStorage.batchUpdate()` to resolve when
    called from a Window. Does not measure the timing of calls that end in an
    error. Recorded at the moment the promise resolves.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.Clear" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time taken for `sharedStorage.clear()` to resolve when called
    from a Window. Does not measure the timing of calls that end in an error.
    Recorded at the moment the promise resolves.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.Delete" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from start of the call to `blink::SharedStorage::Delete()`
    to when the callback has successfully completed. Does not measure the timing
    of calls that end in an error. Recorded in
    `blink::SharedStorage::OnVoidOperationFinished()` via
    `LogTimingHistogramForVoidOperation()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.Get" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from start of the call to `blink::SharedStorage::get()` to
    when the callback has successfully completed. Does not measure the timing of
    calls that end in an error. Recorded in the OnceCallback executed after the
    get operation completes.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.Run" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from start of the call to `blink::SharedStorage::Run()` to
    when the callback has successfully completed. Does not measure the timing of
    calls that end in an error. Recorded in
    `blink::SharedStorage::OnVoidOperationFinished()` via
    `LogTimingHistogramForVoidOperation()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.Run.ExecutedInWorklet"
    units="ms" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from when the end of the call to
    `SharedStorageWorkletHost::RunOperationOnWorklet()` to the end of
    `SharedStorageWorkletHost::OnRunOperationOnWorkletFinished()`. Recorded in
    `SharedStorageWorkletHost::OnRunOperationOnWorkletFinished()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.SelectURL" units="ms"
    expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from start of the call to
    `blink::SharedStorage::SelectURL()` to when the callback has successfully
    completed. Does not measure the timing of calls that end in an error.
    Recorded in the lambda function callback for
    `blink::SharedStorage::SelectURL()`.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Document.Timing.SelectURL.ExecutedInWorklet"
    units="ms" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from when the mojo callback runs in
    `SharedStorageWorkletHost::RunURLSelectionOperationOnWorklet()` to the end
    of
    `SharedStorageWorkletHost::OnRunURLSelectionOperationOnWorkletFinished()`.
    Only measured for calls where the mojo callback has run with a parameter
    `success` equal to true. Recorded in
    `SharedStorageWorkletHost::OnRunURLSelectionOperationOnWorkletFinished()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Document.Timing.Set" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time taken for `sharedStorage.set()` to resolve when called
    from a Window. Does not measure the timing of calls that end in an error.
    Recorded at the moment the promise resolves.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.DocumentServiceBind.IsSecureFrame"
    enum="BooleanSecure" expires_after="2025-04-06">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Records whether the frame is secure when the shared storage document mojom
    service is initialized.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.HeaderObserver.CreatedOpaqueOriginForPrefsCheck"
    enum="Boolean" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Tracks whether or not it was necessary to create a new opaque origin to use
    as the top-frame origin for the call to
    `ContentBrowserClient::IsSharedStorageAllowed()` from
    `SharedStorageHeaderObserver::IsSharedStorageAllowedBySiteSettings()`.
    Recorded in
    `SharedStorageHeaderObserver::IsSharedStorageAllowedBySiteSettings()`.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.HeaderObserver.PermissionsPolicyDoubleCheckStatus"
    enum="SharedStorageHeaderObserverPermissionsPolicyDoubleCheckStatus"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Whether or not a double-check of `PermissionsPolicy` was able to run in the
    `SharedStorageHeaderObserver`, and if so, what the result was (enabled or
    disabled), as well as if not, why not. (Note that the initial
    `PermissionsPolicy` check occurs before the request is sent to the network
    service, whereas this double-check occurs after the response is received.)
    Recorded in `SharedStorageHeaderObserver::HeaderReceived()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.InterestGroups.InBrowserRetrievalTime"
    units="ms" expires_after="2025-04-17">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Time taken to retrieve interest groups from the browser's cache or database
    for interestGroups(). Only measures when interestGroups() passes early
    permission checks.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.InterestGroups.ResultStatus"
    enum="SharedStorageInterestGroupsResultStatus" expires_after="2025-04-17">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>The success or the failure reason for interestGroups().</summary>
</histogram>

<histogram name="Storage.SharedStorage.InterestGroups.TimeToResolve" units="ms"
    expires_after="2025-04-17">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>Resolving time for successful interestGroups() calls.</summary>
</histogram>

<histogram
    name="Storage.SharedStorage.OnDataClearedForOrigin.DataDurationInDays"
    units="days" expires_after="2025-09-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Records the duration (in days, capped at 60) that Shared Storage data
    persists for an origin, from initial storage to clearance (user or
    expiration), excluding site-initiated deletions. Recorded at the point of
    data clearance.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.OnShutdown.HasSqlErrors" enum="Boolean"
    expires_after="2025-10-31">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Whether or not any SQL errors have occurred in Shared Storage. Recorded by
    SharedStorageManager::RecordShutdownMetrics() when the StoragePartitionImpl
    is destroyed.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.OnShutdown.NumSqlErrors" units="Errors"
    expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Count of SQL errors that have occurred in Shared Storage. Recorded by
    SharedStorageManager::RecordShutdownMetrics() when the StoragePartitionImpl
    is destroyed.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.OnShutdown.RecoveryFromInitFailureAttempted"
    enum="BooleanAttempted" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Whether or not the SharedStorageManager tried to recover from
    SharedStorageDatabase::InitStatus::kInitFailure. Recorded by
    SharedStorageManager::RecordShutdownMetrics() when the StoragePartitionImpl
    is destroyed.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.OnShutdown.RecoveryOnDiskAttempted"
    enum="BooleanAttempted" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Whether or not the SharedStorageManager tried to recover from
    SharedStorageDatabase::InitStatus::kInitFailure on disk. Recorded by
    SharedStorageManager::RecordShutdownMetrics() when the StoragePartitionImpl
    is destroyed.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Run.DataDeserialization.Time" units="ms"
    expires_after="2025-10-26">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time to deserialize the data during `run()`. Only measures when
    the deserialization succeeds.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Run.DataSerialization.SizeKB" units="KB"
    expires_after="2025-10-26">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the size of the serialized data in KB upon successful completion of
    each serialization during `run()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Run.DataSerialization.Time" units="ms"
    expires_after="2025-10-26">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time to serialize the data parameter during `run()`. Only
    measures when the serialization succeeds.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.SelectURL.DataDeserialization.Time"
    units="ms" expires_after="2025-08-24">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time to deserialize the data during `selectURL()`. Only
    measures when the deserialization succeeds.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.SelectURL.DataSerialization.SizeKB"
    units="KB" expires_after="2025-10-26">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the size of the serialized data in KB upon successful completion of
    each serialization during `selectURL()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.SelectURL.DataSerialization.Time"
    units="ms" expires_after="2025-10-26">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time to serialize the data parameter during `selectURL()`. Only
    measures when the serialization succeeds.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.SelectURL.UrlsLength" units="count"
    expires_after="2025-10-26">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures length of the `urls` parameter in `selectURL()`. Recorded when
    `selectURL()` is invoked and after successful length validation. Measures
    numbers up to 8 precisely; numbers of 9 or more are grouped into the
    overflow bucket 9.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Timing.UrlMappingDuringNavigation"
    units="ms" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time for a URN to resolve during a navigation. Recorded for
    every navigation to a URN that originates from sharedStorage.selectURL().
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.UpdateMethod.HasLockOption"
    enum="BooleanPresent" expires_after="2025-10-19">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Records whether or not a shared storage individual update method (set,
    append, delete, clear) specifies to acquire a lock. Recorded upon execution
    after early permission checks.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Context.IsDefined"
    enum="Boolean" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Records true if a given call to `sharedStorage.context()` returns a defined
    string, false if the call to `sharedStorage.context()` returns undefined.
    Recorded in the worklet service in the call to `SharedStorage::Context()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.DestroyedStatus"
    enum="SharedStorageWorkletDestroyedStatus" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Whether or not the worklet entered keep-alive phase before destruction, and
    if it did enter keep-alive, whether the keep-alive was terminated by
    operations finishing or due to timeout. Recorded in the destructor of
    `SharedStorageWokletHost`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Error.Type"
    enum="SharedStorageWorkletErrorType" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Type of error encountered by the SharedStorageWorklet in either
    `addModule()`, `run()`, or `selectURL()`. Recorded after an exception is
    thrown, after a callback is run with `/*success=*/false`, after a call to
    `ReportBadMessage()`, and/or just before the rejected promise is returned,
    via the utility method `LogWorkletError()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.NavigatorLocksInvoked"
    enum="Boolean" expires_after="2025-10-19">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Records whether or not a shared storage worklet invokes `navigator.locks`.
    Recorded when the worklet is destroyed.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.NumPerPage"
    units="WorkletsCreated" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the number of `SharedStorageWorkletHost`'s created by a given page.
    Recorded in
    `SharedStoragePageLoadMetricsObserver::RecordSessionEndHistogram()` when
    metrics are flushed due to the pageload completing or the app entering the
    background.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.SelectURL.BudgetStatus"
    enum="SharedStorageSelectUrlBudgetStatus" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Whether or not the `selectURL()` call had sufficient budget, and if it had
    insufficient budget, which budget check failed. Recorded in
    `SharedStorageWorkletHost::OnRunURLSelectionOperationOnWorkletFinished()`
    via `LogSharedStorageSelectURLBudgetStatus()`. Recorded for `selectURL()`
    calls that succeed and for calls that fail due to insufficient budget.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.SelectURL.CallsPerPage"
    units="SelectURLCallsPerPage" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Number of calls made to `selectURL()` by frames on a given page. Recorded in
    `SharedStoragePageLoadMetricsObserver::RecordSessionEndHistograms()`. When
    `SharedStoragePageLoadMetricsObserver` exists, this histogram is recorded
    for all `selectURL()` calls that are forwarded to the browser process from
    the renderer, i.e. those that invoke
    `SharedStorageWorkletHost::SelectURL()`, except for those where
    `SharedStorageWorkletHost`'s pointer to its associated `PageImpl` is
    nullptr.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Worklet.Timing.AbsoluteUsefulResourceDuration"
    units="ms" expires_after="2025-10-26">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the total duration that a Shared Storage worklet is actively
    processing operations (i.e, from the worklet's creation until either its
    last operation completes or it is destroyed). Recorded when the worklet is
    destroyed.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.Append" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time taken for `sharedStorage.append()` to resolve when called
    from a SharedStorageWorklet. Does not measure the timing of calls that end
    in an error. Recorded at the moment the promise resolves.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.BatchUpdate" units="ms"
    expires_after="2025-06-03">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time taken for `sharedStorage.batchUpdate()` to resolve when
    called from a SharedStorageWorklet. Does not measure the timing of calls
    that end in an error. Recorded at the moment the promise resolves.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.Clear" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time taken for `sharedStorage.clear()` to resolve when called
    from a SharedStorageWorklet. Does not measure the timing of calls that end
    in an error. Recorded at the moment the promise resolves.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.Delete" units="ms"
    expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time taken for `sharedStorage.delete()` to resolve when called
    from a SharedStorageWorklet. Does not measure the timing of calls that end
    in an error. Recorded at the moment the promise resolves.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.Entries.Next" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from the start of the call to
    `SharedStorage::IterationSource::GetNextIterationResult()` to just before
    the promise is returned, for a key-value pair iterator. Includes only calls
    where promises are successfully resolved. Recorded in
    `SharedStorage::IterationSource::TryResolvePromise()` via
    `LogElapsedTime()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.Get" units="ms"
    expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from start of the call to
    `shared_storage_worklet::SharedStorage::Get()` to when the callback has
    successfully completed. Does not measure the timing of calls that end in an
    error. Recorded in
    `shared_storage_worklet::SharedStorage::OnStringRetrievalOperationFinished()`.
  </summary>
</histogram>

<histogram
    name="Storage.SharedStorage.Worklet.Timing.KeepAliveEndedDueToOperationsFinished.KeepAliveDuration"
    units="ms" expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from entering keep alive until the start of the call to
    `FinishKeepAlive()` for keep-alives that are terminated when operations end
    (i.e. excludes worklets whose keep-alives are terminated via timeout).
    Recorded in `SharedStorageWokletHost::FinishKeepAlive()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.Keys.Next" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from the start of the call to
    `SharedStorage::IterationSource::GetNextIterationResult()` to just before
    the promise is returned, for a key iterator. Includes only calls where
    promises are successfully resolved. Recorded in
    `SharedStorage::IterationSource::TryResolvePromise()` via
    `LogElapsedTime()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.Length" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from start of the call to
    `shared_storage_worklet::SharedStorage::Length()` to when the callback has
    successfully completed. Does not measure the timing of calls that end in an
    error. Recorded in
    `shared_storage_worklet::SharedStorage::OnLengthOperationFinished()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.RemainingBudget"
    units="ms" expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from start of the call to
    `shared_storage_worklet::SharedStorage::RemainingBudget()` to when the
    callback has successfully completed. Does not measure the timing of calls
    that end in an error. Recorded in
    `shared_storage_worklet::SharedStorage::OnVoidOperationFinished()` via
    `LogTimingHistogramForVoidOperation()`.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.Set" units="ms"
    expires_after="2025-10-12">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time taken for `sharedStorage.set()` to resolve when called
    from a SharedStorageWorklet. Does not measure the timing of calls that end
    in an error. Recorded at the moment the promise resolves.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.UsefulResourceDuration"
    units="%" expires_after="2025-09-28">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the percentage of a shared storage worklet's lifetime that it is
    actively processing operations (i.e., from the worklet's creation until
    either its last operation completes or it is destroyed). If the worklet has
    zero lifetime, we record 100. Recorded when the worklet is destroyed.
  </summary>
</histogram>

<histogram name="Storage.SharedStorage.Worklet.Timing.Values.Next" units="ms"
    expires_after="2025-08-10">
  <owner>cammie@chromium.org</owner>
  <owner>yaoxia@chromium.org</owner>
  <owner>chrome-ads-histograms@google.com</owner>
  <summary>
    Measures the time from the start of the call to
    `SharedStorage::IterationSource::GetNextIterationResult()` to just before
    the promise is returned, for a value iterator. Includes only calls where
    promises are successfully resolved. Recorded in
    `SharedStorage::IterationSource::TryResolvePromise()` via
    `LogElapsedTime()`.
  </summary>
</histogram>

<histogram name="Storage.StoragePressure.Bubble"
    enum="StoragePressureBubbleUserAction" expires_after="2025-09-01">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    How did the user interact with the StoragePressure Bubble? Ignored means the
    user did not click on the positive button before the bubble is closed
    (either manually closed or when the browser closes).
  </summary>
</histogram>

<histogram name="Storage.SyncFileSystem.FileSyncAction"
    enum="SyncFileSystemSyncAction" expires_after="2025-05-28">
  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Records when a SyncFileSystem change event is fired due to the file being
    updated remotely by the background sync service. Recorded right before
    sending the event to the app.
  </summary>
</histogram>

<histogram name="websql.OpenDatabase" enum="BooleanSecure"
    expires_after="never">
<!-- expires-never: core storage metric; consumed in separate dashboard (go/chrome-storage-dashboard) -->

  <owner>ayui@chromium.org</owner>
  <owner>chrome-owp-storage@google.com</owner>
  <summary>
    Counts the number of WebSQL databases opened for secure vs insecure origins.
  </summary>
</histogram>

</histograms>

</histogram-configuration>
