// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module connectors_internals.mojom;

// Set of values to represent whether the key manager is supported and, if so,
// fully initialized or not.
enum KeyManagerInitializedValue {
  UNSUPPORTED = 0,
  KEY_LOADED = 1,
  NO_KEY = 2,
};

// Trust level of the signing key which is equivalent to the key provider type.
enum KeyTrustLevel {
  UNSPECIFIED = 0,
  HW = 1,
  OS = 2,
};

// Type of the signing key, equivalent to the algorithm used for its generation.
enum KeyType {
  UNKNOWN = 0,
  RSA = 1,
  EC = 2,
};

// Represents the possible permanent failures encountered in the key creation
// flow.
enum KeyManagerPermanentFailure {
  UNSPECIFIED = 0,
  CREATION_UPLOAD_CONFLICT = 1,
  INSUFFICIENT_PERMISSIONS = 2,
  OS_RESTRICTION = 3,
  INVALID_INSTALLATION = 4,
};

// Wrapper for an optional int32.
struct Int32Value {
  // The int32 value.
  int32 value;
};

struct LoadedKeyInfo {
  // Loaded key's trust level (e.g. is it a TPM key or not).
  KeyTrustLevel trust_level;

  // Key's algorithm (e.g. RSA, EC).
  KeyType key_type;

  // Base64-encoded SHA-256 hash value for the loaded key's SPKI.
  string encoded_spki_hash;

  // HTTP response code of the sync key request. Can be unset if the response
  // has not yet been received.
  Int32Value? sync_key_response_code;
};

struct KeyInfo {
  // Whether the key manager has loaded a key successfully.
  KeyManagerInitializedValue is_key_manager_initialized;

  // Metadata about a key loaded by the key manager. Will only contain a value
  // if `is_key_manager_initialized` is `KEY_LOADED`.
  LoadedKeyInfo? loaded_key_info;

  // The permanent failure type, if any.
  KeyManagerPermanentFailure permanent_failure;
};

struct DeviceTrustState {
  // Whether the connector is enabled or not.
  bool is_enabled;

  // Information around the state of the device trust signing key.
  KeyInfo key_info;

  // Json string of the device signals.
  string signals_json;
};

// Browser interface for the page. Consists of calls for data and hooks for
// interactivity.
interface PageHandler {
  // Get state information about the Device Trust connector.
  GetDeviceTrustState() => (DeviceTrustState state);
};
