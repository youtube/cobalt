#!/usr/bin/env python3
#
# Copyright 2024 The Cobalt Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""Simple Evergreen packager, stopgap until merged into GN."""

import os
import shutil
import sys

_TEST_APPS = [
    'libone_app_only_sandbox.so', 'libcrash_sandbox.so', 'libnoop_sandbox.so',
    'libone_app_only_sandbox.lz4', 'libcrash_sandbox.lz4', 'libnoop_sandbox.lz4'
]

out_dir = sys.argv[1]  # out directory generated by ninja
package_dir = sys.argv[2]  # package directory to be generated
bootloader_out_dir = sys.argv[3]

# Creates Evergreen package directory
os.makedirs(package_dir, exist_ok=True)
shutil.copy2(
    os.path.join(out_dir, 'install', 'lib', 'libcobalt.so'),
    os.path.join(package_dir, 'libcobalt.so'))
shutil.copy2(
    os.path.join(out_dir, 'install', 'lib', 'libcobalt.lz4'),
    os.path.join(package_dir, 'libcobalt.lz4'))
shutil.copytree(
    os.path.join(out_dir, 'install', 'usr', 'share', 'cobalt'),
    os.path.join(package_dir, 'content'))
shutil.copy2(
    os.path.join(out_dir, 'install', 'usr', 'share', 'manifest.json'),
    os.path.join(package_dir, 'manifest.json'))
os.makedirs(os.path.join(package_dir, 'symbols'), exist_ok=True)
shutil.copy2(
    os.path.join(out_dir, 'libcobalt.so'),
    os.path.join(package_dir, 'symbols', 'libcobalt.so'))
for test_app in _TEST_APPS:
  test_app_file = os.path.join(out_dir, 'install', 'lib', test_app)
  if os.path.exists(test_app_file):
    shutil.copy2(test_app_file, os.path.join(package_dir, test_app))
shutil.copy2(
    os.path.join(out_dir, 'gen', 'build_info.json'),
    os.path.join(package_dir, 'build_info.json'))
shutil.copy2(
    os.path.join(out_dir, 'gen', 'libraries.tsv'),
    os.path.join(package_dir, 'libraries.tsv'))

if bootloader_out_dir is not None:
  # Handle Raspi EG.
  if os.path.exists(os.path.join(bootloader_out_dir, 'loader_app')):
    shutil.copy2(
        os.path.join(bootloader_out_dir, 'loader_app'),
        os.path.join(package_dir, 'loader_app'))
  # Handle Android EG.
  if os.path.exists(os.path.join(bootloader_out_dir, 'loader_app.apk')):
    shutil.copy2(
        os.path.join(bootloader_out_dir, 'loader_app.apk'),
        os.path.join(package_dir, 'loader_app.apk'))
  if os.path.exists(
      os.path.join(bootloader_out_dir, 'native_target', 'crashpad_handler')):
    os.makedirs(os.path.join(package_dir, 'native_target'), exist_ok=True)
    shutil.copy2(
        os.path.join(bootloader_out_dir, 'native_target', 'crashpad_handler'),
        os.path.join(package_dir, 'native_target', 'crashpad_handler'))
  if os.path.exists(
      os.path.join(bootloader_out_dir, 'install', 'content', 'fonts')):
    os.makedirs(
        os.path.join(package_dir, 'install', 'content', 'fonts'), exist_ok=True)
    shutil.copytree(
        os.path.join(bootloader_out_dir, 'install', 'content', 'fonts'),
        os.path.join(package_dir, 'content', 'fonts'),
        dirs_exist_ok=True)
