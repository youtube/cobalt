include_rules = [
  "+gin/public",
  "+gin/v8_initializer.h",
  "+v8/include",

  # The cobalt_shell is the canonical sample embedder, so it only uses
  # content's public API.
  "+content/public",

  # Network service public library.
  "+services/network/public/cpp",

  # The cobalt_shell is an embedder so it must work with resource bundles.
  "+ui/base/l10n",
  "+ui/base/resource",

  # Shell resources
  "+grit/shell_resources.h",

  # The cobalt_shell for aura must work with the views and aura
  "+ui/aura",
  "+ui/color",
  "+ui/platform_window",
  "+ui/views",

  # Cobalt Shell can depend on more components than content/, since:
  #   1) it's an example browser
  #   2) it's not linked into the content library
  "+components/crash",
  "+components/custom_handlers",
  "+components/download",
  "+components/embedder_support",
  "+components/keyed_service/core",
  "+components/network_session_configurator/browser",
  "+components/performance_manager",
  "+components/permissions",
  "+components/url_formatter",
  "+components/viz/common/resources",
  "+components/viz/common/switches.h",
  "+services/test/echo",

  # Separating cobalt shell and web test code. Only narrow parts of content
  # shell may access and inject web test code at runtime.
  "-content/web_test/browser",
  "-content/web_test/common",
  "-content/web_test/renderer",

  # Cobalt Shell is an independent shell that does not depend on Content Shell
  "-content/shell",
]

specific_include_rules = {
  "shell_views\.cc": [
    "+ui/wm/test"
  ],

  # Cobalt Shell for this platform has UI for starting traces.
  "shell_platform_delegate_ios.mm": [
    "+services/tracing/public",
  ],
}
