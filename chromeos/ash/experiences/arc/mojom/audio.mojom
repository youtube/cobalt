// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Next MinVersion: 6

module arc.mojom;

// Use same switch values as kernel switch events.
[Extensible]
enum AudioSwitch {
  SW_HEADPHONE_INSERT = 0x02,
  SW_MICROPHONE_INSERT = 0x04
};

// Use same values as chromeos/ash/components/audio/audio_device.h
[Extensible]
enum AudioDeviceType {
  HEADPHONE,
  MIC,
  USB,
  BLUETOOTH,
  BLUETOOTH_NB_MIC,
  HDMI,
  INTERNAL_SPEAKER,
  INTERNAL_MIC,
  FRONT_MIC,
  REAR_MIC,
  KEYBOARD_MIC,
  HOTWORD,
  LINEOUT,
  POST_MIX_LOOPBACK,
  POST_DSP_LOOPBACK,
  ALSA_LOOPBACK,
  [Default] OTHER
};

// Next method ID:2
interface AudioHost {
  // Tells the host to show the volume controls.
  ShowVolumeControls@0();

  // Request that the volume be changed to |volume|.
  // This is a privileged API and should only be used on allowlisted cases.
  // |percent| is of the range [0, 100].
  [MinVersion=3] OnSystemVolumeUpdateRequest@1(int32 percent);
};

// Deprecated method IDs: 1
// Next method ID: 6
interface AudioInstance {
  // Establishes full-duplex communication with the host.
  [MinVersion=4] Init@3(pending_remote<AudioHost> host_remote) => ();

  // Notify plug states of headphone, microphone, etc.  Each switch state is
  // represented by the corresponding bit, if the bit is set then the switch
  // is plugged/inserted.
  NotifySwitchState@0(uint32 state);

  // Notify volume and mute state.
  // volume ranges from 0 to 100.
  // muted == true if audio is muted.
  [MinVersion=2] NotifyVolumeState@2(uint32 volume, bool muted);

  // Notify whether the spatial audio is currently enabled or not.
  [MinVersion=5] NotifySpatialAudioState@4(bool enabled);

  // Notify the active audio output device information.
  [MinVersion=5] NotifyOutputDeviceInfo@5(AudioDeviceType device_type);
};
