#!/usr/bin/env python
#
# Copyright 2022 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""Creates config files for building libwayland."""

import os
import re
import shutil
import subprocess
import tempfile


MESON = ['meson']

DEFAULT_BUILD_ARGS = [
    '-Ddocumentation=false',
    '-Dtests=false',
]


def GetAbsPath(relative_path):
    return os.path.join(os.path.abspath(os.path.dirname(__file__)), relative_path)


def PrintAndCheckCall(argv, *args, **kwargs):
    print('\n-------------------------------------------------\nRunning %s' %
          ' '.join(argv))
    c = subprocess.check_call(argv, *args, **kwargs)


def CallMesonGenerator(build_dir):
    PrintAndCheckCall(
        MESON + DEFAULT_BUILD_ARGS + [build_dir],
        cwd=GetAbsPath('src'),
        env=os.environ)


def CopyFileToDestination(file, src_dir, dest_dir):
    if not os.path.exists(dest_dir):
        os.makedirs(dest_dir)

    shutil.copy(os.path.join(src_dir, file), dest_dir)
    print("Copied %s to %s from %s" % (file, dest_dir, src_dir))

def GetProjectVersionFromMeson(filename):
    with open(filename) as f:
        return re.search(
                'project\(.*?version\s?:\s?\'(?P<version>[\d\.]+)\'.*?\)',
                f.read(), re.DOTALL).group("version")
    return None

def GetPackageVersionFromMeson(filename, module):
    with open(filename) as f:
        result = re.search(
                f'pkgconfig\.generate\(.*?name\s?:\s?\'{module}\'.*?\)',
                f.read(), re.DOTALL)
        if result:
            return re.search('version\s?:\s\'(?P<version>[\d\.]+)',
                             result.group(0)).group('version')
    return None

def UpdateWaylandVersionGni():
    versions = {
        'wayland': GetProjectVersionFromMeson('src/meson.build'),
        'wayland_egl': GetPackageVersionFromMeson('src/egl/meson.build',
                                                  'wayland-egl')
    }
    with open('wayland_version.gni', 'w') as f:
        f.write("# DO NOT MODIFY THIS FILE DIRECTLY!\n"
                "# IT IS GENERATED BY generate_configs.py\n"
                "# The version information is used when use_system_libwayland\n"
                "# is true to check system wayland package version meets\n"
                "# at least the version of third-party/wayland so that it won't\n"
                "# make any compile error with chromium\n")
        for pkg, version in versions.items():
            if not version:
                raise Exception(f"Failed to get {pkg} version")
            f.write(f"{pkg}_version = \"{version}\"\n")
    print("Updated wayland_version.gni")

def main():
    # Creates a directory that will be used by meson to generate build configs.
    temp_dir = tempfile.mkdtemp()

    # Calls meson for //third_party/wayland/src and generates build files.
    CallMesonGenerator(temp_dir)
    # Copies config.h to //third_party/wayland/include
    CopyFileToDestination('config.h', temp_dir, GetAbsPath('include'))
    # Copies wayland-version.h to //third_party/wayland/include/src
    CopyFileToDestination('wayland-version.h', temp_dir + '/src', GetAbsPath('include/src'))
    # Update wayland_version.gni from meson.build file
    UpdateWaylandVersionGni()

    # Removes the directory we used for meson config.
    shutil.rmtree(temp_dir)


if __name__ == '__main__':
    main()
