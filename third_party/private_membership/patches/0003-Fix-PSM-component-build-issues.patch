diff --git a/internal/aes_ctr_256_with_fixed_iv.h b/internal/aes_ctr_256_with_fixed_iv.h
index 2fc9d52416066..bd60cdcbbb3f8 100644
--- a/internal/aes_ctr_256_with_fixed_iv.h
+++ b/internal/aes_ctr_256_with_fixed_iv.h
@@ -20,6 +20,7 @@
 #include "absl/strings/string_view.h"
 #include <openssl/evp.h>
 #include "third_party/shell-encryption/src/statusor.h"
+#include "third_party/private_membership/base/private_membership_export.h"
 
 namespace private_membership {
 
@@ -30,7 +31,7 @@ namespace private_membership {
 // Security: This cipher does not provide probabilistic encryption or
 // authentication of the message. This should only be used in the scenario where
 // each key will encrypt at most one message.
-class AesCtr256WithFixedIV {
+class PRIVATE_MEMBERSHIP_EXPORT AesCtr256WithFixedIV {
  public:
   // Create a cipher with the input key.
   //
diff --git a/internal/crypto_utils.h b/internal/crypto_utils.h
index c755bd7f2b841..2cf93e6ca65f3 100644
--- a/internal/crypto_utils.h
+++ b/internal/crypto_utils.h
@@ -21,6 +21,7 @@
 #include "third_party/private_membership/src/private_membership.pb.h"
 #include "absl/strings/string_view.h"
 #include "third_party/shell-encryption/src/statusor.h"
+#include "third_party/private_membership/base/private_membership_export.h"
 
 namespace private_membership {
 
@@ -28,31 +29,38 @@ namespace private_membership {
 //
 // The returned bytes will be max_byte_length + 4 bytes long, where the first
 // four bytes represents the length of the original bytes.
-::rlwe::StatusOr<std::string> Pad(absl::string_view bytes, int max_byte_length);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<std::string> Pad(
+    absl::string_view bytes,
+    int max_byte_length);
 
 // Unpad bytes padded with the `Pad` function.
-::rlwe::StatusOr<std::string> Unpad(absl::string_view bytes);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<std::string> Unpad(
+    absl::string_view bytes);
 
-std::string HashEncryptedId(absl::string_view encrypted_id,
-                            private_join_and_compute::Context* ctx);
+PRIVATE_MEMBERSHIP_EXPORT std::string HashEncryptedId(
+    absl::string_view encrypted_id,
+    private_join_and_compute::Context* ctx);
 
-::rlwe::StatusOr<std::string> GetValueEncryptionKey(
-    absl::string_view encrypted_id, private_join_and_compute::Context* ctx);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<std::string> GetValueEncryptionKey(
+    absl::string_view encrypted_id,
+    private_join_and_compute::Context* ctx);
 
 // Encrypts the value, first padding it to. The result will be
 // max_value_byte_length+4 bytes long, the first 4 bytes being an encryption of
 // the length of the original value.
 //
 // Returns an error if the value is longer than max_value_byte_length.
-::rlwe::StatusOr<std::string> EncryptValue(absl::string_view encrypted_id,
-                                           absl::string_view value,
-                                           uint32_t max_value_byte_length,
-                                           private_join_and_compute::Context* ctx);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<std::string> EncryptValue(
+    absl::string_view encrypted_id,
+    absl::string_view value,
+    uint32_t max_value_byte_length,
+    private_join_and_compute::Context* ctx);
 
 // Decrypt the encrypted_value using a key derived from the encrypted_id.
-::rlwe::StatusOr<std::string> DecryptValue(absl::string_view encrypted_id,
-                                           absl::string_view encrypted_value,
-                                           private_join_and_compute::Context* ctx);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<std::string> DecryptValue(
+    absl::string_view encrypted_id,
+    absl::string_view encrypted_value,
+    private_join_and_compute::Context* ctx);
 
 }  // namespace private_membership
 
diff --git a/internal/encrypted_bucket_id.h b/internal/encrypted_bucket_id.h
index d48460b21363d..44f3dbe4d41a5 100644
--- a/internal/encrypted_bucket_id.h
+++ b/internal/encrypted_bucket_id.h
@@ -20,12 +20,13 @@
 #include "absl/hash/hash.h"
 #include "absl/strings/string_view.h"
 #include "third_party/shell-encryption/src/statusor.h"
+#include "third_party/private_membership/base/private_membership_export.h"
 
 namespace private_membership {
 namespace rlwe {
 
 // Concrete data type representing the encrypted bucket id.
-class EncryptedBucketId {
+class PRIVATE_MEMBERSHIP_EXPORT EncryptedBucketId {
  public:
   // Creates the object from raw data.
   //
diff --git a/internal/hashed_bucket_id.h b/internal/hashed_bucket_id.h
index c46e3a8e3f15c..5adb59e5e2acc 100644
--- a/internal/hashed_bucket_id.h
+++ b/internal/hashed_bucket_id.h
@@ -20,12 +20,13 @@
 #include "absl/hash/hash.h"
 #include "absl/strings/string_view.h"
 #include "third_party/shell-encryption/src/statusor.h"
+#include "third_party/private_membership/base/private_membership_export.h"
 
 namespace private_membership {
 namespace rlwe {
 
 // Concrete data type representing the hashed bucket id.
-class HashedBucketId {
+class PRIVATE_MEMBERSHIP_EXPORT HashedBucketId {
  public:
   // Creates the object from raw data.
   //
diff --git a/internal/id_utils.h b/internal/id_utils.h
index 217292c0b9641..29b4251b3173f 100644
--- a/internal/id_utils.h
+++ b/internal/id_utils.h
@@ -16,12 +16,14 @@
 #define THIRD_PARTY_PRIVATE_MEMBERSHIP_SRC_INTERNAL_ID_UTILS_H_
 
 #include "absl/strings/string_view.h"
+#include "third_party/private_membership/base/private_membership_export.h"
 
 namespace private_membership {
 
 // Pad the input string with '0' until reaching len. If input string is larger
 // than len, then return the string truncated to len characters.
-std::string PadOrTruncate(absl::string_view in, int len);
+PRIVATE_MEMBERSHIP_EXPORT std::string PadOrTruncate(absl::string_view in,
+                                                    int len);
 
 }  // namespace private_membership
 
diff --git a/internal/oprf_utils.h b/internal/oprf_utils.h
index 83819a214195f..2093454adef32 100644
--- a/internal/oprf_utils.h
+++ b/internal/oprf_utils.h
@@ -18,6 +18,7 @@
 #include "third_party/private-join-and-compute/src/crypto/ec_commutative_cipher.h"
 #include "third_party/private_membership/src/private_membership.pb.h"
 #include "third_party/shell-encryption/src/statusor.h"
+#include "third_party/private_membership/base/private_membership_export.h"
 
 namespace private_membership {
 
@@ -27,8 +28,9 @@ namespace private_membership {
 // valid encoding of a point on the curve as defined in ANSI X9.62 ECDSA.
 //
 // This method is not threadsafe because ec_cipher is not thread-safe.
-::rlwe::StatusOr<DoublyEncryptedId> ReEncryptId(
-    absl::string_view encrypted_id, private_join_and_compute::ECCommutativeCipher* ec_cipher);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<DoublyEncryptedId> ReEncryptId(
+    absl::string_view encrypted_id,
+    private_join_and_compute::ECCommutativeCipher* ec_cipher);
 
 }  // namespace private_membership
 
diff --git a/internal/rlwe_id_utils.h b/internal/rlwe_id_utils.h
index 1e0aa1f331890..4476e0f499cbe 100644
--- a/internal/rlwe_id_utils.h
+++ b/internal/rlwe_id_utils.h
@@ -19,6 +19,7 @@
 #include "third_party/private_membership/src/private_membership.pb.h"
 #include "third_party/private_membership/src/private_membership_rlwe.pb.h"
 #include "third_party/shell-encryption/src/statusor.h"
+#include "third_party/private_membership/base/private_membership_export.h"
 
 namespace private_membership {
 namespace rlwe {
@@ -28,27 +29,34 @@ namespace rlwe {
 //
 // Returns an error when the cryptographic functions fails or the parameters are
 // invalid.
-::rlwe::StatusOr<std::string> ComputeBucketStoredEncryptedId(
-    RlwePlaintextId id, const EncryptedBucketsParameters& params,
-    private_join_and_compute::ECCommutativeCipher* ec_cipher, private_join_and_compute::Context* ctx);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<std::string>
+ComputeBucketStoredEncryptedId(
+    RlwePlaintextId id,
+    const EncryptedBucketsParameters& params,
+    private_join_and_compute::ECCommutativeCipher* ec_cipher,
+    private_join_and_compute::Context* ctx);
 
 // Computes the representation of an encrypted ID stored within buckets using
 // the encrypted ID.
 //
 // Returns an error when the cryptographic functions fails or the parameters are
 // invalid.
-::rlwe::StatusOr<std::string> ComputeBucketStoredEncryptedId(
-    const std::string& encrypted_id, const EncryptedBucketsParameters& params,
-    private_join_and_compute::Context* ctx);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<std::string>
+ComputeBucketStoredEncryptedId(const std::string& encrypted_id,
+                               const EncryptedBucketsParameters& params,
+                               private_join_and_compute::Context* ctx);
 
 // Function used to injectively hash RlwePlaintextId proto to string. This hash
 // is not cryptographically secure, nor very compact.
-std::string HashRlwePlaintextId(const RlwePlaintextId& id);
+PRIVATE_MEMBERSHIP_EXPORT std::string HashRlwePlaintextId(
+    const RlwePlaintextId& id);
 
 // Function used to hash the nonsensitive portion of a RlwePlaintextId, using a
 // salt to force adversaries to recompute rainbow tables.
-::rlwe::StatusOr<std::string> HashNonsensitiveIdWithSalt(
-    absl::string_view nsid, HashType hash_type, private_join_and_compute::Context* ctx);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<std::string>
+HashNonsensitiveIdWithSalt(absl::string_view nsid,
+                           HashType hash_type,
+                           private_join_and_compute::Context* ctx);
 
 }  // namespace rlwe
 }  // namespace private_membership
diff --git a/internal/utils.h b/internal/utils.h
index 95611c424b26d..ed5d2460eb669 100644
--- a/internal/utils.h
+++ b/internal/utils.h
@@ -17,6 +17,7 @@
 
 #include "absl/strings/string_view.h"
 #include "third_party/shell-encryption/src/statusor.h"
+#include "third_party/private_membership/base/private_membership_export.h"
 
 namespace private_membership {
 namespace rlwe {
@@ -32,7 +33,9 @@ namespace rlwe {
 //
 // Returns InvalidArgumentError if the truncation bit length is larger than the
 // bit length of the input string.
-::rlwe::StatusOr<std::string> Truncate(absl::string_view in, int bit_length);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<std::string> Truncate(
+    absl::string_view in,
+    int bit_length);
 
 // Returns the first `bit_length` leftmost bits of `in` as an unsigned 32 bit
 // integer.
@@ -44,8 +47,9 @@ namespace rlwe {
 //
 // Returns InvalidArgumentError if `bit_length` is larger than the bit length of
 // the input string or larger than 32.
-::rlwe::StatusOr<uint32_t> TruncateAsUint32(absl::string_view in,
-                                            int bit_length);
+PRIVATE_MEMBERSHIP_EXPORT ::rlwe::StatusOr<uint32_t> TruncateAsUint32(
+    absl::string_view in,
+    int bit_length);
 
 // Returns true if `in` is a valid byte representation of a value truncated to
 // `bit_length`.
@@ -53,7 +57,7 @@ namespace rlwe {
 // That is, it returns true if and only if all bits after `bit_length`th bit is
 // set to 0 and `bit_length` is in the range
 // ((in.size() - 1) * 8, in.size() * 8].
-bool IsValid(absl::string_view in, int bit_length);
+PRIVATE_MEMBERSHIP_EXPORT bool IsValid(absl::string_view in, int bit_length);
 
 }  // namespace rlwe
 }  // namespace private_membership
