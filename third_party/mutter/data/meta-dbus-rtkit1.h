/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __META_DBUS_RTKIT1_H__
#define __META_DBUS_RTKIT1_H__

#include <gio/gio.h>

G_BEGIN_DECLS

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.RealtimeKit1 */

#define META_DBUS_TYPE_REALTIME_KIT1 (meta_dbus_realtime_kit1_get_type())
#define META_DBUS_REALTIME_KIT1(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_REALTIME_KIT1, \
                              MetaDBusRealtimeKit1))
#define META_DBUS_IS_REALTIME_KIT1(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_REALTIME_KIT1))
#define META_DBUS_REALTIME_KIT1_GET_IFACE(o)                        \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), META_DBUS_TYPE_REALTIME_KIT1, \
                                 MetaDBusRealtimeKit1Iface))

struct _MetaDBusRealtimeKit1;
typedef struct _MetaDBusRealtimeKit1 MetaDBusRealtimeKit1;
typedef struct _MetaDBusRealtimeKit1Iface MetaDBusRealtimeKit1Iface;

struct _MetaDBusRealtimeKit1Iface {
  GTypeInterface parent_iface;

  gboolean (*handle_exit)(MetaDBusRealtimeKit1* object,
                          GDBusMethodInvocation* invocation);

  gboolean (*handle_make_thread_high_priority)(
      MetaDBusRealtimeKit1* object,
      GDBusMethodInvocation* invocation,
      guint64 arg_thread,
      gint arg_priority);

  gboolean (*handle_make_thread_high_priority_with_pid)(
      MetaDBusRealtimeKit1* object,
      GDBusMethodInvocation* invocation,
      guint64 arg_process,
      guint64 arg_thread,
      gint arg_priority);

  gboolean (*handle_make_thread_realtime)(MetaDBusRealtimeKit1* object,
                                          GDBusMethodInvocation* invocation,
                                          guint64 arg_thread,
                                          guint arg_priority);

  gboolean (*handle_make_thread_realtime_with_pid)(
      MetaDBusRealtimeKit1* object,
      GDBusMethodInvocation* invocation,
      guint64 arg_process,
      guint64 arg_thread,
      guint arg_priority);

  gboolean (*handle_reset_all)(MetaDBusRealtimeKit1* object,
                               GDBusMethodInvocation* invocation);

  gboolean (*handle_reset_known)(MetaDBusRealtimeKit1* object,
                                 GDBusMethodInvocation* invocation);

  gint (*get_max_realtime_priority)(MetaDBusRealtimeKit1* object);

  gint (*get_min_nice_level)(MetaDBusRealtimeKit1* object);

  gint64 (*get_rttime_usec_max)(MetaDBusRealtimeKit1* object);
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusRealtimeKit1, g_object_unref)
#endif

GType meta_dbus_realtime_kit1_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo* meta_dbus_realtime_kit1_interface_info(void);
guint meta_dbus_realtime_kit1_override_properties(GObjectClass* klass,
                                                  guint property_id_begin);

/* D-Bus method call completion functions: */
void meta_dbus_realtime_kit1_complete_make_thread_realtime(
    MetaDBusRealtimeKit1* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_realtime_kit1_complete_make_thread_realtime_with_pid(
    MetaDBusRealtimeKit1* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_realtime_kit1_complete_make_thread_high_priority(
    MetaDBusRealtimeKit1* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_realtime_kit1_complete_make_thread_high_priority_with_pid(
    MetaDBusRealtimeKit1* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_realtime_kit1_complete_reset_known(
    MetaDBusRealtimeKit1* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_realtime_kit1_complete_reset_all(
    MetaDBusRealtimeKit1* object,
    GDBusMethodInvocation* invocation);

void meta_dbus_realtime_kit1_complete_exit(MetaDBusRealtimeKit1* object,
                                           GDBusMethodInvocation* invocation);

/* D-Bus method calls: */
void meta_dbus_realtime_kit1_call_make_thread_realtime(
    MetaDBusRealtimeKit1* proxy,
    guint64 arg_thread,
    guint arg_priority,
    GCancellable* cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_realtime_kit1_call_make_thread_realtime_finish(
    MetaDBusRealtimeKit1* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_realtime_kit1_call_make_thread_realtime_sync(
    MetaDBusRealtimeKit1* proxy,
    guint64 arg_thread,
    guint arg_priority,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_realtime_kit1_call_make_thread_realtime_with_pid(
    MetaDBusRealtimeKit1* proxy,
    guint64 arg_process,
    guint64 arg_thread,
    guint arg_priority,
    GCancellable* cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_realtime_kit1_call_make_thread_realtime_with_pid_finish(
    MetaDBusRealtimeKit1* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_realtime_kit1_call_make_thread_realtime_with_pid_sync(
    MetaDBusRealtimeKit1* proxy,
    guint64 arg_process,
    guint64 arg_thread,
    guint arg_priority,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_realtime_kit1_call_make_thread_high_priority(
    MetaDBusRealtimeKit1* proxy,
    guint64 arg_thread,
    gint arg_priority,
    GCancellable* cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_realtime_kit1_call_make_thread_high_priority_finish(
    MetaDBusRealtimeKit1* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_realtime_kit1_call_make_thread_high_priority_sync(
    MetaDBusRealtimeKit1* proxy,
    guint64 arg_thread,
    gint arg_priority,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_realtime_kit1_call_make_thread_high_priority_with_pid(
    MetaDBusRealtimeKit1* proxy,
    guint64 arg_process,
    guint64 arg_thread,
    gint arg_priority,
    GCancellable* cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_realtime_kit1_call_make_thread_high_priority_with_pid_finish(
    MetaDBusRealtimeKit1* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_realtime_kit1_call_make_thread_high_priority_with_pid_sync(
    MetaDBusRealtimeKit1* proxy,
    guint64 arg_process,
    guint64 arg_thread,
    gint arg_priority,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_realtime_kit1_call_reset_known(MetaDBusRealtimeKit1* proxy,
                                              GCancellable* cancellable,
                                              GAsyncReadyCallback callback,
                                              gpointer user_data);

gboolean meta_dbus_realtime_kit1_call_reset_known_finish(
    MetaDBusRealtimeKit1* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_realtime_kit1_call_reset_known_sync(
    MetaDBusRealtimeKit1* proxy,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_realtime_kit1_call_reset_all(MetaDBusRealtimeKit1* proxy,
                                            GCancellable* cancellable,
                                            GAsyncReadyCallback callback,
                                            gpointer user_data);

gboolean meta_dbus_realtime_kit1_call_reset_all_finish(
    MetaDBusRealtimeKit1* proxy,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_realtime_kit1_call_reset_all_sync(
    MetaDBusRealtimeKit1* proxy,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_realtime_kit1_call_exit(MetaDBusRealtimeKit1* proxy,
                                       GCancellable* cancellable,
                                       GAsyncReadyCallback callback,
                                       gpointer user_data);

gboolean meta_dbus_realtime_kit1_call_exit_finish(MetaDBusRealtimeKit1* proxy,
                                                  GAsyncResult* res,
                                                  GError** error);

gboolean meta_dbus_realtime_kit1_call_exit_sync(MetaDBusRealtimeKit1* proxy,
                                                GCancellable* cancellable,
                                                GError** error);

/* D-Bus property accessors: */
gint64 meta_dbus_realtime_kit1_get_rttime_usec_max(
    MetaDBusRealtimeKit1* object);
void meta_dbus_realtime_kit1_set_rttime_usec_max(MetaDBusRealtimeKit1* object,
                                                 gint64 value);

gint meta_dbus_realtime_kit1_get_max_realtime_priority(
    MetaDBusRealtimeKit1* object);
void meta_dbus_realtime_kit1_set_max_realtime_priority(
    MetaDBusRealtimeKit1* object,
    gint value);

gint meta_dbus_realtime_kit1_get_min_nice_level(MetaDBusRealtimeKit1* object);
void meta_dbus_realtime_kit1_set_min_nice_level(MetaDBusRealtimeKit1* object,
                                                gint value);

/* ---- */

#define META_DBUS_TYPE_REALTIME_KIT1_PROXY \
  (meta_dbus_realtime_kit1_proxy_get_type())
#define META_DBUS_REALTIME_KIT1_PROXY(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_REALTIME_KIT1_PROXY, \
                              MetaDBusRealtimeKit1Proxy))
#define META_DBUS_REALTIME_KIT1_PROXY_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_REALTIME_KIT1_PROXY, \
                           MetaDBusRealtimeKit1ProxyClass))
#define META_DBUS_REALTIME_KIT1_PROXY_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_REALTIME_KIT1_PROXY, \
                             MetaDBusRealtimeKit1ProxyClass))
#define META_DBUS_IS_REALTIME_KIT1_PROXY(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_REALTIME_KIT1_PROXY))
#define META_DBUS_IS_REALTIME_KIT1_PROXY_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_REALTIME_KIT1_PROXY))

typedef struct _MetaDBusRealtimeKit1Proxy MetaDBusRealtimeKit1Proxy;
typedef struct _MetaDBusRealtimeKit1ProxyClass MetaDBusRealtimeKit1ProxyClass;
typedef struct _MetaDBusRealtimeKit1ProxyPrivate
    MetaDBusRealtimeKit1ProxyPrivate;

struct _MetaDBusRealtimeKit1Proxy {
  /*< private >*/
  GDBusProxy parent_instance;
  MetaDBusRealtimeKit1ProxyPrivate* priv;
};

struct _MetaDBusRealtimeKit1ProxyClass {
  GDBusProxyClass parent_class;
};

GType meta_dbus_realtime_kit1_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusRealtimeKit1Proxy, g_object_unref)
#endif

void meta_dbus_realtime_kit1_proxy_new(GDBusConnection* connection,
                                       GDBusProxyFlags flags,
                                       const gchar* name,
                                       const gchar* object_path,
                                       GCancellable* cancellable,
                                       GAsyncReadyCallback callback,
                                       gpointer user_data);
MetaDBusRealtimeKit1* meta_dbus_realtime_kit1_proxy_new_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusRealtimeKit1* meta_dbus_realtime_kit1_proxy_new_sync(
    GDBusConnection* connection,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_realtime_kit1_proxy_new_for_bus(GBusType bus_type,
                                               GDBusProxyFlags flags,
                                               const gchar* name,
                                               const gchar* object_path,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback callback,
                                               gpointer user_data);
MetaDBusRealtimeKit1* meta_dbus_realtime_kit1_proxy_new_for_bus_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusRealtimeKit1* meta_dbus_realtime_kit1_proxy_new_for_bus_sync(
    GBusType bus_type,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

/* ---- */

#define META_DBUS_TYPE_REALTIME_KIT1_SKELETON \
  (meta_dbus_realtime_kit1_skeleton_get_type())
#define META_DBUS_REALTIME_KIT1_SKELETON(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_REALTIME_KIT1_SKELETON, \
                              MetaDBusRealtimeKit1Skeleton))
#define META_DBUS_REALTIME_KIT1_SKELETON_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_REALTIME_KIT1_SKELETON, \
                           MetaDBusRealtimeKit1SkeletonClass))
#define META_DBUS_REALTIME_KIT1_SKELETON_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_REALTIME_KIT1_SKELETON, \
                             MetaDBusRealtimeKit1SkeletonClass))
#define META_DBUS_IS_REALTIME_KIT1_SKELETON(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_REALTIME_KIT1_SKELETON))
#define META_DBUS_IS_REALTIME_KIT1_SKELETON_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_REALTIME_KIT1_SKELETON))

typedef struct _MetaDBusRealtimeKit1Skeleton MetaDBusRealtimeKit1Skeleton;
typedef struct _MetaDBusRealtimeKit1SkeletonClass
    MetaDBusRealtimeKit1SkeletonClass;
typedef struct _MetaDBusRealtimeKit1SkeletonPrivate
    MetaDBusRealtimeKit1SkeletonPrivate;

struct _MetaDBusRealtimeKit1Skeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MetaDBusRealtimeKit1SkeletonPrivate* priv;
};

struct _MetaDBusRealtimeKit1SkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType meta_dbus_realtime_kit1_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusRealtimeKit1Skeleton, g_object_unref)
#endif

MetaDBusRealtimeKit1* meta_dbus_realtime_kit1_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define META_DBUS_TYPE_DBUS_PROPERTIES (meta_dbus_dbus_properties_get_type())
#define META_DBUS_DBUS_PROPERTIES(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_DBUS_PROPERTIES, \
                              MetaDBusDBusProperties))
#define META_DBUS_IS_DBUS_PROPERTIES(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_DBUS_PROPERTIES))
#define META_DBUS_DBUS_PROPERTIES_GET_IFACE(o)                        \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), META_DBUS_TYPE_DBUS_PROPERTIES, \
                                 MetaDBusDBusPropertiesIface))

struct _MetaDBusDBusProperties;
typedef struct _MetaDBusDBusProperties MetaDBusDBusProperties;
typedef struct _MetaDBusDBusPropertiesIface MetaDBusDBusPropertiesIface;

struct _MetaDBusDBusPropertiesIface {
  GTypeInterface parent_iface;

  gboolean (*handle_get)(MetaDBusDBusProperties* object,
                         GDBusMethodInvocation* invocation,
                         const gchar* arg_interface,
                         const gchar* arg_property);
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusDBusProperties, g_object_unref)
#endif

GType meta_dbus_dbus_properties_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo* meta_dbus_dbus_properties_interface_info(void);
guint meta_dbus_dbus_properties_override_properties(GObjectClass* klass,
                                                    guint property_id_begin);

/* D-Bus method call completion functions: */
void meta_dbus_dbus_properties_complete_get(MetaDBusDBusProperties* object,
                                            GDBusMethodInvocation* invocation,
                                            GVariant* value);

/* D-Bus method calls: */
void meta_dbus_dbus_properties_call_get(MetaDBusDBusProperties* proxy,
                                        const gchar* arg_interface,
                                        const gchar* arg_property,
                                        GCancellable* cancellable,
                                        GAsyncReadyCallback callback,
                                        gpointer user_data);

gboolean meta_dbus_dbus_properties_call_get_finish(
    MetaDBusDBusProperties* proxy,
    GVariant** out_value,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_dbus_properties_call_get_sync(MetaDBusDBusProperties* proxy,
                                                 const gchar* arg_interface,
                                                 const gchar* arg_property,
                                                 GVariant** out_value,
                                                 GCancellable* cancellable,
                                                 GError** error);

/* ---- */

#define META_DBUS_TYPE_DBUS_PROPERTIES_PROXY \
  (meta_dbus_dbus_properties_proxy_get_type())
#define META_DBUS_DBUS_PROPERTIES_PROXY(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_DBUS_PROPERTIES_PROXY, \
                              MetaDBusDBusPropertiesProxy))
#define META_DBUS_DBUS_PROPERTIES_PROXY_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_DBUS_PROPERTIES_PROXY, \
                           MetaDBusDBusPropertiesProxyClass))
#define META_DBUS_DBUS_PROPERTIES_PROXY_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_DBUS_PROPERTIES_PROXY, \
                             MetaDBusDBusPropertiesProxyClass))
#define META_DBUS_IS_DBUS_PROPERTIES_PROXY(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_DBUS_PROPERTIES_PROXY))
#define META_DBUS_IS_DBUS_PROPERTIES_PROXY_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_DBUS_PROPERTIES_PROXY))

typedef struct _MetaDBusDBusPropertiesProxy MetaDBusDBusPropertiesProxy;
typedef struct _MetaDBusDBusPropertiesProxyClass
    MetaDBusDBusPropertiesProxyClass;
typedef struct _MetaDBusDBusPropertiesProxyPrivate
    MetaDBusDBusPropertiesProxyPrivate;

struct _MetaDBusDBusPropertiesProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  MetaDBusDBusPropertiesProxyPrivate* priv;
};

struct _MetaDBusDBusPropertiesProxyClass {
  GDBusProxyClass parent_class;
};

GType meta_dbus_dbus_properties_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusDBusPropertiesProxy, g_object_unref)
#endif

void meta_dbus_dbus_properties_proxy_new(GDBusConnection* connection,
                                         GDBusProxyFlags flags,
                                         const gchar* name,
                                         const gchar* object_path,
                                         GCancellable* cancellable,
                                         GAsyncReadyCallback callback,
                                         gpointer user_data);
MetaDBusDBusProperties* meta_dbus_dbus_properties_proxy_new_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusDBusProperties* meta_dbus_dbus_properties_proxy_new_sync(
    GDBusConnection* connection,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_dbus_properties_proxy_new_for_bus(GBusType bus_type,
                                                 GDBusProxyFlags flags,
                                                 const gchar* name,
                                                 const gchar* object_path,
                                                 GCancellable* cancellable,
                                                 GAsyncReadyCallback callback,
                                                 gpointer user_data);
MetaDBusDBusProperties* meta_dbus_dbus_properties_proxy_new_for_bus_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusDBusProperties* meta_dbus_dbus_properties_proxy_new_for_bus_sync(
    GBusType bus_type,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

/* ---- */

#define META_DBUS_TYPE_DBUS_PROPERTIES_SKELETON \
  (meta_dbus_dbus_properties_skeleton_get_type())
#define META_DBUS_DBUS_PROPERTIES_SKELETON(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_DBUS_PROPERTIES_SKELETON, \
                              MetaDBusDBusPropertiesSkeleton))
#define META_DBUS_DBUS_PROPERTIES_SKELETON_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_DBUS_PROPERTIES_SKELETON, \
                           MetaDBusDBusPropertiesSkeletonClass))
#define META_DBUS_DBUS_PROPERTIES_SKELETON_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_DBUS_PROPERTIES_SKELETON, \
                             MetaDBusDBusPropertiesSkeletonClass))
#define META_DBUS_IS_DBUS_PROPERTIES_SKELETON(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_DBUS_PROPERTIES_SKELETON))
#define META_DBUS_IS_DBUS_PROPERTIES_SKELETON_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_DBUS_PROPERTIES_SKELETON))

typedef struct _MetaDBusDBusPropertiesSkeleton MetaDBusDBusPropertiesSkeleton;
typedef struct _MetaDBusDBusPropertiesSkeletonClass
    MetaDBusDBusPropertiesSkeletonClass;
typedef struct _MetaDBusDBusPropertiesSkeletonPrivate
    MetaDBusDBusPropertiesSkeletonPrivate;

struct _MetaDBusDBusPropertiesSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MetaDBusDBusPropertiesSkeletonPrivate* priv;
};

struct _MetaDBusDBusPropertiesSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType meta_dbus_dbus_properties_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusDBusPropertiesSkeleton, g_object_unref)
#endif

MetaDBusDBusProperties* meta_dbus_dbus_properties_skeleton_new(void);

/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define META_DBUS_TYPE_DBUS_INTROSPECTABLE \
  (meta_dbus_dbus_introspectable_get_type())
#define META_DBUS_DBUS_INTROSPECTABLE(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_DBUS_INTROSPECTABLE, \
                              MetaDBusDBusIntrospectable))
#define META_DBUS_IS_DBUS_INTROSPECTABLE(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_DBUS_INTROSPECTABLE))
#define META_DBUS_DBUS_INTROSPECTABLE_GET_IFACE(o)                        \
  (G_TYPE_INSTANCE_GET_INTERFACE((o), META_DBUS_TYPE_DBUS_INTROSPECTABLE, \
                                 MetaDBusDBusIntrospectableIface))

struct _MetaDBusDBusIntrospectable;
typedef struct _MetaDBusDBusIntrospectable MetaDBusDBusIntrospectable;
typedef struct _MetaDBusDBusIntrospectableIface MetaDBusDBusIntrospectableIface;

struct _MetaDBusDBusIntrospectableIface {
  GTypeInterface parent_iface;

  gboolean (*handle_introspect)(MetaDBusDBusIntrospectable* object,
                                GDBusMethodInvocation* invocation);
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusDBusIntrospectable, g_object_unref)
#endif

GType meta_dbus_dbus_introspectable_get_type(void) G_GNUC_CONST;

GDBusInterfaceInfo* meta_dbus_dbus_introspectable_interface_info(void);
guint meta_dbus_dbus_introspectable_override_properties(
    GObjectClass* klass,
    guint property_id_begin);

/* D-Bus method call completion functions: */
void meta_dbus_dbus_introspectable_complete_introspect(
    MetaDBusDBusIntrospectable* object,
    GDBusMethodInvocation* invocation,
    const gchar* data);

/* D-Bus method calls: */
void meta_dbus_dbus_introspectable_call_introspect(
    MetaDBusDBusIntrospectable* proxy,
    GCancellable* cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean meta_dbus_dbus_introspectable_call_introspect_finish(
    MetaDBusDBusIntrospectable* proxy,
    gchar** out_data,
    GAsyncResult* res,
    GError** error);

gboolean meta_dbus_dbus_introspectable_call_introspect_sync(
    MetaDBusDBusIntrospectable* proxy,
    gchar** out_data,
    GCancellable* cancellable,
    GError** error);

/* ---- */

#define META_DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY \
  (meta_dbus_dbus_introspectable_proxy_get_type())
#define META_DBUS_DBUS_INTROSPECTABLE_PROXY(o)                               \
  (G_TYPE_CHECK_INSTANCE_CAST((o), META_DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY, \
                              MetaDBusDBusIntrospectableProxy))
#define META_DBUS_DBUS_INTROSPECTABLE_PROXY_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY, \
                           MetaDBusDBusIntrospectableProxyClass))
#define META_DBUS_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY, \
                             MetaDBusDBusIntrospectableProxyClass))
#define META_DBUS_IS_DBUS_INTROSPECTABLE_PROXY(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY))
#define META_DBUS_IS_DBUS_INTROSPECTABLE_PROXY_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_DBUS_INTROSPECTABLE_PROXY))

typedef struct _MetaDBusDBusIntrospectableProxy MetaDBusDBusIntrospectableProxy;
typedef struct _MetaDBusDBusIntrospectableProxyClass
    MetaDBusDBusIntrospectableProxyClass;
typedef struct _MetaDBusDBusIntrospectableProxyPrivate
    MetaDBusDBusIntrospectableProxyPrivate;

struct _MetaDBusDBusIntrospectableProxy {
  /*< private >*/
  GDBusProxy parent_instance;
  MetaDBusDBusIntrospectableProxyPrivate* priv;
};

struct _MetaDBusDBusIntrospectableProxyClass {
  GDBusProxyClass parent_class;
};

GType meta_dbus_dbus_introspectable_proxy_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusDBusIntrospectableProxy, g_object_unref)
#endif

void meta_dbus_dbus_introspectable_proxy_new(GDBusConnection* connection,
                                             GDBusProxyFlags flags,
                                             const gchar* name,
                                             const gchar* object_path,
                                             GCancellable* cancellable,
                                             GAsyncReadyCallback callback,
                                             gpointer user_data);
MetaDBusDBusIntrospectable* meta_dbus_dbus_introspectable_proxy_new_finish(
    GAsyncResult* res,
    GError** error);
MetaDBusDBusIntrospectable* meta_dbus_dbus_introspectable_proxy_new_sync(
    GDBusConnection* connection,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GError** error);

void meta_dbus_dbus_introspectable_proxy_new_for_bus(
    GBusType bus_type,
    GDBusProxyFlags flags,
    const gchar* name,
    const gchar* object_path,
    GCancellable* cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);
MetaDBusDBusIntrospectable*
meta_dbus_dbus_introspectable_proxy_new_for_bus_finish(GAsyncResult* res,
                                                       GError** error);
MetaDBusDBusIntrospectable*
meta_dbus_dbus_introspectable_proxy_new_for_bus_sync(GBusType bus_type,
                                                     GDBusProxyFlags flags,
                                                     const gchar* name,
                                                     const gchar* object_path,
                                                     GCancellable* cancellable,
                                                     GError** error);

/* ---- */

#define META_DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON \
  (meta_dbus_dbus_introspectable_skeleton_get_type())
#define META_DBUS_DBUS_INTROSPECTABLE_SKELETON(o)                          \
  (G_TYPE_CHECK_INSTANCE_CAST((o),                                         \
                              META_DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON, \
                              MetaDBusDBusIntrospectableSkeleton))
#define META_DBUS_DBUS_INTROSPECTABLE_SKELETON_CLASS(k)                      \
  (G_TYPE_CHECK_CLASS_CAST((k), META_DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON, \
                           MetaDBusDBusIntrospectableSkeletonClass))
#define META_DBUS_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o)                    \
  (G_TYPE_INSTANCE_GET_CLASS((o), META_DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON, \
                             MetaDBusDBusIntrospectableSkeletonClass))
#define META_DBUS_IS_DBUS_INTROSPECTABLE_SKELETON(o) \
  (G_TYPE_CHECK_INSTANCE_TYPE((o), META_DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON))
#define META_DBUS_IS_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) \
  (G_TYPE_CHECK_CLASS_TYPE((k), META_DBUS_TYPE_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _MetaDBusDBusIntrospectableSkeleton
    MetaDBusDBusIntrospectableSkeleton;
typedef struct _MetaDBusDBusIntrospectableSkeletonClass
    MetaDBusDBusIntrospectableSkeletonClass;
typedef struct _MetaDBusDBusIntrospectableSkeletonPrivate
    MetaDBusDBusIntrospectableSkeletonPrivate;

struct _MetaDBusDBusIntrospectableSkeleton {
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  MetaDBusDBusIntrospectableSkeletonPrivate* priv;
};

struct _MetaDBusDBusIntrospectableSkeletonClass {
  GDBusInterfaceSkeletonClass parent_class;
};

GType meta_dbus_dbus_introspectable_skeleton_get_type(void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC(MetaDBusDBusIntrospectableSkeleton,
                              g_object_unref)
#endif

MetaDBusDBusIntrospectable* meta_dbus_dbus_introspectable_skeleton_new(void);

G_END_DECLS

#endif /* __META_DBUS_RTKIT1_H__ */
