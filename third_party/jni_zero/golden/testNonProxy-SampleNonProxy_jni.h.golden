// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     third_party/jni_zero/jni_generator.py
// For
//     org/jni_zero/samples/SampleNonProxy

#ifndef org_jni_zero_samples_SampleNonProxy_JNI
#define org_jni_zero_samples_SampleNonProxy_JNI

#include <jni.h>

#include "third_party/jni_zero/jni_export.h"
#include "third_party/jni_zero/jni_zero_helper.h"


// Step 1: Forward declarations.

JNI_ZERO_COMPONENT_BUILD_EXPORT extern const char kClassPath_org_jni_1zero_samples_SampleNonProxy[];
const char kClassPath_org_jni_1zero_samples_SampleNonProxy[] =
    "org/jni_zero/samples/SampleNonProxy";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_ZERO_COMPONENT_BUILD_EXPORT std::atomic<jclass>
    g_org_jni_1zero_samples_SampleNonProxy_clazz(nullptr);
#ifndef org_jni_1zero_samples_SampleNonProxy_clazz_defined
#define org_jni_1zero_samples_SampleNonProxy_clazz_defined
inline jclass org_jni_1zero_samples_SampleNonProxy_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_jni_1zero_samples_SampleNonProxy,
      &g_org_jni_1zero_samples_SampleNonProxy_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_SampleNonProxy_AddBookmark(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jint nativeChromeBrowserProvider,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& title,
    jboolean isFolder,
    jlong parentId);

JNI_BOUNDARY_EXPORT jlong Java_org_jni_1zero_samples_SampleNonProxy_nativeAddBookmark(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jstring title,
    jboolean isFolder,
    jlong parentId) {
  return JNI_SampleNonProxy_AddBookmark(env, base::android::JavaParamRef<jobject>(env, jcaller),
      nativeChromeBrowserProvider, base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, title), isFolder, parentId);
}

static jlong JNI_SampleNonProxy_AddBookmarkFromAPI(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint nativeChromeBrowserProvider,
    const base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jobject>& created,
    const base::android::JavaParamRef<jobject>& isBookmark,
    const base::android::JavaParamRef<jobject>& date,
    const base::android::JavaParamRef<jbyteArray>& favicon,
    const base::android::JavaParamRef<jstring>& title,
    const base::android::JavaParamRef<jobject>& visits);

JNI_BOUNDARY_EXPORT jlong Java_org_jni_1zero_samples_SampleNonProxy_nativeAddBookmarkFromAPI(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jstring url,
    jobject created,
    jobject isBookmark,
    jobject date,
    jbyteArray favicon,
    jstring title,
    jobject visits) {
  return JNI_SampleNonProxy_AddBookmarkFromAPI(env, base::android::JavaParamRef<jobject>(env,
      jcaller), nativeChromeBrowserProvider, base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jobject>(env, created), base::android::JavaParamRef<jobject>(env,
      isBookmark), base::android::JavaParamRef<jobject>(env, date),
      base::android::JavaParamRef<jbyteArray>(env, favicon),
      base::android::JavaParamRef<jstring>(env, title), base::android::JavaParamRef<jobject>(env,
      visits));
}

static void JNI_SampleNonProxy_CreateHistoricalTabFromState(JNIEnv* env, const
    base::android::JavaParamRef<jbyteArray>& state,
    jint tabIndex);

JNI_BOUNDARY_EXPORT void
    Java_org_jni_1zero_samples_SampleNonProxy_nativeCreateHistoricalTabFromState(
    JNIEnv* env,
    jclass jcaller,
    jbyteArray state,
    jint tabIndex) {
  return JNI_SampleNonProxy_CreateHistoricalTabFromState(env,
      base::android::JavaParamRef<jbyteArray>(env, state), tabIndex);
}

static void JNI_SampleNonProxy_Destroy(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    jint nativeChromeBrowserProvider);

JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_samples_SampleNonProxy_nativeDestroy(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider) {
  return JNI_SampleNonProxy_Destroy(env, base::android::JavaParamRef<jobject>(env, jcaller),
      nativeChromeBrowserProvider);
}

static jint JNI_SampleNonProxy_FindAll(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller,
    const base::android::JavaParamRef<jstring>& find);

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_samples_SampleNonProxy_nativeFindAll(
    JNIEnv* env,
    jobject jcaller,
    jstring find) {
  return JNI_SampleNonProxy_FindAll(env, base::android::JavaParamRef<jobject>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, find));
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    JNI_SampleNonProxy_GetAutofillProfileGUIDs(JNIEnv* env);

JNI_BOUNDARY_EXPORT jobjectArray
    Java_org_jni_1zero_samples_SampleNonProxy_nativeGetAutofillProfileGUIDs(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SampleNonProxy_GetAutofillProfileGUIDs(env).Release();
}

static base::android::ScopedJavaLocalRef<jstring> JNI_SampleNonProxy_GetDomainAndRegistry(JNIEnv*
    env, const base::android::JavaParamRef<jstring>& url);

JNI_BOUNDARY_EXPORT jstring Java_org_jni_1zero_samples_SampleNonProxy_nativeGetDomainAndRegistry(
    JNIEnv* env,
    jclass jcaller,
    jstring url) {
  return JNI_SampleNonProxy_GetDomainAndRegistry(env, base::android::JavaParamRef<jstring>(env,
      url)).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_SampleNonProxy_GetInnerClass(JNIEnv* env);

JNI_BOUNDARY_EXPORT jobject Java_org_jni_1zero_samples_SampleNonProxy_nativeGetInnerClass(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SampleNonProxy_GetInnerClass(env).Release();
}

static base::android::ScopedJavaLocalRef<jbyteArray> JNI_SampleNonProxy_GetStateAsByteArray(JNIEnv*
    env, const base::android::JavaParamRef<jobject>& jcaller,
    const base::android::JavaParamRef<jobject>& view);

JNI_BOUNDARY_EXPORT jbyteArray Java_org_jni_1zero_samples_SampleNonProxy_nativeGetStateAsByteArray(
    JNIEnv* env,
    jobject jcaller,
    jobject view) {
  return JNI_SampleNonProxy_GetStateAsByteArray(env, base::android::JavaParamRef<jobject>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, view)).Release();
}

static void JNI_SampleNonProxy_GotOrientation(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint nativeDataFetcherImplAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma);

JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_samples_SampleNonProxy_nativeGotOrientation(
    JNIEnv* env,
    jobject jcaller,
    jint nativeDataFetcherImplAndroid,
    jdouble alpha,
    jdouble beta,
    jdouble gamma) {
  return JNI_SampleNonProxy_GotOrientation(env, base::android::JavaParamRef<jobject>(env, jcaller),
      nativeDataFetcherImplAndroid, alpha, beta, gamma);
}

static jint JNI_SampleNonProxy_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_samples_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_SampleNonProxy_Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static jint JNI_SampleNonProxy_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    jcaller);

JNI_BOUNDARY_EXPORT jint Java_org_jni_1zero_samples_SampleNonProxy_nativeInit(
    JNIEnv* env,
    jobject jcaller) {
  return JNI_SampleNonProxy_Init(env, base::android::JavaParamRef<jobject>(env, jcaller));
}

static base::android::ScopedJavaLocalRef<jthrowable>
    JNI_SampleNonProxy_MessWithJavaException(JNIEnv* env, const
    base::android::JavaParamRef<jthrowable>& e);

JNI_BOUNDARY_EXPORT jthrowable
    Java_org_jni_1zero_samples_SampleNonProxy_nativeMessWithJavaException(
    JNIEnv* env,
    jclass jcaller,
    jthrowable e) {
  return JNI_SampleNonProxy_MessWithJavaException(env, base::android::JavaParamRef<jthrowable>(env,
      e)).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_SampleNonProxy_QueryBitmap(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint nativeChromeBrowserProvider,
    const base::android::JavaParamRef<jobjectArray>& projection,
    const base::android::JavaParamRef<jstring>& selection,
    const base::android::JavaParamRef<jobjectArray>& selectionArgs,
    const base::android::JavaParamRef<jstring>& sortOrder);

JNI_BOUNDARY_EXPORT jobject Java_org_jni_1zero_samples_SampleNonProxy_nativeQueryBitmap(
    JNIEnv* env,
    jobject jcaller,
    jint nativeChromeBrowserProvider,
    jobjectArray projection,
    jstring selection,
    jobjectArray selectionArgs,
    jstring sortOrder) {
  return JNI_SampleNonProxy_QueryBitmap(env, base::android::JavaParamRef<jobject>(env, jcaller),
      nativeChromeBrowserProvider, base::android::JavaParamRef<jobjectArray>(env, projection),
      base::android::JavaParamRef<jstring>(env, selection),
      base::android::JavaParamRef<jobjectArray>(env, selectionArgs),
      base::android::JavaParamRef<jstring>(env, sortOrder)).Release();
}

static void JNI_SampleNonProxy_SetRecognitionResults(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller,
    jint sessionId,
    const base::android::JavaParamRef<jobjectArray>& results);

JNI_BOUNDARY_EXPORT void Java_org_jni_1zero_samples_SampleNonProxy_nativeSetRecognitionResults(
    JNIEnv* env,
    jobject jcaller,
    jint sessionId,
    jobjectArray results) {
  return JNI_SampleNonProxy_SetRecognitionResults(env, base::android::JavaParamRef<jobject>(env,
      jcaller), sessionId, base::android::JavaParamRef<jobjectArray>(env, results));
}


#endif  // org_jni_zero_samples_SampleNonProxy_JNI
