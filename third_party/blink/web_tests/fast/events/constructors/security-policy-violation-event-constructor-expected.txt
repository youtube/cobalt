This tests the constructor for the SecurityPolicyViolationEvent DOM class.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS new SecurityPolicyViolationEvent('eventType').bubbles is true
PASS new SecurityPolicyViolationEvent('eventType').cancelable is false
PASS new SecurityPolicyViolationEvent('eventType').documentURI is ""
PASS new SecurityPolicyViolationEvent('eventType').referrer is ""
PASS new SecurityPolicyViolationEvent('eventType').blockedURI is ""
PASS new SecurityPolicyViolationEvent('eventType').violatedDirective is ""
PASS new SecurityPolicyViolationEvent('eventType').effectiveDirective is ""
PASS new SecurityPolicyViolationEvent('eventType').originalPolicy is ""
PASS new SecurityPolicyViolationEvent('eventType').sourceFile is ""
PASS new SecurityPolicyViolationEvent('eventType').disposition is "enforce"
PASS new SecurityPolicyViolationEvent('eventType').lineNumber is 0
PASS new SecurityPolicyViolationEvent('eventType').columnNumber is 0
PASS new SecurityPolicyViolationEvent('eventType').statusCode is 0
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ bubbles: false})).bubbles is true
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ bubbles: true})).bubbles is true
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ cancelable: false})).cancelable is false
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ cancelable: true})).cancelable is false
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ documentURI: 'foo' })).documentURI is "foo"
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ referrer: 'foo' })).referrer is "foo"
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ blockedURI: 'foo' })).blockedURI is "foo"
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ violatedDirective: 'foo' })).violatedDirective is "foo"
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ effectiveDirective: 'foo' })).effectiveDirective is "foo"
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ originalPolicy: 'foo' })).originalPolicy is "foo"
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ sourceFile: 'foo' })).sourceFile is "foo"
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ disposition: 'foo' })) threw exception TypeError: Failed to construct 'SecurityPolicyViolationEvent': Failed to read the 'disposition' property from 'SecurityPolicyViolationEventInit': The provided value 'foo' is not a valid enum value of type SecurityPolicyViolationEventDisposition..
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ lineNumber: 42 })).lineNumber is 42
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ columnNumber: 42 })).columnNumber is 42
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({ statusCode: 42 })).statusCode is 42
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({}, "documentURI")) threw exception TypeError: Failed to construct 'SecurityPolicyViolationEvent': Failed to read the 'documentURI' property from 'SecurityPolicyViolationEventInit': Required member is undefined..
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({}, "violatedDirective")) threw exception TypeError: Failed to construct 'SecurityPolicyViolationEvent': Failed to read the 'violatedDirective' property from 'SecurityPolicyViolationEventInit': Required member is undefined..
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({}, "effectiveDirective")) threw exception TypeError: Failed to construct 'SecurityPolicyViolationEvent': Failed to read the 'effectiveDirective' property from 'SecurityPolicyViolationEventInit': Required member is undefined..
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({}, "originalPolicy")) threw exception TypeError: Failed to construct 'SecurityPolicyViolationEvent': Failed to read the 'originalPolicy' property from 'SecurityPolicyViolationEventInit': Required member is undefined..
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({}, "statusCode")) threw exception TypeError: Failed to construct 'SecurityPolicyViolationEvent': Failed to read the 'statusCode' property from 'SecurityPolicyViolationEventInit': Required member is undefined..
PASS new SecurityPolicyViolationEvent('eventType', add_required_members({}, "disposition")) threw exception TypeError: Failed to construct 'SecurityPolicyViolationEvent': Failed to read the 'disposition' property from 'SecurityPolicyViolationEventInit': Required member is undefined..
PASS successfullyParsed is true

TEST COMPLETE

