// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "third_party/blink/public/mojom/on_device_translation/translator.mojom";


struct TranslatorLanguageCode {
  // BCP 47 language code used for the Translator API.
  // This code may be hardcoded in Chrome or passed from the JS API.
  string code;
};

// The result of TranslationManager's CanCreateTranslator IPC.
enum CanCreateTranslatorResult {
  // Both the library and the language pack are ready.
  kReadily = 0,

  // The language packs are ready, but the library needs to be downloaded.
  kAfterDownloadLibraryNotReady = 1,

  // The library is ready, but the language packs need to be downloaded.
  kAfterDownloadLanguagePackNotReady = 2,

  // Both the library and the language packs need to be downloaded.
  kAfterDownloadLibraryAndLanguagePackNotReady = 3,

  // The translator cannot be created because the transltion for the specified
  // language pair is not supported.
  kNoNotSupportedLanguage = 4,

  // The translator cannot be created because the Accept-Language check failed.
  kNoAcceptLanguagesCheckFailed = 5,

  // The translator cannot be created. New models need to be downloaded,
  // but the number of downloaded language packs will exceedd the limit.
  kNoExceedsLanguagePackCountLimitation = 6,

  // The translator cannot be created, because the translator service crashed.
  kNoServiceCrashed = 7,

  // The translator cannot be created, because the use of Translator API is
  // disallowed by `TranslatorAPIAllowed` Enterprise policy
  kNoDisallowedByPolicy = 8,

  // The translator cannot be created, because the number of services exceeds
  // the limitation.
  kNoExceedsServiceCountLimitation = 9,
};

// The error of TranslationManager's CreateTranslator IPC.
enum CreateTranslatorError {
  // The translator cannot be created because the library binary failed to
  // loaded.
  kInvalidBinary = 1,

  // The translator cannot be created because the function pointer of the
  // library is invalid.
  kInvalidFunctionPointer = 2,

  // The translator cannot be created because the library failed to initialize.
  kFailedToInitialize = 3,

  // The translator cannot be created because the library failed to create the
  // translator.
  kFailedToCreateTranslator = 4,

  // The translator cannot be created because the Accept-Language check failed.
  kAcceptLanguagesCheckFailed = 5,

  // The translator cannot be created. New models need to be downloaded,
  // but the number of downloaded language packs will exceedd the limit.
  kExceedsLanguagePackCountLimitation = 6,

  // The translator cannot be created, because the translator service crashed.
  kServiceCrashed = 7,

  // The translator cannot be created, because the use of Translator API is
  // disallowed by `TranslatorAPIAllowed` Enterprise policy
  kDisallowedByPolicy = 8,

  // The translator cannot be created, because the number of services exceeds
  // the limitation.
  kExceedsServiceCountLimitation = 9,

  // The translator cannot be created, because the number of pending tasks
  // exceeds the limitation.
  kExceedsPendingTaskCountLimitation = 10,

  // The translator cannot be created because the library version is invalid.
  kInvalidVersion = 11,
};

// The result of TranslationManager's CreateTranslator IPC.
union CreateTranslatorResult {
  // The translator's mojo interface.
  pending_remote<blink.mojom.Translator> translator;
  // The error of creating the translator.
  CreateTranslatorError error;
};

// The client interface that receives a Translator from a TranslationManager.
interface TranslationManagerCreateTranslatorClient {
  // Called with a created Translator's mojo interface as a result for the
  // CreateTranslator() method of the TranslationManager. When failed to create
  // a Translator, this method is called with an error result.
  OnResult(CreateTranslatorResult result);
};

// This is used when creating a new Translator for Translator API.
// https://github.com/WICG/translation-api/
// Both `source_lang` and `target_lang` are passed from JS via
// `translation.createTranslator()` method. They will be used in the translation
// service process to load appropriate language packages and create a
// translator.
struct TranslatorCreateOptions {
  // This is `AITranslatorCreateOptions`'s `sourceLanguage` of Translator API.
  TranslatorLanguageCode source_lang;
  // This is `AITranslatorCreateOptions`'s `targetLanguage` of Translator API.
  TranslatorLanguageCode target_lang;
};

// The availability of a translation.
enum TranslationAvailability {
  kNo,
  kReadily,
  kAfterDownload,
};

// The information of a translator availability.
struct TranslatorAvailabilityInfo {
  // The language categories for the availability matrix.
  // Each language code is the language code which is supported by the
  // Translator API's implementation library.
  // Note: `preferred` means that the language is in the user's accept language.
  array<array<TranslatorLanguageCode>> language_categories;

  // The availability matrix for each language category. The availability matrix
  // is a 2D array, where the first dimension represents the source language
  // category, and the second dimension represents the target language category.
  // The size of the availability matrix must be len(language_categories) *
  // len(language_categories).
  array<array<TranslationAvailability>> language_availability_matrix;

  // The availability of the translation service.
  TranslationAvailability availability;
};

// The manager for on-device translation.
interface TranslationManager {
  // Returns if it is supported to create a translator that could translate
  // texts from `source_lang` to `target_lang`.
  //
  // Both `source_lang` and `target_lang` are passed from JS via
  // `translation.canTranslate()` method as `TranslationLanguageOptions` in the
  // explainer. This canTranslate() method was removed from the explainer.
  // So this `CanCreateTranslator IPC` will be eventually removed when we remove
  // the `translation.canTranslate()` method (crbug.com/379643382).
  // https://github.com/WICG/translation-api/blob/5151a1b1b/README.md#full-api-surface-in-web-idl
  CanCreateTranslator(
    TranslatorLanguageCode source_lang, TranslatorLanguageCode target_lang
  ) => (CanCreateTranslatorResult result);

  // Creates a translator that could translate texts from `source_lang`
  // to `target_lang` of the passed `options`. When the passed client is
  // disconnected, the creation process will be aborted.
  CreateTranslator(
    pending_remote<TranslationManagerCreateTranslatorClient> client,
    TranslatorCreateOptions options);

  // Get the necessary information to calculate translator availability.
  GetTranslatorAvailabilityInfo() => (TranslatorAvailabilityInfo info);
};
