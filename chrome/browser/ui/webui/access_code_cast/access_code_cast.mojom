// Copyright 2021 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module access_code_cast.mojom;

import "components/media_router/common/mojom/route_request_result_code.mojom";

// Used by the WebUI page to bootstrap bidirectional communication.
interface PageHandlerFactory {
  // The WebUI page's |BrowserProxy| singleton calls this method when the page
  // is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> handler);
};

// Enum that keeps track of the result of the AddSink.
enum AddSinkResultCode {
  UNKNOWN_ERROR,
  OK,
  AUTH_ERROR,
  HTTP_RESPONSE_CODE_ERROR,
  RESPONSE_MALFORMED,
  EMPTY_RESPONSE,
  INVALID_ACCESS_CODE,
  ACCESS_CODE_NOT_FOUND,
  TOO_MANY_REQUESTS,
  SERVICE_NOT_PRESENT,
  SERVER_ERROR,
  SINK_CREATION_ERROR,
  CHANNEL_OPEN_ERROR,
  PROFILE_SYNC_ERROR,
  INTERNAL_MEDIA_ROUTER_ERROR
};


// Keeps track of how the sink was discovered from the frontend.
// This is kept track of for logging purposes.
enum CastDiscoveryMethod {
  QR_CODE,
  INPUT_ACCESS_CODE
};


// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Attempts to add the sink via |access_code|. The
  // |discovery_method| is used purely for logging. If the operation failed,
  // the |result_code| will hold a description of what happened.
  AddSink(string access_code, CastDiscoveryMethod discovery_method) =>
  (AddSinkResultCode result_code);

  // Starts a Cast session to the sink added through the page. It fails if the
  // user hasn't added a sink yet.
  // |result_code| will be set to OK if successful, or an error code if an error
  // occurred.
  CastToSink() => (media_router.mojom.RouteRequestResultCode result_code);
};

// WebUI-side handler for requests from the browser.
interface Page {
};
