// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xcb,0x4f,0x5d,0x55,
    0x14,0xc6,0xf7,0xbe,0x0f,0x2e,0x14,0x2e,0xdc,0x2a,0x6d,0x29,0x92,0x72,0x4b,0xb1,
    0x01,0x6a,0x49,0x4d,0xaa,0xd2,0x20,0x6d,0x15,0x2b,0x98,0xd4,0xf8,0x0a,0x63,0x63,
    0xe2,0xc4,0x01,0x9d,0xe8,0xa0,0x03,0x63,0x8c,0x6d,0x0c,0x61,0xd4,0x7f,0xa1,0x0f,
    0xab,0x89,0x58,0x35,0xb5,0x8f,0xa1,0xf5,0x51,0x35,0x54,0x89,0x06,0x2b,0x91,0x91,
    0x4a,0x8c,0x6d,0x44,0x25,0x4a,0xb1,0x5a,0xa2,0x6b,0x9d,0xfd,0x5b,0x65,0x85,0x68,
    0x7a,0x93,0x95,0x73,0xf6,0xb7,0x5e,0xdf,0x7a,0x9c,0x9d,0x9b,0xcf,0x6d,0x29,0x85,
    0x10,0xc3,0x9a,0x50,0x1b,0x1e,0x89,0x21,0xfb,0xad,0x0d,0xb9,0xa0,0xaf,0xf5,0xa1,
    0x26,0x7b,0x0e,0xed,0x7f,0x6a,0x7f,0xef,0xf3,0x2f,0x3c,0xdb,0xbb,0xf3,0x9e,0x1d,
    0xaa,0x6f,0x0c,0xf9,0xcc,0x4e,0x75,0x4d,0xa1,0x14,0x0a,0xf2,0x54,0x19,0x7d,0xe6,
    0xb9,0x03,0x8a,0x9f,0x10,0x39,0x2f,0x52,0x11,0x3b,0xc5,0x25,0x41,0x18,0x0e,0xc5,
    0xb0,0x21,0x85,0x0f,0x5b,0x78,0x1a,0x16,0xc1,0x6a,0x1d,0x96,0x03,0xab,0x38,0x2c,
    0x0f,0xd6,0xec,0xb0,0x02,0x58,0x8b,0xc3,0x8a,0x60,0x6d,0x0e,0xab,0x01,0xab,0x3a,
    0xac,0x04,0xd6,0xe9,0xb0,0x5a,0xb0,0x2e,0x87,0xd5,0x81,0xdd,0xe5,0xb0,0x35,0x60,
    0x3b,0x1c,0x56,0x0f,0xb6,0xd3,0x61,0x0d,0x60,0x7d,0x0e,0x2b,0x83,0xdd,0xef,0xb0,
    0x46,0xb0,0xbd,0xda,0x6f,0xa9,0xd4,0x7a,0x30,0x24,0x15,0x9e,0x20,0x76,0x13,0xe7,
    0x53,0xf2,0xec,0xa0,0x87,0x76,0xde,0xec,0xce,0xda,0xfb,0x4d,0x9c,0x6f,0x97,0x28,
    0xb9,0x4c,0x9f,0xcf,0xfa,0xa7,0xef,0xeb,0xc4,0xa6,0x86,0x5e,0x68,0xef,0x37,0xc8,
    0xb9,0x44,0x8f,0x4c,0x5f,0x46,0x1f,0xd0,0x37,0xc2,0xbb,0xc0,0xb9,0x82,0x7d,0x21,
    0xcb,0xb5,0xf6,0x66,0x3f,0x2d,0x8e,0x49,0xf9,0x16,0x62,0x36,0x55,0x89,0xd4,0x42,
    0xaf,0x35,0x56,0x3f,0xe7,0x8d,0x60,0xdb,0xe0,0xdc,0x0a,0x67,0xb5,0xbf,0x03,0x5d,
    0xc9,0xe9,0xdb,0x99,0xbf,0xea,0xab,0xe8,0xcb,0xd9,0xce,0xe4,0xb2,0xfe,0x6e,0xa3,
    0xb6,0x4e,0x6a,0x33,0xbf,0xed,0x70,0xb1,0x73,0x1f,0x33,0xb1,0xf3,0x20,0x79,0xb4,
    0xf6,0x47,0x89,0x99,0x77,0xfa,0x11,0x76,0xc7,0xce,0xa3,0xab,0x78,0x1f,0x64,0x67,
    0xec,0x7c,0xc8,0xd5,0x7d,0x18,0x5b,0x9f,0x7f,0x8c,0x59,0xd8,0x79,0x7c,0x15,0xdf,
    0x23,0xf4,0x7e,0xbd,0xb0,0x38,0xca,0xac,0x94,0xdb,0x31,0x79,0x1e,0x45,0xa7,0xb1,
    0x8f,0xd3,0xaf,0x63,0xf4,0xf4,0x38,0xdf,0xa7,0xcd,0xfd,0x35,0xec,0x73,0x59,0xaf,
    0xeb,0xc2,0x04,0xbc,0xb8,0x0a,0x6e,0xfe,0xec,0xac,0x31,0xdf,0xe2,0x7d,0x82,0x98,
    0x7a,0x3e,0xe5,0xf4,0xe7,0xe8,0x4d,0x05,0xfd,0x39,0xee,0x03,0xc5,0xee,0x95,0xe9,
    0xe4,0xe0,0x17,0xc0,0xfe,0x14,0x44,0x67,0x36,0x00,0xff,0x93,0x70,0x7c,0x4c,0x3a,
    0xae,0xfc,0x5e,0x07,0x3b,0xe9,0xb8,0x1c,0x60,0x67,0xdf,0x40,0xff,0x80,0x44,0xd0,
    0x7d,0x78,0x9f,0x9d,0x69,0x25,0x9e,0xda,0x5c,0x00,0x7f,0x45,0x6c,0xf4,0xfc,0x01,
    0x7e,0x17,0xf0,0xd3,0xde,0x7d,0x88,0x5f,0x3b,0x7e,0xda,0x83,0x8f,0xc0,0xdf,0x14,
    0x1b,0xdd,0x9d,0x8f,0xc1,0x74,0x77,0x96,0x84,0xf9,0x24,0x7c,0xfe,0x12,0x7b,0xd5,
    0x5d,0x14,0x99,0xa4,0x1e,0x7d,0x7f,0x42,0xfc,0x74,0x56,0x9f,0x92,0x53,0x7f,0x2f,
    0x31,0xbf,0xcf,0xc0,0x9f,0x94,0x93,0x72,0xea,0x8d,0x09,0x33,0xbb,0xeb,0x12,0xc3,
    0x62,0xe9,0x73,0x51,0xac,0xd4,0x6e,0x77,0x4c,0x36,0x45,0x7c,0x2e,0xba,0x1a,0x2e,
    0x51,0xc3,0x76,0x57,0xc3,0xe7,0xe0,0x56,0xc3,0x17,0x60,0x56,0xc3,0xb4,0xab,0x41,
    0x75,0x53,0x22,0xd3,0xe4,0x9d,0x72,0x35,0x7c,0x49,0xee,0xe8,0x6a,0xf8,0x0a,0xdc,
    0x6a,0xb8,0x3b,0x26,0xcc,0xec,0xb4,0x06,0x8b,0x35,0xed,0x6a,0xd8,0x13,0x93,0xcd,
    0x24,0x3e,0x53,0xae,0x86,0xaf,0xa9,0xa1,0xcf,0xd5,0x70,0x19,0xdc,0x6a,0xf8,0x06,
    0xcc,0x6a,0x98,0x75,0x35,0xa8,0x6e,0x46,0x64,0x96,0xbc,0x33,0xec,0x91,0xe6,0xfd,
    0x96,0xdc,0x7b,0xe2,0xca,0x3e,0x2b,0x47,0xb3,0x9d,0x75,0x1c,0xf7,0x62,0x37,0x8d,
    0xdf,0x0c,0x7c,0x74,0xe7,0xdf,0x66,0xdf,0x6d,0xe7,0xde,0x81,0xf3,0xb8,0xdb,0xb9,
    0x77,0xc1,0x5f,0x66,0xe7,0x4e,0x83,0x69,0x5c,0xf5,0xd3,0x6f,0xfe,0x3d,0xfc,0xc6,
    0xf0,0xd3,0x9e,0x9e,0x01,0x7f,0x5a,0xbc,0xf4,0xfe,0x39,0x4b,0xbe,0xd3,0x7c,0xa3,
    0x67,0x5c,0xaf,0xbe,0xc3,0x7f,0xd0,0xf5,0xea,0x7b,0x70,0xeb,0xd5,0x0f,0x60,0xd6,
    0xab,0x18,0x57,0x7a,0xa5,0xba,0x39,0x91,0x79,0xea,0x9f,0x63,0xde,0x1a,0xe7,0x47,
    0x72,0xe7,0xb3,0xfe,0xd5,0x66,0x77,0xde,0x4f,0x60,0x67,0xdd,0x77,0xa8,0x9c,0x1e,
    0x17,0xe6,0xaa,0xbf,0x82,0x9f,0xc9,0x61,0x89,0xa5,0xf8,0x55,0x7c,0xaf,0x64,0xb1,
    0xea,0xb2,0xba,0x7e,0x26,0xce,0x55,0xee,0x82,0x22,0xf7,0x5f,0x9e,0x99,0x28,0x4f,
    0xe5,0x34,0xef,0xea,0xfd,0x85,0x7a,0x47,0x5c,0xbd,0xbf,0x82,0x5b,0xbd,0xbf,0x81,
    0x59,0xbd,0x8b,0x6e,0x37,0x54,0xb7,0x90,0xcd,0x38,0xc5,0x5e,0x70,0xf5,0xfe,0xee,
    0xea,0x9d,0x20,0xd6,0x1f,0xe0,0x9d,0x70,0x32,0xbf,0x45,0xf6,0x44,0x6d,0xae,0x91,
    0x73,0x1e,0xfb,0x05,0xf2,0x06,0xd7,0xe7,0x6b,0x19,0x96,0x1a,0xa6,0xfe,0x4b,0x2e,
    0xef,0xf5,0xff,0xe8,0xf3,0xdf,0xb7,0xe8,0xf3,0x0d,0xfc,0x4c,0x5e,0xa5,0xcf,0xcb,
    0xf8,0xde,0x70,0x7d,0xfe,0x87,0x38,0xcb,0xff,0xd3,0x67,0xe3,0xa4,0xcf,0x45,0x76,
    0x6e,0x30,0x26,0x9f,0x45,0xfc,0x97,0x56,0xcd,0x24,0x3a,0xdb,0x07,0x63,0x9a,0xe5,
    0x1c,0x7e,0x1a,0xe7,0x45,0xfe,0x1f,0xe4,0x63,0xd2,0xdb,0xfc,0x0a,0x31,0xcd,0x6f,
    0xd4,0xcd,0xaf,0x18,0x13,0x6e,0xf3,0xab,0x89,0x09,0xb3,0xf9,0xf5,0xb8,0x3e,0xaa,
    0xae,0x24,0xd2,0x00,0x0f,0x7d,0xd7,0x3a,0x35,0x57,0x7d,0x4c,0xf9,0x54,0xec,0x3f,
    0x67,0xce,0xd5,0xd9,0x83,0x4f,0x83,0xe3,0x53,0x86,0xcf,0x41,0xc7,0xa7,0x31,0x26,
    0xdc,0xf8,0x34,0xc5,0x84,0x19,0x9f,0x6e,0xc7,0x47,0x75,0x15,0x91,0x66,0x62,0xeb,
    0xbb,0xdd,0x97,0xb7,0x19,0x1f,0xee,0x47,0xe5,0x78,0x5f,0x5c,0xc1,0xed,0xee,0xe9,
    0xc6,0xb7,0xd9,0xdd,0x0b,0xeb,0xe0,0x75,0xc8,0xdd,0x0b,0xeb,0x63,0xc2,0x3f,0x21,
    0x7e,0x4b,0x4c,0xd8,0x98,0xdb,0xfd,0x8d,0x31,0xe1,0xe3,0x70,0x6d,0x73,0x5c,0x55,
    0xd7,0x2a,0xd2,0x46,0x3e,0x7d,0x37,0x5e,0xbb,0xf0,0xc9,0xbb,0x7b,0xdb,0xec,0xda,
    0x98,0xb5,0xda,0x3d,0x04,0x77,0xe5,0xba,0x8b,0x78,0xc6,0x67,0x13,0x7c,0x8e,0x38,
    0x3e,0xed,0x31,0xe1,0xc6,0xa7,0xc3,0xf1,0x51,0x5d,0x55,0xa4,0x83,0x3c,0x55,0xc7,
    0xa7,0x1f,0x1f,0xcd,0x97,0x83,0x8f,0xd9,0x75,0x38,0x3e,0xfb,0x62,0xb2,0x51,0x8e,
    0xfd,0xc4,0x33,0x3e,0x9d,0xf0,0x19,0x71,0x7c,0xee,0x8c,0x09,0x37,0x3e,0x5d,0x8e,
    0x8f,0xea,0xb6,0x8a,0x74,0x91,0x67,0xab,0xe3,0x33,0x10,0xd3,0xff,0x89,0x7d,0x71,
    0x65,0x9f,0xcc,0xae,0xcb,0xf1,0x19,0x8e,0xc9,0x46,0x39,0x0e,0x10,0xcf,0xcf,0xb8,
    0xdb,0xd9,0x0e,0xc5,0xb4,0x0f,0xba,0x33,0xc3,0xe4,0xf5,0x7b,0xda,0xe3,0x6c,0x1f,
    0x8e,0x69,0xbf,0x75,0xdf,0xd5,0x4f,0xe3,0xec,0x16,0x26,0xe7,0xd1,0x2d,0xcb,0xd4,
    0xfa,0x44,0xfe,0x05,0x6a,0xc8,0xc1,0x4d,0xcc,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2D src;
// layout(location = 0)out ivec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       ivec4 transformSrcValue(uvec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           uvec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
