// Copyright 2020 The Cobalt Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Custom API for getting and setting Evergreen update settings.

[Conditional=SB_IS_EVERGREEN]
interface H5vccUpdater {
  DOMString getUpdaterChannel();
  void setUpdaterChannel(DOMString channel);

  DOMString getUpdateStatus();

  void resetInstallations();

  unsigned short getInstallationIndex();

  DOMString getLibrarySha256(unsigned short index);

  boolean getUseCompressedUpdates();

  // Sets whether compressed (rather than uncompressed) Evergreen binaries
  // should be requested, overwriting any value set by the
  // --use_uncompressed_updates command-line switch. This API should only be
  // used for testing.
  void setUseCompressedUpdates(boolean use_compressed_updates);

  // Toggles the ability to load self-signed packages in the updater. This
  // should only be used for testing and should not be available in production.
  boolean getAllowSelfSignedPackages();
  void setAllowSelfSignedPackages(boolean allow_self_signed_packages);

  // Sets the URL the updater will use for updates. This should only be used for
  // testing and should not be available in production.
  DOMString getUpdateServerUrl();
  void setUpdateServerUrl(DOMString update_server_url);

  // Sets if network encryption is required for the update server. This should
  // only be used for testing and should not be available in production.
  boolean getRequireNetworkEncryption();
  void setRequireNetworkEncryption(boolean require_network_encryption);
};
