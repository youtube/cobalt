// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     J.N

#ifndef TEMP_DIR_HEADER_
#define TEMP_DIR_HEADER_

#include <iterator>

#include "third_party/jni_zero/jni_zero_internal.h"

extern const int64_t kJniZeroHashWhole = 3865356290363738592LL;
extern const int64_t kJniZeroHashPriority = 0LL;

// Forward declarations (methods).

JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1bar(
    JNIEnv* env,
    jclass jcaller,
    jobject sample);
JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_1jni_11zero_1SampleForAnnotationProcessor_1foo(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jboolean Java_org_1jni_11zero_1SampleForAnnotationProcessor_1hasPhalange(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnClass(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnClasses(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedAppObjects(
    JNIEnv* env,
    jclass jcaller,
    jclass __arrayClazz);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedInts(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedString(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedStrings(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnObject(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnObjects(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnString(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStrings(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStruct(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStructs(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnThrowable(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnThrowables(
    JNIEnv* env,
    jclass jcaller);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1revString(
    JNIEnv* env,
    jclass jcaller,
    jobject stringToReverse);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1sendSamplesToNative(
    JNIEnv* env,
    jclass jcaller,
    jobject strs);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1sendToNative(
    JNIEnv* env,
    jclass jcaller,
    jobject strs);
JNI_POSSIBLE_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1testAllPrimitives(
    JNIEnv* env,
    jclass jcaller,
    jint zint,
    jobject ints,
    jlong zlong,
    jobject longs,
    jshort zshort,
    jobject shorts,
    jchar zchar,
    jobject chars,
    jbyte zbyte,
    jobject bytes,
    jdouble zdouble,
    jobject doubles,
    jfloat zfloat,
    jobject floats,
    jboolean zbool,
    jobject bools);
JNI_POSSIBLE_BOUNDARY_EXPORT void Java_org_1jni_11zero_1SampleForAnnotationProcessor_1testSpecialTypes(
    JNIEnv* env,
    jclass jcaller,
    jobject clazz,
    jobject classes,
    jobject throwable,
    jobject throwables,
    jobject string,
    jobject strings,
    jobject convertedString,
    jobject convertedStrings,
    jobject optionalString,
    jobject tStruct,
    jobject structs,
    jobject obj,
    jobject convertedObj,
    jobject objects,
    jobject nestedInterface,
    jobject view,
    jobject context,
    jobject convertedObjects);

JNI_BOUNDARY_EXPORT jboolean Java_J_N__1Z(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1hasPhalange(env, jcaller);
}
JNI_BOUNDARY_EXPORT void Java_J_N__1V(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1foo(env, jcaller);
}
JNI_BOUNDARY_EXPORT void Java_J_N__1V_1OOOOOOOOOOOOOOOOOO(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jobject jobject_param1, jobject jobject_param2, jobject jobject_param3, jobject jobject_param4, jobject jobject_param5, jobject jobject_param6, jobject jobject_param7, jobject jobject_param8, jobject jobject_param9, jobject jobject_param10, jobject jobject_param11, jobject jobject_param12, jobject jobject_param13, jobject jobject_param14, jobject jobject_param15, jobject jobject_param16, jobject jobject_param17, jobject jobject_param18) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1testSpecialTypes(env, jcaller, jobject_param1, jobject_param2, jobject_param3, jobject_param4, jobject_param5, jobject_param6, jobject_param7, jobject_param8, jobject_param9, jobject_param10, jobject_param11, jobject_param12, jobject_param13, jobject_param14, jobject_param15, jobject_param16, jobject_param17, jobject_param18);
}
JNI_BOUNDARY_EXPORT jobject Java_J_N__1O(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {

        switch (switch_num) {
          case 0:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnClass(env, jcaller);
          case 1:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnClasses(env, jcaller);
          case 2:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedInts(env, jcaller);
          case 3:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedString(env, jcaller);
          case 4:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedStrings(env, jcaller);
          case 5:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnObject(env, jcaller);
          case 6:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnObjects(env, jcaller);
          case 7:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnString(env, jcaller);
          case 8:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStrings(env, jcaller);
          case 9:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStruct(env, jcaller);
          case 10:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStructs(env, jcaller);
          case 11:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnThrowable(env, jcaller);
          case 12:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnThrowables(env, jcaller);
          default:
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobject Java_J_N__1O_1ZBCDFIJSOOOOOOOO(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jboolean jboolean_param1, jbyte jbyte_param1, jchar jchar_param1, jdouble jdouble_param1, jfloat jfloat_param1, jint jint_param1, jlong jlong_param1, jshort jshort_param1, jobject jobject_param1, jobject jobject_param2, jobject jobject_param3, jobject jobject_param4, jobject jobject_param5, jobject jobject_param6, jobject jobject_param7, jobject jobject_param8) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1testAllPrimitives(env, jcaller, jint_param1, jobject_param1, jlong_param1, jobject_param2, jshort_param1, jobject_param3, jchar_param1, jobject_param4, jbyte_param1, jobject_param5, jdouble_param1, jobject_param6, jfloat_param1, jobject_param7, jboolean_param1, jobject_param8);
}
JNI_BOUNDARY_EXPORT jobject Java_J_N__1O_1L(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jclass jclass_param1) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedAppObjects(env, jcaller, jclass_param1);
}
JNI_BOUNDARY_EXPORT jobject Java_J_N__1O_1O(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jobject jobject_param1) {

        switch (switch_num) {
          case 0:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1bar(env, jcaller, jobject_param1);
          case 1:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1revString(env, jcaller, jobject_param1);
          case 2:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1sendSamplesToNative(env, jcaller, jobject_param1);
          case 3:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1sendToNative(env, jcaller, jobject_param1);
          default:
            JNI_ZERO_DCHECK(false);
            return {};
        }
}

// Helper Methods.

namespace {

bool RegisterNative_J_N(JNIEnv* env) {
  static const JNINativeMethod kMethods[] = {
    { "_O", "(I)Ljava/lang/Object;", reinterpret_cast<void*>(Java_J_N__1O) },
    { "_O_L", "(ILjava/lang/Class;)Ljava/lang/Object;", reinterpret_cast<void*>(Java_J_N__1O_1L) },
    { "_O_O", "(ILjava/lang/Object;)Ljava/lang/Object;", reinterpret_cast<void*>(Java_J_N__1O_1O) },
    { "_O_ZBCDFIJSOOOOOOOO",
        "(IZBCDFIJSLjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
        reinterpret_cast<void*>(Java_J_N__1O_1ZBCDFIJSOOOOOOOO) },
    { "_V", "(I)V", reinterpret_cast<void*>(Java_J_N__1V) },
    { "_V_OOOOOOOOOOOOOOOOOO",
        "(ILjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V",
        reinterpret_cast<void*>(Java_J_N__1V_1OOOOOOOOOOOOOOOOOO) },
    { "_Z", "(I)Z", reinterpret_cast<void*>(Java_J_N__1Z) }
  };

  jni_zero::ScopedJavaLocalRef<jclass> native_clazz =
      jni_zero::GetClass(env, "J/N");
  if (env->RegisterNatives(native_clazz.obj(), kMethods, std::size(kMethods)) < 0) {
    jni_zero::internal::HandleRegistrationError(env, native_clazz.obj(), __FILE__);
    return false;
  }

  return true;
}

}  // namespace

// Main Register Function.

namespace {

bool RegisterNatives(JNIEnv* env) {
  // Register natives in a proxy.
  if (!RegisterNative_J_N(env)) {
    return false;
  }

  return true;
}

}  // namespace

#endif  // TEMP_DIR_HEADER_
