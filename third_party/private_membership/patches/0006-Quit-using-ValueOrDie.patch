diff --git a/src/internal/encrypted_bucket_id.cc b/src/internal/encrypted_bucket_id.cc
index 3b46e5064b170..65db1ec945785 100644
--- a/src/internal/encrypted_bucket_id.cc
+++ b/src/internal/encrypted_bucket_id.cc
@@ -42,7 +42,7 @@ namespace rlwe {
   if(!status_or_encrypted_id.ok()){
       return absl::InvalidArgumentError(status_or_encrypted_id.status().message());
   }
-  std::string encrypted_id = std::move(status_or_encrypted_id).ValueOrDie();
+  std::string encrypted_id = std::move(status_or_encrypted_id).value();
   return EncryptedBucketId::Create(encrypted_id, params, ctx);
 }
 
diff --git a/src/internal/hashed_bucket_id.cc b/src/internal/hashed_bucket_id.cc
index 8163b0a288b77..2a4ef6ffd0c23 100644
--- a/src/internal/hashed_bucket_id.cc
+++ b/src/internal/hashed_bucket_id.cc
@@ -59,7 +59,7 @@ bool IsEmpty(absl::string_view hashed_bucket_id, int bit_length) {
   if (!status_or_hashed_bucket_id.ok()) {
     return status_or_hashed_bucket_id.status();
   }
-  return Create(std::move(status_or_hashed_bucket_id).ValueOrDie(),
+  return Create(std::move(status_or_hashed_bucket_id).value(),
                 params.hashed_bucket_id_length());
 }
 
diff --git a/src/internal/oprf_utils.cc b/src/internal/oprf_utils.cc
index b6b6a5d274410..a7f235aee3d15 100644
--- a/src/internal/oprf_utils.cc
+++ b/src/internal/oprf_utils.cc
@@ -31,7 +31,7 @@ namespace private_membership {
     return absl::InvalidArgumentError(
         status_or_reencrypted_id.status().message());
   }
-  auto reencrypted_id = std::move(status_or_reencrypted_id).ValueOrDie();
+  auto reencrypted_id = std::move(status_or_reencrypted_id).value();
   doubly_encrypted_id.set_doubly_encrypted_id(std::string(reencrypted_id));
 
   return doubly_encrypted_id;
diff --git a/src/internal/rlwe_id_utils.cc b/src/internal/rlwe_id_utils.cc
index 67cc4f95cda7c..5368f961e7be0 100644
--- a/src/internal/rlwe_id_utils.cc
+++ b/src/internal/rlwe_id_utils.cc
@@ -36,7 +36,7 @@ namespace rlwe {
   if(!status_or_encrypted_id.ok()){
       return absl::InvalidArgumentError(status_or_encrypted_id.status().message());
   }
-  std::string encrypted_id = std::move(status_or_encrypted_id).ValueOrDie();
+  std::string encrypted_id = std::move(status_or_encrypted_id).value();
   return ComputeBucketStoredEncryptedId(encrypted_id, params, ctx);
 }
 
diff --git a/src/internal/utils.cc b/src/internal/utils.cc
index f56996fdac99d..2f218bd5fa77f 100644
--- a/src/internal/utils.cc
+++ b/src/internal/utils.cc
@@ -58,7 +58,7 @@ bool IsValid(absl::string_view in, int bit_length) {
   if (!status_or_truncated_bytes.ok()) {
     return false;
   }
-  return (status_or_truncated_bytes.ValueOrDie() == in);
+  return (status_or_truncated_bytes.value() == in);
 }
 
 }  // namespace rlwe
diff --git a/src/private_membership_rlwe_client.cc b/src/private_membership_rlwe_client.cc
index 0b21fbfd6d83a..15a157a4b5122 100644
--- a/src/private_membership_rlwe_client.cc
+++ b/src/private_membership_rlwe_client.cc
@@ -90,7 +90,7 @@ PrivateMembershipRlweClient::CreateInternal(
   if (!status_or_ec_cipher.ok()) {
     return absl::InvalidArgumentError(status_or_ec_cipher.status().message());
   }
-  auto ec_cipher = std::move(status_or_ec_cipher).ValueOrDie();
+  auto ec_cipher = std::move(status_or_ec_cipher).value();
 
    return absl::WrapUnique<PrivateMembershipRlweClient>(
       new PrivateMembershipRlweClient(use_case, plaintext_ids,
@@ -120,7 +120,7 @@ PrivateMembershipRlweClient::CreateOprfRequest() {
     return absl::InternalError(status_or_client_encrypted_id.status().message());
     }
     std::string client_encrypted_id =
-        status_or_client_encrypted_id.ValueOrDie();
+        status_or_client_encrypted_id.value();
     *request.add_encrypted_ids() = client_encrypted_id;
 
     // Populate the map of client encrypted id to plaintext id.
@@ -207,7 +207,7 @@ PrivateMembershipRlweClient::CreateQueryRequest(
     if (!status_or_server_encrypted_id.ok()) {
         return absl::InternalError(status_or_server_encrypted_id.status().message());
     }
-    auto server_encrypted_id = status_or_server_encrypted_id.ValueOrDie();
+    auto server_encrypted_id = status_or_server_encrypted_id.value();
 
     // Truncate the hash of the server encrypted id by the first
     // encrypted_bucket_id_length bits to compute the encrypted bucket id.
