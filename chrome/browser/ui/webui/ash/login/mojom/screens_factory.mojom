// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.screens_factory.mojom;

import "chrome/browser/ui/webui/ash/login/mojom/screens_common.mojom";
import "chrome/browser/ui/webui/ash/login/mojom/screens_login.mojom";
import "chrome/browser/ui/webui/ash/login/mojom/screens_oobe.mojom";
import "chrome/browser/ui/webui/ash/login/mojom/screens_osauth.mojom";

// Lives in the browser process. A renderer uses this to create a page handler
// that enables communication between a renderer and the browser process.
interface ScreensFactory {
  // ash.screens_common.mojom

  // Establish a AiIntroScreen pipe for handling the communication for
  // the AiIntroPageHandler component.
  EstablishAiIntroScreenPipe(
      pending_receiver<ash.screens_common.mojom.AiIntroPageHandler> handler)
      => (pending_receiver<ash.screens_common.mojom.AiIntroPage> pending);

  // Establish a AppDownloadingScreen pipe for handling the communication for
  // the AppDownloadingPageHandler component.
  EstablishAppDownloadingScreenPipe(
      pending_receiver<ash.screens_common.mojom.AppDownloadingPageHandler>
          handler);

  // Establish a DrivePinningScreen pipe for handling the communication for the
  // DrivePinningPageHandler and the DrivePinningPage component.
  EstablishDrivePinningScreenPipe(
      pending_receiver<ash.screens_common.mojom.DrivePinningPageHandler> handler)
      => (pending_receiver<ash.screens_common.mojom.DrivePinningPage> pending);

  // Establish a GaiaInfoScreen pipe for handling the communication for the
  // GaiaInfoPageHandler and the GaiaInfoPage component.
  EstablishGaiaInfoScreenPipe(
      pending_receiver<ash.screens_common.mojom.GaiaInfoPageHandler> handler)
      => (pending_receiver<ash.screens_common.mojom.GaiaInfoPage> pending);

  // Establish a GestureNavigationScreen pipe for handling the communication for
  // the GestureNavigationPageHandler component.
  EstablishGestureNavigationScreenPipe(
      pending_receiver<ash.screens_common.mojom.GestureNavigationPageHandler>
          handler);

  // Establish a GeminiIntroScreen pipe for handling the communication for the
  // GeminiIntroPageHandler and the GeminiIntroPage component.
  EstablishGeminiIntroScreenPipe(
      pending_receiver<ash.screens_common.mojom.GeminiIntroPageHandler> handler);

  // ash.screens_oobe.mojom

  // Establish a ConsumerUpdateScreen pipe for handling the communication for
  // the ConsumerUpdatePageHandler and the ConsumerUpdatePage component.
  EstablishConsumerUpdateScreenPipe(
      pending_receiver<ash.screens_oobe.mojom.ConsumerUpdatePageHandler> handler)
      => (pending_receiver<ash.screens_oobe.mojom.ConsumerUpdatePage> pending);

  // Establish a PackagedLicenseScreen pipe for handling the communication for
  // the PackagedLicensePageHandler component.
  EstablishPackagedLicenseScreenPipe(
      pending_receiver<ash.screens_oobe.mojom.PackagedLicensePageHandler>
          handler);

  // ash.screens_login.mojom

  // Establish a ArcVmDataMigrationScreen pipe for handling the communication
  // for the ArcVmDataMigrationPageHandler and the ArcVmDataMigrationPage
  // component.
  EstablishArcVmDataMigrationScreenPipe(
      pending_receiver<ash.screens_login.mojom.ArcVmDataMigrationPageHandler>
          handler)
      => (pending_receiver<ash.screens_login.mojom.ArcVmDataMigrationPage>
              pending);

  // Establish a EncryptionMigrationScreen pipe for handling the communication
  // for the EncryptionMigrationPageHandler and the EncryptionMigrationPage component.
  EstablishEncryptionMigrationScreenPipe(
    pending_receiver<ash.screens_login.mojom.EncryptionMigrationPageHandler>
        handler) => (pending_receiver<ash.screens_login.mojom.EncryptionMigrationPage> pending) ;

  // ash.screens_osauth.mojom

  // Establish a LocalDataLossWarningScreen pipe for handling the communication
  // for the LocalDataLossWarningPageHandler component.
  EstablishLocalDataLossWarningScreenPipe(
      pending_receiver<ash.screens_osauth.mojom.LocalDataLossWarningPageHandler>
          handler);
};
