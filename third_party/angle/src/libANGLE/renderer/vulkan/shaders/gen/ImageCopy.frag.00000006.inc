// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xdb,0x4f,0x5c,0x55,
    0x14,0xc6,0xcf,0x3e,0x33,0xc3,0x0c,0x6d,0x61,0x86,0x54,0x4a,0x4b,0x45,0xc0,0xa9,
    0x56,0x18,0x5b,0x1b,0xad,0x86,0x54,0x44,0x1a,0xb4,0xb4,0x86,0xc4,0x1b,0x8f,0x24,
    0xc6,0xc4,0x17,0x1f,0xe8,0x8b,0xbe,0x34,0x31,0xc6,0x18,0xab,0x09,0x6f,0xfd,0x17,
    0x7a,0xb1,0x1a,0x83,0x55,0x53,0x4b,0xfb,0x68,0xbd,0x10,0x0d,0x2a,0xb1,0xa1,0x4a,
    0xe4,0x49,0x25,0xc6,0x36,0xa2,0x12,0xa1,0xd8,0x88,0x71,0xad,0xb3,0x7f,0xab,0xac,
    0x90,0x26,0x9d,0x64,0xe5,0x9c,0xfd,0xad,0xdb,0xb7,0x2e,0x67,0x43,0x2e,0xad,0x16,
    0x93,0x24,0x24,0x1b,0x92,0x52,0xf2,0x44,0x48,0xb2,0x5f,0x53,0x92,0x26,0xfa,0xba,
    0x31,0xa9,0xcb,0x9e,0x83,0x43,0xcf,0x0e,0xed,0x7e,0xe9,0xe5,0x17,0x76,0xef,0x7d,
    0x70,0x8f,0xea,0x1b,0x93,0x5c,0x66,0xa7,0xba,0x72,0x52,0x4c,0xf2,0xf2,0x54,0x19,
    0x7d,0xfe,0xc5,0xc3,0x8a,0x9f,0x12,0xb9,0x20,0x52,0x11,0x3b,0xc5,0x25,0x41,0x72,
    0x30,0x29,0x24,0x2d,0x31,0x7c,0x52,0xe5,0x69,0x58,0x00,0x2b,0x39,0x2c,0x05,0xab,
    0x38,0x2c,0x07,0x76,0x9b,0xc3,0xf2,0x60,0x5b,0x1d,0x56,0x00,0xbb,0xdd,0x61,0x75,
    0x60,0x1d,0x0e,0x2b,0x82,0xed,0x70,0x58,0x09,0xec,0x1e,0x87,0xd5,0x83,0xdd,0xeb,
    0xb0,0x0d,0x60,0x7b,0x1c,0xb6,0x11,0x6c,0xaf,0xc3,0x36,0x81,0xf5,0x38,0xac,0x01,
    0xac,0xd7,0x61,0x8d,0x60,0xfd,0xda,0x6f,0xa9,0xd4,0x7a,0x30,0x28,0x15,0x9e,0x22,
    0x76,0x99,0xf3,0x19,0x79,0xde,0x49,0x0f,0xed,0xdc,0xe9,0xce,0xda,0xfb,0x3b,0x38,
    0x6f,0x96,0x28,0x69,0xa6,0xcf,0x65,0xfd,0xd3,0xf7,0x66,0xb1,0xa9,0xa3,0x17,0xda,
    0xfb,0x16,0x39,0x17,0xe9,0x51,0xca,0xb9,0x81,0x73,0x1e,0xfb,0x32,0xf6,0x09,0xfa,
    0x0a,0x7c,0xf2,0x59,0xae,0xa6,0x1b,0xfd,0xb4,0x38,0x26,0xe5,0x5b,0x88,0xd9,0x74,
    0x48,0xa4,0xad,0xf4,0x5a,0x63,0x3d,0xcc,0x79,0x1b,0x58,0x0d,0xce,0xad,0x70,0x56,
    0xfb,0xed,0xe8,0x8a,0x4e,0xdf,0xce,0xfc,0x55,0xdf,0x81,0xbe,0x9c,0xed,0x4c,0x9a,
    0xf5,0xb7,0x46,0x2d,0x3b,0xa8,0xc5,0xfc,0x76,0xc1,0xc5,0xf4,0x0f,0x90,0xc7,0xf4,
    0x3d,0xcc,0xc8,0xce,0x03,0xe4,0xd5,0x5e,0x0c,0xe1,0x9b,0x73,0xfa,0x61,0x76,0xc9,
    0xce,0x23,0xeb,0xf2,0x8d,0xae,0xab,0xeb,0x08,0x3b,0x65,0xe7,0xa3,0xec,0x89,0xd6,
    0xf1,0x26,0xb6,0x75,0x4e,0x3f,0xc6,0xac,0xec,0x7c,0x8c,0x59,0x6c,0x11,0x16,0xc7,
    0x99,0x95,0x72,0x3b,0x21,0xcf,0xe3,0xe8,0x34,0xd6,0x49,0xea,0x3a,0x41,0x8f,0x4f,
    0xf2,0xbd,0xda,0x1e,0xbc,0x8d,0x7d,0x9a,0xf5,0xbe,0x3e,0x19,0x27,0x2f,0x57,0xc3,
    0x8d,0x9f,0x9d,0x35,0xe6,0xfb,0xbc,0x8f,0x13,0x53,0xcf,0x67,0x9c,0xfe,0x3c,0xbd,
    0xa9,0xa0,0x3f,0xcf,0xfd,0xa0,0xd8,0x43,0x32,0xad,0x14,0x7e,0x09,0xd8,0x8a,0x20,
    0x3a,0xc3,0x47,0xe0,0x7f,0x1a,0x8e,0x4f,0x4a,0xc7,0x95,0xdf,0x3b,0x60,0xa7,0x1d,
    0x97,0xc3,0xec,0xf0,0xbb,0xe8,0xf7,0x4b,0x04,0xdd,0x8f,0x4f,0xd8,0xa1,0x56,0xe2,
    0xa9,0xcd,0x45,0xf0,0xd7,0xc5,0x46,0xcf,0x9f,0xe2,0x77,0x11,0x3f,0xed,0xdd,0x67,
    0xf8,0xb5,0xe3,0xa7,0x3b,0xf1,0x39,0xf8,0x7b,0x62,0xa3,0xbb,0xf4,0x05,0x98,0xee,
    0xd2,0x35,0x61,0x3e,0x05,0x9f,0xeb,0x62,0xaf,0xba,0x49,0x91,0x29,0xea,0xd1,0xf7,
    0xa7,0xc5,0x4f,0x7b,0xf9,0x25,0x39,0xf5,0xf7,0x2a,0xf3,0xfb,0x0a,0xfc,0x19,0x39,
    0x29,0xa7,0xfb,0x42,0xc4,0xcc,0xee,0x1f,0x89,0x61,0xb1,0xf4,0xb9,0x24,0x56,0x6a,
    0xf7,0x68,0x88,0x36,0x05,0x7c,0x26,0x5d,0x0d,0x5f,0x53,0xc3,0x2e,0x57,0xc3,0x37,
    0xe0,0x56,0xc3,0xb7,0x60,0x56,0xc3,0x8c,0xab,0x41,0x75,0xd3,0x22,0x33,0xe4,0x9d,
    0x76,0x35,0x7c,0x47,0xee,0xe0,0x6a,0xb8,0x04,0x6e,0x35,0xdc,0x1f,0x22,0x66,0x76,
    0x5a,0x83,0xc5,0x9a,0x71,0x35,0xf4,0x87,0x68,0x33,0x85,0xcf,0xb4,0xab,0xe1,0x32,
    0x35,0xf4,0xb8,0x1a,0xbe,0x07,0xb7,0x1a,0x7e,0x00,0xb3,0x1a,0xe6,0x5c,0x0d,0xaa,
    0x9b,0x15,0x99,0x23,0xef,0x2c,0x7b,0xa4,0x79,0x7f,0x24,0x77,0x7f,0x58,0xdb,0x67,
    0xe5,0x68,0xb6,0x73,0x8e,0xe3,0x7e,0xec,0x66,0xf0,0x9b,0x85,0x8f,0xee,0xfc,0x07,
    0xec,0xbb,0xed,0xdc,0x87,0x70,0x1e,0x71,0x3b,0xf7,0x11,0xf8,0x6b,0xec,0xdc,0x59,
    0x30,0x8d,0xab,0x7e,0xfa,0x8d,0x7f,0x8c,0xdf,0x18,0x7e,0xda,0xd3,0x73,0xe0,0xcf,
    0x89,0x97,0xde,0x07,0x13,0xe4,0x3b,0xcb,0x37,0x7a,0xce,0xf5,0xea,0x27,0xfc,0x07,
    0x5c,0xaf,0x7e,0x06,0xb7,0x5e,0xfd,0x02,0x66,0xbd,0x4a,0xc3,0x5a,0xaf,0x54,0x37,
    0x2f,0xb2,0x40,0xfd,0xf3,0x6e,0xde,0xbf,0x92,0x3b,0x97,0xf5,0xaf,0x94,0xdd,0x79,
    0xbf,0x81,0x4d,0xb8,0xef,0x50,0x39,0x3d,0x25,0x1e,0xaa,0xbf,0x82,0x9f,0xc9,0x1b,
    0x12,0x4b,0xf1,0xab,0xf8,0x5e,0xc9,0x62,0xd5,0x67,0x75,0xfd,0x4e,0x9c,0xab,0xdc,
    0x05,0x05,0x77,0xa7,0xea,0x4c,0x94,0xa7,0x72,0x5a,0x70,0xf5,0xfe,0x41,0xbd,0xc3,
    0xae,0xde,0x3f,0xc1,0xad,0xde,0xbf,0xc0,0xac,0xde,0x65,0xb7,0x1b,0xaa,0x5b,0x14,
    0x59,0xa6,0xde,0x45,0x57,0xef,0xdf,0xae,0xde,0x71,0x62,0x2d,0x81,0x8f,0xc0,0xc9,
    0xfc,0x96,0xd9,0x93,0x6a,0x96,0x23,0xe6,0x5c,0xc0,0x7e,0x91,0xbc,0xc1,0xf5,0xf9,
    0x5a,0xe6,0x97,0x64,0x98,0xfa,0xaf,0xb8,0xbc,0xd7,0x6f,0xd2,0xe7,0x7f,0x6f,0xd1,
    0xe7,0x55,0xfc,0x4c,0xde,0xa2,0xcf,0xff,0xe1,0xbb,0xea,0xfa,0xac,0xce,0x13,0xe8,
    0x6e,0xd6,0x67,0xe3,0xa4,0xcf,0x25,0x76,0xee,0x31,0x7c,0x96,0xf1,0x5f,0x59,0x37,
    0x93,0xd4,0xd9,0x0e,0x84,0x38,0xcb,0x79,0xfc,0x34,0xce,0x2b,0xfc,0xbf,0x90,0x0f,
    0x51,0x6f,0xf3,0x2b,0x84,0x38,0xbf,0x51,0x37,0xbf,0xba,0x10,0x71,0x9b,0x5f,0x31,
    0x44,0xcc,0xe6,0x57,0x73,0x7d,0x54,0x5d,0x49,0xa4,0x01,0x1e,0xfa,0xae,0x75,0x6a,
    0xae,0x4d,0x21,0xe6,0xcb,0x84,0xbf,0xd5,0xa9,0xab,0xb3,0x86,0x4f,0x83,0xe3,0xd3,
    0x08,0x9f,0x23,0x8e,0x4f,0x39,0x44,0xdc,0xf8,0x54,0x42,0xc4,0x8c,0x4f,0xb7,0xe3,
    0xa3,0xba,0x26,0x91,0x66,0x62,0xeb,0xbb,0xce,0x55,0xe3,0x6c,0x86,0x4b,0x8e,0xfb,
    0x51,0x39,0xf6,0x84,0x35,0xdc,0xee,0x9e,0x6e,0x7c,0x9b,0xdd,0xbd,0xb0,0x05,0x5e,
    0x47,0xdd,0xbd,0xd0,0x12,0x22,0x3e,0xc9,0xde,0x6c,0x0b,0x11,0x1b,0x73,0xbb,0xdf,
    0x1a,0x22,0x3e,0x02,0xd7,0x36,0xc7,0x55,0x75,0xdb,0x45,0xda,0xc8,0xa7,0xef,0xc6,
    0x6b,0x1f,0xf5,0xe5,0xdd,0xbd,0x6d,0x76,0x6d,0xcc,0x5a,0xed,0x1e,0x87,0xbb,0x72,
    0xdd,0x47,0x3c,0xe3,0xd3,0x0e,0x9f,0x63,0x8e,0x4f,0x47,0x88,0xb8,0xf1,0xa9,0x3a,
    0x3e,0xaa,0xeb,0x14,0xa9,0x92,0xa7,0xd3,0xf1,0xe9,0x85,0x8f,0xe6,0x4b,0xe1,0x63,
    0x76,0x55,0xc7,0xe7,0x40,0x88,0x36,0xca,0xb1,0x97,0x78,0xc6,0xe7,0x2e,0xf8,0x0c,
    0x3b,0x3e,0x77,0x87,0x88,0x1b,0x9f,0x2e,0xc7,0x47,0x75,0x3b,0x45,0xba,0xc8,0xb3,
    0xd3,0xf1,0xe9,0x0b,0xf1,0xff,0xc3,0x03,0x61,0x6d,0x9f,0xcc,0xae,0xcb,0xf1,0x39,
    0x14,0xa2,0x8d,0x72,0xec,0x23,0x9e,0x9f,0x71,0xb7,0xb3,0x3d,0x18,0xe2,0x3e,0xe8,
    0xce,0x1c,0x22,0xaf,0xdf,0xd3,0x9a,0xb3,0x1d,0x0c,0x71,0xbf,0x75,0xdf,0xd5,0x4f,
    0xe3,0xf4,0x09,0x93,0x0b,0xe8,0x56,0x65,0x6a,0x3d,0x22,0xff,0x03,0xe5,0x6b,0xe4,
    0x92,0xdc,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out uvec4 dst;
//
// #line 1 "shaders/src/ImageCopy.inc"
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// ivec2 transformImageCoords(ivec2 glFragCoords)
// {
//     ivec2 imageCoordsOut = glFragCoords - params . dstOffset;
//
//     if(params . flipX)
//     {
//         imageCoordsOut . x = - imageCoordsOut . x;
//     }
//     if(params . flipY)
//     {
//         imageCoordsOut . y = - imageCoordsOut . y;
//     }
//     if(params . rotateXY)
//     {
//         imageCoordsOut . xy = imageCoordsOut . yx;
//     }
//
//     return imageCoordsOut;
// }
//
//       uvec4 transformSrcValue(ivec4 srcValue)
// {
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//           uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     return dstValue;
// }
// #line 56 "shaders/src/ImageCopy.frag"
//
// void main()
// {
//     ivec2 srcSubImageCoords = transformImageCoords(ivec2(gl_FragCoord . xy));
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     dst = transformSrcValue(srcValue);
// }
