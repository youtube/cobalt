// Copyright 2023 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module side_panel.mojom;

import "url/mojom/url.mojom";

// Methods called on the browser from the companion UI.
// TODO(b/274618365): Link documentation for server side counterpart that must
// be kept in sync.
enum MethodType {
  // Method corresponding to `CompanionPageHandler.OnPromoAction`.
  kOnPromoAction = 1,

  // Method corresponding to `CompanionPageHandler.OnRegionSearchClicked`.
  kOnRegionSearchClicked = 2,

  // Method corresponding to `CompanionPageHandler.OnExpsOptInStatusAvailable`.
  kOnExpsOptInStatusAvailable = 3,

  // Method corresponding to
  // `CompanionPageHandler.OnOpenInNewTabButtonURLChanged`.
  kOnOpenInNewTabButtonURLChanged = 4,

  // Method corresponding to `CompanionPageHandler.RecordUiSurfaceShown`.
  kRecordUiSurfaceShown = 5,

  // Method corresponding to `CompanionPageHandler.RecordUiSurfaceClicked`.
  kRecordUiSurfaceClicked = 6,

  // Method called when cq candidates are available.
  kOnCqCandidatesAvailable = 7,
};

// Types of promos shown in the companion UI.
// TODO(b/274618365): Link documentation for server side counterpart that must
// be kept in sync.
enum PromoType {
  // Promo to sign-in to chrome.
  kSignin = 1,

  // Promo to turn on make searches and browsing better.
  kMsbb = 2,

  // Promo to opt into experience api.
  kExps = 3,
};

// User actions taken on a promo.
// TODO(b/274618365): Link documentation for server side counterpart that must
// be kept in sync.
enum PromoAction {
  // Promo was shown in the companion UI.
  kShown = 1,

  // User accepted the promo.
  kAccepted = 2,

  // User declined the promo.
  kRejected = 3,
};

// Data for uploading an image query.
struct ImageQuery {
  // URL to upload the image query to.
  url.mojom.Url upload_url;
  // URL of the image if it exists.
  url.mojom.Url image_url;
  // Content type representing the image to pass in the POST form.
  string content_type;
  // Array of image bytes to query.
  array<uint8> image_bytes;
  // Height of the image before transformations.
  uint32 height;
  // Width of the image before transformations.
  uint32 width;
  // Height of the image after transformations.
  uint32 downscaled_height;
  // Width of the image after transformations.
  uint32 downscaled_width;
};

// Various UI surfaces on the companion page.
enum UiSurface {
  kUnknown = 0,
  kPH = 1,
  kCQ = 2,
  kRegionSearch = 3,
};

// Factory method for creating a new WebUI page handler.
interface CompanionPageHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreateCompanionPageHandler(
      pending_receiver<CompanionPageHandler> handler,
      pending_remote<CompanionPage> page);
};

// Browser-side handler for requests from WebUI page. (TypeScript -> C++)
interface CompanionPageHandler {
  // Notify the backend that the UI is ready to be shown.
  ShowUI();

  // Called to notify the browser about user action on a promo.
  OnPromoAction(PromoType promo_type, PromoAction promo_action);

  // Called to notify the browser that user has clicked on region search button.
  OnRegionSearchClicked();

  // Called to notify the browser that the user's experience opt-in status is
  // available.
  OnExpsOptInStatusAvailable(bool is_exps_opted_in);

  // Called to notify the browser that the url used for the 'open in new tab'
  // button in the side panel header should be updated. If the url is empty
  // the button would be hidden.
  OnOpenInNewTabButtonURLChanged(url.mojom.Url url_to_open);

  // For metrics only. Called to record that a certain UI surface was shown on
  // the companion page. Additionally indicates the number of child elements
  // shown within the surface, e.g. the number of related queries shown in
  // the related queries component.
  RecordUiSurfaceShown(UiSurface ui_surface, uint32 child_element_count);

  // For metrics only. Called to record that the user clicked on the given UI
  // surface on the companion page. These clicks are actual clicks on the
  // surface which exclude clicks on the feedback elements.
  RecordUiSurfaceClicked(UiSurface ui_surface);

  // Called to notify the browser that the cq candidates are available.
  OnCqCandidatesAvailable(array<string> text_directives);
};

// WebUI page handler for request from Browser side. (C++ -> TypeScript)
interface CompanionPage {
  // Pass the companion URL needed to request the iframe to the frontend for
  // rendering. Results in a full reload of the companion side panel.
  LoadCompanionPage(url.mojom.Url new_url);

  // Notifies the companion page about subsequent navigations on the main page.
  // Results in a postmessage() call to the companion with the encoded protobuf
  // representation of the update params.
  UpdateCompanionPage(string companion_update_proto);

  // Pass a new companion URL needed along with a byte string representing the
  // image bytes that should be used for the query.
  OnImageQuery(ImageQuery image_query);

  // Pass the finding results for cq texts to the iframe.
  // `text_directives` and `results` have the same length.
  OnCqFindTextResultsAvailable(array<string> text_directives,
    array<bool> results);
};
