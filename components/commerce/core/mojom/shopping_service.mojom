// Copyright 2022 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module shopping_service.mojom;

import "mojo/public/mojom/base/string16.mojom";
import "mojo/public/mojom/base/uuid.mojom";
import "url/mojom/url.mojom";
import "mojo/public/mojom/base/values.mojom";
import "components/commerce/core/mojom/shared.mojom";

struct PricePoint {
  string date;
  float price;
  string formatted_price;
};

struct UrlInfo {
  // Title of the page represented by the URL.
  string title;

  // Url.
  url.mojom.Url url;

  // Favicon URL if it exists, otherwise an empty URL.
  url.mojom.Url favicon_url;

  // Thumbnail URL if it exists, otherwise an empty URL.
  url.mojom.Url thumbnail_url;

  // A section of text from the URL if available. This string will be rendered
  // as text only, no HTML tags will be processed if they exist.
  string previewText;
};

struct PriceInsightsInfo {
  enum PriceBucket {
    kUnknown,
    kLow,
    kTypical,
    kHigh,
  };

  // The product cluster id.
  uint64 cluster_id;

  // Typical low price.
  string typical_low_price;

  // Typical high price.
  string typical_high_price;

  // Attributes of the representative catalog.
  string catalog_attributes;

  // Direct link to the Jackpot page.
  url.mojom.Url jackpot;

  // Position of latest price with respect to the typical range.
  PriceBucket bucket;

  // Whether we find multiple catalogs of this product on page.
  bool has_multiple_catalogs;

  // History price data.
  array<PricePoint> history;

  // Used to format the history graph y ticks only.
  string locale;

  // Used to format the history graph y ticks only.
  string currency_code;
};

struct ProductSpecificationsDescriptionText {
  // The actual text for the description.
  string text;

  // A context URL for the description if available.
  array<UrlInfo> urls;
};

struct ProductSpecificationsOption {
  // The descriptions for this particular option of a product.
  array<ProductSpecificationsDescriptionText> descriptions;
};

struct ProductSpecificationsDescription {
  // The possible options for a feature of a product.
  array<ProductSpecificationsOption> options;

  // The label for the contained description texts.
  string label;

  // Alternative text with additional context for this description.
  string alt_text;
};

struct ProductSpecificationsValue {
  // One or more descriptions about the feature being described by this value.
  array<ProductSpecificationsDescription> specification_descriptions;

  // Summaries describing the collective list of descriptions.
  array<ProductSpecificationsDescriptionText> summary;
};

struct ProductSpecificationsProduct {
  // The GPC ID for this product.
  uint64 product_cluster_id;

  // The title of the product.
  string title;

  // The URL for the product image.
  url.mojom.Url image_url;

  // A map of dimension IDs to the string value as it relates to this product.
  map<uint64, ProductSpecificationsValue> product_dimension_values;

  // A list of summaries about the product.
  array<ProductSpecificationsDescriptionText> summary;

  // The URL for buying options for the product (jackpot URL).
  url.mojom.Url buying_options_url;
};

// Describes whether different parts of the Compare feature are enabled.
struct ProductSpecificationsFeatureState {
  bool is_syncing_tab_compare;
  bool can_load_full_page_ui;
  bool can_manage_sets;
  bool can_fetch_data;
  bool is_allowed_for_enterprise;
  bool is_quality_logging_allowed;
  bool is_signed_in;
};

// This struct represents information acquired from the product specifications
// backend.
struct ProductSpecifications {
  // A map of dimension IDs to the name of the dimension.
  map<uint64, string> product_dimension_map;

  // The products that the dimensions pertain to.
  array<ProductSpecificationsProduct> products;
};

//TODO(crbug.com/311697865) move this to a common location.
enum UserFeedback {
  kUnspecified,
  kThumbsUp,
  kThumbsDown,
};

// Used by surfaces like the price tracking section in side panel, product
// specifications, chrome://history etc, to communicate with C++-side handler.
interface ShoppingServiceHandlerFactory {
  // The WebUI calls this method when the page is first initialized.
  CreateShoppingServiceHandler(
      pending_receiver<ShoppingServiceHandler> handler);
};

// Browser-side handler for requests from WebUI page.
// TODO(b/359684506): Move feature-specific functions to separate handlers.
interface ShoppingServiceHandler {
  // Returns the product info for current url.
  GetProductInfoForCurrentUrl()
      => (commerce.shared.mojom.ProductInfo productInfo);

  // Returns the product info for the provided URL.
  GetProductInfoForUrl(url.mojom.Url url)
      => (url.mojom.Url url, commerce.shared.mojom.ProductInfo productInfo);

  // Returns the price insights info for current url.
  GetPriceInsightsInfoForCurrentUrl()
      => (PriceInsightsInfo priceInsightsInfo);

  // Returns the price insights info for the provided URL.
  GetPriceInsightsInfoForUrl(url.mojom.Url url)
      => (url.mojom.Url url, PriceInsightsInfo priceInsightsInfo);

  // Returns the product specifications for the provided list of URLs.
  GetProductSpecificationsForUrls(array<url.mojom.Url> urls)
      => (ProductSpecifications productSpecs);

  // Returns a list of URL infos for each product tab the user has open.
  // This excludes non-HTTP/HTTPS URLs.
  GetUrlInfosForProductTabs() => (array<UrlInfo> url_infos);

  // Returns a list of URL infos for recently viewed tabs. Each of these does
  // not necessarily represent an open tab.
  GetUrlInfosForRecentlyViewedTabs() => (array<UrlInfo> url_infos);

  // Returns if the user is eligible for price tracking.
  IsShoppingListEligible() => (bool eligible);

  // Returns the price tracking status of the current URL.
  GetPriceTrackingStatusForCurrentUrl() => (bool tracked);

  // Opens url in a new tab.
  OpenUrlInNewTab(url.mojom.Url url);

  // Opens |url| in an existing or new tab.
  SwitchToOrOpenTab(url.mojom.Url url);

  // Get all of a user's product specifications sets.
  GetAllProductSpecificationsSets() => (
      array<commerce.shared.mojom.ProductSpecificationsSet> sets);

  // Return product specification set corresponding to identifier |uuid|.
  GetProductSpecificationsSetByUuid(mojo_base.mojom.Uuid uuid)
      => (commerce.shared.mojom.ProductSpecificationsSet? set);

  // Creates a new product specifications set and returns the new entity.
  AddProductSpecificationsSet(string name, array<url.mojom.Url> urls)
      => (commerce.shared.mojom.ProductSpecificationsSet? created_set);

  // Deletes a product specifications set given its UUID.
  DeleteProductSpecificationsSet(mojo_base.mojom.Uuid uuid);

  // Set the name for a product specifications set associated with the provided
  // Uuid. If no set with the provided Uuid exists, nullopt is returned.
  SetNameForProductSpecificationsSet(mojo_base.mojom.Uuid uuid, string name)
      => (commerce.shared.mojom.ProductSpecificationsSet? updated_set);

  // Set the URLs for a product specifications set associated with the provided
  // Uuid. If no set with the provided Uuid exists, nullopt is returned.
  SetUrlsForProductSpecificationsSet(mojo_base.mojom.Uuid uuid,
      array<url.mojom.Url> urls) => (
      commerce.shared.mojom.ProductSpecificationsSet? updated_set);
  // Store the user feedback for product specifications supplied by the user.
  SetProductSpecificationsUserFeedback(UserFeedback feedback);

  // Get access state for compare feature.
  GetProductSpecificationsFeatureState()
      => (ProductSpecificationsFeatureState state);
};
